
gun_1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005420  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005530  08005530  00015530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055b0  080055b0  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  080055b0  080055b0  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055b0  080055b0  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055b0  080055b0  000155b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055b4  080055b4  000155b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  080055b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011ac  20000040  080055f8  00020040  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200011ec  080055f8  000211ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010172  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002999  00000000  00000000  000301db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00032b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  00033c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f38  00000000  00000000  00034ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011657  00000000  00000000  0004dbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091a4a  00000000  00000000  0005f22f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0c79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004894  00000000  00000000  000f0ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000040 	.word	0x20000040
 800012c:	00000000 	.word	0x00000000
 8000130:	08005518 	.word	0x08005518

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000044 	.word	0x20000044
 800014c:	08005518 	.word	0x08005518

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4a06      	ldr	r2, [pc, #24]	; (8000a74 <vApplicationGetIdleTaskMemory+0x28>)
 8000a5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2280      	movs	r2, #128	; 0x80
 8000a68:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a6a:	bf00      	nop
 8000a6c:	3714      	adds	r7, #20
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	2000005c 	.word	0x2000005c
 8000a78:	200000b0 	.word	0x200000b0

08000a7c <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a20      	ldr	r2, [pc, #128]	; (8000b0c <HAL_UART_RxCpltCallback+0x90>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d13a      	bne.n	8000b04 <HAL_UART_RxCpltCallback+0x88>
		HAL_UART_Receive_IT(&huart1, (uint8_t*)UARTRX1_Buffer, sizeof(UARTRX1_Buffer));
 8000a8e:	2203      	movs	r2, #3
 8000a90:	491f      	ldr	r1, [pc, #124]	; (8000b10 <HAL_UART_RxCpltCallback+0x94>)
 8000a92:	4820      	ldr	r0, [pc, #128]	; (8000b14 <HAL_UART_RxCpltCallback+0x98>)
 8000a94:	f002 ff2b 	bl	80038ee <HAL_UART_Receive_IT>

		int ViTriData = -1;
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	617b      	str	r3, [r7, #20]
		for(uint8_t i = 0; i <= sizeof(UARTRX1_Buffer); ++i){
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	74fb      	strb	r3, [r7, #19]
 8000aa2:	e009      	b.n	8000ab8 <HAL_UART_RxCpltCallback+0x3c>
			if(UARTRX1_Buffer[i] == END_OF_TRANSMISSION ){
 8000aa4:	7cfb      	ldrb	r3, [r7, #19]
 8000aa6:	4a1a      	ldr	r2, [pc, #104]	; (8000b10 <HAL_UART_RxCpltCallback+0x94>)
 8000aa8:	5cd3      	ldrb	r3, [r2, r3]
 8000aaa:	2b95      	cmp	r3, #149	; 0x95
 8000aac:	d101      	bne.n	8000ab2 <HAL_UART_RxCpltCallback+0x36>
				ViTriData = i;
 8000aae:	7cfb      	ldrb	r3, [r7, #19]
 8000ab0:	617b      	str	r3, [r7, #20]
		for(uint8_t i = 0; i <= sizeof(UARTRX1_Buffer); ++i){
 8000ab2:	7cfb      	ldrb	r3, [r7, #19]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	74fb      	strb	r3, [r7, #19]
 8000ab8:	7cfb      	ldrb	r3, [r7, #19]
 8000aba:	2b03      	cmp	r3, #3
 8000abc:	d9f2      	bls.n	8000aa4 <HAL_UART_RxCpltCallback+0x28>
			}
		}

		if(ViTriData != -1){
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac4:	d019      	beq.n	8000afa <HAL_UART_RxCpltCallback+0x7e>
			int cnt = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
			while(cnt <= sizeof(UARTRX1_Buffer)){
 8000aca:	e013      	b.n	8000af4 <HAL_UART_RxCpltCallback+0x78>
				DataMain[cnt] = UARTRX1_Buffer[ViTriData];
 8000acc:	4a10      	ldr	r2, [pc, #64]	; (8000b10 <HAL_UART_RxCpltCallback+0x94>)
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	7819      	ldrb	r1, [r3, #0]
 8000ad4:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <HAL_UART_RxCpltCallback+0x9c>)
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	4413      	add	r3, r2
 8000ada:	460a      	mov	r2, r1
 8000adc:	701a      	strb	r2, [r3, #0]
				++ViTriData;
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	617b      	str	r3, [r7, #20]
				if(ViTriData == 4){
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	2b04      	cmp	r3, #4
 8000ae8:	d101      	bne.n	8000aee <HAL_UART_RxCpltCallback+0x72>
					ViTriData = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
				}
				++cnt;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	3301      	adds	r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
			while(cnt <= sizeof(UARTRX1_Buffer)){
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	d9e8      	bls.n	8000acc <HAL_UART_RxCpltCallback+0x50>
			}
		}

		pole = DataMain[1];
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <HAL_UART_RxCpltCallback+0x9c>)
 8000afc:	785b      	ldrb	r3, [r3, #1]
 8000afe:	461a      	mov	r2, r3
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_UART_RxCpltCallback+0xa0>)
 8000b02:	601a      	str	r2, [r3, #0]
//			Speed = DataMain[2] << 8 | DataMain[3];
//			Rotate = DataMain[4] << 8 | DataMain[5];
//		}

	}
}
 8000b04:	bf00      	nop
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40013800 	.word	0x40013800
 8000b10:	2000044c 	.word	0x2000044c
 8000b14:	20000388 	.word	0x20000388
 8000b18:	20000450 	.word	0x20000450
 8000b1c:	20000010 	.word	0x20000010

08000b20 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	80fb      	strh	r3, [r7, #6]
	//Encoder DC-SPEED
	if (GPIO_Pin == GPIO_PIN_10){
 8000b2a:	88fb      	ldrh	r3, [r7, #6]
 8000b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b30:	d111      	bne.n	8000b56 <HAL_GPIO_EXTI_Callback+0x36>
		if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1) == 0) count1++;
 8000b32:	2102      	movs	r1, #2
 8000b34:	480a      	ldr	r0, [pc, #40]	; (8000b60 <HAL_GPIO_EXTI_Callback+0x40>)
 8000b36:	f001 fa53 	bl	8001fe0 <HAL_GPIO_ReadPin>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d105      	bne.n	8000b4c <HAL_GPIO_EXTI_Callback+0x2c>
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_GPIO_EXTI_Callback+0x44>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	3301      	adds	r3, #1
 8000b46:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <HAL_GPIO_EXTI_Callback+0x44>)
 8000b48:	6013      	str	r3, [r2, #0]
		else count1--;
	}


}
 8000b4a:	e004      	b.n	8000b56 <HAL_GPIO_EXTI_Callback+0x36>
		else count1--;
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_GPIO_EXTI_Callback+0x44>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	3b01      	subs	r3, #1
 8000b52:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_GPIO_EXTI_Callback+0x44>)
 8000b54:	6013      	str	r3, [r2, #0]
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40010c00 	.word	0x40010c00
 8000b64:	200003d4 	.word	0x200003d4

08000b68 <driveSpeed>:

void driveSpeed(int dir , int pwmVal){
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
	if (dir == -1){
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b78:	d108      	bne.n	8000b8c <driveSpeed+0x24>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pwmVal);
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <driveSpeed+0x58>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <driveSpeed+0x58>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2200      	movs	r2, #0
 8000b88:	641a      	str	r2, [r3, #64]	; 0x40
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
	}
}
 8000b8a:	e013      	b.n	8000bb4 <driveSpeed+0x4c>
	else if (dir == 1){
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d108      	bne.n	8000ba4 <driveSpeed+0x3c>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <driveSpeed+0x58>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2200      	movs	r2, #0
 8000b98:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pwmVal);
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <driveSpeed+0x58>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	683a      	ldr	r2, [r7, #0]
 8000ba0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ba2:	e007      	b.n	8000bb4 <driveSpeed+0x4c>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <driveSpeed+0x58>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <driveSpeed+0x58>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	200002f8 	.word	0x200002f8
 8000bc4:	00000000 	.word	0x00000000

08000bc8 <calculatePIDSpeed>:

void calculatePIDSpeed(){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0

	e1 = vt - v1; // tinh toan loi ty le
 8000bcc:	4b62      	ldr	r3, [pc, #392]	; (8000d58 <calculatePIDSpeed+0x190>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fc0f 	bl	80003f4 <__aeabi_i2d>
 8000bd6:	4b61      	ldr	r3, [pc, #388]	; (8000d5c <calculatePIDSpeed+0x194>)
 8000bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bdc:	f7ff fabc 	bl	8000158 <__aeabi_dsub>
 8000be0:	4602      	mov	r2, r0
 8000be2:	460b      	mov	r3, r1
 8000be4:	495e      	ldr	r1, [pc, #376]	; (8000d60 <calculatePIDSpeed+0x198>)
 8000be6:	e9c1 2300 	strd	r2, r3, [r1]

	up1 = kp1*e1;
 8000bea:	4b5e      	ldr	r3, [pc, #376]	; (8000d64 <calculatePIDSpeed+0x19c>)
 8000bec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bf0:	4b5b      	ldr	r3, [pc, #364]	; (8000d60 <calculatePIDSpeed+0x198>)
 8000bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf6:	f7ff fc67 	bl	80004c8 <__aeabi_dmul>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	495a      	ldr	r1, [pc, #360]	; (8000d68 <calculatePIDSpeed+0x1a0>)
 8000c00:	e9c1 2300 	strd	r2, r3, [r1]
	ui1 = ui_p1 + ki1*e1*0.001;
 8000c04:	4b59      	ldr	r3, [pc, #356]	; (8000d6c <calculatePIDSpeed+0x1a4>)
 8000c06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c0a:	4b55      	ldr	r3, [pc, #340]	; (8000d60 <calculatePIDSpeed+0x198>)
 8000c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c10:	f7ff fc5a 	bl	80004c8 <__aeabi_dmul>
 8000c14:	4602      	mov	r2, r0
 8000c16:	460b      	mov	r3, r1
 8000c18:	4610      	mov	r0, r2
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	a34a      	add	r3, pc, #296	; (adr r3, 8000d48 <calculatePIDSpeed+0x180>)
 8000c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c22:	f7ff fc51 	bl	80004c8 <__aeabi_dmul>
 8000c26:	4602      	mov	r2, r0
 8000c28:	460b      	mov	r3, r1
 8000c2a:	4610      	mov	r0, r2
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4b50      	ldr	r3, [pc, #320]	; (8000d70 <calculatePIDSpeed+0x1a8>)
 8000c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c34:	f7ff fa92 	bl	800015c <__adddf3>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	494d      	ldr	r1, [pc, #308]	; (8000d74 <calculatePIDSpeed+0x1ac>)
 8000c3e:	e9c1 2300 	strd	r2, r3, [r1]
	if (ui1 > 1000) ui1 = 1000;
 8000c42:	4b4c      	ldr	r3, [pc, #304]	; (8000d74 <calculatePIDSpeed+0x1ac>)
 8000c44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c48:	f04f 0200 	mov.w	r2, #0
 8000c4c:	4b4a      	ldr	r3, [pc, #296]	; (8000d78 <calculatePIDSpeed+0x1b0>)
 8000c4e:	f7ff fecb 	bl	80009e8 <__aeabi_dcmpgt>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d006      	beq.n	8000c66 <calculatePIDSpeed+0x9e>
 8000c58:	4946      	ldr	r1, [pc, #280]	; (8000d74 <calculatePIDSpeed+0x1ac>)
 8000c5a:	f04f 0200 	mov.w	r2, #0
 8000c5e:	4b46      	ldr	r3, [pc, #280]	; (8000d78 <calculatePIDSpeed+0x1b0>)
 8000c60:	e9c1 2300 	strd	r2, r3, [r1]
 8000c64:	e010      	b.n	8000c88 <calculatePIDSpeed+0xc0>
	else if (ui1 < -1000) ui1 = -1000;
 8000c66:	4b43      	ldr	r3, [pc, #268]	; (8000d74 <calculatePIDSpeed+0x1ac>)
 8000c68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c6c:	a338      	add	r3, pc, #224	; (adr r3, 8000d50 <calculatePIDSpeed+0x188>)
 8000c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c72:	f7ff fe9b 	bl	80009ac <__aeabi_dcmplt>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d005      	beq.n	8000c88 <calculatePIDSpeed+0xc0>
 8000c7c:	493d      	ldr	r1, [pc, #244]	; (8000d74 <calculatePIDSpeed+0x1ac>)
 8000c7e:	a334      	add	r3, pc, #208	; (adr r3, 8000d50 <calculatePIDSpeed+0x188>)
 8000c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c84:	e9c1 2300 	strd	r2, r3, [r1]
	u1 = up1  + ui1; //Tinh tong bo dieu khien
 8000c88:	4b37      	ldr	r3, [pc, #220]	; (8000d68 <calculatePIDSpeed+0x1a0>)
 8000c8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c8e:	4b39      	ldr	r3, [pc, #228]	; (8000d74 <calculatePIDSpeed+0x1ac>)
 8000c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c94:	f7ff fa62 	bl	800015c <__adddf3>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	4937      	ldr	r1, [pc, #220]	; (8000d7c <calculatePIDSpeed+0x1b4>)
 8000c9e:	e9c1 2300 	strd	r2, r3, [r1]
	pre1 = e1;
 8000ca2:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <calculatePIDSpeed+0x198>)
 8000ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca8:	4935      	ldr	r1, [pc, #212]	; (8000d80 <calculatePIDSpeed+0x1b8>)
 8000caa:	e9c1 2300 	strd	r2, r3, [r1]
	ui_p1 = ui1;
 8000cae:	4b31      	ldr	r3, [pc, #196]	; (8000d74 <calculatePIDSpeed+0x1ac>)
 8000cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb4:	492e      	ldr	r1, [pc, #184]	; (8000d70 <calculatePIDSpeed+0x1a8>)
 8000cb6:	e9c1 2300 	strd	r2, r3, [r1]
	if(u1 < 0) dir = 1; //bien doi chiue vong quay
 8000cba:	4b30      	ldr	r3, [pc, #192]	; (8000d7c <calculatePIDSpeed+0x1b4>)
 8000cbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cc0:	f04f 0200 	mov.w	r2, #0
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	f7ff fe70 	bl	80009ac <__aeabi_dcmplt>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d003      	beq.n	8000cda <calculatePIDSpeed+0x112>
 8000cd2:	4b2c      	ldr	r3, [pc, #176]	; (8000d84 <calculatePIDSpeed+0x1bc>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	e003      	b.n	8000ce2 <calculatePIDSpeed+0x11a>
	else dir = -1;
 8000cda:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <calculatePIDSpeed+0x1bc>)
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce0:	601a      	str	r2, [r3, #0]

	if(u1>1000)u1 =1000;
 8000ce2:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <calculatePIDSpeed+0x1b4>)
 8000ce4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ce8:	f04f 0200 	mov.w	r2, #0
 8000cec:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <calculatePIDSpeed+0x1b0>)
 8000cee:	f7ff fe7b 	bl	80009e8 <__aeabi_dcmpgt>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d006      	beq.n	8000d06 <calculatePIDSpeed+0x13e>
 8000cf8:	4920      	ldr	r1, [pc, #128]	; (8000d7c <calculatePIDSpeed+0x1b4>)
 8000cfa:	f04f 0200 	mov.w	r2, #0
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <calculatePIDSpeed+0x1b0>)
 8000d00:	e9c1 2300 	strd	r2, r3, [r1]
 8000d04:	e010      	b.n	8000d28 <calculatePIDSpeed+0x160>
	else if (u1<-1000)u1 =-1000;
 8000d06:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <calculatePIDSpeed+0x1b4>)
 8000d08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d0c:	a310      	add	r3, pc, #64	; (adr r3, 8000d50 <calculatePIDSpeed+0x188>)
 8000d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d12:	f7ff fe4b 	bl	80009ac <__aeabi_dcmplt>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d005      	beq.n	8000d28 <calculatePIDSpeed+0x160>
 8000d1c:	4917      	ldr	r1, [pc, #92]	; (8000d7c <calculatePIDSpeed+0x1b4>)
 8000d1e:	a30c      	add	r3, pc, #48	; (adr r3, 8000d50 <calculatePIDSpeed+0x188>)
 8000d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d24:	e9c1 2300 	strd	r2, r3, [r1]
	pwm = abs(u1);//Bao hoa xung cap
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <calculatePIDSpeed+0x1b4>)
 8000d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2e:	4610      	mov	r0, r2
 8000d30:	4619      	mov	r1, r3
 8000d32:	f7ff fe63 	bl	80009fc <__aeabi_d2iz>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	bfb8      	it	lt
 8000d3c:	425b      	neglt	r3, r3
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <calculatePIDSpeed+0x1c0>)
 8000d40:	6013      	str	r3, [r2, #0]

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	d2f1a9fc 	.word	0xd2f1a9fc
 8000d4c:	3f50624d 	.word	0x3f50624d
 8000d50:	00000000 	.word	0x00000000
 8000d54:	c08f4000 	.word	0xc08f4000
 8000d58:	20000400 	.word	0x20000400
 8000d5c:	200003e8 	.word	0x200003e8
 8000d60:	20000408 	.word	0x20000408
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000428 	.word	0x20000428
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000418 	.word	0x20000418
 8000d74:	20000420 	.word	0x20000420
 8000d78:	408f4000 	.word	0x408f4000
 8000d7c:	20000410 	.word	0x20000410
 8000d80:	20000430 	.word	0x20000430
 8000d84:	20000438 	.word	0x20000438
 8000d88:	2000043c 	.word	0x2000043c

08000d8c <setHome>:


void setHome (void){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	vt = -100;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <setHome+0x38>)
 8000d92:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8000d96:	601a      	str	r2, [r3, #0]
	while (1)
	{
		if (HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin) &&
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	480b      	ldr	r0, [pc, #44]	; (8000dc8 <setHome+0x3c>)
 8000d9c:	f001 f920 	bl	8001fe0 <HAL_GPIO_ReadPin>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d0f8      	beq.n	8000d98 <setHome+0xc>
			HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin)){
 8000da6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000daa:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <setHome+0x3c>)
 8000dac:	f001 f918 	bl	8001fe0 <HAL_GPIO_ReadPin>
 8000db0:	4603      	mov	r3, r0
		if (HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin) &&
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0f0      	beq.n	8000d98 <setHome+0xc>
			vt = 0;
 8000db6:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <setHome+0x38>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
			break;
 8000dbc:	bf00      	nop
		}
	}
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000400 	.word	0x20000400
 8000dc8:	40010800 	.word	0x40010800

08000dcc <shootPole>:
	}

	//osDelay(2000);
}

void shootPole(void){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	osDelay(1000);
 8000dd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dd4:	f003 fa04 	bl	80041e0 <osDelay>
	vt = rpm_shoot[pole - 1];
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <shootPole+0x34>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	4a09      	ldr	r2, [pc, #36]	; (8000e04 <shootPole+0x38>)
 8000de0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <shootPole+0x3c>)
 8000de8:	601a      	str	r2, [r3, #0]
	osDelay(delay_shoot[pole - 1]);
 8000dea:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <shootPole+0x34>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <shootPole+0x40>)
 8000df2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f003 f9f2 	bl	80041e0 <osDelay>
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000010 	.word	0x20000010
 8000e04:	20000018 	.word	0x20000018
 8000e08:	20000400 	.word	0x20000400
 8000e0c:	20000024 	.word	0x20000024

08000e10 <shootManual>:

void shootManual(uint16_t rpm,uint16_t delay){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	460a      	mov	r2, r1
 8000e1a:	80fb      	strh	r3, [r7, #6]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	80bb      	strh	r3, [r7, #4]
	osDelay(1000);
 8000e20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e24:	f003 f9dc 	bl	80041e0 <osDelay>
	vt = rpm;
 8000e28:	88fb      	ldrh	r3, [r7, #6]
 8000e2a:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <shootManual+0x38>)
 8000e2c:	6013      	str	r3, [r2, #0]
	osDelay(delay);
 8000e2e:	88bb      	ldrh	r3, [r7, #4]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f003 f9d5 	bl	80041e0 <osDelay>
	vt = 0;
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <shootManual+0x38>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
	rpm = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	80fb      	strh	r3, [r7, #6]
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000400 	.word	0x20000400

08000e4c <resetVariables>:

void resetVariables(void){
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
//	count1 = 0;
	vt = 0;
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <resetVariables+0x40>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
	ui1 = 0;
 8000e56:	490e      	ldr	r1, [pc, #56]	; (8000e90 <resetVariables+0x44>)
 8000e58:	f04f 0200 	mov.w	r2, #0
 8000e5c:	f04f 0300 	mov.w	r3, #0
 8000e60:	e9c1 2300 	strd	r2, r3, [r1]
	ui_p1 = 0;
 8000e64:	490b      	ldr	r1, [pc, #44]	; (8000e94 <resetVariables+0x48>)
 8000e66:	f04f 0200 	mov.w	r2, #0
 8000e6a:	f04f 0300 	mov.w	r3, #0
 8000e6e:	e9c1 2300 	strd	r2, r3, [r1]
	pole = -1;
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <resetVariables+0x4c>)
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295
 8000e78:	601a      	str	r2, [r3, #0]
	home = -1;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <resetVariables+0x50>)
 8000e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e80:	601a      	str	r2, [r3, #0]
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000400 	.word	0x20000400
 8000e90:	20000420 	.word	0x20000420
 8000e94:	20000418 	.word	0x20000418
 8000e98:	20000010 	.word	0x20000010
 8000e9c:	20000014 	.word	0x20000014

08000ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b08e      	sub	sp, #56	; 0x38
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea6:	f000 fd55 	bl	8001954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eaa:	f000 f85b 	bl	8000f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eae:	f000 f9e9 	bl	8001284 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000eb2:	f000 f8ed 	bl	8001090 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000eb6:	f000 f96b 	bl	8001190 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000eba:	f000 f899 	bl	8000ff0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000ebe:	f000 f9b5 	bl	800122c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000ec2:	481f      	ldr	r0, [pc, #124]	; (8000f40 <main+0xa0>)
 8000ec4:	f001 fd6e 	bl	80029a4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8000ec8:	2108      	movs	r1, #8
 8000eca:	481e      	ldr	r0, [pc, #120]	; (8000f44 <main+0xa4>)
 8000ecc:	f001 fe5e 	bl	8002b8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8000ed0:	210c      	movs	r1, #12
 8000ed2:	481c      	ldr	r0, [pc, #112]	; (8000f44 <main+0xa4>)
 8000ed4:	f001 fe5a 	bl	8002b8c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000ed8:	481b      	ldr	r0, [pc, #108]	; (8000f48 <main+0xa8>)
 8000eda:	f001 fdad 	bl	8002a38 <HAL_TIM_Base_Start_IT>
  while(HAL_UART_Receive_IT(&huart1, (uint8_t*)UARTRX1_Buffer, 3)!=HAL_OK){};
 8000ede:	bf00      	nop
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	491a      	ldr	r1, [pc, #104]	; (8000f4c <main+0xac>)
 8000ee4:	481a      	ldr	r0, [pc, #104]	; (8000f50 <main+0xb0>)
 8000ee6:	f002 fd02 	bl	80038ee <HAL_UART_Receive_IT>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1f7      	bne.n	8000ee0 <main+0x40>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 128);
 8000ef0:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <main+0xb4>)
 8000ef2:	f107 041c 	add.w	r4, r7, #28
 8000ef6:	461d      	mov	r5, r3
 8000ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000efc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f003 f91c 	bl	8004148 <osThreadCreate>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4a11      	ldr	r2, [pc, #68]	; (8000f58 <main+0xb8>)
 8000f14:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <main+0xbc>)
 8000f18:	463c      	mov	r4, r7
 8000f1a:	461d      	mov	r5, r3
 8000f1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000f28:	463b      	mov	r3, r7
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f003 f90b 	bl	8004148 <osThreadCreate>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <main+0xc0>)
 8000f36:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f38:	f003 f8ff 	bl	800413a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <main+0x9c>
 8000f3e:	bf00      	nop
 8000f40:	200002b0 	.word	0x200002b0
 8000f44:	200002f8 	.word	0x200002f8
 8000f48:	20000340 	.word	0x20000340
 8000f4c:	2000044c 	.word	0x2000044c
 8000f50:	20000388 	.word	0x20000388
 8000f54:	08005548 	.word	0x08005548
 8000f58:	200003cc 	.word	0x200003cc
 8000f5c:	08005564 	.word	0x08005564
 8000f60:	200003d0 	.word	0x200003d0

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b090      	sub	sp, #64	; 0x40
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 0318 	add.w	r3, r7, #24
 8000f6e:	2228      	movs	r2, #40	; 0x28
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f004 fac8 	bl	8005508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f86:	2301      	movs	r3, #1
 8000f88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f94:	2301      	movs	r3, #1
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fa2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa8:	f107 0318 	add.w	r3, r7, #24
 8000fac:	4618      	mov	r0, r3
 8000fae:	f001 f85f 	bl	8002070 <HAL_RCC_OscConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000fb8:	f000 fad8 	bl	800156c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f001 facc 	bl	8002574 <HAL_RCC_ClockConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000fe2:	f000 fac3 	bl	800156c <Error_Handler>
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3740      	adds	r7, #64	; 0x40
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff6:	f107 0308 	add.w	r3, r7, #8
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001004:	463b      	mov	r3, r7
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800100c:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <MX_TIM1_Init+0x98>)
 800100e:	4a1f      	ldr	r2, [pc, #124]	; (800108c <MX_TIM1_Init+0x9c>)
 8001010:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001012:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <MX_TIM1_Init+0x98>)
 8001014:	2247      	movs	r2, #71	; 0x47
 8001016:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_TIM1_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <MX_TIM1_Init+0x98>)
 8001020:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001024:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_TIM1_Init+0x98>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <MX_TIM1_Init+0x98>)
 800102e:	2200      	movs	r2, #0
 8001030:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_TIM1_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001038:	4813      	ldr	r0, [pc, #76]	; (8001088 <MX_TIM1_Init+0x98>)
 800103a:	f001 fc63 	bl	8002904 <HAL_TIM_Base_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001044:	f000 fa92 	bl	800156c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800104e:	f107 0308 	add.w	r3, r7, #8
 8001052:	4619      	mov	r1, r3
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <MX_TIM1_Init+0x98>)
 8001056:	f002 f801 	bl	800305c <HAL_TIM_ConfigClockSource>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001060:	f000 fa84 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001064:	2300      	movs	r3, #0
 8001066:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800106c:	463b      	mov	r3, r7
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_TIM1_Init+0x98>)
 8001072:	f002 fb7f 	bl	8003774 <HAL_TIMEx_MasterConfigSynchronization>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800107c:	f000 fa76 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200002b0 	.word	0x200002b0
 800108c:	40012c00 	.word	0x40012c00

08001090 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08e      	sub	sp, #56	; 0x38
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a4:	f107 0320 	add.w	r3, r7, #32
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
 80010bc:	615a      	str	r2, [r3, #20]
 80010be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010c0:	4b32      	ldr	r3, [pc, #200]	; (800118c <MX_TIM2_Init+0xfc>)
 80010c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80010c8:	4b30      	ldr	r3, [pc, #192]	; (800118c <MX_TIM2_Init+0xfc>)
 80010ca:	2247      	movs	r2, #71	; 0x47
 80010cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ce:	4b2f      	ldr	r3, [pc, #188]	; (800118c <MX_TIM2_Init+0xfc>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80010d4:	4b2d      	ldr	r3, [pc, #180]	; (800118c <MX_TIM2_Init+0xfc>)
 80010d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010dc:	4b2b      	ldr	r3, [pc, #172]	; (800118c <MX_TIM2_Init+0xfc>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e2:	4b2a      	ldr	r3, [pc, #168]	; (800118c <MX_TIM2_Init+0xfc>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010e8:	4828      	ldr	r0, [pc, #160]	; (800118c <MX_TIM2_Init+0xfc>)
 80010ea:	f001 fc0b 	bl	8002904 <HAL_TIM_Base_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80010f4:	f000 fa3a 	bl	800156c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001102:	4619      	mov	r1, r3
 8001104:	4821      	ldr	r0, [pc, #132]	; (800118c <MX_TIM2_Init+0xfc>)
 8001106:	f001 ffa9 	bl	800305c <HAL_TIM_ConfigClockSource>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001110:	f000 fa2c 	bl	800156c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001114:	481d      	ldr	r0, [pc, #116]	; (800118c <MX_TIM2_Init+0xfc>)
 8001116:	f001 fce1 	bl	8002adc <HAL_TIM_PWM_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001120:	f000 fa24 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800112c:	f107 0320 	add.w	r3, r7, #32
 8001130:	4619      	mov	r1, r3
 8001132:	4816      	ldr	r0, [pc, #88]	; (800118c <MX_TIM2_Init+0xfc>)
 8001134:	f002 fb1e 	bl	8003774 <HAL_TIMEx_MasterConfigSynchronization>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800113e:	f000 fa15 	bl	800156c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001142:	2360      	movs	r3, #96	; 0x60
 8001144:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2208      	movs	r2, #8
 8001156:	4619      	mov	r1, r3
 8001158:	480c      	ldr	r0, [pc, #48]	; (800118c <MX_TIM2_Init+0xfc>)
 800115a:	f001 fec1 	bl	8002ee0 <HAL_TIM_PWM_ConfigChannel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001164:	f000 fa02 	bl	800156c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	220c      	movs	r2, #12
 800116c:	4619      	mov	r1, r3
 800116e:	4807      	ldr	r0, [pc, #28]	; (800118c <MX_TIM2_Init+0xfc>)
 8001170:	f001 feb6 	bl	8002ee0 <HAL_TIM_PWM_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800117a:	f000 f9f7 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800117e:	4803      	ldr	r0, [pc, #12]	; (800118c <MX_TIM2_Init+0xfc>)
 8001180:	f000 fa7e 	bl	8001680 <HAL_TIM_MspPostInit>

}
 8001184:	bf00      	nop
 8001186:	3738      	adds	r7, #56	; 0x38
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	200002f8 	.word	0x200002f8

08001190 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a4:	463b      	mov	r3, r7
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <MX_TIM3_Init+0x94>)
 80011ae:	4a1e      	ldr	r2, [pc, #120]	; (8001228 <MX_TIM3_Init+0x98>)
 80011b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80011b2:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <MX_TIM3_Init+0x94>)
 80011b4:	2247      	movs	r2, #71	; 0x47
 80011b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b8:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <MX_TIM3_Init+0x94>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <MX_TIM3_Init+0x94>)
 80011c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <MX_TIM3_Init+0x94>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <MX_TIM3_Init+0x94>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011d2:	4814      	ldr	r0, [pc, #80]	; (8001224 <MX_TIM3_Init+0x94>)
 80011d4:	f001 fb96 	bl	8002904 <HAL_TIM_Base_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80011de:	f000 f9c5 	bl	800156c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011e8:	f107 0308 	add.w	r3, r7, #8
 80011ec:	4619      	mov	r1, r3
 80011ee:	480d      	ldr	r0, [pc, #52]	; (8001224 <MX_TIM3_Init+0x94>)
 80011f0:	f001 ff34 	bl	800305c <HAL_TIM_ConfigClockSource>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80011fa:	f000 f9b7 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001206:	463b      	mov	r3, r7
 8001208:	4619      	mov	r1, r3
 800120a:	4806      	ldr	r0, [pc, #24]	; (8001224 <MX_TIM3_Init+0x94>)
 800120c:	f002 fab2 	bl	8003774 <HAL_TIMEx_MasterConfigSynchronization>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001216:	f000 f9a9 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000340 	.word	0x20000340
 8001228:	40000400 	.word	0x40000400

0800122c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <MX_USART1_UART_Init+0x50>)
 8001232:	4a13      	ldr	r2, [pc, #76]	; (8001280 <MX_USART1_UART_Init+0x54>)
 8001234:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_USART1_UART_Init+0x50>)
 8001238:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800123c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <MX_USART1_UART_Init+0x50>)
 8001240:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001244:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <MX_USART1_UART_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <MX_USART1_UART_Init+0x50>)
 800124e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001252:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_USART1_UART_Init+0x50>)
 8001256:	220c      	movs	r2, #12
 8001258:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <MX_USART1_UART_Init+0x50>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <MX_USART1_UART_Init+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_USART1_UART_Init+0x50>)
 8001268:	f002 faf4 	bl	8003854 <HAL_UART_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8001272:	f000 f97b 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000388 	.word	0x20000388
 8001280:	40013800 	.word	0x40013800

08001284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 0310 	add.w	r3, r7, #16
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001298:	4b34      	ldr	r3, [pc, #208]	; (800136c <MX_GPIO_Init+0xe8>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a33      	ldr	r2, [pc, #204]	; (800136c <MX_GPIO_Init+0xe8>)
 800129e:	f043 0320 	orr.w	r3, r3, #32
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b31      	ldr	r3, [pc, #196]	; (800136c <MX_GPIO_Init+0xe8>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0320 	and.w	r3, r3, #32
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	4b2e      	ldr	r3, [pc, #184]	; (800136c <MX_GPIO_Init+0xe8>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a2d      	ldr	r2, [pc, #180]	; (800136c <MX_GPIO_Init+0xe8>)
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b2b      	ldr	r3, [pc, #172]	; (800136c <MX_GPIO_Init+0xe8>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b28      	ldr	r3, [pc, #160]	; (800136c <MX_GPIO_Init+0xe8>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a27      	ldr	r2, [pc, #156]	; (800136c <MX_GPIO_Init+0xe8>)
 80012ce:	f043 0308 	orr.w	r3, r3, #8
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b25      	ldr	r3, [pc, #148]	; (800136c <MX_GPIO_Init+0xe8>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_Pin|STEP_Pin, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2130      	movs	r1, #48	; 0x30
 80012e4:	4822      	ldr	r0, [pc, #136]	; (8001370 <MX_GPIO_Init+0xec>)
 80012e6:	f000 fe92 	bl	800200e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR_Pin STEP_Pin */
  GPIO_InitStruct.Pin = DIR_Pin|STEP_Pin;
 80012ea:	2330      	movs	r3, #48	; 0x30
 80012ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2302      	movs	r3, #2
 80012f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fa:	f107 0310 	add.w	r3, r7, #16
 80012fe:	4619      	mov	r1, r3
 8001300:	481b      	ldr	r0, [pc, #108]	; (8001370 <MX_GPIO_Init+0xec>)
 8001302:	f000 fce9 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_Pin S2_Pin */
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin;
 8001306:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800130a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001310:	2301      	movs	r3, #1
 8001312:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	4619      	mov	r1, r3
 800131a:	4815      	ldr	r0, [pc, #84]	; (8001370 <MX_GPIO_Init+0xec>)
 800131c:	f000 fcdc 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_DC2_Pin */
  GPIO_InitStruct.Pin = ENC_DC2_Pin;
 8001320:	2302      	movs	r3, #2
 8001322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001328:	2301      	movs	r3, #1
 800132a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENC_DC2_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	4619      	mov	r1, r3
 8001332:	4810      	ldr	r0, [pc, #64]	; (8001374 <MX_GPIO_Init+0xf0>)
 8001334:	f000 fcd0 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_DC1_Pin */
  GPIO_InitStruct.Pin = ENC_DC1_Pin;
 8001338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800133c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_GPIO_Init+0xf4>)
 8001340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001342:	2301      	movs	r3, #1
 8001344:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENC_DC1_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	4619      	mov	r1, r3
 800134c:	4809      	ldr	r0, [pc, #36]	; (8001374 <MX_GPIO_Init+0xf0>)
 800134e:	f000 fcc3 	bl	8001cd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2105      	movs	r1, #5
 8001356:	2028      	movs	r0, #40	; 0x28
 8001358:	f000 fbe3 	bl	8001b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800135c:	2028      	movs	r0, #40	; 0x28
 800135e:	f000 fbfc 	bl	8001b5a <HAL_NVIC_EnableIRQ>

}
 8001362:	bf00      	nop
 8001364:	3720      	adds	r7, #32
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000
 8001370:	40010800 	.word	0x40010800
 8001374:	40010c00 	.word	0x40010c00
 8001378:	10110000 	.word	0x10110000

0800137c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  driveSpeed(-dir, pwm);
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <StartDefaultTask+0x24>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	425b      	negs	r3, r3
 800138a:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <StartDefaultTask+0x28>)
 800138c:	6812      	ldr	r2, [r2, #0]
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fbe9 	bl	8000b68 <driveSpeed>
	  osDelay(1);
 8001396:	2001      	movs	r0, #1
 8001398:	f002 ff22 	bl	80041e0 <osDelay>
	  driveSpeed(-dir, pwm);
 800139c:	e7f2      	b.n	8001384 <StartDefaultTask+0x8>
 800139e:	bf00      	nop
 80013a0:	20000438 	.word	0x20000438
 80013a4:	2000043c 	.word	0x2000043c

080013a8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  s1 = HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin);
 80013b0:	2180      	movs	r1, #128	; 0x80
 80013b2:	481c      	ldr	r0, [pc, #112]	; (8001424 <StartTask02+0x7c>)
 80013b4:	f000 fe14 	bl	8001fe0 <HAL_GPIO_ReadPin>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <StartTask02+0x80>)
 80013be:	601a      	str	r2, [r3, #0]
	  s2 = HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin);
 80013c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c4:	4817      	ldr	r0, [pc, #92]	; (8001424 <StartTask02+0x7c>)
 80013c6:	f000 fe0b 	bl	8001fe0 <HAL_GPIO_ReadPin>
 80013ca:	4603      	mov	r3, r0
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <StartTask02+0x84>)
 80013d0:	601a      	str	r2, [r3, #0]
	  //home = 0 : in position to shoot
	  if (pole > 0){
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <StartTask02+0x88>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	dd06      	ble.n	80013e8 <StartTask02+0x40>
		  setHome();
 80013da:	f7ff fcd7 	bl	8000d8c <setHome>
		  shootPole();
 80013de:	f7ff fcf5 	bl	8000dcc <shootPole>
		  resetVariables();
 80013e2:	f7ff fd33 	bl	8000e4c <resetVariables>
 80013e6:	e018      	b.n	800141a <StartTask02+0x72>
	  }

	  else if (manual_rpm > 0){
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <StartTask02+0x8c>)
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00c      	beq.n	800140a <StartTask02+0x62>
		  setHome();
 80013f0:	f7ff fccc 	bl	8000d8c <setHome>
		  shootManual(manual_rpm, manual_delay);
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <StartTask02+0x8c>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	4a0f      	ldr	r2, [pc, #60]	; (8001438 <StartTask02+0x90>)
 80013fa:	8812      	ldrh	r2, [r2, #0]
 80013fc:	4611      	mov	r1, r2
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fd06 	bl	8000e10 <shootManual>
		  resetVariables();
 8001404:	f7ff fd22 	bl	8000e4c <resetVariables>
 8001408:	e007      	b.n	800141a <StartTask02+0x72>
	  }

	  else if (home == 1){
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <StartTask02+0x94>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d103      	bne.n	800141a <StartTask02+0x72>
		  setHome();
 8001412:	f7ff fcbb 	bl	8000d8c <setHome>
		  resetVariables();
 8001416:	f7ff fd19 	bl	8000e4c <resetVariables>
	  }

	  osDelay(1);
 800141a:	2001      	movs	r0, #1
 800141c:	f002 fee0 	bl	80041e0 <osDelay>
	  s1 = HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin);
 8001420:	e7c6      	b.n	80013b0 <StartTask02+0x8>
 8001422:	bf00      	nop
 8001424:	40010800 	.word	0x40010800
 8001428:	20000440 	.word	0x20000440
 800142c:	20000444 	.word	0x20000444
 8001430:	20000010 	.word	0x20000010
 8001434:	20000448 	.word	0x20000448
 8001438:	2000044a 	.word	0x2000044a
 800143c:	20000014 	.word	0x20000014

08001440 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001440:	b5b0      	push	{r4, r5, r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a3e      	ldr	r2, [pc, #248]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d101      	bne.n	8001456 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001452:	f000 fa95 	bl	8001980 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  pos = count1 - precount;
 8001456:	4b3d      	ldr	r3, [pc, #244]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4b3d      	ldr	r3, [pc, #244]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	4618      	mov	r0, r3
 8001462:	f7fe ffc7 	bl	80003f4 <__aeabi_i2d>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	493a      	ldr	r1, [pc, #232]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800146c:	e9c1 2300 	strd	r2, r3, [r1]
  v1 = ((pos / 0.001) / (200)) * 60;
 8001470:	4b38      	ldr	r3, [pc, #224]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001472:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001476:	a32e      	add	r3, pc, #184	; (adr r3, 8001530 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147c:	f7ff f94e 	bl	800071c <__aeabi_ddiv>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	4b32      	ldr	r3, [pc, #200]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800148e:	f7ff f945 	bl	800071c <__aeabi_ddiv>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	4b2f      	ldr	r3, [pc, #188]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80014a0:	f7ff f812 	bl	80004c8 <__aeabi_dmul>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	492d      	ldr	r1, [pc, #180]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80014aa:	e9c1 2300 	strd	r2, r3, [r1]
  v1Filt = 0.854 * v1Filt + 0.0728 * v1 + 0.0728 * v1Prev;
 80014ae:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80014b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014b4:	a320      	add	r3, pc, #128	; (adr r3, 8001538 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80014b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ba:	f7ff f805 	bl	80004c8 <__aeabi_dmul>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4614      	mov	r4, r2
 80014c4:	461d      	mov	r5, r3
 80014c6:	4b26      	ldr	r3, [pc, #152]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80014c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014cc:	a31c      	add	r3, pc, #112	; (adr r3, 8001540 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7fe fff9 	bl	80004c8 <__aeabi_dmul>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4620      	mov	r0, r4
 80014dc:	4629      	mov	r1, r5
 80014de:	f7fe fe3d 	bl	800015c <__adddf3>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4614      	mov	r4, r2
 80014e8:	461d      	mov	r5, r3
 80014ea:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80014ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014f0:	a313      	add	r3, pc, #76	; (adr r3, 8001540 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f7fe ffe7 	bl	80004c8 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4620      	mov	r0, r4
 8001500:	4629      	mov	r1, r5
 8001502:	f7fe fe2b 	bl	800015c <__adddf3>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4916      	ldr	r1, [pc, #88]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800150c:	e9c1 2300 	strd	r2, r3, [r1]
  v1Prev = v1;
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001516:	4914      	ldr	r1, [pc, #80]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001518:	e9c1 2300 	strd	r2, r3, [r1]
  precount = count1;
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001522:	6013      	str	r3, [r2, #0]
  calculatePIDSpeed();
 8001524:	f7ff fb50 	bl	8000bc8 <calculatePIDSpeed>

  /* USER CODE END Callback 1 */
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bdb0      	pop	{r4, r5, r7, pc}
 8001530:	d2f1a9fc 	.word	0xd2f1a9fc
 8001534:	3f50624d 	.word	0x3f50624d
 8001538:	ced91687 	.word	0xced91687
 800153c:	3feb53f7 	.word	0x3feb53f7
 8001540:	532617c2 	.word	0x532617c2
 8001544:	3fb2a305 	.word	0x3fb2a305
 8001548:	40000800 	.word	0x40000800
 800154c:	200003d4 	.word	0x200003d4
 8001550:	200003d8 	.word	0x200003d8
 8001554:	200003e0 	.word	0x200003e0
 8001558:	40690000 	.word	0x40690000
 800155c:	404e0000 	.word	0x404e0000
 8001560:	200003e8 	.word	0x200003e8
 8001564:	200003f0 	.word	0x200003f0
 8001568:	200003f8 	.word	0x200003f8

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001570:	b672      	cpsid	i
}
 8001572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001574:	e7fe      	b.n	8001574 <Error_Handler+0x8>
	...

08001578 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <HAL_MspInit+0x68>)
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	4a17      	ldr	r2, [pc, #92]	; (80015e0 <HAL_MspInit+0x68>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6193      	str	r3, [r2, #24]
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <HAL_MspInit+0x68>)
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_MspInit+0x68>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	4a11      	ldr	r2, [pc, #68]	; (80015e0 <HAL_MspInit+0x68>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	61d3      	str	r3, [r2, #28]
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <HAL_MspInit+0x68>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	210f      	movs	r1, #15
 80015b2:	f06f 0001 	mvn.w	r0, #1
 80015b6:	f000 fab4 	bl	8001b22 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <HAL_MspInit+0x6c>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <HAL_MspInit+0x6c>)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40010000 	.word	0x40010000

080015e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a1f      	ldr	r2, [pc, #124]	; (8001674 <HAL_TIM_Base_MspInit+0x8c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d10c      	bne.n	8001614 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015fa:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <HAL_TIM_Base_MspInit+0x90>)
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	4a1e      	ldr	r2, [pc, #120]	; (8001678 <HAL_TIM_Base_MspInit+0x90>)
 8001600:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001604:	6193      	str	r3, [r2, #24]
 8001606:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <HAL_TIM_Base_MspInit+0x90>)
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001612:	e02a      	b.n	800166a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800161c:	d10c      	bne.n	8001638 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800161e:	4b16      	ldr	r3, [pc, #88]	; (8001678 <HAL_TIM_Base_MspInit+0x90>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	4a15      	ldr	r2, [pc, #84]	; (8001678 <HAL_TIM_Base_MspInit+0x90>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	61d3      	str	r3, [r2, #28]
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <HAL_TIM_Base_MspInit+0x90>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]
}
 8001636:	e018      	b.n	800166a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0f      	ldr	r2, [pc, #60]	; (800167c <HAL_TIM_Base_MspInit+0x94>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d113      	bne.n	800166a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001642:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <HAL_TIM_Base_MspInit+0x90>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	4a0c      	ldr	r2, [pc, #48]	; (8001678 <HAL_TIM_Base_MspInit+0x90>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	61d3      	str	r3, [r2, #28]
 800164e:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <HAL_TIM_Base_MspInit+0x90>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2105      	movs	r1, #5
 800165e:	201d      	movs	r0, #29
 8001660:	f000 fa5f 	bl	8001b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001664:	201d      	movs	r0, #29
 8001666:	f000 fa78 	bl	8001b5a <HAL_NVIC_EnableIRQ>
}
 800166a:	bf00      	nop
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40012c00 	.word	0x40012c00
 8001678:	40021000 	.word	0x40021000
 800167c:	40000400 	.word	0x40000400

08001680 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800169e:	d117      	bne.n	80016d0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a0:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <HAL_TIM_MspPostInit+0x58>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a0c      	ldr	r2, [pc, #48]	; (80016d8 <HAL_TIM_MspPostInit+0x58>)
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_TIM_MspPostInit+0x58>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016b8:	230c      	movs	r3, #12
 80016ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2302      	movs	r3, #2
 80016c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	4619      	mov	r1, r3
 80016ca:	4804      	ldr	r0, [pc, #16]	; (80016dc <HAL_TIM_MspPostInit+0x5c>)
 80016cc:	f000 fb04 	bl	8001cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80016d0:	bf00      	nop
 80016d2:	3720      	adds	r7, #32
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40010800 	.word	0x40010800

080016e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a20      	ldr	r2, [pc, #128]	; (800177c <HAL_UART_MspInit+0x9c>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d139      	bne.n	8001774 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001700:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <HAL_UART_MspInit+0xa0>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	4a1e      	ldr	r2, [pc, #120]	; (8001780 <HAL_UART_MspInit+0xa0>)
 8001706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170a:	6193      	str	r3, [r2, #24]
 800170c:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <HAL_UART_MspInit+0xa0>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001718:	4b19      	ldr	r3, [pc, #100]	; (8001780 <HAL_UART_MspInit+0xa0>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	4a18      	ldr	r2, [pc, #96]	; (8001780 <HAL_UART_MspInit+0xa0>)
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	6193      	str	r3, [r2, #24]
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <HAL_UART_MspInit+0xa0>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001730:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001734:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 0310 	add.w	r3, r7, #16
 8001742:	4619      	mov	r1, r3
 8001744:	480f      	ldr	r0, [pc, #60]	; (8001784 <HAL_UART_MspInit+0xa4>)
 8001746:	f000 fac7 	bl	8001cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800174a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800174e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	f107 0310 	add.w	r3, r7, #16
 800175c:	4619      	mov	r1, r3
 800175e:	4809      	ldr	r0, [pc, #36]	; (8001784 <HAL_UART_MspInit+0xa4>)
 8001760:	f000 faba 	bl	8001cd8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001764:	2200      	movs	r2, #0
 8001766:	2105      	movs	r1, #5
 8001768:	2025      	movs	r0, #37	; 0x25
 800176a:	f000 f9da 	bl	8001b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800176e:	2025      	movs	r0, #37	; 0x25
 8001770:	f000 f9f3 	bl	8001b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001774:	bf00      	nop
 8001776:	3720      	adds	r7, #32
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40013800 	.word	0x40013800
 8001780:	40021000 	.word	0x40021000
 8001784:	40010800 	.word	0x40010800

08001788 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08e      	sub	sp, #56	; 0x38
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800179e:	4b34      	ldr	r3, [pc, #208]	; (8001870 <HAL_InitTick+0xe8>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	4a33      	ldr	r2, [pc, #204]	; (8001870 <HAL_InitTick+0xe8>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	61d3      	str	r3, [r2, #28]
 80017aa:	4b31      	ldr	r3, [pc, #196]	; (8001870 <HAL_InitTick+0xe8>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017b6:	f107 0210 	add.w	r2, r7, #16
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f001 f851 	bl	8002868 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d103      	bne.n	80017d8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017d0:	f001 f822 	bl	8002818 <HAL_RCC_GetPCLK1Freq>
 80017d4:	6378      	str	r0, [r7, #52]	; 0x34
 80017d6:	e004      	b.n	80017e2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017d8:	f001 f81e 	bl	8002818 <HAL_RCC_GetPCLK1Freq>
 80017dc:	4603      	mov	r3, r0
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e4:	4a23      	ldr	r2, [pc, #140]	; (8001874 <HAL_InitTick+0xec>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	0c9b      	lsrs	r3, r3, #18
 80017ec:	3b01      	subs	r3, #1
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80017f0:	4b21      	ldr	r3, [pc, #132]	; (8001878 <HAL_InitTick+0xf0>)
 80017f2:	4a22      	ldr	r2, [pc, #136]	; (800187c <HAL_InitTick+0xf4>)
 80017f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_InitTick+0xf0>)
 80017f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017fc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80017fe:	4a1e      	ldr	r2, [pc, #120]	; (8001878 <HAL_InitTick+0xf0>)
 8001800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001802:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001804:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <HAL_InitTick+0xf0>)
 8001806:	2200      	movs	r2, #0
 8001808:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180a:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <HAL_InitTick+0xf0>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <HAL_InitTick+0xf0>)
 8001812:	2200      	movs	r2, #0
 8001814:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001816:	4818      	ldr	r0, [pc, #96]	; (8001878 <HAL_InitTick+0xf0>)
 8001818:	f001 f874 	bl	8002904 <HAL_TIM_Base_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001822:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001826:	2b00      	cmp	r3, #0
 8001828:	d11b      	bne.n	8001862 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800182a:	4813      	ldr	r0, [pc, #76]	; (8001878 <HAL_InitTick+0xf0>)
 800182c:	f001 f904 	bl	8002a38 <HAL_TIM_Base_Start_IT>
 8001830:	4603      	mov	r3, r0
 8001832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001836:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800183a:	2b00      	cmp	r3, #0
 800183c:	d111      	bne.n	8001862 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800183e:	201e      	movs	r0, #30
 8001840:	f000 f98b 	bl	8001b5a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b0f      	cmp	r3, #15
 8001848:	d808      	bhi.n	800185c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800184a:	2200      	movs	r2, #0
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	201e      	movs	r0, #30
 8001850:	f000 f967 	bl	8001b22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001854:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <HAL_InitTick+0xf8>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	e002      	b.n	8001862 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001862:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001866:	4618      	mov	r0, r3
 8001868:	3738      	adds	r7, #56	; 0x38
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40021000 	.word	0x40021000
 8001874:	431bde83 	.word	0x431bde83
 8001878:	20000454 	.word	0x20000454
 800187c:	40000800 	.word	0x40000800
 8001880:	20000034 	.word	0x20000034

08001884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <NMI_Handler+0x4>

0800188a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <HardFault_Handler+0x4>

08001890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <MemManage_Handler+0x4>

08001896 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189a:	e7fe      	b.n	800189a <BusFault_Handler+0x4>

0800189c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <UsageFault_Handler+0x4>

080018a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
	...

080018b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <TIM3_IRQHandler+0x10>)
 80018b6:	f001 fa0b 	bl	8002cd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000340 	.word	0x20000340

080018c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <TIM4_IRQHandler+0x10>)
 80018ca:	f001 fa01 	bl	8002cd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000454 	.word	0x20000454

080018d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <USART1_IRQHandler+0x10>)
 80018de:	f002 f837 	bl	8003950 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000388 	.word	0x20000388

080018ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_DC1_Pin);
 80018f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80018f4:	f000 fba4 	bl	8002040 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}

080018fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
      ldr r0, =_sdata
 8001908:	480c      	ldr	r0, [pc, #48]	; (800193c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800190a:	490d      	ldr	r1, [pc, #52]	; (8001940 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800190c:	4a0d      	ldr	r2, [pc, #52]	; (8001944 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001910:	e002      	b.n	8001918 <LoopCopyDataInit>

08001912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001916:	3304      	adds	r3, #4

08001918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800191c:	d3f9      	bcc.n	8001912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001920:	4c0a      	ldr	r4, [pc, #40]	; (800194c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001924:	e001      	b.n	800192a <LoopFillZerobss>

08001926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001928:	3204      	adds	r2, #4

0800192a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800192c:	d3fb      	bcc.n	8001926 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800192e:	f7ff ffe5 	bl	80018fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001932:	f003 fdc5 	bl	80054c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001936:	f7ff fab3 	bl	8000ea0 <main>
  bx lr
 800193a:	4770      	bx	lr
      ldr r0, =_sdata
 800193c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001940:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8001944:	080055b8 	.word	0x080055b8
  ldr r2, =_sbss
 8001948:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 800194c:	200011ec 	.word	0x200011ec

08001950 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001950:	e7fe      	b.n	8001950 <ADC1_2_IRQHandler>
	...

08001954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_Init+0x28>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a07      	ldr	r2, [pc, #28]	; (800197c <HAL_Init+0x28>)
 800195e:	f043 0310 	orr.w	r3, r3, #16
 8001962:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001964:	2003      	movs	r0, #3
 8001966:	f000 f8d1 	bl	8001b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800196a:	200f      	movs	r0, #15
 800196c:	f7ff ff0c 	bl	8001788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001970:	f7ff fe02 	bl	8001578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40022000 	.word	0x40022000

08001980 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <HAL_IncTick+0x1c>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_IncTick+0x20>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4413      	add	r3, r2
 8001990:	4a03      	ldr	r2, [pc, #12]	; (80019a0 <HAL_IncTick+0x20>)
 8001992:	6013      	str	r3, [r2, #0]
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	20000038 	.word	0x20000038
 80019a0:	2000049c 	.word	0x2000049c

080019a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return uwTick;
 80019a8:	4b02      	ldr	r3, [pc, #8]	; (80019b4 <HAL_GetTick+0x10>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	2000049c 	.word	0x2000049c

080019b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <__NVIC_SetPriorityGrouping+0x44>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d4:	4013      	ands	r3, r2
 80019d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ea:	4a04      	ldr	r2, [pc, #16]	; (80019fc <__NVIC_SetPriorityGrouping+0x44>)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	60d3      	str	r3, [r2, #12]
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a04:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <__NVIC_GetPriorityGrouping+0x18>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	f003 0307 	and.w	r3, r3, #7
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	db0b      	blt.n	8001a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	f003 021f 	and.w	r2, r3, #31
 8001a34:	4906      	ldr	r1, [pc, #24]	; (8001a50 <__NVIC_EnableIRQ+0x34>)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	e000e100 	.word	0xe000e100

08001a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	6039      	str	r1, [r7, #0]
 8001a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	db0a      	blt.n	8001a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	490c      	ldr	r1, [pc, #48]	; (8001aa0 <__NVIC_SetPriority+0x4c>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	0112      	lsls	r2, r2, #4
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	440b      	add	r3, r1
 8001a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a7c:	e00a      	b.n	8001a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4908      	ldr	r1, [pc, #32]	; (8001aa4 <__NVIC_SetPriority+0x50>)
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	3b04      	subs	r3, #4
 8001a8c:	0112      	lsls	r2, r2, #4
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	440b      	add	r3, r1
 8001a92:	761a      	strb	r2, [r3, #24]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000e100 	.word	0xe000e100
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f1c3 0307 	rsb	r3, r3, #7
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	bf28      	it	cs
 8001ac6:	2304      	movcs	r3, #4
 8001ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3304      	adds	r3, #4
 8001ace:	2b06      	cmp	r3, #6
 8001ad0:	d902      	bls.n	8001ad8 <NVIC_EncodePriority+0x30>
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3b03      	subs	r3, #3
 8001ad6:	e000      	b.n	8001ada <NVIC_EncodePriority+0x32>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	401a      	ands	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af0:	f04f 31ff 	mov.w	r1, #4294967295
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa01 f303 	lsl.w	r3, r1, r3
 8001afa:	43d9      	mvns	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	4313      	orrs	r3, r2
         );
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3724      	adds	r7, #36	; 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff ff4f 	bl	80019b8 <__NVIC_SetPriorityGrouping>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	4603      	mov	r3, r0
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b34:	f7ff ff64 	bl	8001a00 <__NVIC_GetPriorityGrouping>
 8001b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	6978      	ldr	r0, [r7, #20]
 8001b40:	f7ff ffb2 	bl	8001aa8 <NVIC_EncodePriority>
 8001b44:	4602      	mov	r2, r0
 8001b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff81 	bl	8001a54 <__NVIC_SetPriority>
}
 8001b52:	bf00      	nop
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff57 	bl	8001a1c <__NVIC_EnableIRQ>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b085      	sub	sp, #20
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d008      	beq.n	8001b9e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2204      	movs	r2, #4
 8001b90:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e020      	b.n	8001be0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 020e 	bic.w	r2, r2, #14
 8001bac:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0201 	bic.w	r2, r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bcc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr
	...

08001bec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d005      	beq.n	8001c0e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2204      	movs	r2, #4
 8001c06:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
 8001c0c:	e051      	b.n	8001cb2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 020e 	bic.w	r2, r2, #14
 8001c1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 0201 	bic.w	r2, r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a22      	ldr	r2, [pc, #136]	; (8001cbc <HAL_DMA_Abort_IT+0xd0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d029      	beq.n	8001c8c <HAL_DMA_Abort_IT+0xa0>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a20      	ldr	r2, [pc, #128]	; (8001cc0 <HAL_DMA_Abort_IT+0xd4>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d022      	beq.n	8001c88 <HAL_DMA_Abort_IT+0x9c>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a1f      	ldr	r2, [pc, #124]	; (8001cc4 <HAL_DMA_Abort_IT+0xd8>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d01a      	beq.n	8001c82 <HAL_DMA_Abort_IT+0x96>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a1d      	ldr	r2, [pc, #116]	; (8001cc8 <HAL_DMA_Abort_IT+0xdc>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d012      	beq.n	8001c7c <HAL_DMA_Abort_IT+0x90>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a1c      	ldr	r2, [pc, #112]	; (8001ccc <HAL_DMA_Abort_IT+0xe0>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d00a      	beq.n	8001c76 <HAL_DMA_Abort_IT+0x8a>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a1a      	ldr	r2, [pc, #104]	; (8001cd0 <HAL_DMA_Abort_IT+0xe4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d102      	bne.n	8001c70 <HAL_DMA_Abort_IT+0x84>
 8001c6a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c6e:	e00e      	b.n	8001c8e <HAL_DMA_Abort_IT+0xa2>
 8001c70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c74:	e00b      	b.n	8001c8e <HAL_DMA_Abort_IT+0xa2>
 8001c76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c7a:	e008      	b.n	8001c8e <HAL_DMA_Abort_IT+0xa2>
 8001c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c80:	e005      	b.n	8001c8e <HAL_DMA_Abort_IT+0xa2>
 8001c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c86:	e002      	b.n	8001c8e <HAL_DMA_Abort_IT+0xa2>
 8001c88:	2310      	movs	r3, #16
 8001c8a:	e000      	b.n	8001c8e <HAL_DMA_Abort_IT+0xa2>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	4a11      	ldr	r2, [pc, #68]	; (8001cd4 <HAL_DMA_Abort_IT+0xe8>)
 8001c90:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	4798      	blx	r3
    } 
  }
  return status;
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40020008 	.word	0x40020008
 8001cc0:	4002001c 	.word	0x4002001c
 8001cc4:	40020030 	.word	0x40020030
 8001cc8:	40020044 	.word	0x40020044
 8001ccc:	40020058 	.word	0x40020058
 8001cd0:	4002006c 	.word	0x4002006c
 8001cd4:	40020000 	.word	0x40020000

08001cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b08b      	sub	sp, #44	; 0x2c
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cea:	e169      	b.n	8001fc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cec:	2201      	movs	r2, #1
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	69fa      	ldr	r2, [r7, #28]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	f040 8158 	bne.w	8001fba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	4a9a      	ldr	r2, [pc, #616]	; (8001f78 <HAL_GPIO_Init+0x2a0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d05e      	beq.n	8001dd2 <HAL_GPIO_Init+0xfa>
 8001d14:	4a98      	ldr	r2, [pc, #608]	; (8001f78 <HAL_GPIO_Init+0x2a0>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d875      	bhi.n	8001e06 <HAL_GPIO_Init+0x12e>
 8001d1a:	4a98      	ldr	r2, [pc, #608]	; (8001f7c <HAL_GPIO_Init+0x2a4>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d058      	beq.n	8001dd2 <HAL_GPIO_Init+0xfa>
 8001d20:	4a96      	ldr	r2, [pc, #600]	; (8001f7c <HAL_GPIO_Init+0x2a4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d86f      	bhi.n	8001e06 <HAL_GPIO_Init+0x12e>
 8001d26:	4a96      	ldr	r2, [pc, #600]	; (8001f80 <HAL_GPIO_Init+0x2a8>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d052      	beq.n	8001dd2 <HAL_GPIO_Init+0xfa>
 8001d2c:	4a94      	ldr	r2, [pc, #592]	; (8001f80 <HAL_GPIO_Init+0x2a8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d869      	bhi.n	8001e06 <HAL_GPIO_Init+0x12e>
 8001d32:	4a94      	ldr	r2, [pc, #592]	; (8001f84 <HAL_GPIO_Init+0x2ac>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d04c      	beq.n	8001dd2 <HAL_GPIO_Init+0xfa>
 8001d38:	4a92      	ldr	r2, [pc, #584]	; (8001f84 <HAL_GPIO_Init+0x2ac>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d863      	bhi.n	8001e06 <HAL_GPIO_Init+0x12e>
 8001d3e:	4a92      	ldr	r2, [pc, #584]	; (8001f88 <HAL_GPIO_Init+0x2b0>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d046      	beq.n	8001dd2 <HAL_GPIO_Init+0xfa>
 8001d44:	4a90      	ldr	r2, [pc, #576]	; (8001f88 <HAL_GPIO_Init+0x2b0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d85d      	bhi.n	8001e06 <HAL_GPIO_Init+0x12e>
 8001d4a:	2b12      	cmp	r3, #18
 8001d4c:	d82a      	bhi.n	8001da4 <HAL_GPIO_Init+0xcc>
 8001d4e:	2b12      	cmp	r3, #18
 8001d50:	d859      	bhi.n	8001e06 <HAL_GPIO_Init+0x12e>
 8001d52:	a201      	add	r2, pc, #4	; (adr r2, 8001d58 <HAL_GPIO_Init+0x80>)
 8001d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d58:	08001dd3 	.word	0x08001dd3
 8001d5c:	08001dad 	.word	0x08001dad
 8001d60:	08001dbf 	.word	0x08001dbf
 8001d64:	08001e01 	.word	0x08001e01
 8001d68:	08001e07 	.word	0x08001e07
 8001d6c:	08001e07 	.word	0x08001e07
 8001d70:	08001e07 	.word	0x08001e07
 8001d74:	08001e07 	.word	0x08001e07
 8001d78:	08001e07 	.word	0x08001e07
 8001d7c:	08001e07 	.word	0x08001e07
 8001d80:	08001e07 	.word	0x08001e07
 8001d84:	08001e07 	.word	0x08001e07
 8001d88:	08001e07 	.word	0x08001e07
 8001d8c:	08001e07 	.word	0x08001e07
 8001d90:	08001e07 	.word	0x08001e07
 8001d94:	08001e07 	.word	0x08001e07
 8001d98:	08001e07 	.word	0x08001e07
 8001d9c:	08001db5 	.word	0x08001db5
 8001da0:	08001dc9 	.word	0x08001dc9
 8001da4:	4a79      	ldr	r2, [pc, #484]	; (8001f8c <HAL_GPIO_Init+0x2b4>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d013      	beq.n	8001dd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001daa:	e02c      	b.n	8001e06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	623b      	str	r3, [r7, #32]
          break;
 8001db2:	e029      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	3304      	adds	r3, #4
 8001dba:	623b      	str	r3, [r7, #32]
          break;
 8001dbc:	e024      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	3308      	adds	r3, #8
 8001dc4:	623b      	str	r3, [r7, #32]
          break;
 8001dc6:	e01f      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	330c      	adds	r3, #12
 8001dce:	623b      	str	r3, [r7, #32]
          break;
 8001dd0:	e01a      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d102      	bne.n	8001de0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dda:	2304      	movs	r3, #4
 8001ddc:	623b      	str	r3, [r7, #32]
          break;
 8001dde:	e013      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d105      	bne.n	8001df4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001de8:	2308      	movs	r3, #8
 8001dea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69fa      	ldr	r2, [r7, #28]
 8001df0:	611a      	str	r2, [r3, #16]
          break;
 8001df2:	e009      	b.n	8001e08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df4:	2308      	movs	r3, #8
 8001df6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69fa      	ldr	r2, [r7, #28]
 8001dfc:	615a      	str	r2, [r3, #20]
          break;
 8001dfe:	e003      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e00:	2300      	movs	r3, #0
 8001e02:	623b      	str	r3, [r7, #32]
          break;
 8001e04:	e000      	b.n	8001e08 <HAL_GPIO_Init+0x130>
          break;
 8001e06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	2bff      	cmp	r3, #255	; 0xff
 8001e0c:	d801      	bhi.n	8001e12 <HAL_GPIO_Init+0x13a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	e001      	b.n	8001e16 <HAL_GPIO_Init+0x13e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3304      	adds	r3, #4
 8001e16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	2bff      	cmp	r3, #255	; 0xff
 8001e1c:	d802      	bhi.n	8001e24 <HAL_GPIO_Init+0x14c>
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	e002      	b.n	8001e2a <HAL_GPIO_Init+0x152>
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	3b08      	subs	r3, #8
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	210f      	movs	r1, #15
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	fa01 f303 	lsl.w	r3, r1, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	6a39      	ldr	r1, [r7, #32]
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	431a      	orrs	r2, r3
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 80b1 	beq.w	8001fba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e58:	4b4d      	ldr	r3, [pc, #308]	; (8001f90 <HAL_GPIO_Init+0x2b8>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	4a4c      	ldr	r2, [pc, #304]	; (8001f90 <HAL_GPIO_Init+0x2b8>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6193      	str	r3, [r2, #24]
 8001e64:	4b4a      	ldr	r3, [pc, #296]	; (8001f90 <HAL_GPIO_Init+0x2b8>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e70:	4a48      	ldr	r2, [pc, #288]	; (8001f94 <HAL_GPIO_Init+0x2bc>)
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	089b      	lsrs	r3, r3, #2
 8001e76:	3302      	adds	r3, #2
 8001e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	220f      	movs	r2, #15
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4013      	ands	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a40      	ldr	r2, [pc, #256]	; (8001f98 <HAL_GPIO_Init+0x2c0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d013      	beq.n	8001ec4 <HAL_GPIO_Init+0x1ec>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a3f      	ldr	r2, [pc, #252]	; (8001f9c <HAL_GPIO_Init+0x2c4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d00d      	beq.n	8001ec0 <HAL_GPIO_Init+0x1e8>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a3e      	ldr	r2, [pc, #248]	; (8001fa0 <HAL_GPIO_Init+0x2c8>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d007      	beq.n	8001ebc <HAL_GPIO_Init+0x1e4>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a3d      	ldr	r2, [pc, #244]	; (8001fa4 <HAL_GPIO_Init+0x2cc>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d101      	bne.n	8001eb8 <HAL_GPIO_Init+0x1e0>
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e006      	b.n	8001ec6 <HAL_GPIO_Init+0x1ee>
 8001eb8:	2304      	movs	r3, #4
 8001eba:	e004      	b.n	8001ec6 <HAL_GPIO_Init+0x1ee>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e002      	b.n	8001ec6 <HAL_GPIO_Init+0x1ee>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <HAL_GPIO_Init+0x1ee>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec8:	f002 0203 	and.w	r2, r2, #3
 8001ecc:	0092      	lsls	r2, r2, #2
 8001ece:	4093      	lsls	r3, r2
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ed6:	492f      	ldr	r1, [pc, #188]	; (8001f94 <HAL_GPIO_Init+0x2bc>)
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	089b      	lsrs	r3, r3, #2
 8001edc:	3302      	adds	r3, #2
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d006      	beq.n	8001efe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ef0:	4b2d      	ldr	r3, [pc, #180]	; (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	492c      	ldr	r1, [pc, #176]	; (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	600b      	str	r3, [r1, #0]
 8001efc:	e006      	b.n	8001f0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001efe:	4b2a      	ldr	r3, [pc, #168]	; (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	4928      	ldr	r1, [pc, #160]	; (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d006      	beq.n	8001f26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f18:	4b23      	ldr	r3, [pc, #140]	; (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	4922      	ldr	r1, [pc, #136]	; (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]
 8001f24:	e006      	b.n	8001f34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f26:	4b20      	ldr	r3, [pc, #128]	; (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	491e      	ldr	r1, [pc, #120]	; (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001f30:	4013      	ands	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d006      	beq.n	8001f4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	4918      	ldr	r1, [pc, #96]	; (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	608b      	str	r3, [r1, #8]
 8001f4c:	e006      	b.n	8001f5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f4e:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	4914      	ldr	r1, [pc, #80]	; (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d021      	beq.n	8001fac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f68:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	490e      	ldr	r1, [pc, #56]	; (8001fa8 <HAL_GPIO_Init+0x2d0>)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	60cb      	str	r3, [r1, #12]
 8001f74:	e021      	b.n	8001fba <HAL_GPIO_Init+0x2e2>
 8001f76:	bf00      	nop
 8001f78:	10320000 	.word	0x10320000
 8001f7c:	10310000 	.word	0x10310000
 8001f80:	10220000 	.word	0x10220000
 8001f84:	10210000 	.word	0x10210000
 8001f88:	10120000 	.word	0x10120000
 8001f8c:	10110000 	.word	0x10110000
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40010000 	.word	0x40010000
 8001f98:	40010800 	.word	0x40010800
 8001f9c:	40010c00 	.word	0x40010c00
 8001fa0:	40011000 	.word	0x40011000
 8001fa4:	40011400 	.word	0x40011400
 8001fa8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_GPIO_Init+0x304>)
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	4909      	ldr	r1, [pc, #36]	; (8001fdc <HAL_GPIO_Init+0x304>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f47f ae8e 	bne.w	8001cec <HAL_GPIO_Init+0x14>
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	bf00      	nop
 8001fd4:	372c      	adds	r7, #44	; 0x2c
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr
 8001fdc:	40010400 	.word	0x40010400

08001fe0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	887b      	ldrh	r3, [r7, #2]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d002      	beq.n	8001ffe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
 8001ffc:	e001      	b.n	8002002 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ffe:	2300      	movs	r3, #0
 8002000:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002002:	7bfb      	ldrb	r3, [r7, #15]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr

0800200e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	460b      	mov	r3, r1
 8002018:	807b      	strh	r3, [r7, #2]
 800201a:	4613      	mov	r3, r2
 800201c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800201e:	787b      	ldrb	r3, [r7, #1]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002024:	887a      	ldrh	r2, [r7, #2]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800202a:	e003      	b.n	8002034 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800202c:	887b      	ldrh	r3, [r7, #2]
 800202e:	041a      	lsls	r2, r3, #16
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	611a      	str	r2, [r3, #16]
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr
	...

08002040 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800204a:	4b08      	ldr	r3, [pc, #32]	; (800206c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800204c:	695a      	ldr	r2, [r3, #20]
 800204e:	88fb      	ldrh	r3, [r7, #6]
 8002050:	4013      	ands	r3, r2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d006      	beq.n	8002064 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002056:	4a05      	ldr	r2, [pc, #20]	; (800206c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800205c:	88fb      	ldrh	r3, [r7, #6]
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe fd5e 	bl	8000b20 <HAL_GPIO_EXTI_Callback>
  }
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40010400 	.word	0x40010400

08002070 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e272      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8087 	beq.w	800219e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002090:	4b92      	ldr	r3, [pc, #584]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b04      	cmp	r3, #4
 800209a:	d00c      	beq.n	80020b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800209c:	4b8f      	ldr	r3, [pc, #572]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 030c 	and.w	r3, r3, #12
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d112      	bne.n	80020ce <HAL_RCC_OscConfig+0x5e>
 80020a8:	4b8c      	ldr	r3, [pc, #560]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b4:	d10b      	bne.n	80020ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b6:	4b89      	ldr	r3, [pc, #548]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d06c      	beq.n	800219c <HAL_RCC_OscConfig+0x12c>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d168      	bne.n	800219c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e24c      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d6:	d106      	bne.n	80020e6 <HAL_RCC_OscConfig+0x76>
 80020d8:	4b80      	ldr	r3, [pc, #512]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a7f      	ldr	r2, [pc, #508]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	e02e      	b.n	8002144 <HAL_RCC_OscConfig+0xd4>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10c      	bne.n	8002108 <HAL_RCC_OscConfig+0x98>
 80020ee:	4b7b      	ldr	r3, [pc, #492]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a7a      	ldr	r2, [pc, #488]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	4b78      	ldr	r3, [pc, #480]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a77      	ldr	r2, [pc, #476]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002100:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	e01d      	b.n	8002144 <HAL_RCC_OscConfig+0xd4>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0xbc>
 8002112:	4b72      	ldr	r3, [pc, #456]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a71      	ldr	r2, [pc, #452]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	4b6f      	ldr	r3, [pc, #444]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a6e      	ldr	r2, [pc, #440]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e00b      	b.n	8002144 <HAL_RCC_OscConfig+0xd4>
 800212c:	4b6b      	ldr	r3, [pc, #428]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a6a      	ldr	r2, [pc, #424]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	4b68      	ldr	r3, [pc, #416]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a67      	ldr	r2, [pc, #412]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 800213e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002142:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d013      	beq.n	8002174 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214c:	f7ff fc2a 	bl	80019a4 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002154:	f7ff fc26 	bl	80019a4 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b64      	cmp	r3, #100	; 0x64
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e200      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002166:	4b5d      	ldr	r3, [pc, #372]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0xe4>
 8002172:	e014      	b.n	800219e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7ff fc16 	bl	80019a4 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800217c:	f7ff fc12 	bl	80019a4 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b64      	cmp	r3, #100	; 0x64
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e1ec      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800218e:	4b53      	ldr	r3, [pc, #332]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x10c>
 800219a:	e000      	b.n	800219e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d063      	beq.n	8002272 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021aa:	4b4c      	ldr	r3, [pc, #304]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00b      	beq.n	80021ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021b6:	4b49      	ldr	r3, [pc, #292]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 030c 	and.w	r3, r3, #12
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d11c      	bne.n	80021fc <HAL_RCC_OscConfig+0x18c>
 80021c2:	4b46      	ldr	r3, [pc, #280]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d116      	bne.n	80021fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ce:	4b43      	ldr	r3, [pc, #268]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d005      	beq.n	80021e6 <HAL_RCC_OscConfig+0x176>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d001      	beq.n	80021e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e1c0      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e6:	4b3d      	ldr	r3, [pc, #244]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4939      	ldr	r1, [pc, #228]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fa:	e03a      	b.n	8002272 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d020      	beq.n	8002246 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002204:	4b36      	ldr	r3, [pc, #216]	; (80022e0 <HAL_RCC_OscConfig+0x270>)
 8002206:	2201      	movs	r2, #1
 8002208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7ff fbcb 	bl	80019a4 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002212:	f7ff fbc7 	bl	80019a4 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e1a1      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002224:	4b2d      	ldr	r3, [pc, #180]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0f0      	beq.n	8002212 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002230:	4b2a      	ldr	r3, [pc, #168]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4927      	ldr	r1, [pc, #156]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002240:	4313      	orrs	r3, r2
 8002242:	600b      	str	r3, [r1, #0]
 8002244:	e015      	b.n	8002272 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002246:	4b26      	ldr	r3, [pc, #152]	; (80022e0 <HAL_RCC_OscConfig+0x270>)
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7ff fbaa 	bl	80019a4 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002254:	f7ff fba6 	bl	80019a4 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e180      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002266:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d03a      	beq.n	80022f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d019      	beq.n	80022ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002286:	4b17      	ldr	r3, [pc, #92]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002288:	2201      	movs	r2, #1
 800228a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228c:	f7ff fb8a 	bl	80019a4 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002294:	f7ff fb86 	bl	80019a4 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e160      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a6:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <HAL_RCC_OscConfig+0x26c>)
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022b2:	2001      	movs	r0, #1
 80022b4:	f000 fb08 	bl	80028c8 <RCC_Delay>
 80022b8:	e01c      	b.n	80022f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c0:	f7ff fb70 	bl	80019a4 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c6:	e00f      	b.n	80022e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c8:	f7ff fb6c 	bl	80019a4 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d908      	bls.n	80022e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e146      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
 80022da:	bf00      	nop
 80022dc:	40021000 	.word	0x40021000
 80022e0:	42420000 	.word	0x42420000
 80022e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e8:	4b92      	ldr	r3, [pc, #584]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1e9      	bne.n	80022c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 80a6 	beq.w	800244e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002302:	2300      	movs	r3, #0
 8002304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002306:	4b8b      	ldr	r3, [pc, #556]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10d      	bne.n	800232e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002312:	4b88      	ldr	r3, [pc, #544]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	4a87      	ldr	r2, [pc, #540]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231c:	61d3      	str	r3, [r2, #28]
 800231e:	4b85      	ldr	r3, [pc, #532]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800232a:	2301      	movs	r3, #1
 800232c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232e:	4b82      	ldr	r3, [pc, #520]	; (8002538 <HAL_RCC_OscConfig+0x4c8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002336:	2b00      	cmp	r3, #0
 8002338:	d118      	bne.n	800236c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800233a:	4b7f      	ldr	r3, [pc, #508]	; (8002538 <HAL_RCC_OscConfig+0x4c8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a7e      	ldr	r2, [pc, #504]	; (8002538 <HAL_RCC_OscConfig+0x4c8>)
 8002340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002346:	f7ff fb2d 	bl	80019a4 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234e:	f7ff fb29 	bl	80019a4 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b64      	cmp	r3, #100	; 0x64
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e103      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002360:	4b75      	ldr	r3, [pc, #468]	; (8002538 <HAL_RCC_OscConfig+0x4c8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d106      	bne.n	8002382 <HAL_RCC_OscConfig+0x312>
 8002374:	4b6f      	ldr	r3, [pc, #444]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	4a6e      	ldr	r2, [pc, #440]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6213      	str	r3, [r2, #32]
 8002380:	e02d      	b.n	80023de <HAL_RCC_OscConfig+0x36e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10c      	bne.n	80023a4 <HAL_RCC_OscConfig+0x334>
 800238a:	4b6a      	ldr	r3, [pc, #424]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	4a69      	ldr	r2, [pc, #420]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002390:	f023 0301 	bic.w	r3, r3, #1
 8002394:	6213      	str	r3, [r2, #32]
 8002396:	4b67      	ldr	r3, [pc, #412]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	4a66      	ldr	r2, [pc, #408]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	f023 0304 	bic.w	r3, r3, #4
 80023a0:	6213      	str	r3, [r2, #32]
 80023a2:	e01c      	b.n	80023de <HAL_RCC_OscConfig+0x36e>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	2b05      	cmp	r3, #5
 80023aa:	d10c      	bne.n	80023c6 <HAL_RCC_OscConfig+0x356>
 80023ac:	4b61      	ldr	r3, [pc, #388]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	4a60      	ldr	r2, [pc, #384]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	f043 0304 	orr.w	r3, r3, #4
 80023b6:	6213      	str	r3, [r2, #32]
 80023b8:	4b5e      	ldr	r3, [pc, #376]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	4a5d      	ldr	r2, [pc, #372]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6213      	str	r3, [r2, #32]
 80023c4:	e00b      	b.n	80023de <HAL_RCC_OscConfig+0x36e>
 80023c6:	4b5b      	ldr	r3, [pc, #364]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4a5a      	ldr	r2, [pc, #360]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	f023 0301 	bic.w	r3, r3, #1
 80023d0:	6213      	str	r3, [r2, #32]
 80023d2:	4b58      	ldr	r3, [pc, #352]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	4a57      	ldr	r2, [pc, #348]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	f023 0304 	bic.w	r3, r3, #4
 80023dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d015      	beq.n	8002412 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e6:	f7ff fadd 	bl	80019a4 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ec:	e00a      	b.n	8002404 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ee:	f7ff fad9 	bl	80019a4 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e0b1      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002404:	4b4b      	ldr	r3, [pc, #300]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0ee      	beq.n	80023ee <HAL_RCC_OscConfig+0x37e>
 8002410:	e014      	b.n	800243c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002412:	f7ff fac7 	bl	80019a4 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002418:	e00a      	b.n	8002430 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241a:	f7ff fac3 	bl	80019a4 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	f241 3288 	movw	r2, #5000	; 0x1388
 8002428:	4293      	cmp	r3, r2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e09b      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002430:	4b40      	ldr	r3, [pc, #256]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1ee      	bne.n	800241a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800243c:	7dfb      	ldrb	r3, [r7, #23]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d105      	bne.n	800244e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002442:	4b3c      	ldr	r3, [pc, #240]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	4a3b      	ldr	r2, [pc, #236]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800244c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 8087 	beq.w	8002566 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002458:	4b36      	ldr	r3, [pc, #216]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 030c 	and.w	r3, r3, #12
 8002460:	2b08      	cmp	r3, #8
 8002462:	d061      	beq.n	8002528 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d146      	bne.n	80024fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246c:	4b33      	ldr	r3, [pc, #204]	; (800253c <HAL_RCC_OscConfig+0x4cc>)
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002472:	f7ff fa97 	bl	80019a4 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247a:	f7ff fa93 	bl	80019a4 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e06d      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800248c:	4b29      	ldr	r3, [pc, #164]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1f0      	bne.n	800247a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a0:	d108      	bne.n	80024b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024a2:	4b24      	ldr	r3, [pc, #144]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	4921      	ldr	r1, [pc, #132]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024b4:	4b1f      	ldr	r3, [pc, #124]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a19      	ldr	r1, [r3, #32]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	430b      	orrs	r3, r1
 80024c6:	491b      	ldr	r1, [pc, #108]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024cc:	4b1b      	ldr	r3, [pc, #108]	; (800253c <HAL_RCC_OscConfig+0x4cc>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d2:	f7ff fa67 	bl	80019a4 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024da:	f7ff fa63 	bl	80019a4 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e03d      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x46a>
 80024f8:	e035      	b.n	8002566 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fa:	4b10      	ldr	r3, [pc, #64]	; (800253c <HAL_RCC_OscConfig+0x4cc>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7ff fa50 	bl	80019a4 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002508:	f7ff fa4c 	bl	80019a4 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e026      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_RCC_OscConfig+0x4c4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x498>
 8002526:	e01e      	b.n	8002566 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d107      	bne.n	8002540 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e019      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
 8002534:	40021000 	.word	0x40021000
 8002538:	40007000 	.word	0x40007000
 800253c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_RCC_OscConfig+0x500>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	429a      	cmp	r2, r3
 8002552:	d106      	bne.n	8002562 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800255e:	429a      	cmp	r2, r3
 8002560:	d001      	beq.n	8002566 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40021000 	.word	0x40021000

08002574 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0d0      	b.n	800272a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002588:	4b6a      	ldr	r3, [pc, #424]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d910      	bls.n	80025b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002596:	4b67      	ldr	r3, [pc, #412]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 0207 	bic.w	r2, r3, #7
 800259e:	4965      	ldr	r1, [pc, #404]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b63      	ldr	r3, [pc, #396]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0b8      	b.n	800272a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d020      	beq.n	8002606 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025d0:	4b59      	ldr	r3, [pc, #356]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4a58      	ldr	r2, [pc, #352]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e8:	4b53      	ldr	r3, [pc, #332]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4a52      	ldr	r2, [pc, #328]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f4:	4b50      	ldr	r3, [pc, #320]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	494d      	ldr	r1, [pc, #308]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d040      	beq.n	8002694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d107      	bne.n	800262a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261a:	4b47      	ldr	r3, [pc, #284]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d115      	bne.n	8002652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e07f      	b.n	800272a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d107      	bne.n	8002642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002632:	4b41      	ldr	r3, [pc, #260]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e073      	b.n	800272a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002642:	4b3d      	ldr	r3, [pc, #244]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e06b      	b.n	800272a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002652:	4b39      	ldr	r3, [pc, #228]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f023 0203 	bic.w	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4936      	ldr	r1, [pc, #216]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 8002660:	4313      	orrs	r3, r2
 8002662:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002664:	f7ff f99e 	bl	80019a4 <HAL_GetTick>
 8002668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	e00a      	b.n	8002682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800266c:	f7ff f99a 	bl	80019a4 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f241 3288 	movw	r2, #5000	; 0x1388
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e053      	b.n	800272a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 020c 	and.w	r2, r3, #12
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	429a      	cmp	r2, r3
 8002692:	d1eb      	bne.n	800266c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002694:	4b27      	ldr	r3, [pc, #156]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d210      	bcs.n	80026c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a2:	4b24      	ldr	r3, [pc, #144]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 0207 	bic.w	r2, r3, #7
 80026aa:	4922      	ldr	r1, [pc, #136]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b2:	4b20      	ldr	r3, [pc, #128]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e032      	b.n	800272a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d0:	4b19      	ldr	r3, [pc, #100]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4916      	ldr	r1, [pc, #88]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d009      	beq.n	8002702 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026ee:	4b12      	ldr	r3, [pc, #72]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	490e      	ldr	r1, [pc, #56]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002702:	f000 f821 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 8002706:	4602      	mov	r2, r0
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	490a      	ldr	r1, [pc, #40]	; (800273c <HAL_RCC_ClockConfig+0x1c8>)
 8002714:	5ccb      	ldrb	r3, [r1, r3]
 8002716:	fa22 f303 	lsr.w	r3, r2, r3
 800271a:	4a09      	ldr	r2, [pc, #36]	; (8002740 <HAL_RCC_ClockConfig+0x1cc>)
 800271c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800271e:	4b09      	ldr	r3, [pc, #36]	; (8002744 <HAL_RCC_ClockConfig+0x1d0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff f830 	bl	8001788 <HAL_InitTick>

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40022000 	.word	0x40022000
 8002738:	40021000 	.word	0x40021000
 800273c:	08005598 	.word	0x08005598
 8002740:	20000030 	.word	0x20000030
 8002744:	20000034 	.word	0x20000034

08002748 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002748:	b490      	push	{r4, r7}
 800274a:	b08a      	sub	sp, #40	; 0x28
 800274c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800274e:	4b29      	ldr	r3, [pc, #164]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002750:	1d3c      	adds	r4, r7, #4
 8002752:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002754:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002758:	f240 2301 	movw	r3, #513	; 0x201
 800275c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	2300      	movs	r3, #0
 8002764:	61bb      	str	r3, [r7, #24]
 8002766:	2300      	movs	r3, #0
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002772:	4b21      	ldr	r3, [pc, #132]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 030c 	and.w	r3, r3, #12
 800277e:	2b04      	cmp	r3, #4
 8002780:	d002      	beq.n	8002788 <HAL_RCC_GetSysClockFreq+0x40>
 8002782:	2b08      	cmp	r3, #8
 8002784:	d003      	beq.n	800278e <HAL_RCC_GetSysClockFreq+0x46>
 8002786:	e02b      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002788:	4b1c      	ldr	r3, [pc, #112]	; (80027fc <HAL_RCC_GetSysClockFreq+0xb4>)
 800278a:	623b      	str	r3, [r7, #32]
      break;
 800278c:	e02b      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	0c9b      	lsrs	r3, r3, #18
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	3328      	adds	r3, #40	; 0x28
 8002798:	443b      	add	r3, r7
 800279a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800279e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d012      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027aa:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	0c5b      	lsrs	r3, r3, #17
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	3328      	adds	r3, #40	; 0x28
 80027b6:	443b      	add	r3, r7
 80027b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	4a0e      	ldr	r2, [pc, #56]	; (80027fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80027c2:	fb03 f202 	mul.w	r2, r3, r2
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
 80027ce:	e004      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	4a0b      	ldr	r2, [pc, #44]	; (8002800 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027d4:	fb02 f303 	mul.w	r3, r2, r3
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	623b      	str	r3, [r7, #32]
      break;
 80027de:	e002      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80027e2:	623b      	str	r3, [r7, #32]
      break;
 80027e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027e6:	6a3b      	ldr	r3, [r7, #32]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3728      	adds	r7, #40	; 0x28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc90      	pop	{r4, r7}
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	08005580 	.word	0x08005580
 80027f8:	40021000 	.word	0x40021000
 80027fc:	007a1200 	.word	0x007a1200
 8002800:	003d0900 	.word	0x003d0900

08002804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002808:	4b02      	ldr	r3, [pc, #8]	; (8002814 <HAL_RCC_GetHCLKFreq+0x10>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr
 8002814:	20000030 	.word	0x20000030

08002818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800281c:	f7ff fff2 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002820:	4602      	mov	r2, r0
 8002822:	4b05      	ldr	r3, [pc, #20]	; (8002838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	4903      	ldr	r1, [pc, #12]	; (800283c <HAL_RCC_GetPCLK1Freq+0x24>)
 800282e:	5ccb      	ldrb	r3, [r1, r3]
 8002830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002834:	4618      	mov	r0, r3
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40021000 	.word	0x40021000
 800283c:	080055a8 	.word	0x080055a8

08002840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002844:	f7ff ffde 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002848:	4602      	mov	r2, r0
 800284a:	4b05      	ldr	r3, [pc, #20]	; (8002860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	0adb      	lsrs	r3, r3, #11
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	4903      	ldr	r1, [pc, #12]	; (8002864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002856:	5ccb      	ldrb	r3, [r1, r3]
 8002858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800285c:	4618      	mov	r0, r3
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40021000 	.word	0x40021000
 8002864:	080055a8 	.word	0x080055a8

08002868 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	220f      	movs	r2, #15
 8002876:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002878:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <HAL_RCC_GetClockConfig+0x58>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0203 	and.w	r2, r3, #3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002884:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <HAL_RCC_GetClockConfig+0x58>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_RCC_GetClockConfig+0x58>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800289c:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <HAL_RCC_GetClockConfig+0x58>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	08db      	lsrs	r3, r3, #3
 80028a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_RCC_GetClockConfig+0x5c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0207 	and.w	r2, r3, #7
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40022000 	.word	0x40022000

080028c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028d0:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <RCC_Delay+0x34>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <RCC_Delay+0x38>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	0a5b      	lsrs	r3, r3, #9
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	fb02 f303 	mul.w	r3, r2, r3
 80028e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028e4:	bf00      	nop
  }
  while (Delay --);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1e5a      	subs	r2, r3, #1
 80028ea:	60fa      	str	r2, [r7, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f9      	bne.n	80028e4 <RCC_Delay+0x1c>
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr
 80028fc:	20000030 	.word	0x20000030
 8002900:	10624dd3 	.word	0x10624dd3

08002904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e041      	b.n	800299a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7fe fe5c 	bl	80015e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3304      	adds	r3, #4
 8002940:	4619      	mov	r1, r3
 8002942:	4610      	mov	r0, r2
 8002944:	f000 fc72 	bl	800322c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d001      	beq.n	80029bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e032      	b.n	8002a22 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a18      	ldr	r2, [pc, #96]	; (8002a2c <HAL_TIM_Base_Start+0x88>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d00e      	beq.n	80029ec <HAL_TIM_Base_Start+0x48>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d6:	d009      	beq.n	80029ec <HAL_TIM_Base_Start+0x48>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a14      	ldr	r2, [pc, #80]	; (8002a30 <HAL_TIM_Base_Start+0x8c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d004      	beq.n	80029ec <HAL_TIM_Base_Start+0x48>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a13      	ldr	r2, [pc, #76]	; (8002a34 <HAL_TIM_Base_Start+0x90>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d111      	bne.n	8002a10 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	d010      	beq.n	8002a20 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0201 	orr.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a0e:	e007      	b.n	8002a20 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr
 8002a2c:	40012c00 	.word	0x40012c00
 8002a30:	40000400 	.word	0x40000400
 8002a34:	40000800 	.word	0x40000800

08002a38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d001      	beq.n	8002a50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e03a      	b.n	8002ac6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a18      	ldr	r2, [pc, #96]	; (8002ad0 <HAL_TIM_Base_Start_IT+0x98>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d00e      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x58>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a7a:	d009      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x58>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a14      	ldr	r2, [pc, #80]	; (8002ad4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d004      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x58>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a13      	ldr	r2, [pc, #76]	; (8002ad8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d111      	bne.n	8002ab4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2b06      	cmp	r3, #6
 8002aa0:	d010      	beq.n	8002ac4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0201 	orr.w	r2, r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab2:	e007      	b.n	8002ac4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	40012c00 	.word	0x40012c00
 8002ad4:	40000400 	.word	0x40000400
 8002ad8:	40000800 	.word	0x40000800

08002adc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e041      	b.n	8002b72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f839 	bl	8002b7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3304      	adds	r3, #4
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	f000 fb86 	bl	800322c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d109      	bne.n	8002bb0 <HAL_TIM_PWM_Start+0x24>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	bf14      	ite	ne
 8002ba8:	2301      	movne	r3, #1
 8002baa:	2300      	moveq	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	e022      	b.n	8002bf6 <HAL_TIM_PWM_Start+0x6a>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d109      	bne.n	8002bca <HAL_TIM_PWM_Start+0x3e>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	bf14      	ite	ne
 8002bc2:	2301      	movne	r3, #1
 8002bc4:	2300      	moveq	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	e015      	b.n	8002bf6 <HAL_TIM_PWM_Start+0x6a>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d109      	bne.n	8002be4 <HAL_TIM_PWM_Start+0x58>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	bf14      	ite	ne
 8002bdc:	2301      	movne	r3, #1
 8002bde:	2300      	moveq	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	e008      	b.n	8002bf6 <HAL_TIM_PWM_Start+0x6a>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	bf14      	ite	ne
 8002bf0:	2301      	movne	r3, #1
 8002bf2:	2300      	moveq	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e05e      	b.n	8002cbc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d104      	bne.n	8002c0e <HAL_TIM_PWM_Start+0x82>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c0c:	e013      	b.n	8002c36 <HAL_TIM_PWM_Start+0xaa>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d104      	bne.n	8002c1e <HAL_TIM_PWM_Start+0x92>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c1c:	e00b      	b.n	8002c36 <HAL_TIM_PWM_Start+0xaa>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d104      	bne.n	8002c2e <HAL_TIM_PWM_Start+0xa2>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c2c:	e003      	b.n	8002c36 <HAL_TIM_PWM_Start+0xaa>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2202      	movs	r2, #2
 8002c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	6839      	ldr	r1, [r7, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fd74 	bl	800372c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1e      	ldr	r2, [pc, #120]	; (8002cc4 <HAL_TIM_PWM_Start+0x138>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d107      	bne.n	8002c5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a18      	ldr	r2, [pc, #96]	; (8002cc4 <HAL_TIM_PWM_Start+0x138>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d00e      	beq.n	8002c86 <HAL_TIM_PWM_Start+0xfa>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c70:	d009      	beq.n	8002c86 <HAL_TIM_PWM_Start+0xfa>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a14      	ldr	r2, [pc, #80]	; (8002cc8 <HAL_TIM_PWM_Start+0x13c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d004      	beq.n	8002c86 <HAL_TIM_PWM_Start+0xfa>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a12      	ldr	r2, [pc, #72]	; (8002ccc <HAL_TIM_PWM_Start+0x140>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d111      	bne.n	8002caa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b06      	cmp	r3, #6
 8002c96:	d010      	beq.n	8002cba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca8:	e007      	b.n	8002cba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 0201 	orr.w	r2, r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40012c00 	.word	0x40012c00
 8002cc8:	40000400 	.word	0x40000400
 8002ccc:	40000800 	.word	0x40000800

08002cd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d122      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d11b      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f06f 0202 	mvn.w	r2, #2
 8002cfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fa6f 	bl	80031f6 <HAL_TIM_IC_CaptureCallback>
 8002d18:	e005      	b.n	8002d26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fa62 	bl	80031e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 fa71 	bl	8003208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d122      	bne.n	8002d80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d11b      	bne.n	8002d80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0204 	mvn.w	r2, #4
 8002d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2202      	movs	r2, #2
 8002d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fa45 	bl	80031f6 <HAL_TIM_IC_CaptureCallback>
 8002d6c:	e005      	b.n	8002d7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fa38 	bl	80031e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fa47 	bl	8003208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d122      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d11b      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f06f 0208 	mvn.w	r2, #8
 8002da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2204      	movs	r2, #4
 8002daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fa1b 	bl	80031f6 <HAL_TIM_IC_CaptureCallback>
 8002dc0:	e005      	b.n	8002dce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fa0e 	bl	80031e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 fa1d 	bl	8003208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f003 0310 	and.w	r3, r3, #16
 8002dde:	2b10      	cmp	r3, #16
 8002de0:	d122      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f003 0310 	and.w	r3, r3, #16
 8002dec:	2b10      	cmp	r3, #16
 8002dee:	d11b      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0210 	mvn.w	r2, #16
 8002df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2208      	movs	r2, #8
 8002dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f9f1 	bl	80031f6 <HAL_TIM_IC_CaptureCallback>
 8002e14:	e005      	b.n	8002e22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f9e4 	bl	80031e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f9f3 	bl	8003208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d10e      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d107      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f06f 0201 	mvn.w	r2, #1
 8002e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fe faf6 	bl	8001440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5e:	2b80      	cmp	r3, #128	; 0x80
 8002e60:	d10e      	bne.n	8002e80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6c:	2b80      	cmp	r3, #128	; 0x80
 8002e6e:	d107      	bne.n	8002e80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fce1 	bl	8003842 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8a:	2b40      	cmp	r3, #64	; 0x40
 8002e8c:	d10e      	bne.n	8002eac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e98:	2b40      	cmp	r3, #64	; 0x40
 8002e9a:	d107      	bne.n	8002eac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f9b7 	bl	800321a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	d10e      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 0320 	and.w	r3, r3, #32
 8002ec4:	2b20      	cmp	r3, #32
 8002ec6:	d107      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0220 	mvn.w	r2, #32
 8002ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fcac 	bl	8003830 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ed8:	bf00      	nop
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e0ac      	b.n	8003054 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b0c      	cmp	r3, #12
 8002f06:	f200 809f 	bhi.w	8003048 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002f0a:	a201      	add	r2, pc, #4	; (adr r2, 8002f10 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f10:	08002f45 	.word	0x08002f45
 8002f14:	08003049 	.word	0x08003049
 8002f18:	08003049 	.word	0x08003049
 8002f1c:	08003049 	.word	0x08003049
 8002f20:	08002f85 	.word	0x08002f85
 8002f24:	08003049 	.word	0x08003049
 8002f28:	08003049 	.word	0x08003049
 8002f2c:	08003049 	.word	0x08003049
 8002f30:	08002fc7 	.word	0x08002fc7
 8002f34:	08003049 	.word	0x08003049
 8002f38:	08003049 	.word	0x08003049
 8002f3c:	08003049 	.word	0x08003049
 8002f40:	08003007 	.word	0x08003007
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 f9d0 	bl	80032f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699a      	ldr	r2, [r3, #24]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0208 	orr.w	r2, r2, #8
 8002f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0204 	bic.w	r2, r2, #4
 8002f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6999      	ldr	r1, [r3, #24]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	619a      	str	r2, [r3, #24]
      break;
 8002f82:	e062      	b.n	800304a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68b9      	ldr	r1, [r7, #8]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fa16 	bl	80033bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699a      	ldr	r2, [r3, #24]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6999      	ldr	r1, [r3, #24]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	021a      	lsls	r2, r3, #8
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	619a      	str	r2, [r3, #24]
      break;
 8002fc4:	e041      	b.n	800304a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68b9      	ldr	r1, [r7, #8]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 fa5f 	bl	8003490 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	69da      	ldr	r2, [r3, #28]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0208 	orr.w	r2, r2, #8
 8002fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	69da      	ldr	r2, [r3, #28]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0204 	bic.w	r2, r2, #4
 8002ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	69d9      	ldr	r1, [r3, #28]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	61da      	str	r2, [r3, #28]
      break;
 8003004:	e021      	b.n	800304a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68b9      	ldr	r1, [r7, #8]
 800300c:	4618      	mov	r0, r3
 800300e:	f000 faa9 	bl	8003564 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	69da      	ldr	r2, [r3, #28]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69da      	ldr	r2, [r3, #28]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69d9      	ldr	r1, [r3, #28]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	021a      	lsls	r2, r3, #8
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	61da      	str	r2, [r3, #28]
      break;
 8003046:	e000      	b.n	800304a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003048:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_TIM_ConfigClockSource+0x18>
 8003070:	2302      	movs	r3, #2
 8003072:	e0b3      	b.n	80031dc <HAL_TIM_ConfigClockSource+0x180>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003092:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800309a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ac:	d03e      	beq.n	800312c <HAL_TIM_ConfigClockSource+0xd0>
 80030ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b2:	f200 8087 	bhi.w	80031c4 <HAL_TIM_ConfigClockSource+0x168>
 80030b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ba:	f000 8085 	beq.w	80031c8 <HAL_TIM_ConfigClockSource+0x16c>
 80030be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c2:	d87f      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x168>
 80030c4:	2b70      	cmp	r3, #112	; 0x70
 80030c6:	d01a      	beq.n	80030fe <HAL_TIM_ConfigClockSource+0xa2>
 80030c8:	2b70      	cmp	r3, #112	; 0x70
 80030ca:	d87b      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x168>
 80030cc:	2b60      	cmp	r3, #96	; 0x60
 80030ce:	d050      	beq.n	8003172 <HAL_TIM_ConfigClockSource+0x116>
 80030d0:	2b60      	cmp	r3, #96	; 0x60
 80030d2:	d877      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x168>
 80030d4:	2b50      	cmp	r3, #80	; 0x50
 80030d6:	d03c      	beq.n	8003152 <HAL_TIM_ConfigClockSource+0xf6>
 80030d8:	2b50      	cmp	r3, #80	; 0x50
 80030da:	d873      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x168>
 80030dc:	2b40      	cmp	r3, #64	; 0x40
 80030de:	d058      	beq.n	8003192 <HAL_TIM_ConfigClockSource+0x136>
 80030e0:	2b40      	cmp	r3, #64	; 0x40
 80030e2:	d86f      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x168>
 80030e4:	2b30      	cmp	r3, #48	; 0x30
 80030e6:	d064      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x156>
 80030e8:	2b30      	cmp	r3, #48	; 0x30
 80030ea:	d86b      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x168>
 80030ec:	2b20      	cmp	r3, #32
 80030ee:	d060      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x156>
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	d867      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x168>
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d05c      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x156>
 80030f8:	2b10      	cmp	r3, #16
 80030fa:	d05a      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80030fc:	e062      	b.n	80031c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6818      	ldr	r0, [r3, #0]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	6899      	ldr	r1, [r3, #8]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f000 faee 	bl	80036ee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003120:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	609a      	str	r2, [r3, #8]
      break;
 800312a:	e04e      	b.n	80031ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6818      	ldr	r0, [r3, #0]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	6899      	ldr	r1, [r3, #8]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f000 fad7 	bl	80036ee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800314e:	609a      	str	r2, [r3, #8]
      break;
 8003150:	e03b      	b.n	80031ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	6859      	ldr	r1, [r3, #4]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	461a      	mov	r2, r3
 8003160:	f000 fa4e 	bl	8003600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2150      	movs	r1, #80	; 0x50
 800316a:	4618      	mov	r0, r3
 800316c:	f000 faa5 	bl	80036ba <TIM_ITRx_SetConfig>
      break;
 8003170:	e02b      	b.n	80031ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	6859      	ldr	r1, [r3, #4]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	461a      	mov	r2, r3
 8003180:	f000 fa6c 	bl	800365c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2160      	movs	r1, #96	; 0x60
 800318a:	4618      	mov	r0, r3
 800318c:	f000 fa95 	bl	80036ba <TIM_ITRx_SetConfig>
      break;
 8003190:	e01b      	b.n	80031ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	6859      	ldr	r1, [r3, #4]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	461a      	mov	r2, r3
 80031a0:	f000 fa2e 	bl	8003600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2140      	movs	r1, #64	; 0x40
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fa85 	bl	80036ba <TIM_ITRx_SetConfig>
      break;
 80031b0:	e00b      	b.n	80031ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4619      	mov	r1, r3
 80031bc:	4610      	mov	r0, r2
 80031be:	f000 fa7c 	bl	80036ba <TIM_ITRx_SetConfig>
        break;
 80031c2:	e002      	b.n	80031ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80031c4:	bf00      	nop
 80031c6:	e000      	b.n	80031ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80031c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr

080031f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr

0800321a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a29      	ldr	r2, [pc, #164]	; (80032e4 <TIM_Base_SetConfig+0xb8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d00b      	beq.n	800325c <TIM_Base_SetConfig+0x30>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324a:	d007      	beq.n	800325c <TIM_Base_SetConfig+0x30>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a26      	ldr	r2, [pc, #152]	; (80032e8 <TIM_Base_SetConfig+0xbc>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d003      	beq.n	800325c <TIM_Base_SetConfig+0x30>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a25      	ldr	r2, [pc, #148]	; (80032ec <TIM_Base_SetConfig+0xc0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d108      	bne.n	800326e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a1c      	ldr	r2, [pc, #112]	; (80032e4 <TIM_Base_SetConfig+0xb8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00b      	beq.n	800328e <TIM_Base_SetConfig+0x62>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327c:	d007      	beq.n	800328e <TIM_Base_SetConfig+0x62>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a19      	ldr	r2, [pc, #100]	; (80032e8 <TIM_Base_SetConfig+0xbc>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d003      	beq.n	800328e <TIM_Base_SetConfig+0x62>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a18      	ldr	r2, [pc, #96]	; (80032ec <TIM_Base_SetConfig+0xc0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d108      	bne.n	80032a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4313      	orrs	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a07      	ldr	r2, [pc, #28]	; (80032e4 <TIM_Base_SetConfig+0xb8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d103      	bne.n	80032d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	615a      	str	r2, [r3, #20]
}
 80032da:	bf00      	nop
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr
 80032e4:	40012c00 	.word	0x40012c00
 80032e8:	40000400 	.word	0x40000400
 80032ec:	40000800 	.word	0x40000800

080032f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	f023 0201 	bic.w	r2, r3, #1
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800331e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0303 	bic.w	r3, r3, #3
 8003326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f023 0302 	bic.w	r3, r3, #2
 8003338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	4313      	orrs	r3, r2
 8003342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a1c      	ldr	r2, [pc, #112]	; (80033b8 <TIM_OC1_SetConfig+0xc8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d10c      	bne.n	8003366 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f023 0308 	bic.w	r3, r3, #8
 8003352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	4313      	orrs	r3, r2
 800335c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f023 0304 	bic.w	r3, r3, #4
 8003364:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a13      	ldr	r2, [pc, #76]	; (80033b8 <TIM_OC1_SetConfig+0xc8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d111      	bne.n	8003392 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800337c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	4313      	orrs	r3, r2
 8003390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	621a      	str	r2, [r3, #32]
}
 80033ac:	bf00      	nop
 80033ae:	371c      	adds	r7, #28
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bc80      	pop	{r7}
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40012c00 	.word	0x40012c00

080033bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	f023 0210 	bic.w	r2, r3, #16
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	021b      	lsls	r3, r3, #8
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f023 0320 	bic.w	r3, r3, #32
 8003406:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a1d      	ldr	r2, [pc, #116]	; (800348c <TIM_OC2_SetConfig+0xd0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d10d      	bne.n	8003438 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	4313      	orrs	r3, r2
 800342e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003436:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a14      	ldr	r2, [pc, #80]	; (800348c <TIM_OC2_SetConfig+0xd0>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d113      	bne.n	8003468 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003446:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800344e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	621a      	str	r2, [r3, #32]
}
 8003482:	bf00      	nop
 8003484:	371c      	adds	r7, #28
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr
 800348c:	40012c00 	.word	0x40012c00

08003490 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003490:	b480      	push	{r7}
 8003492:	b087      	sub	sp, #28
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 0303 	bic.w	r3, r3, #3
 80034c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	021b      	lsls	r3, r3, #8
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a1d      	ldr	r2, [pc, #116]	; (8003560 <TIM_OC3_SetConfig+0xd0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d10d      	bne.n	800350a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	021b      	lsls	r3, r3, #8
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	4313      	orrs	r3, r2
 8003500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a14      	ldr	r2, [pc, #80]	; (8003560 <TIM_OC3_SetConfig+0xd0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d113      	bne.n	800353a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	621a      	str	r2, [r3, #32]
}
 8003554:	bf00      	nop
 8003556:	371c      	adds	r7, #28
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40012c00 	.word	0x40012c00

08003564 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800359a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	021b      	lsls	r3, r3, #8
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	031b      	lsls	r3, r3, #12
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a0f      	ldr	r2, [pc, #60]	; (80035fc <TIM_OC4_SetConfig+0x98>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d109      	bne.n	80035d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	019b      	lsls	r3, r3, #6
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	621a      	str	r2, [r3, #32]
}
 80035f2:	bf00      	nop
 80035f4:	371c      	adds	r7, #28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr
 80035fc:	40012c00 	.word	0x40012c00

08003600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003600:	b480      	push	{r7}
 8003602:	b087      	sub	sp, #28
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	f023 0201 	bic.w	r2, r3, #1
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800362a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f023 030a 	bic.w	r3, r3, #10
 800363c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4313      	orrs	r3, r2
 8003644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	621a      	str	r2, [r3, #32]
}
 8003652:	bf00      	nop
 8003654:	371c      	adds	r7, #28
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	f023 0210 	bic.w	r2, r3, #16
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003686:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	031b      	lsls	r3, r3, #12
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	4313      	orrs	r3, r2
 8003690:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003698:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	621a      	str	r2, [r3, #32]
}
 80036b0:	bf00      	nop
 80036b2:	371c      	adds	r7, #28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr

080036ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b085      	sub	sp, #20
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f043 0307 	orr.w	r3, r3, #7
 80036dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	609a      	str	r2, [r3, #8]
}
 80036e4:	bf00      	nop
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr

080036ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b087      	sub	sp, #28
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	60f8      	str	r0, [r7, #12]
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	607a      	str	r2, [r7, #4]
 80036fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003708:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	021a      	lsls	r2, r3, #8
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	431a      	orrs	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	4313      	orrs	r3, r2
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	609a      	str	r2, [r3, #8]
}
 8003722:	bf00      	nop
 8003724:	371c      	adds	r7, #28
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr

0800372c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f003 031f 	and.w	r3, r3, #31
 800373e:	2201      	movs	r2, #1
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a1a      	ldr	r2, [r3, #32]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	43db      	mvns	r3, r3
 800374e:	401a      	ands	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a1a      	ldr	r2, [r3, #32]
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f003 031f 	and.w	r3, r3, #31
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	fa01 f303 	lsl.w	r3, r1, r3
 8003764:	431a      	orrs	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	621a      	str	r2, [r3, #32]
}
 800376a:	bf00      	nop
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr

08003774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e046      	b.n	800381a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a16      	ldr	r2, [pc, #88]	; (8003824 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d00e      	beq.n	80037ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d8:	d009      	beq.n	80037ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a12      	ldr	r2, [pc, #72]	; (8003828 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d004      	beq.n	80037ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a10      	ldr	r2, [pc, #64]	; (800382c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d10c      	bne.n	8003808 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr
 8003824:	40012c00 	.word	0x40012c00
 8003828:	40000400 	.word	0x40000400
 800382c:	40000800 	.word	0x40000800

08003830 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr

08003842 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr

08003854 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e03f      	b.n	80038e6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fd ff30 	bl	80016e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2224      	movs	r2, #36	; 0x24
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003896:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 fba9 	bl	8003ff0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68da      	ldr	r2, [r3, #12]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	4613      	mov	r3, r2
 80038fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b20      	cmp	r3, #32
 8003906:	d11d      	bne.n	8003944 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <HAL_UART_Receive_IT+0x26>
 800390e:	88fb      	ldrh	r3, [r7, #6]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e016      	b.n	8003946 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_UART_Receive_IT+0x38>
 8003922:	2302      	movs	r3, #2
 8003924:	e00f      	b.n	8003946 <HAL_UART_Receive_IT+0x58>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003934:	88fb      	ldrh	r3, [r7, #6]
 8003936:	461a      	mov	r2, r3
 8003938:	68b9      	ldr	r1, [r7, #8]
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 f9cf 	bl	8003cde <UART_Start_Receive_IT>
 8003940:	4603      	mov	r3, r0
 8003942:	e000      	b.n	8003946 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003944:	2302      	movs	r3, #2
  }
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08a      	sub	sp, #40	; 0x28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003970:	2300      	movs	r3, #0
 8003972:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10d      	bne.n	80039a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	f003 0320 	and.w	r3, r3, #32
 800398c:	2b00      	cmp	r3, #0
 800398e:	d008      	beq.n	80039a2 <HAL_UART_IRQHandler+0x52>
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 fa7f 	bl	8003e9e <UART_Receive_IT>
      return;
 80039a0:	e17b      	b.n	8003c9a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 80b1 	beq.w	8003b0c <HAL_UART_IRQHandler+0x1bc>
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d105      	bne.n	80039c0 <HAL_UART_IRQHandler+0x70>
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 80a6 	beq.w	8003b0c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_UART_IRQHandler+0x90>
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	f043 0201 	orr.w	r2, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <HAL_UART_IRQHandler+0xb0>
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f8:	f043 0202 	orr.w	r2, r3, #2
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_UART_IRQHandler+0xd0>
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	f043 0204 	orr.w	r2, r3, #4
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00f      	beq.n	8003a4a <HAL_UART_IRQHandler+0xfa>
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	f003 0320 	and.w	r3, r3, #32
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d104      	bne.n	8003a3e <HAL_UART_IRQHandler+0xee>
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f043 0208 	orr.w	r2, r3, #8
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 811e 	beq.w	8003c90 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <HAL_UART_IRQHandler+0x11e>
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fa18 	bl	8003e9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bf14      	ite	ne
 8003a7c:	2301      	movne	r3, #1
 8003a7e:	2300      	moveq	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d102      	bne.n	8003a96 <HAL_UART_IRQHandler+0x146>
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d031      	beq.n	8003afa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f95a 	bl	8003d50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d023      	beq.n	8003af2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695a      	ldr	r2, [r3, #20]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ab8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d013      	beq.n	8003aea <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	4a76      	ldr	r2, [pc, #472]	; (8003ca0 <HAL_UART_IRQHandler+0x350>)
 8003ac8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fe f88c 	bl	8001bec <HAL_DMA_Abort_IT>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d016      	beq.n	8003b08 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae8:	e00e      	b.n	8003b08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f8e3 	bl	8003cb6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af0:	e00a      	b.n	8003b08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f8df 	bl	8003cb6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af8:	e006      	b.n	8003b08 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f8db 	bl	8003cb6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003b06:	e0c3      	b.n	8003c90 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b08:	bf00      	nop
    return;
 8003b0a:	e0c1      	b.n	8003c90 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	f040 80a1 	bne.w	8003c58 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 809b 	beq.w	8003c58 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	f003 0310 	and.w	r3, r3, #16
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 8095 	beq.w	8003c58 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d04e      	beq.n	8003bf0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003b5c:	8a3b      	ldrh	r3, [r7, #16]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 8098 	beq.w	8003c94 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b68:	8a3a      	ldrh	r2, [r7, #16]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	f080 8092 	bcs.w	8003c94 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	8a3a      	ldrh	r2, [r7, #16]
 8003b74:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d02b      	beq.n	8003bd8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b8e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695a      	ldr	r2, [r3, #20]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0201 	bic.w	r2, r2, #1
 8003b9e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bae:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0210 	bic.w	r2, r2, #16
 8003bcc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fd ffcf 	bl	8001b76 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	4619      	mov	r1, r3
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f86d 	bl	8003cc8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003bee:	e051      	b.n	8003c94 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d047      	beq.n	8003c98 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003c08:	8a7b      	ldrh	r3, [r7, #18]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d044      	beq.n	8003c98 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c1c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695a      	ldr	r2, [r3, #20]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0201 	bic.w	r2, r2, #1
 8003c2c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0210 	bic.w	r2, r2, #16
 8003c4a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c4c:	8a7b      	ldrh	r3, [r7, #18]
 8003c4e:	4619      	mov	r1, r3
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f839 	bl	8003cc8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c56:	e01f      	b.n	8003c98 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d008      	beq.n	8003c74 <HAL_UART_IRQHandler+0x324>
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f8af 	bl	8003dd0 <UART_Transmit_IT>
    return;
 8003c72:	e012      	b.n	8003c9a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00d      	beq.n	8003c9a <HAL_UART_IRQHandler+0x34a>
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f8f0 	bl	8003e6e <UART_EndTransmit_IT>
    return;
 8003c8e:	e004      	b.n	8003c9a <HAL_UART_IRQHandler+0x34a>
    return;
 8003c90:	bf00      	nop
 8003c92:	e002      	b.n	8003c9a <HAL_UART_IRQHandler+0x34a>
      return;
 8003c94:	bf00      	nop
 8003c96:	e000      	b.n	8003c9a <HAL_UART_IRQHandler+0x34a>
      return;
 8003c98:	bf00      	nop
  }
}
 8003c9a:	3728      	adds	r7, #40	; 0x28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	08003da9 	.word	0x08003da9

08003ca4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr

08003cb6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr

08003cde <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b085      	sub	sp, #20
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	88fa      	ldrh	r2, [r7, #6]
 8003cf6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	88fa      	ldrh	r2, [r7, #6]
 8003cfc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2222      	movs	r2, #34	; 0x22
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d22:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695a      	ldr	r2, [r3, #20]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0220 	orr.w	r2, r2, #32
 8003d42:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr

08003d50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d66:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695a      	ldr	r2, [r3, #20]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0201 	bic.w	r2, r2, #1
 8003d76:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d107      	bne.n	8003d90 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0210 	bic.w	r2, r2, #16
 8003d8e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr

08003da8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f7ff ff77 	bl	8003cb6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dc8:	bf00      	nop
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b21      	cmp	r3, #33	; 0x21
 8003de2:	d13e      	bne.n	8003e62 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dec:	d114      	bne.n	8003e18 <UART_Transmit_IT+0x48>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d110      	bne.n	8003e18 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	461a      	mov	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e0a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	1c9a      	adds	r2, r3, #2
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	621a      	str	r2, [r3, #32]
 8003e16:	e008      	b.n	8003e2a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	1c59      	adds	r1, r3, #1
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6211      	str	r1, [r2, #32]
 8003e22:	781a      	ldrb	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	4619      	mov	r1, r3
 8003e38:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10f      	bne.n	8003e5e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e4c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e5c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e000      	b.n	8003e64 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e62:	2302      	movs	r3, #2
  }
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr

08003e6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b082      	sub	sp, #8
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff ff08 	bl	8003ca4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b086      	sub	sp, #24
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b22      	cmp	r3, #34	; 0x22
 8003eb0:	f040 8099 	bne.w	8003fe6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ebc:	d117      	bne.n	8003eee <UART_Receive_IT+0x50>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d113      	bne.n	8003eee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ece:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee6:	1c9a      	adds	r2, r3, #2
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	629a      	str	r2, [r3, #40]	; 0x28
 8003eec:	e026      	b.n	8003f3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f00:	d007      	beq.n	8003f12 <UART_Receive_IT+0x74>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <UART_Receive_IT+0x82>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	701a      	strb	r2, [r3, #0]
 8003f1e:	e008      	b.n	8003f32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d148      	bne.n	8003fe2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0220 	bic.w	r2, r2, #32
 8003f5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0201 	bic.w	r2, r2, #1
 8003f7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d123      	bne.n	8003fd8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0210 	bic.w	r2, r2, #16
 8003fa4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0310 	and.w	r3, r3, #16
 8003fb0:	2b10      	cmp	r3, #16
 8003fb2:	d10a      	bne.n	8003fca <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fce:	4619      	mov	r1, r3
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff fe79 	bl	8003cc8 <HAL_UARTEx_RxEventCallback>
 8003fd6:	e002      	b.n	8003fde <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7fc fd4f 	bl	8000a7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	e002      	b.n	8003fe8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	e000      	b.n	8003fe8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003fe6:	2302      	movs	r3, #2
  }
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800402a:	f023 030c 	bic.w	r3, r3, #12
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6812      	ldr	r2, [r2, #0]
 8004032:	68b9      	ldr	r1, [r7, #8]
 8004034:	430b      	orrs	r3, r1
 8004036:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699a      	ldr	r2, [r3, #24]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a2c      	ldr	r2, [pc, #176]	; (8004104 <UART_SetConfig+0x114>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d103      	bne.n	8004060 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004058:	f7fe fbf2 	bl	8002840 <HAL_RCC_GetPCLK2Freq>
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	e002      	b.n	8004066 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004060:	f7fe fbda 	bl	8002818 <HAL_RCC_GetPCLK1Freq>
 8004064:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	009a      	lsls	r2, r3, #2
 8004070:	441a      	add	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	fbb2 f3f3 	udiv	r3, r2, r3
 800407c:	4a22      	ldr	r2, [pc, #136]	; (8004108 <UART_SetConfig+0x118>)
 800407e:	fba2 2303 	umull	r2, r3, r2, r3
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	0119      	lsls	r1, r3, #4
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	009a      	lsls	r2, r3, #2
 8004090:	441a      	add	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	fbb2 f2f3 	udiv	r2, r2, r3
 800409c:	4b1a      	ldr	r3, [pc, #104]	; (8004108 <UART_SetConfig+0x118>)
 800409e:	fba3 0302 	umull	r0, r3, r3, r2
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	2064      	movs	r0, #100	; 0x64
 80040a6:	fb00 f303 	mul.w	r3, r0, r3
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	3332      	adds	r3, #50	; 0x32
 80040b0:	4a15      	ldr	r2, [pc, #84]	; (8004108 <UART_SetConfig+0x118>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040bc:	4419      	add	r1, r3
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4613      	mov	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	009a      	lsls	r2, r3, #2
 80040c8:	441a      	add	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040d4:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <UART_SetConfig+0x118>)
 80040d6:	fba3 0302 	umull	r0, r3, r3, r2
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	2064      	movs	r0, #100	; 0x64
 80040de:	fb00 f303 	mul.w	r3, r0, r3
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	3332      	adds	r3, #50	; 0x32
 80040e8:	4a07      	ldr	r2, [pc, #28]	; (8004108 <UART_SetConfig+0x118>)
 80040ea:	fba2 2303 	umull	r2, r3, r2, r3
 80040ee:	095b      	lsrs	r3, r3, #5
 80040f0:	f003 020f 	and.w	r2, r3, #15
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	440a      	add	r2, r1
 80040fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040fc:	bf00      	nop
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40013800 	.word	0x40013800
 8004108:	51eb851f 	.word	0x51eb851f

0800410c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800411a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800411e:	2b84      	cmp	r3, #132	; 0x84
 8004120:	d005      	beq.n	800412e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004122:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4413      	add	r3, r2
 800412a:	3303      	adds	r3, #3
 800412c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800412e:	68fb      	ldr	r3, [r7, #12]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	bc80      	pop	{r7}
 8004138:	4770      	bx	lr

0800413a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800413e:	f000 fad1 	bl	80046e4 <vTaskStartScheduler>
  
  return osOK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	bd80      	pop	{r7, pc}

08004148 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800414a:	b089      	sub	sp, #36	; 0x24
 800414c:	af04      	add	r7, sp, #16
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d020      	beq.n	800419c <osThreadCreate+0x54>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d01c      	beq.n	800419c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685c      	ldr	r4, [r3, #4]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681d      	ldr	r5, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691e      	ldr	r6, [r3, #16]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff ffc9 	bl	800410c <makeFreeRtosPriority>
 800417a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004184:	9202      	str	r2, [sp, #8]
 8004186:	9301      	str	r3, [sp, #4]
 8004188:	9100      	str	r1, [sp, #0]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	4632      	mov	r2, r6
 800418e:	4629      	mov	r1, r5
 8004190:	4620      	mov	r0, r4
 8004192:	f000 f8e8 	bl	8004366 <xTaskCreateStatic>
 8004196:	4603      	mov	r3, r0
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	e01c      	b.n	80041d6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685c      	ldr	r4, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041a8:	b29e      	uxth	r6, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7ff ffab 	bl	800410c <makeFreeRtosPriority>
 80041b6:	4602      	mov	r2, r0
 80041b8:	f107 030c 	add.w	r3, r7, #12
 80041bc:	9301      	str	r3, [sp, #4]
 80041be:	9200      	str	r2, [sp, #0]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	4632      	mov	r2, r6
 80041c4:	4629      	mov	r1, r5
 80041c6:	4620      	mov	r0, r4
 80041c8:	f000 f929 	bl	800441e <xTaskCreate>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d001      	beq.n	80041d6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	e000      	b.n	80041d8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80041d6:	68fb      	ldr	r3, [r7, #12]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041e0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <osDelay+0x16>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	e000      	b.n	80041f8 <osDelay+0x18>
 80041f6:	2301      	movs	r3, #1
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fa3f 	bl	800467c <vTaskDelay>
  
  return osOK;
 80041fe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f103 0208 	add.w	r2, r3, #8
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f04f 32ff 	mov.w	r2, #4294967295
 8004220:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f103 0208 	add.w	r2, r3, #8
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f103 0208 	add.w	r2, r3, #8
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	bc80      	pop	{r7}
 8004244:	4770      	bx	lr

08004246 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	bc80      	pop	{r7}
 800425c:	4770      	bx	lr

0800425e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800425e:	b480      	push	{r7}
 8004260:	b085      	sub	sp, #20
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	601a      	str	r2, [r3, #0]
}
 800429a:	bf00      	nop
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr

080042a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ba:	d103      	bne.n	80042c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	e00c      	b.n	80042de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3308      	adds	r3, #8
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	e002      	b.n	80042d2 <vListInsert+0x2e>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d2f6      	bcs.n	80042cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	601a      	str	r2, [r3, #0]
}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr

08004314 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6892      	ldr	r2, [r2, #8]
 800432a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6852      	ldr	r2, [r2, #4]
 8004334:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	429a      	cmp	r2, r3
 800433e:	d103      	bne.n	8004348 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	1e5a      	subs	r2, r3, #1
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	bc80      	pop	{r7}
 8004364:	4770      	bx	lr

08004366 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004366:	b580      	push	{r7, lr}
 8004368:	b08e      	sub	sp, #56	; 0x38
 800436a:	af04      	add	r7, sp, #16
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
 8004372:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10a      	bne.n	8004390 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800438c:	bf00      	nop
 800438e:	e7fe      	b.n	800438e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10a      	bne.n	80043ac <xTaskCreateStatic+0x46>
	__asm volatile
 8004396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439a:	f383 8811 	msr	BASEPRI, r3
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	61fb      	str	r3, [r7, #28]
}
 80043a8:	bf00      	nop
 80043aa:	e7fe      	b.n	80043aa <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043ac:	2354      	movs	r3, #84	; 0x54
 80043ae:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	2b54      	cmp	r3, #84	; 0x54
 80043b4:	d00a      	beq.n	80043cc <xTaskCreateStatic+0x66>
	__asm volatile
 80043b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ba:	f383 8811 	msr	BASEPRI, r3
 80043be:	f3bf 8f6f 	isb	sy
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	61bb      	str	r3, [r7, #24]
}
 80043c8:	bf00      	nop
 80043ca:	e7fe      	b.n	80043ca <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d01e      	beq.n	8004410 <xTaskCreateStatic+0xaa>
 80043d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d01b      	beq.n	8004410 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	2202      	movs	r2, #2
 80043e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043ea:	2300      	movs	r3, #0
 80043ec:	9303      	str	r3, [sp, #12]
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	9302      	str	r3, [sp, #8]
 80043f2:	f107 0314 	add.w	r3, r7, #20
 80043f6:	9301      	str	r3, [sp, #4]
 80043f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	68b9      	ldr	r1, [r7, #8]
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 f850 	bl	80044a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004408:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800440a:	f000 f8cd 	bl	80045a8 <prvAddNewTaskToReadyList>
 800440e:	e001      	b.n	8004414 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004414:	697b      	ldr	r3, [r7, #20]
	}
 8004416:	4618      	mov	r0, r3
 8004418:	3728      	adds	r7, #40	; 0x28
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800441e:	b580      	push	{r7, lr}
 8004420:	b08c      	sub	sp, #48	; 0x30
 8004422:	af04      	add	r7, sp, #16
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	603b      	str	r3, [r7, #0]
 800442a:	4613      	mov	r3, r2
 800442c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800442e:	88fb      	ldrh	r3, [r7, #6]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4618      	mov	r0, r3
 8004434:	f000 fe6c 	bl	8005110 <pvPortMalloc>
 8004438:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00e      	beq.n	800445e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004440:	2054      	movs	r0, #84	; 0x54
 8004442:	f000 fe65 	bl	8005110 <pvPortMalloc>
 8004446:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	631a      	str	r2, [r3, #48]	; 0x30
 8004454:	e005      	b.n	8004462 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004456:	6978      	ldr	r0, [r7, #20]
 8004458:	f000 ff1e 	bl	8005298 <vPortFree>
 800445c:	e001      	b.n	8004462 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800445e:	2300      	movs	r3, #0
 8004460:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d017      	beq.n	8004498 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004470:	88fa      	ldrh	r2, [r7, #6]
 8004472:	2300      	movs	r3, #0
 8004474:	9303      	str	r3, [sp, #12]
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	9302      	str	r3, [sp, #8]
 800447a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447c:	9301      	str	r3, [sp, #4]
 800447e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	68b9      	ldr	r1, [r7, #8]
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 f80e 	bl	80044a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800448c:	69f8      	ldr	r0, [r7, #28]
 800448e:	f000 f88b 	bl	80045a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004492:	2301      	movs	r3, #1
 8004494:	61bb      	str	r3, [r7, #24]
 8004496:	e002      	b.n	800449e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004498:	f04f 33ff 	mov.w	r3, #4294967295
 800449c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800449e:	69bb      	ldr	r3, [r7, #24]
	}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3720      	adds	r7, #32
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044c0:	3b01      	subs	r3, #1
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	f023 0307 	bic.w	r3, r3, #7
 80044ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80044da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	617b      	str	r3, [r7, #20]
}
 80044ec:	bf00      	nop
 80044ee:	e7fe      	b.n	80044ee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044f0:	2300      	movs	r3, #0
 80044f2:	61fb      	str	r3, [r7, #28]
 80044f4:	e012      	b.n	800451c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	4413      	add	r3, r2
 80044fc:	7819      	ldrb	r1, [r3, #0]
 80044fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	4413      	add	r3, r2
 8004504:	3334      	adds	r3, #52	; 0x34
 8004506:	460a      	mov	r2, r1
 8004508:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	4413      	add	r3, r2
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d006      	beq.n	8004524 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	3301      	adds	r3, #1
 800451a:	61fb      	str	r3, [r7, #28]
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	2b0f      	cmp	r3, #15
 8004520:	d9e9      	bls.n	80044f6 <prvInitialiseNewTask+0x4e>
 8004522:	e000      	b.n	8004526 <prvInitialiseNewTask+0x7e>
		{
			break;
 8004524:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004530:	2b06      	cmp	r3, #6
 8004532:	d901      	bls.n	8004538 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004534:	2306      	movs	r3, #6
 8004536:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800453c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004542:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004546:	2200      	movs	r2, #0
 8004548:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454c:	3304      	adds	r3, #4
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff fe79 	bl	8004246 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004556:	3318      	adds	r3, #24
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff fe74 	bl	8004246 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004562:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004566:	f1c3 0207 	rsb	r2, r3, #7
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004572:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	2200      	movs	r2, #0
 8004578:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	68f9      	ldr	r1, [r7, #12]
 8004586:	69b8      	ldr	r0, [r7, #24]
 8004588:	f000 fc0e 	bl	8004da8 <pxPortInitialiseStack>
 800458c:	4602      	mov	r2, r0
 800458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004590:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004594:	2b00      	cmp	r3, #0
 8004596:	d002      	beq.n	800459e <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800459c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800459e:	bf00      	nop
 80045a0:	3720      	adds	r7, #32
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045b0:	f000 fcec 	bl	8004f8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045b4:	4b2a      	ldr	r3, [pc, #168]	; (8004660 <prvAddNewTaskToReadyList+0xb8>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3301      	adds	r3, #1
 80045ba:	4a29      	ldr	r2, [pc, #164]	; (8004660 <prvAddNewTaskToReadyList+0xb8>)
 80045bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045be:	4b29      	ldr	r3, [pc, #164]	; (8004664 <prvAddNewTaskToReadyList+0xbc>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d109      	bne.n	80045da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045c6:	4a27      	ldr	r2, [pc, #156]	; (8004664 <prvAddNewTaskToReadyList+0xbc>)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045cc:	4b24      	ldr	r3, [pc, #144]	; (8004660 <prvAddNewTaskToReadyList+0xb8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d110      	bne.n	80045f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80045d4:	f000 fac0 	bl	8004b58 <prvInitialiseTaskLists>
 80045d8:	e00d      	b.n	80045f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80045da:	4b23      	ldr	r3, [pc, #140]	; (8004668 <prvAddNewTaskToReadyList+0xc0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d109      	bne.n	80045f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80045e2:	4b20      	ldr	r3, [pc, #128]	; (8004664 <prvAddNewTaskToReadyList+0xbc>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d802      	bhi.n	80045f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80045f0:	4a1c      	ldr	r2, [pc, #112]	; (8004664 <prvAddNewTaskToReadyList+0xbc>)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80045f6:	4b1d      	ldr	r3, [pc, #116]	; (800466c <prvAddNewTaskToReadyList+0xc4>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3301      	adds	r3, #1
 80045fc:	4a1b      	ldr	r2, [pc, #108]	; (800466c <prvAddNewTaskToReadyList+0xc4>)
 80045fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	2201      	movs	r2, #1
 8004606:	409a      	lsls	r2, r3
 8004608:	4b19      	ldr	r3, [pc, #100]	; (8004670 <prvAddNewTaskToReadyList+0xc8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4313      	orrs	r3, r2
 800460e:	4a18      	ldr	r2, [pc, #96]	; (8004670 <prvAddNewTaskToReadyList+0xc8>)
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004616:	4613      	mov	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4a15      	ldr	r2, [pc, #84]	; (8004674 <prvAddNewTaskToReadyList+0xcc>)
 8004620:	441a      	add	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3304      	adds	r3, #4
 8004626:	4619      	mov	r1, r3
 8004628:	4610      	mov	r0, r2
 800462a:	f7ff fe18 	bl	800425e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800462e:	f000 fcdd 	bl	8004fec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004632:	4b0d      	ldr	r3, [pc, #52]	; (8004668 <prvAddNewTaskToReadyList+0xc0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00e      	beq.n	8004658 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800463a:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <prvAddNewTaskToReadyList+0xbc>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	429a      	cmp	r2, r3
 8004646:	d207      	bcs.n	8004658 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004648:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <prvAddNewTaskToReadyList+0xd0>)
 800464a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004658:	bf00      	nop
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	200005a0 	.word	0x200005a0
 8004664:	200004a0 	.word	0x200004a0
 8004668:	200005ac 	.word	0x200005ac
 800466c:	200005bc 	.word	0x200005bc
 8004670:	200005a8 	.word	0x200005a8
 8004674:	200004a4 	.word	0x200004a4
 8004678:	e000ed04 	.word	0xe000ed04

0800467c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004684:	2300      	movs	r3, #0
 8004686:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d017      	beq.n	80046be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800468e:	4b13      	ldr	r3, [pc, #76]	; (80046dc <vTaskDelay+0x60>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <vTaskDelay+0x30>
	__asm volatile
 8004696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469a:	f383 8811 	msr	BASEPRI, r3
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	f3bf 8f4f 	dsb	sy
 80046a6:	60bb      	str	r3, [r7, #8]
}
 80046a8:	bf00      	nop
 80046aa:	e7fe      	b.n	80046aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80046ac:	f000 f87a 	bl	80047a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046b0:	2100      	movs	r1, #0
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 fb12 	bl	8004cdc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80046b8:	f000 f882 	bl	80047c0 <xTaskResumeAll>
 80046bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d107      	bne.n	80046d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80046c4:	4b06      	ldr	r3, [pc, #24]	; (80046e0 <vTaskDelay+0x64>)
 80046c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046d4:	bf00      	nop
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	200005c8 	.word	0x200005c8
 80046e0:	e000ed04 	.word	0xe000ed04

080046e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08a      	sub	sp, #40	; 0x28
 80046e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046ee:	2300      	movs	r3, #0
 80046f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046f2:	463a      	mov	r2, r7
 80046f4:	1d39      	adds	r1, r7, #4
 80046f6:	f107 0308 	add.w	r3, r7, #8
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fc f9a6 	bl	8000a4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004700:	6839      	ldr	r1, [r7, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	9202      	str	r2, [sp, #8]
 8004708:	9301      	str	r3, [sp, #4]
 800470a:	2300      	movs	r3, #0
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	2300      	movs	r3, #0
 8004710:	460a      	mov	r2, r1
 8004712:	491e      	ldr	r1, [pc, #120]	; (800478c <vTaskStartScheduler+0xa8>)
 8004714:	481e      	ldr	r0, [pc, #120]	; (8004790 <vTaskStartScheduler+0xac>)
 8004716:	f7ff fe26 	bl	8004366 <xTaskCreateStatic>
 800471a:	4603      	mov	r3, r0
 800471c:	4a1d      	ldr	r2, [pc, #116]	; (8004794 <vTaskStartScheduler+0xb0>)
 800471e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004720:	4b1c      	ldr	r3, [pc, #112]	; (8004794 <vTaskStartScheduler+0xb0>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004728:	2301      	movs	r3, #1
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	e001      	b.n	8004732 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d116      	bne.n	8004766 <vTaskStartScheduler+0x82>
	__asm volatile
 8004738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	613b      	str	r3, [r7, #16]
}
 800474a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800474c:	4b12      	ldr	r3, [pc, #72]	; (8004798 <vTaskStartScheduler+0xb4>)
 800474e:	f04f 32ff 	mov.w	r2, #4294967295
 8004752:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004754:	4b11      	ldr	r3, [pc, #68]	; (800479c <vTaskStartScheduler+0xb8>)
 8004756:	2201      	movs	r2, #1
 8004758:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800475a:	4b11      	ldr	r3, [pc, #68]	; (80047a0 <vTaskStartScheduler+0xbc>)
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004760:	f000 fba2 	bl	8004ea8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004764:	e00e      	b.n	8004784 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476c:	d10a      	bne.n	8004784 <vTaskStartScheduler+0xa0>
	__asm volatile
 800476e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004772:	f383 8811 	msr	BASEPRI, r3
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	60fb      	str	r3, [r7, #12]
}
 8004780:	bf00      	nop
 8004782:	e7fe      	b.n	8004782 <vTaskStartScheduler+0x9e>
}
 8004784:	bf00      	nop
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	08005590 	.word	0x08005590
 8004790:	08004b29 	.word	0x08004b29
 8004794:	200005c4 	.word	0x200005c4
 8004798:	200005c0 	.word	0x200005c0
 800479c:	200005ac 	.word	0x200005ac
 80047a0:	200005a4 	.word	0x200005a4

080047a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80047a8:	4b04      	ldr	r3, [pc, #16]	; (80047bc <vTaskSuspendAll+0x18>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3301      	adds	r3, #1
 80047ae:	4a03      	ldr	r2, [pc, #12]	; (80047bc <vTaskSuspendAll+0x18>)
 80047b0:	6013      	str	r3, [r2, #0]
}
 80047b2:	bf00      	nop
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bc80      	pop	{r7}
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	200005c8 	.word	0x200005c8

080047c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047ca:	2300      	movs	r3, #0
 80047cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047ce:	4b41      	ldr	r3, [pc, #260]	; (80048d4 <xTaskResumeAll+0x114>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10a      	bne.n	80047ec <xTaskResumeAll+0x2c>
	__asm volatile
 80047d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	603b      	str	r3, [r7, #0]
}
 80047e8:	bf00      	nop
 80047ea:	e7fe      	b.n	80047ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047ec:	f000 fbce 	bl	8004f8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047f0:	4b38      	ldr	r3, [pc, #224]	; (80048d4 <xTaskResumeAll+0x114>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	4a37      	ldr	r2, [pc, #220]	; (80048d4 <xTaskResumeAll+0x114>)
 80047f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047fa:	4b36      	ldr	r3, [pc, #216]	; (80048d4 <xTaskResumeAll+0x114>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d161      	bne.n	80048c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004802:	4b35      	ldr	r3, [pc, #212]	; (80048d8 <xTaskResumeAll+0x118>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d05d      	beq.n	80048c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800480a:	e02e      	b.n	800486a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800480c:	4b33      	ldr	r3, [pc, #204]	; (80048dc <xTaskResumeAll+0x11c>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3318      	adds	r3, #24
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff fd7b 	bl	8004314 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	3304      	adds	r3, #4
 8004822:	4618      	mov	r0, r3
 8004824:	f7ff fd76 	bl	8004314 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	2201      	movs	r2, #1
 800482e:	409a      	lsls	r2, r3
 8004830:	4b2b      	ldr	r3, [pc, #172]	; (80048e0 <xTaskResumeAll+0x120>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4313      	orrs	r3, r2
 8004836:	4a2a      	ldr	r2, [pc, #168]	; (80048e0 <xTaskResumeAll+0x120>)
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800483e:	4613      	mov	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4a27      	ldr	r2, [pc, #156]	; (80048e4 <xTaskResumeAll+0x124>)
 8004848:	441a      	add	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3304      	adds	r3, #4
 800484e:	4619      	mov	r1, r3
 8004850:	4610      	mov	r0, r2
 8004852:	f7ff fd04 	bl	800425e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800485a:	4b23      	ldr	r3, [pc, #140]	; (80048e8 <xTaskResumeAll+0x128>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004860:	429a      	cmp	r2, r3
 8004862:	d302      	bcc.n	800486a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004864:	4b21      	ldr	r3, [pc, #132]	; (80048ec <xTaskResumeAll+0x12c>)
 8004866:	2201      	movs	r2, #1
 8004868:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800486a:	4b1c      	ldr	r3, [pc, #112]	; (80048dc <xTaskResumeAll+0x11c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1cc      	bne.n	800480c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004878:	f000 fa0c 	bl	8004c94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800487c:	4b1c      	ldr	r3, [pc, #112]	; (80048f0 <xTaskResumeAll+0x130>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d010      	beq.n	80048aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004888:	f000 f836 	bl	80048f8 <xTaskIncrementTick>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004892:	4b16      	ldr	r3, [pc, #88]	; (80048ec <xTaskResumeAll+0x12c>)
 8004894:	2201      	movs	r2, #1
 8004896:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3b01      	subs	r3, #1
 800489c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1f1      	bne.n	8004888 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80048a4:	4b12      	ldr	r3, [pc, #72]	; (80048f0 <xTaskResumeAll+0x130>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048aa:	4b10      	ldr	r3, [pc, #64]	; (80048ec <xTaskResumeAll+0x12c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d009      	beq.n	80048c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80048b2:	2301      	movs	r3, #1
 80048b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80048b6:	4b0f      	ldr	r3, [pc, #60]	; (80048f4 <xTaskResumeAll+0x134>)
 80048b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048c6:	f000 fb91 	bl	8004fec <vPortExitCritical>

	return xAlreadyYielded;
 80048ca:	68bb      	ldr	r3, [r7, #8]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	200005c8 	.word	0x200005c8
 80048d8:	200005a0 	.word	0x200005a0
 80048dc:	20000560 	.word	0x20000560
 80048e0:	200005a8 	.word	0x200005a8
 80048e4:	200004a4 	.word	0x200004a4
 80048e8:	200004a0 	.word	0x200004a0
 80048ec:	200005b4 	.word	0x200005b4
 80048f0:	200005b0 	.word	0x200005b0
 80048f4:	e000ed04 	.word	0xe000ed04

080048f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004902:	4b51      	ldr	r3, [pc, #324]	; (8004a48 <xTaskIncrementTick+0x150>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	f040 808d 	bne.w	8004a26 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800490c:	4b4f      	ldr	r3, [pc, #316]	; (8004a4c <xTaskIncrementTick+0x154>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3301      	adds	r3, #1
 8004912:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004914:	4a4d      	ldr	r2, [pc, #308]	; (8004a4c <xTaskIncrementTick+0x154>)
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d120      	bne.n	8004962 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004920:	4b4b      	ldr	r3, [pc, #300]	; (8004a50 <xTaskIncrementTick+0x158>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <xTaskIncrementTick+0x48>
	__asm volatile
 800492a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492e:	f383 8811 	msr	BASEPRI, r3
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	603b      	str	r3, [r7, #0]
}
 800493c:	bf00      	nop
 800493e:	e7fe      	b.n	800493e <xTaskIncrementTick+0x46>
 8004940:	4b43      	ldr	r3, [pc, #268]	; (8004a50 <xTaskIncrementTick+0x158>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	4b43      	ldr	r3, [pc, #268]	; (8004a54 <xTaskIncrementTick+0x15c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a41      	ldr	r2, [pc, #260]	; (8004a50 <xTaskIncrementTick+0x158>)
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	4a41      	ldr	r2, [pc, #260]	; (8004a54 <xTaskIncrementTick+0x15c>)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6013      	str	r3, [r2, #0]
 8004954:	4b40      	ldr	r3, [pc, #256]	; (8004a58 <xTaskIncrementTick+0x160>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3301      	adds	r3, #1
 800495a:	4a3f      	ldr	r2, [pc, #252]	; (8004a58 <xTaskIncrementTick+0x160>)
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	f000 f999 	bl	8004c94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004962:	4b3e      	ldr	r3, [pc, #248]	; (8004a5c <xTaskIncrementTick+0x164>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	429a      	cmp	r2, r3
 800496a:	d34d      	bcc.n	8004a08 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800496c:	4b38      	ldr	r3, [pc, #224]	; (8004a50 <xTaskIncrementTick+0x158>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <xTaskIncrementTick+0x82>
 8004976:	2301      	movs	r3, #1
 8004978:	e000      	b.n	800497c <xTaskIncrementTick+0x84>
 800497a:	2300      	movs	r3, #0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d004      	beq.n	800498a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004980:	4b36      	ldr	r3, [pc, #216]	; (8004a5c <xTaskIncrementTick+0x164>)
 8004982:	f04f 32ff 	mov.w	r2, #4294967295
 8004986:	601a      	str	r2, [r3, #0]
					break;
 8004988:	e03e      	b.n	8004a08 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800498a:	4b31      	ldr	r3, [pc, #196]	; (8004a50 <xTaskIncrementTick+0x158>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d203      	bcs.n	80049aa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80049a2:	4a2e      	ldr	r2, [pc, #184]	; (8004a5c <xTaskIncrementTick+0x164>)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6013      	str	r3, [r2, #0]
						break;
 80049a8:	e02e      	b.n	8004a08 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	3304      	adds	r3, #4
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7ff fcb0 	bl	8004314 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d004      	beq.n	80049c6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	3318      	adds	r3, #24
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff fca7 	bl	8004314 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ca:	2201      	movs	r2, #1
 80049cc:	409a      	lsls	r2, r3
 80049ce:	4b24      	ldr	r3, [pc, #144]	; (8004a60 <xTaskIncrementTick+0x168>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	4a22      	ldr	r2, [pc, #136]	; (8004a60 <xTaskIncrementTick+0x168>)
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4a1f      	ldr	r2, [pc, #124]	; (8004a64 <xTaskIncrementTick+0x16c>)
 80049e6:	441a      	add	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	3304      	adds	r3, #4
 80049ec:	4619      	mov	r1, r3
 80049ee:	4610      	mov	r0, r2
 80049f0:	f7ff fc35 	bl	800425e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f8:	4b1b      	ldr	r3, [pc, #108]	; (8004a68 <xTaskIncrementTick+0x170>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d3b4      	bcc.n	800496c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004a02:	2301      	movs	r3, #1
 8004a04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a06:	e7b1      	b.n	800496c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a08:	4b17      	ldr	r3, [pc, #92]	; (8004a68 <xTaskIncrementTick+0x170>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0e:	4915      	ldr	r1, [pc, #84]	; (8004a64 <xTaskIncrementTick+0x16c>)
 8004a10:	4613      	mov	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	440b      	add	r3, r1
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d907      	bls.n	8004a30 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004a20:	2301      	movs	r3, #1
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	e004      	b.n	8004a30 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004a26:	4b11      	ldr	r3, [pc, #68]	; (8004a6c <xTaskIncrementTick+0x174>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	4a0f      	ldr	r2, [pc, #60]	; (8004a6c <xTaskIncrementTick+0x174>)
 8004a2e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a30:	4b0f      	ldr	r3, [pc, #60]	; (8004a70 <xTaskIncrementTick+0x178>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004a3c:	697b      	ldr	r3, [r7, #20]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	200005c8 	.word	0x200005c8
 8004a4c:	200005a4 	.word	0x200005a4
 8004a50:	20000558 	.word	0x20000558
 8004a54:	2000055c 	.word	0x2000055c
 8004a58:	200005b8 	.word	0x200005b8
 8004a5c:	200005c0 	.word	0x200005c0
 8004a60:	200005a8 	.word	0x200005a8
 8004a64:	200004a4 	.word	0x200004a4
 8004a68:	200004a0 	.word	0x200004a0
 8004a6c:	200005b0 	.word	0x200005b0
 8004a70:	200005b4 	.word	0x200005b4

08004a74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a7a:	4b26      	ldr	r3, [pc, #152]	; (8004b14 <vTaskSwitchContext+0xa0>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a82:	4b25      	ldr	r3, [pc, #148]	; (8004b18 <vTaskSwitchContext+0xa4>)
 8004a84:	2201      	movs	r2, #1
 8004a86:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a88:	e03f      	b.n	8004b0a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004a8a:	4b23      	ldr	r3, [pc, #140]	; (8004b18 <vTaskSwitchContext+0xa4>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004a90:	4b22      	ldr	r3, [pc, #136]	; (8004b1c <vTaskSwitchContext+0xa8>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	fab3 f383 	clz	r3, r3
 8004a9c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004a9e:	7afb      	ldrb	r3, [r7, #11]
 8004aa0:	f1c3 031f 	rsb	r3, r3, #31
 8004aa4:	617b      	str	r3, [r7, #20]
 8004aa6:	491e      	ldr	r1, [pc, #120]	; (8004b20 <vTaskSwitchContext+0xac>)
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10a      	bne.n	8004ad0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	607b      	str	r3, [r7, #4]
}
 8004acc:	bf00      	nop
 8004ace:	e7fe      	b.n	8004ace <vTaskSwitchContext+0x5a>
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4a11      	ldr	r2, [pc, #68]	; (8004b20 <vTaskSwitchContext+0xac>)
 8004adc:	4413      	add	r3, r2
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	605a      	str	r2, [r3, #4]
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	3308      	adds	r3, #8
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d104      	bne.n	8004b00 <vTaskSwitchContext+0x8c>
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	605a      	str	r2, [r3, #4]
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	4a07      	ldr	r2, [pc, #28]	; (8004b24 <vTaskSwitchContext+0xb0>)
 8004b08:	6013      	str	r3, [r2, #0]
}
 8004b0a:	bf00      	nop
 8004b0c:	371c      	adds	r7, #28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr
 8004b14:	200005c8 	.word	0x200005c8
 8004b18:	200005b4 	.word	0x200005b4
 8004b1c:	200005a8 	.word	0x200005a8
 8004b20:	200004a4 	.word	0x200004a4
 8004b24:	200004a0 	.word	0x200004a0

08004b28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b30:	f000 f852 	bl	8004bd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b34:	4b06      	ldr	r3, [pc, #24]	; (8004b50 <prvIdleTask+0x28>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d9f9      	bls.n	8004b30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b3c:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <prvIdleTask+0x2c>)
 8004b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b4c:	e7f0      	b.n	8004b30 <prvIdleTask+0x8>
 8004b4e:	bf00      	nop
 8004b50:	200004a4 	.word	0x200004a4
 8004b54:	e000ed04 	.word	0xe000ed04

08004b58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b5e:	2300      	movs	r3, #0
 8004b60:	607b      	str	r3, [r7, #4]
 8004b62:	e00c      	b.n	8004b7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4a12      	ldr	r2, [pc, #72]	; (8004bb8 <prvInitialiseTaskLists+0x60>)
 8004b70:	4413      	add	r3, r2
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7ff fb48 	bl	8004208 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	607b      	str	r3, [r7, #4]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b06      	cmp	r3, #6
 8004b82:	d9ef      	bls.n	8004b64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b84:	480d      	ldr	r0, [pc, #52]	; (8004bbc <prvInitialiseTaskLists+0x64>)
 8004b86:	f7ff fb3f 	bl	8004208 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b8a:	480d      	ldr	r0, [pc, #52]	; (8004bc0 <prvInitialiseTaskLists+0x68>)
 8004b8c:	f7ff fb3c 	bl	8004208 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b90:	480c      	ldr	r0, [pc, #48]	; (8004bc4 <prvInitialiseTaskLists+0x6c>)
 8004b92:	f7ff fb39 	bl	8004208 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b96:	480c      	ldr	r0, [pc, #48]	; (8004bc8 <prvInitialiseTaskLists+0x70>)
 8004b98:	f7ff fb36 	bl	8004208 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b9c:	480b      	ldr	r0, [pc, #44]	; (8004bcc <prvInitialiseTaskLists+0x74>)
 8004b9e:	f7ff fb33 	bl	8004208 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ba2:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <prvInitialiseTaskLists+0x78>)
 8004ba4:	4a05      	ldr	r2, [pc, #20]	; (8004bbc <prvInitialiseTaskLists+0x64>)
 8004ba6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ba8:	4b0a      	ldr	r3, [pc, #40]	; (8004bd4 <prvInitialiseTaskLists+0x7c>)
 8004baa:	4a05      	ldr	r2, [pc, #20]	; (8004bc0 <prvInitialiseTaskLists+0x68>)
 8004bac:	601a      	str	r2, [r3, #0]
}
 8004bae:	bf00      	nop
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	200004a4 	.word	0x200004a4
 8004bbc:	20000530 	.word	0x20000530
 8004bc0:	20000544 	.word	0x20000544
 8004bc4:	20000560 	.word	0x20000560
 8004bc8:	20000574 	.word	0x20000574
 8004bcc:	2000058c 	.word	0x2000058c
 8004bd0:	20000558 	.word	0x20000558
 8004bd4:	2000055c 	.word	0x2000055c

08004bd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bde:	e019      	b.n	8004c14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004be0:	f000 f9d4 	bl	8004f8c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004be4:	4b10      	ldr	r3, [pc, #64]	; (8004c28 <prvCheckTasksWaitingTermination+0x50>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7ff fb8f 	bl	8004314 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004bf6:	4b0d      	ldr	r3, [pc, #52]	; (8004c2c <prvCheckTasksWaitingTermination+0x54>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	4a0b      	ldr	r2, [pc, #44]	; (8004c2c <prvCheckTasksWaitingTermination+0x54>)
 8004bfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <prvCheckTasksWaitingTermination+0x58>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3b01      	subs	r3, #1
 8004c06:	4a0a      	ldr	r2, [pc, #40]	; (8004c30 <prvCheckTasksWaitingTermination+0x58>)
 8004c08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c0a:	f000 f9ef 	bl	8004fec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f810 	bl	8004c34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c14:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <prvCheckTasksWaitingTermination+0x58>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e1      	bne.n	8004be0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c1c:	bf00      	nop
 8004c1e:	bf00      	nop
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	20000574 	.word	0x20000574
 8004c2c:	200005a0 	.word	0x200005a0
 8004c30:	20000588 	.word	0x20000588

08004c34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d108      	bne.n	8004c58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fb24 	bl	8005298 <vPortFree>
				vPortFree( pxTCB );
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fb21 	bl	8005298 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c56:	e018      	b.n	8004c8a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d103      	bne.n	8004c6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 fb18 	bl	8005298 <vPortFree>
	}
 8004c68:	e00f      	b.n	8004c8a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d00a      	beq.n	8004c8a <prvDeleteTCB+0x56>
	__asm volatile
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	60fb      	str	r3, [r7, #12]
}
 8004c86:	bf00      	nop
 8004c88:	e7fe      	b.n	8004c88 <prvDeleteTCB+0x54>
	}
 8004c8a:	bf00      	nop
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c9a:	4b0e      	ldr	r3, [pc, #56]	; (8004cd4 <prvResetNextTaskUnblockTime+0x40>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <prvResetNextTaskUnblockTime+0x14>
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e000      	b.n	8004caa <prvResetNextTaskUnblockTime+0x16>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d004      	beq.n	8004cb8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cae:	4b0a      	ldr	r3, [pc, #40]	; (8004cd8 <prvResetNextTaskUnblockTime+0x44>)
 8004cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004cb6:	e008      	b.n	8004cca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004cb8:	4b06      	ldr	r3, [pc, #24]	; (8004cd4 <prvResetNextTaskUnblockTime+0x40>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	4a04      	ldr	r2, [pc, #16]	; (8004cd8 <prvResetNextTaskUnblockTime+0x44>)
 8004cc8:	6013      	str	r3, [r2, #0]
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr
 8004cd4:	20000558 	.word	0x20000558
 8004cd8:	200005c0 	.word	0x200005c0

08004cdc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ce6:	4b29      	ldr	r3, [pc, #164]	; (8004d8c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cec:	4b28      	ldr	r3, [pc, #160]	; (8004d90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7ff fb0e 	bl	8004314 <uxListRemove>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10b      	bne.n	8004d16 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004cfe:	4b24      	ldr	r3, [pc, #144]	; (8004d90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d04:	2201      	movs	r2, #1
 8004d06:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0a:	43da      	mvns	r2, r3
 8004d0c:	4b21      	ldr	r3, [pc, #132]	; (8004d94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4013      	ands	r3, r2
 8004d12:	4a20      	ldr	r2, [pc, #128]	; (8004d94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d14:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1c:	d10a      	bne.n	8004d34 <prvAddCurrentTaskToDelayedList+0x58>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d007      	beq.n	8004d34 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d24:	4b1a      	ldr	r3, [pc, #104]	; (8004d90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3304      	adds	r3, #4
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	481a      	ldr	r0, [pc, #104]	; (8004d98 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004d2e:	f7ff fa96 	bl	800425e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d32:	e026      	b.n	8004d82 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4413      	add	r3, r2
 8004d3a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d3c:	4b14      	ldr	r3, [pc, #80]	; (8004d90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d209      	bcs.n	8004d60 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d4c:	4b13      	ldr	r3, [pc, #76]	; (8004d9c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	4b0f      	ldr	r3, [pc, #60]	; (8004d90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3304      	adds	r3, #4
 8004d56:	4619      	mov	r1, r3
 8004d58:	4610      	mov	r0, r2
 8004d5a:	f7ff faa3 	bl	80042a4 <vListInsert>
}
 8004d5e:	e010      	b.n	8004d82 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d60:	4b0f      	ldr	r3, [pc, #60]	; (8004da0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	4b0a      	ldr	r3, [pc, #40]	; (8004d90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	f7ff fa99 	bl	80042a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d72:	4b0c      	ldr	r3, [pc, #48]	; (8004da4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d202      	bcs.n	8004d82 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004d7c:	4a09      	ldr	r2, [pc, #36]	; (8004da4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	6013      	str	r3, [r2, #0]
}
 8004d82:	bf00      	nop
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	200005a4 	.word	0x200005a4
 8004d90:	200004a0 	.word	0x200004a0
 8004d94:	200005a8 	.word	0x200005a8
 8004d98:	2000058c 	.word	0x2000058c
 8004d9c:	2000055c 	.word	0x2000055c
 8004da0:	20000558 	.word	0x20000558
 8004da4:	200005c0 	.word	0x200005c0

08004da8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	3b04      	subs	r3, #4
 8004db8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004dc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	3b04      	subs	r3, #4
 8004dc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f023 0201 	bic.w	r2, r3, #1
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	3b04      	subs	r3, #4
 8004dd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004dd8:	4a08      	ldr	r2, [pc, #32]	; (8004dfc <pxPortInitialiseStack+0x54>)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	3b14      	subs	r3, #20
 8004de2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	3b20      	subs	r3, #32
 8004dee:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004df0:	68fb      	ldr	r3, [r7, #12]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bc80      	pop	{r7}
 8004dfa:	4770      	bx	lr
 8004dfc:	08004e01 	.word	0x08004e01

08004e00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004e06:	2300      	movs	r3, #0
 8004e08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e0a:	4b12      	ldr	r3, [pc, #72]	; (8004e54 <prvTaskExitError+0x54>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e12:	d00a      	beq.n	8004e2a <prvTaskExitError+0x2a>
	__asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	60fb      	str	r3, [r7, #12]
}
 8004e26:	bf00      	nop
 8004e28:	e7fe      	b.n	8004e28 <prvTaskExitError+0x28>
	__asm volatile
 8004e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2e:	f383 8811 	msr	BASEPRI, r3
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	60bb      	str	r3, [r7, #8]
}
 8004e3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e3e:	bf00      	nop
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0fc      	beq.n	8004e40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e46:	bf00      	nop
 8004e48:	bf00      	nop
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bc80      	pop	{r7}
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	2000003c 	.word	0x2000003c
	...

08004e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e60:	4b07      	ldr	r3, [pc, #28]	; (8004e80 <pxCurrentTCBConst2>)
 8004e62:	6819      	ldr	r1, [r3, #0]
 8004e64:	6808      	ldr	r0, [r1, #0]
 8004e66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e6a:	f380 8809 	msr	PSP, r0
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f04f 0000 	mov.w	r0, #0
 8004e76:	f380 8811 	msr	BASEPRI, r0
 8004e7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004e7e:	4770      	bx	lr

08004e80 <pxCurrentTCBConst2>:
 8004e80:	200004a0 	.word	0x200004a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e84:	bf00      	nop
 8004e86:	bf00      	nop

08004e88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004e88:	4806      	ldr	r0, [pc, #24]	; (8004ea4 <prvPortStartFirstTask+0x1c>)
 8004e8a:	6800      	ldr	r0, [r0, #0]
 8004e8c:	6800      	ldr	r0, [r0, #0]
 8004e8e:	f380 8808 	msr	MSP, r0
 8004e92:	b662      	cpsie	i
 8004e94:	b661      	cpsie	f
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	df00      	svc	0
 8004ea0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004ea2:	bf00      	nop
 8004ea4:	e000ed08 	.word	0xe000ed08

08004ea8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004eae:	4b32      	ldr	r3, [pc, #200]	; (8004f78 <xPortStartScheduler+0xd0>)
 8004eb0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	22ff      	movs	r2, #255	; 0xff
 8004ebe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ec8:	78fb      	ldrb	r3, [r7, #3]
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	4b2a      	ldr	r3, [pc, #168]	; (8004f7c <xPortStartScheduler+0xd4>)
 8004ed4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ed6:	4b2a      	ldr	r3, [pc, #168]	; (8004f80 <xPortStartScheduler+0xd8>)
 8004ed8:	2207      	movs	r2, #7
 8004eda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004edc:	e009      	b.n	8004ef2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004ede:	4b28      	ldr	r3, [pc, #160]	; (8004f80 <xPortStartScheduler+0xd8>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	4a26      	ldr	r2, [pc, #152]	; (8004f80 <xPortStartScheduler+0xd8>)
 8004ee6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ee8:	78fb      	ldrb	r3, [r7, #3]
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ef2:	78fb      	ldrb	r3, [r7, #3]
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efa:	2b80      	cmp	r3, #128	; 0x80
 8004efc:	d0ef      	beq.n	8004ede <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004efe:	4b20      	ldr	r3, [pc, #128]	; (8004f80 <xPortStartScheduler+0xd8>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f1c3 0307 	rsb	r3, r3, #7
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d00a      	beq.n	8004f20 <xPortStartScheduler+0x78>
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	60bb      	str	r3, [r7, #8]
}
 8004f1c:	bf00      	nop
 8004f1e:	e7fe      	b.n	8004f1e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f20:	4b17      	ldr	r3, [pc, #92]	; (8004f80 <xPortStartScheduler+0xd8>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	021b      	lsls	r3, r3, #8
 8004f26:	4a16      	ldr	r2, [pc, #88]	; (8004f80 <xPortStartScheduler+0xd8>)
 8004f28:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f2a:	4b15      	ldr	r3, [pc, #84]	; (8004f80 <xPortStartScheduler+0xd8>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f32:	4a13      	ldr	r2, [pc, #76]	; (8004f80 <xPortStartScheduler+0xd8>)
 8004f34:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f3e:	4b11      	ldr	r3, [pc, #68]	; (8004f84 <xPortStartScheduler+0xdc>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a10      	ldr	r2, [pc, #64]	; (8004f84 <xPortStartScheduler+0xdc>)
 8004f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f4a:	4b0e      	ldr	r3, [pc, #56]	; (8004f84 <xPortStartScheduler+0xdc>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a0d      	ldr	r2, [pc, #52]	; (8004f84 <xPortStartScheduler+0xdc>)
 8004f50:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f54:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f56:	f000 f8b9 	bl	80050cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f5a:	4b0b      	ldr	r3, [pc, #44]	; (8004f88 <xPortStartScheduler+0xe0>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f60:	f7ff ff92 	bl	8004e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f64:	f7ff fd86 	bl	8004a74 <vTaskSwitchContext>
	prvTaskExitError();
 8004f68:	f7ff ff4a 	bl	8004e00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	e000e400 	.word	0xe000e400
 8004f7c:	200005cc 	.word	0x200005cc
 8004f80:	200005d0 	.word	0x200005d0
 8004f84:	e000ed20 	.word	0xe000ed20
 8004f88:	2000003c 	.word	0x2000003c

08004f8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
	__asm volatile
 8004f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	607b      	str	r3, [r7, #4]
}
 8004fa4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004fa6:	4b0f      	ldr	r3, [pc, #60]	; (8004fe4 <vPortEnterCritical+0x58>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3301      	adds	r3, #1
 8004fac:	4a0d      	ldr	r2, [pc, #52]	; (8004fe4 <vPortEnterCritical+0x58>)
 8004fae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004fb0:	4b0c      	ldr	r3, [pc, #48]	; (8004fe4 <vPortEnterCritical+0x58>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d10f      	bne.n	8004fd8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004fb8:	4b0b      	ldr	r3, [pc, #44]	; (8004fe8 <vPortEnterCritical+0x5c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <vPortEnterCritical+0x4c>
	__asm volatile
 8004fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	603b      	str	r3, [r7, #0]
}
 8004fd4:	bf00      	nop
 8004fd6:	e7fe      	b.n	8004fd6 <vPortEnterCritical+0x4a>
	}
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bc80      	pop	{r7}
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	2000003c 	.word	0x2000003c
 8004fe8:	e000ed04 	.word	0xe000ed04

08004fec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ff2:	4b11      	ldr	r3, [pc, #68]	; (8005038 <vPortExitCritical+0x4c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10a      	bne.n	8005010 <vPortExitCritical+0x24>
	__asm volatile
 8004ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffe:	f383 8811 	msr	BASEPRI, r3
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	607b      	str	r3, [r7, #4]
}
 800500c:	bf00      	nop
 800500e:	e7fe      	b.n	800500e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005010:	4b09      	ldr	r3, [pc, #36]	; (8005038 <vPortExitCritical+0x4c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	3b01      	subs	r3, #1
 8005016:	4a08      	ldr	r2, [pc, #32]	; (8005038 <vPortExitCritical+0x4c>)
 8005018:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800501a:	4b07      	ldr	r3, [pc, #28]	; (8005038 <vPortExitCritical+0x4c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d105      	bne.n	800502e <vPortExitCritical+0x42>
 8005022:	2300      	movs	r3, #0
 8005024:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800502c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	bc80      	pop	{r7}
 8005036:	4770      	bx	lr
 8005038:	2000003c 	.word	0x2000003c
 800503c:	00000000 	.word	0x00000000

08005040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005040:	f3ef 8009 	mrs	r0, PSP
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	4b0d      	ldr	r3, [pc, #52]	; (8005080 <pxCurrentTCBConst>)
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005050:	6010      	str	r0, [r2, #0]
 8005052:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005056:	f04f 0050 	mov.w	r0, #80	; 0x50
 800505a:	f380 8811 	msr	BASEPRI, r0
 800505e:	f7ff fd09 	bl	8004a74 <vTaskSwitchContext>
 8005062:	f04f 0000 	mov.w	r0, #0
 8005066:	f380 8811 	msr	BASEPRI, r0
 800506a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800506e:	6819      	ldr	r1, [r3, #0]
 8005070:	6808      	ldr	r0, [r1, #0]
 8005072:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005076:	f380 8809 	msr	PSP, r0
 800507a:	f3bf 8f6f 	isb	sy
 800507e:	4770      	bx	lr

08005080 <pxCurrentTCBConst>:
 8005080:	200004a0 	.word	0x200004a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005084:	bf00      	nop
 8005086:	bf00      	nop

08005088 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	607b      	str	r3, [r7, #4]
}
 80050a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050a2:	f7ff fc29 	bl	80048f8 <xTaskIncrementTick>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d003      	beq.n	80050b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050ac:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <SysTick_Handler+0x40>)
 80050ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	2300      	movs	r3, #0
 80050b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	f383 8811 	msr	BASEPRI, r3
}
 80050be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80050c0:	bf00      	nop
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	e000ed04 	.word	0xe000ed04

080050cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050d0:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <vPortSetupTimerInterrupt+0x30>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050d6:	4b0a      	ldr	r3, [pc, #40]	; (8005100 <vPortSetupTimerInterrupt+0x34>)
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050dc:	4b09      	ldr	r3, [pc, #36]	; (8005104 <vPortSetupTimerInterrupt+0x38>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a09      	ldr	r2, [pc, #36]	; (8005108 <vPortSetupTimerInterrupt+0x3c>)
 80050e2:	fba2 2303 	umull	r2, r3, r2, r3
 80050e6:	099b      	lsrs	r3, r3, #6
 80050e8:	4a08      	ldr	r2, [pc, #32]	; (800510c <vPortSetupTimerInterrupt+0x40>)
 80050ea:	3b01      	subs	r3, #1
 80050ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050ee:	4b03      	ldr	r3, [pc, #12]	; (80050fc <vPortSetupTimerInterrupt+0x30>)
 80050f0:	2207      	movs	r2, #7
 80050f2:	601a      	str	r2, [r3, #0]
}
 80050f4:	bf00      	nop
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr
 80050fc:	e000e010 	.word	0xe000e010
 8005100:	e000e018 	.word	0xe000e018
 8005104:	20000030 	.word	0x20000030
 8005108:	10624dd3 	.word	0x10624dd3
 800510c:	e000e014 	.word	0xe000e014

08005110 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08a      	sub	sp, #40	; 0x28
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005118:	2300      	movs	r3, #0
 800511a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800511c:	f7ff fb42 	bl	80047a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005120:	4b58      	ldr	r3, [pc, #352]	; (8005284 <pvPortMalloc+0x174>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005128:	f000 f910 	bl	800534c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800512c:	4b56      	ldr	r3, [pc, #344]	; (8005288 <pvPortMalloc+0x178>)
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4013      	ands	r3, r2
 8005134:	2b00      	cmp	r3, #0
 8005136:	f040 808e 	bne.w	8005256 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01d      	beq.n	800517c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005140:	2208      	movs	r2, #8
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4413      	add	r3, r2
 8005146:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	2b00      	cmp	r3, #0
 8005150:	d014      	beq.n	800517c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f023 0307 	bic.w	r3, r3, #7
 8005158:	3308      	adds	r3, #8
 800515a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f003 0307 	and.w	r3, r3, #7
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <pvPortMalloc+0x6c>
	__asm volatile
 8005166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	617b      	str	r3, [r7, #20]
}
 8005178:	bf00      	nop
 800517a:	e7fe      	b.n	800517a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d069      	beq.n	8005256 <pvPortMalloc+0x146>
 8005182:	4b42      	ldr	r3, [pc, #264]	; (800528c <pvPortMalloc+0x17c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	429a      	cmp	r2, r3
 800518a:	d864      	bhi.n	8005256 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800518c:	4b40      	ldr	r3, [pc, #256]	; (8005290 <pvPortMalloc+0x180>)
 800518e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005190:	4b3f      	ldr	r3, [pc, #252]	; (8005290 <pvPortMalloc+0x180>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005196:	e004      	b.n	80051a2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d903      	bls.n	80051b4 <pvPortMalloc+0xa4>
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1f1      	bne.n	8005198 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051b4:	4b33      	ldr	r3, [pc, #204]	; (8005284 <pvPortMalloc+0x174>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d04b      	beq.n	8005256 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2208      	movs	r2, #8
 80051c4:	4413      	add	r3, r2
 80051c6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	1ad2      	subs	r2, r2, r3
 80051d8:	2308      	movs	r3, #8
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	429a      	cmp	r2, r3
 80051de:	d91f      	bls.n	8005220 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4413      	add	r3, r2
 80051e6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <pvPortMalloc+0xf8>
	__asm volatile
 80051f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	613b      	str	r3, [r7, #16]
}
 8005204:	bf00      	nop
 8005206:	e7fe      	b.n	8005206 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	1ad2      	subs	r2, r2, r3
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800521a:	69b8      	ldr	r0, [r7, #24]
 800521c:	f000 f8f8 	bl	8005410 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005220:	4b1a      	ldr	r3, [pc, #104]	; (800528c <pvPortMalloc+0x17c>)
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	4a18      	ldr	r2, [pc, #96]	; (800528c <pvPortMalloc+0x17c>)
 800522c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800522e:	4b17      	ldr	r3, [pc, #92]	; (800528c <pvPortMalloc+0x17c>)
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	4b18      	ldr	r3, [pc, #96]	; (8005294 <pvPortMalloc+0x184>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d203      	bcs.n	8005242 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800523a:	4b14      	ldr	r3, [pc, #80]	; (800528c <pvPortMalloc+0x17c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a15      	ldr	r2, [pc, #84]	; (8005294 <pvPortMalloc+0x184>)
 8005240:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	4b10      	ldr	r3, [pc, #64]	; (8005288 <pvPortMalloc+0x178>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	431a      	orrs	r2, r3
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005256:	f7ff fab3 	bl	80047c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00a      	beq.n	800527a <pvPortMalloc+0x16a>
	__asm volatile
 8005264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	60fb      	str	r3, [r7, #12]
}
 8005276:	bf00      	nop
 8005278:	e7fe      	b.n	8005278 <pvPortMalloc+0x168>
	return pvReturn;
 800527a:	69fb      	ldr	r3, [r7, #28]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3728      	adds	r7, #40	; 0x28
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	200011dc 	.word	0x200011dc
 8005288:	200011e8 	.word	0x200011e8
 800528c:	200011e0 	.word	0x200011e0
 8005290:	200011d4 	.word	0x200011d4
 8005294:	200011e4 	.word	0x200011e4

08005298 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d048      	beq.n	800533c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052aa:	2308      	movs	r3, #8
 80052ac:	425b      	negs	r3, r3
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4413      	add	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	4b21      	ldr	r3, [pc, #132]	; (8005344 <vPortFree+0xac>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4013      	ands	r3, r2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10a      	bne.n	80052dc <vPortFree+0x44>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	60fb      	str	r3, [r7, #12]
}
 80052d8:	bf00      	nop
 80052da:	e7fe      	b.n	80052da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00a      	beq.n	80052fa <vPortFree+0x62>
	__asm volatile
 80052e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	60bb      	str	r3, [r7, #8]
}
 80052f6:	bf00      	nop
 80052f8:	e7fe      	b.n	80052f8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	4b11      	ldr	r3, [pc, #68]	; (8005344 <vPortFree+0xac>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4013      	ands	r3, r2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d019      	beq.n	800533c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d115      	bne.n	800533c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <vPortFree+0xac>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	43db      	mvns	r3, r3
 800531a:	401a      	ands	r2, r3
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005320:	f7ff fa40 	bl	80047a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	4b07      	ldr	r3, [pc, #28]	; (8005348 <vPortFree+0xb0>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4413      	add	r3, r2
 800532e:	4a06      	ldr	r2, [pc, #24]	; (8005348 <vPortFree+0xb0>)
 8005330:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005332:	6938      	ldr	r0, [r7, #16]
 8005334:	f000 f86c 	bl	8005410 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005338:	f7ff fa42 	bl	80047c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800533c:	bf00      	nop
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	200011e8 	.word	0x200011e8
 8005348:	200011e0 	.word	0x200011e0

0800534c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005352:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005356:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005358:	4b27      	ldr	r3, [pc, #156]	; (80053f8 <prvHeapInit+0xac>)
 800535a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f003 0307 	and.w	r3, r3, #7
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00c      	beq.n	8005380 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	3307      	adds	r3, #7
 800536a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0307 	bic.w	r3, r3, #7
 8005372:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	4a1f      	ldr	r2, [pc, #124]	; (80053f8 <prvHeapInit+0xac>)
 800537c:	4413      	add	r3, r2
 800537e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005384:	4a1d      	ldr	r2, [pc, #116]	; (80053fc <prvHeapInit+0xb0>)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800538a:	4b1c      	ldr	r3, [pc, #112]	; (80053fc <prvHeapInit+0xb0>)
 800538c:	2200      	movs	r2, #0
 800538e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	4413      	add	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005398:	2208      	movs	r2, #8
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	1a9b      	subs	r3, r3, r2
 800539e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0307 	bic.w	r3, r3, #7
 80053a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4a15      	ldr	r2, [pc, #84]	; (8005400 <prvHeapInit+0xb4>)
 80053ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80053ae:	4b14      	ldr	r3, [pc, #80]	; (8005400 <prvHeapInit+0xb4>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2200      	movs	r2, #0
 80053b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80053b6:	4b12      	ldr	r3, [pc, #72]	; (8005400 <prvHeapInit+0xb4>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2200      	movs	r2, #0
 80053bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	1ad2      	subs	r2, r2, r3
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053cc:	4b0c      	ldr	r3, [pc, #48]	; (8005400 <prvHeapInit+0xb4>)
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	4a0a      	ldr	r2, [pc, #40]	; (8005404 <prvHeapInit+0xb8>)
 80053da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	4a09      	ldr	r2, [pc, #36]	; (8005408 <prvHeapInit+0xbc>)
 80053e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053e4:	4b09      	ldr	r3, [pc, #36]	; (800540c <prvHeapInit+0xc0>)
 80053e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80053ea:	601a      	str	r2, [r3, #0]
}
 80053ec:	bf00      	nop
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bc80      	pop	{r7}
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	200005d4 	.word	0x200005d4
 80053fc:	200011d4 	.word	0x200011d4
 8005400:	200011dc 	.word	0x200011dc
 8005404:	200011e4 	.word	0x200011e4
 8005408:	200011e0 	.word	0x200011e0
 800540c:	200011e8 	.word	0x200011e8

08005410 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005418:	4b27      	ldr	r3, [pc, #156]	; (80054b8 <prvInsertBlockIntoFreeList+0xa8>)
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	e002      	b.n	8005424 <prvInsertBlockIntoFreeList+0x14>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	429a      	cmp	r2, r3
 800542c:	d8f7      	bhi.n	800541e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	4413      	add	r3, r2
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	429a      	cmp	r2, r3
 800543e:	d108      	bne.n	8005452 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	441a      	add	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	441a      	add	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	429a      	cmp	r2, r3
 8005464:	d118      	bne.n	8005498 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	4b14      	ldr	r3, [pc, #80]	; (80054bc <prvInsertBlockIntoFreeList+0xac>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	429a      	cmp	r2, r3
 8005470:	d00d      	beq.n	800548e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	441a      	add	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	e008      	b.n	80054a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800548e:	4b0b      	ldr	r3, [pc, #44]	; (80054bc <prvInsertBlockIntoFreeList+0xac>)
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	e003      	b.n	80054a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d002      	beq.n	80054ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054ae:	bf00      	nop
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr
 80054b8:	200011d4 	.word	0x200011d4
 80054bc:	200011dc 	.word	0x200011dc

080054c0 <__libc_init_array>:
 80054c0:	b570      	push	{r4, r5, r6, lr}
 80054c2:	2600      	movs	r6, #0
 80054c4:	4d0c      	ldr	r5, [pc, #48]	; (80054f8 <__libc_init_array+0x38>)
 80054c6:	4c0d      	ldr	r4, [pc, #52]	; (80054fc <__libc_init_array+0x3c>)
 80054c8:	1b64      	subs	r4, r4, r5
 80054ca:	10a4      	asrs	r4, r4, #2
 80054cc:	42a6      	cmp	r6, r4
 80054ce:	d109      	bne.n	80054e4 <__libc_init_array+0x24>
 80054d0:	f000 f822 	bl	8005518 <_init>
 80054d4:	2600      	movs	r6, #0
 80054d6:	4d0a      	ldr	r5, [pc, #40]	; (8005500 <__libc_init_array+0x40>)
 80054d8:	4c0a      	ldr	r4, [pc, #40]	; (8005504 <__libc_init_array+0x44>)
 80054da:	1b64      	subs	r4, r4, r5
 80054dc:	10a4      	asrs	r4, r4, #2
 80054de:	42a6      	cmp	r6, r4
 80054e0:	d105      	bne.n	80054ee <__libc_init_array+0x2e>
 80054e2:	bd70      	pop	{r4, r5, r6, pc}
 80054e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054e8:	4798      	blx	r3
 80054ea:	3601      	adds	r6, #1
 80054ec:	e7ee      	b.n	80054cc <__libc_init_array+0xc>
 80054ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80054f2:	4798      	blx	r3
 80054f4:	3601      	adds	r6, #1
 80054f6:	e7f2      	b.n	80054de <__libc_init_array+0x1e>
 80054f8:	080055b0 	.word	0x080055b0
 80054fc:	080055b0 	.word	0x080055b0
 8005500:	080055b0 	.word	0x080055b0
 8005504:	080055b4 	.word	0x080055b4

08005508 <memset>:
 8005508:	4603      	mov	r3, r0
 800550a:	4402      	add	r2, r0
 800550c:	4293      	cmp	r3, r2
 800550e:	d100      	bne.n	8005512 <memset+0xa>
 8005510:	4770      	bx	lr
 8005512:	f803 1b01 	strb.w	r1, [r3], #1
 8005516:	e7f9      	b.n	800550c <memset+0x4>

08005518 <_init>:
 8005518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551a:	bf00      	nop
 800551c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800551e:	bc08      	pop	{r3}
 8005520:	469e      	mov	lr, r3
 8005522:	4770      	bx	lr

08005524 <_fini>:
 8005524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005526:	bf00      	nop
 8005528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800552a:	bc08      	pop	{r3}
 800552c:	469e      	mov	lr, r3
 800552e:	4770      	bx	lr
