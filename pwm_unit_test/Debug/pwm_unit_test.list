
pwm_unit_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003660  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003770  08003770  00013770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037c8  080037c8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080037c8  080037c8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037c8  080037c8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037c8  080037c8  000137c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037cc  080037cc  000137cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080037d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001058  20000010  080037e0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001068  080037e0  00021068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3a6  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a9  00000000  00000000  0002d3df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  0002f888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  00030690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001809b  00000000  00000000  00031380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e750  00000000  00000000  0004941b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f239  00000000  00000000  00057b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6da4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003950  00000000  00000000  000e6df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003758 	.word	0x08003758

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003758 	.word	0x08003758

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000080 	.word	0x20000080

08000180 <driveSpeed>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void driveSpeed(int dir , int pwmVal){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
 8000188:	6039      	str	r1, [r7, #0]
	if (dir == -1){
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000190:	d108      	bne.n	80001a4 <driveSpeed+0x24>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pwmVal);
 8000192:	4b11      	ldr	r3, [pc, #68]	; (80001d8 <driveSpeed+0x58>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	683a      	ldr	r2, [r7, #0]
 8000198:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 800019a:	4b0f      	ldr	r3, [pc, #60]	; (80001d8 <driveSpeed+0x58>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	2200      	movs	r2, #0
 80001a0:	641a      	str	r2, [r3, #64]	; 0x40
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
	}
}
 80001a2:	e013      	b.n	80001cc <driveSpeed+0x4c>
	else if (dir == 1){
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2b01      	cmp	r3, #1
 80001a8:	d108      	bne.n	80001bc <driveSpeed+0x3c>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80001aa:	4b0b      	ldr	r3, [pc, #44]	; (80001d8 <driveSpeed+0x58>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	2200      	movs	r2, #0
 80001b0:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pwmVal);
 80001b2:	4b09      	ldr	r3, [pc, #36]	; (80001d8 <driveSpeed+0x58>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	683a      	ldr	r2, [r7, #0]
 80001b8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80001ba:	e007      	b.n	80001cc <driveSpeed+0x4c>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80001bc:	4b06      	ldr	r3, [pc, #24]	; (80001d8 <driveSpeed+0x58>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2200      	movs	r2, #0
 80001c2:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <driveSpeed+0x58>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	2200      	movs	r2, #0
 80001ca:	641a      	str	r2, [r3, #64]	; 0x40
}
 80001cc:	bf00      	nop
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000280 	.word	0x20000280

080001dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001dc:	b5b0      	push	{r4, r5, r7, lr}
 80001de:	b088      	sub	sp, #32
 80001e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e2:	f000 fa8d 	bl	8000700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e6:	f000 f827 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ea:	f000 f8eb 	bl	80003c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001ee:	f000 f869 	bl	80002c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 80001f2:	2108      	movs	r1, #8
 80001f4:	480d      	ldr	r0, [pc, #52]	; (800022c <main+0x50>)
 80001f6:	f001 fa49 	bl	800168c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 80001fa:	210c      	movs	r1, #12
 80001fc:	480b      	ldr	r0, [pc, #44]	; (800022c <main+0x50>)
 80001fe:	f001 fa45 	bl	800168c <HAL_TIM_PWM_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 128);
 8000202:	4b0b      	ldr	r3, [pc, #44]	; (8000230 <main+0x54>)
 8000204:	1d3c      	adds	r4, r7, #4
 8000206:	461d      	mov	r5, r3
 8000208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800020a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800020c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000210:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	2100      	movs	r1, #0
 8000218:	4618      	mov	r0, r3
 800021a:	f002 f8b9 	bl	8002390 <osThreadCreate>
 800021e:	4603      	mov	r3, r0
 8000220:	4a04      	ldr	r2, [pc, #16]	; (8000234 <main+0x58>)
 8000222:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000224:	f002 f8ad 	bl	8002382 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000228:	e7fe      	b.n	8000228 <main+0x4c>
 800022a:	bf00      	nop
 800022c:	20000280 	.word	0x20000280
 8000230:	0800377c 	.word	0x0800377c
 8000234:	200002c8 	.word	0x200002c8

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b090      	sub	sp, #64	; 0x40
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0318 	add.w	r3, r7, #24
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f003 fa7e 	bl	8003748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]
 8000258:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800025a:	2301      	movs	r3, #1
 800025c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800025e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000262:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000268:	2301      	movs	r3, #1
 800026a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026c:	2302      	movs	r3, #2
 800026e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000270:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000274:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000276:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800027a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027c:	f107 0318 	add.w	r3, r7, #24
 8000280:	4618      	mov	r0, r3
 8000282:	f000 fcd3 	bl	8000c2c <HAL_RCC_OscConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800028c:	f000 f8e4 	bl	8000458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000290:	230f      	movs	r3, #15
 8000292:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000294:	2302      	movs	r3, #2
 8000296:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800029c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2102      	movs	r1, #2
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 ff40 	bl	8001130 <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002b6:	f000 f8cf 	bl	8000458 <Error_Handler>
  }
}
 80002ba:	bf00      	nop
 80002bc:	3740      	adds	r7, #64	; 0x40
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b08e      	sub	sp, #56	; 0x38
 80002c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002d8:	f107 0320 	add.w	r3, r7, #32
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
 80002ee:	611a      	str	r2, [r3, #16]
 80002f0:	615a      	str	r2, [r3, #20]
 80002f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002f4:	4b32      	ldr	r3, [pc, #200]	; (80003c0 <MX_TIM2_Init+0xfc>)
 80002f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80002fc:	4b30      	ldr	r3, [pc, #192]	; (80003c0 <MX_TIM2_Init+0xfc>)
 80002fe:	2247      	movs	r2, #71	; 0x47
 8000300:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000302:	4b2f      	ldr	r3, [pc, #188]	; (80003c0 <MX_TIM2_Init+0xfc>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000308:	4b2d      	ldr	r3, [pc, #180]	; (80003c0 <MX_TIM2_Init+0xfc>)
 800030a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800030e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000310:	4b2b      	ldr	r3, [pc, #172]	; (80003c0 <MX_TIM2_Init+0xfc>)
 8000312:	2200      	movs	r2, #0
 8000314:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000316:	4b2a      	ldr	r3, [pc, #168]	; (80003c0 <MX_TIM2_Init+0xfc>)
 8000318:	2200      	movs	r2, #0
 800031a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800031c:	4828      	ldr	r0, [pc, #160]	; (80003c0 <MX_TIM2_Init+0xfc>)
 800031e:	f001 f8bb 	bl	8001498 <HAL_TIM_Base_Init>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000328:	f000 f896 	bl	8000458 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800032c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000330:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000332:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000336:	4619      	mov	r1, r3
 8000338:	4821      	ldr	r0, [pc, #132]	; (80003c0 <MX_TIM2_Init+0xfc>)
 800033a:	f001 fc0f 	bl	8001b5c <HAL_TIM_ConfigClockSource>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000344:	f000 f888 	bl	8000458 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000348:	481d      	ldr	r0, [pc, #116]	; (80003c0 <MX_TIM2_Init+0xfc>)
 800034a:	f001 f947 	bl	80015dc <HAL_TIM_PWM_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000354:	f000 f880 	bl	8000458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000358:	2300      	movs	r3, #0
 800035a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800035c:	2300      	movs	r3, #0
 800035e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000360:	f107 0320 	add.w	r3, r7, #32
 8000364:	4619      	mov	r1, r3
 8000366:	4816      	ldr	r0, [pc, #88]	; (80003c0 <MX_TIM2_Init+0xfc>)
 8000368:	f001 ff84 	bl	8002274 <HAL_TIMEx_MasterConfigSynchronization>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000372:	f000 f871 	bl	8000458 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000376:	2360      	movs	r3, #96	; 0x60
 8000378:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800037a:	2300      	movs	r3, #0
 800037c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800037e:	2300      	movs	r3, #0
 8000380:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2208      	movs	r2, #8
 800038a:	4619      	mov	r1, r3
 800038c:	480c      	ldr	r0, [pc, #48]	; (80003c0 <MX_TIM2_Init+0xfc>)
 800038e:	f001 fb27 	bl	80019e0 <HAL_TIM_PWM_ConfigChannel>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000398:	f000 f85e 	bl	8000458 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	220c      	movs	r2, #12
 80003a0:	4619      	mov	r1, r3
 80003a2:	4807      	ldr	r0, [pc, #28]	; (80003c0 <MX_TIM2_Init+0xfc>)
 80003a4:	f001 fb1c 	bl	80019e0 <HAL_TIM_PWM_ConfigChannel>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80003ae:	f000 f853 	bl	8000458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003b2:	4803      	ldr	r0, [pc, #12]	; (80003c0 <MX_TIM2_Init+0xfc>)
 80003b4:	f000 f8aa 	bl	800050c <HAL_TIM_MspPostInit>

}
 80003b8:	bf00      	nop
 80003ba:	3738      	adds	r7, #56	; 0x38
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20000280 	.word	0x20000280

080003c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <MX_GPIO_Init+0x40>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	4a0d      	ldr	r2, [pc, #52]	; (8000404 <MX_GPIO_Init+0x40>)
 80003d0:	f043 0320 	orr.w	r3, r3, #32
 80003d4:	6193      	str	r3, [r2, #24]
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <MX_GPIO_Init+0x40>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	f003 0320 	and.w	r3, r3, #32
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e2:	4b08      	ldr	r3, [pc, #32]	; (8000404 <MX_GPIO_Init+0x40>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	4a07      	ldr	r2, [pc, #28]	; (8000404 <MX_GPIO_Init+0x40>)
 80003e8:	f043 0304 	orr.w	r3, r3, #4
 80003ec:	6193      	str	r3, [r2, #24]
 80003ee:	4b05      	ldr	r3, [pc, #20]	; (8000404 <MX_GPIO_Init+0x40>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	f003 0304 	and.w	r3, r3, #4
 80003f6:	603b      	str	r3, [r7, #0]
 80003f8:	683b      	ldr	r3, [r7, #0]

}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	40021000 	.word	0x40021000

08000408 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	//Max speed <=> pwm = 1000
	driveSpeed(dir, pwm);
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <StartDefaultTask+0x24>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	461a      	mov	r2, r3
 8000416:	4b06      	ldr	r3, [pc, #24]	; (8000430 <StartDefaultTask+0x28>)
 8000418:	881b      	ldrh	r3, [r3, #0]
 800041a:	4619      	mov	r1, r3
 800041c:	4610      	mov	r0, r2
 800041e:	f7ff feaf 	bl	8000180 <driveSpeed>
    osDelay(1);
 8000422:	2001      	movs	r0, #1
 8000424:	f002 f800 	bl	8002428 <osDelay>
	driveSpeed(dir, pwm);
 8000428:	e7f2      	b.n	8000410 <StartDefaultTask+0x8>
 800042a:	bf00      	nop
 800042c:	200002cc 	.word	0x200002cc
 8000430:	200002ce 	.word	0x200002ce

08000434 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a04      	ldr	r2, [pc, #16]	; (8000454 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d101      	bne.n	800044a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000446:	f000 f971 	bl	800072c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40000800 	.word	0x40000800

08000458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800045c:	b672      	cpsid	i
}
 800045e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000460:	e7fe      	b.n	8000460 <Error_Handler+0x8>
	...

08000464 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800046a:	4b18      	ldr	r3, [pc, #96]	; (80004cc <HAL_MspInit+0x68>)
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	4a17      	ldr	r2, [pc, #92]	; (80004cc <HAL_MspInit+0x68>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	6193      	str	r3, [r2, #24]
 8000476:	4b15      	ldr	r3, [pc, #84]	; (80004cc <HAL_MspInit+0x68>)
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	f003 0301 	and.w	r3, r3, #1
 800047e:	60bb      	str	r3, [r7, #8]
 8000480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000482:	4b12      	ldr	r3, [pc, #72]	; (80004cc <HAL_MspInit+0x68>)
 8000484:	69db      	ldr	r3, [r3, #28]
 8000486:	4a11      	ldr	r2, [pc, #68]	; (80004cc <HAL_MspInit+0x68>)
 8000488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800048c:	61d3      	str	r3, [r2, #28]
 800048e:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <HAL_MspInit+0x68>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800049a:	2200      	movs	r2, #0
 800049c:	210f      	movs	r1, #15
 800049e:	f06f 0001 	mvn.w	r0, #1
 80004a2:	f000 fa14 	bl	80008ce <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004a6:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <HAL_MspInit+0x6c>)
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <HAL_MspInit+0x6c>)
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c2:	bf00      	nop
 80004c4:	3710      	adds	r7, #16
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40010000 	.word	0x40010000

080004d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004e4:	d10b      	bne.n	80004fe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004e6:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_TIM_Base_MspInit+0x34>)
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_TIM_Base_MspInit+0x34>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	61d3      	str	r3, [r2, #28]
 80004f2:	4b05      	ldr	r3, [pc, #20]	; (8000508 <HAL_TIM_Base_MspInit+0x34>)
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr
 8000508:	40021000 	.word	0x40021000

0800050c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b088      	sub	sp, #32
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000514:	f107 0310 	add.w	r3, r7, #16
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800052a:	d117      	bne.n	800055c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800052c:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <HAL_TIM_MspPostInit+0x58>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a0c      	ldr	r2, [pc, #48]	; (8000564 <HAL_TIM_MspPostInit+0x58>)
 8000532:	f043 0304 	orr.w	r3, r3, #4
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <HAL_TIM_MspPostInit+0x58>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f003 0304 	and.w	r3, r3, #4
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8000544:	230c      	movs	r3, #12
 8000546:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000548:	2302      	movs	r3, #2
 800054a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2302      	movs	r3, #2
 800054e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000550:	f107 0310 	add.w	r3, r7, #16
 8000554:	4619      	mov	r1, r3
 8000556:	4804      	ldr	r0, [pc, #16]	; (8000568 <HAL_TIM_MspPostInit+0x5c>)
 8000558:	f000 f9e4 	bl	8000924 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800055c:	bf00      	nop
 800055e:	3720      	adds	r7, #32
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40021000 	.word	0x40021000
 8000568:	40010800 	.word	0x40010800

0800056c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08e      	sub	sp, #56	; 0x38
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000574:	2300      	movs	r3, #0
 8000576:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000578:	2300      	movs	r3, #0
 800057a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800057c:	2300      	movs	r3, #0
 800057e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000582:	4b34      	ldr	r3, [pc, #208]	; (8000654 <HAL_InitTick+0xe8>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	4a33      	ldr	r2, [pc, #204]	; (8000654 <HAL_InitTick+0xe8>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	61d3      	str	r3, [r2, #28]
 800058e:	4b31      	ldr	r3, [pc, #196]	; (8000654 <HAL_InitTick+0xe8>)
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800059a:	f107 0210 	add.w	r2, r7, #16
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4611      	mov	r1, r2
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 ff29 	bl	80013fc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80005aa:	6a3b      	ldr	r3, [r7, #32]
 80005ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80005ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d103      	bne.n	80005bc <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005b4:	f000 ff0e 	bl	80013d4 <HAL_RCC_GetPCLK1Freq>
 80005b8:	6378      	str	r0, [r7, #52]	; 0x34
 80005ba:	e004      	b.n	80005c6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80005bc:	f000 ff0a 	bl	80013d4 <HAL_RCC_GetPCLK1Freq>
 80005c0:	4603      	mov	r3, r0
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005c8:	4a23      	ldr	r2, [pc, #140]	; (8000658 <HAL_InitTick+0xec>)
 80005ca:	fba2 2303 	umull	r2, r3, r2, r3
 80005ce:	0c9b      	lsrs	r3, r3, #18
 80005d0:	3b01      	subs	r3, #1
 80005d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80005d4:	4b21      	ldr	r3, [pc, #132]	; (800065c <HAL_InitTick+0xf0>)
 80005d6:	4a22      	ldr	r2, [pc, #136]	; (8000660 <HAL_InitTick+0xf4>)
 80005d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80005da:	4b20      	ldr	r3, [pc, #128]	; (800065c <HAL_InitTick+0xf0>)
 80005dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005e0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80005e2:	4a1e      	ldr	r2, [pc, #120]	; (800065c <HAL_InitTick+0xf0>)
 80005e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005e6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80005e8:	4b1c      	ldr	r3, [pc, #112]	; (800065c <HAL_InitTick+0xf0>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ee:	4b1b      	ldr	r3, [pc, #108]	; (800065c <HAL_InitTick+0xf0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f4:	4b19      	ldr	r3, [pc, #100]	; (800065c <HAL_InitTick+0xf0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80005fa:	4818      	ldr	r0, [pc, #96]	; (800065c <HAL_InitTick+0xf0>)
 80005fc:	f000 ff4c 	bl	8001498 <HAL_TIM_Base_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000606:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800060a:	2b00      	cmp	r3, #0
 800060c:	d11b      	bne.n	8000646 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800060e:	4813      	ldr	r0, [pc, #76]	; (800065c <HAL_InitTick+0xf0>)
 8000610:	f000 ff92 	bl	8001538 <HAL_TIM_Base_Start_IT>
 8000614:	4603      	mov	r3, r0
 8000616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800061a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800061e:	2b00      	cmp	r3, #0
 8000620:	d111      	bne.n	8000646 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000622:	201e      	movs	r0, #30
 8000624:	f000 f96f 	bl	8000906 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b0f      	cmp	r3, #15
 800062c:	d808      	bhi.n	8000640 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800062e:	2200      	movs	r2, #0
 8000630:	6879      	ldr	r1, [r7, #4]
 8000632:	201e      	movs	r0, #30
 8000634:	f000 f94b 	bl	80008ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000638:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <HAL_InitTick+0xf8>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6013      	str	r3, [r2, #0]
 800063e:	e002      	b.n	8000646 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000640:	2301      	movs	r3, #1
 8000642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000646:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800064a:	4618      	mov	r0, r3
 800064c:	3738      	adds	r7, #56	; 0x38
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40021000 	.word	0x40021000
 8000658:	431bde83 	.word	0x431bde83
 800065c:	200002d0 	.word	0x200002d0
 8000660:	40000800 	.word	0x40000800
 8000664:	20000004 	.word	0x20000004

08000668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800066c:	e7fe      	b.n	800066c <NMI_Handler+0x4>

0800066e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000672:	e7fe      	b.n	8000672 <HardFault_Handler+0x4>

08000674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000678:	e7fe      	b.n	8000678 <MemManage_Handler+0x4>

0800067a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800067e:	e7fe      	b.n	800067e <BusFault_Handler+0x4>

08000680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <UsageFault_Handler+0x4>

08000686 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
	...

08000694 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000698:	4802      	ldr	r0, [pc, #8]	; (80006a4 <TIM4_IRQHandler+0x10>)
 800069a:	f001 f899 	bl	80017d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200002d0 	.word	0x200002d0

080006a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b4:	480c      	ldr	r0, [pc, #48]	; (80006e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006b6:	490d      	ldr	r1, [pc, #52]	; (80006ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006b8:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006bc:	e002      	b.n	80006c4 <LoopCopyDataInit>

080006be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c2:	3304      	adds	r3, #4

080006c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c8:	d3f9      	bcc.n	80006be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ca:	4a0a      	ldr	r2, [pc, #40]	; (80006f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006cc:	4c0a      	ldr	r4, [pc, #40]	; (80006f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d0:	e001      	b.n	80006d6 <LoopFillZerobss>

080006d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d4:	3204      	adds	r2, #4

080006d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d8:	d3fb      	bcc.n	80006d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006da:	f7ff ffe5 	bl	80006a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006de:	f003 f80f 	bl	8003700 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006e2:	f7ff fd7b 	bl	80001dc <main>
  bx lr
 80006e6:	4770      	bx	lr
  ldr r0, =_sdata
 80006e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80006f0:	080037d0 	.word	0x080037d0
  ldr r2, =_sbss
 80006f4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80006f8:	20001068 	.word	0x20001068

080006fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006fc:	e7fe      	b.n	80006fc <ADC1_2_IRQHandler>
	...

08000700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000704:	4b08      	ldr	r3, [pc, #32]	; (8000728 <HAL_Init+0x28>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a07      	ldr	r2, [pc, #28]	; (8000728 <HAL_Init+0x28>)
 800070a:	f043 0310 	orr.w	r3, r3, #16
 800070e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000710:	2003      	movs	r0, #3
 8000712:	f000 f8d1 	bl	80008b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000716:	200f      	movs	r0, #15
 8000718:	f7ff ff28 	bl	800056c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800071c:	f7ff fea2 	bl	8000464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000720:	2300      	movs	r3, #0
}
 8000722:	4618      	mov	r0, r3
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40022000 	.word	0x40022000

0800072c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <HAL_IncTick+0x1c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	461a      	mov	r2, r3
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <HAL_IncTick+0x20>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4413      	add	r3, r2
 800073c:	4a03      	ldr	r2, [pc, #12]	; (800074c <HAL_IncTick+0x20>)
 800073e:	6013      	str	r3, [r2, #0]
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	20000008 	.word	0x20000008
 800074c:	20000318 	.word	0x20000318

08000750 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  return uwTick;
 8000754:	4b02      	ldr	r3, [pc, #8]	; (8000760 <HAL_GetTick+0x10>)
 8000756:	681b      	ldr	r3, [r3, #0]
}
 8000758:	4618      	mov	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	20000318 	.word	0x20000318

08000764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000780:	4013      	ands	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800078c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000796:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	60d3      	str	r3, [r2, #12]
}
 800079c:	bf00      	nop
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <__NVIC_GetPriorityGrouping+0x18>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	0a1b      	lsrs	r3, r3, #8
 80007b6:	f003 0307 	and.w	r3, r3, #7
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	db0b      	blt.n	80007f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	f003 021f 	and.w	r2, r3, #31
 80007e0:	4906      	ldr	r1, [pc, #24]	; (80007fc <__NVIC_EnableIRQ+0x34>)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	095b      	lsrs	r3, r3, #5
 80007e8:	2001      	movs	r0, #1
 80007ea:	fa00 f202 	lsl.w	r2, r0, r2
 80007ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	e000e100 	.word	0xe000e100

08000800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	6039      	str	r1, [r7, #0]
 800080a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800080c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000810:	2b00      	cmp	r3, #0
 8000812:	db0a      	blt.n	800082a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	b2da      	uxtb	r2, r3
 8000818:	490c      	ldr	r1, [pc, #48]	; (800084c <__NVIC_SetPriority+0x4c>)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	0112      	lsls	r2, r2, #4
 8000820:	b2d2      	uxtb	r2, r2
 8000822:	440b      	add	r3, r1
 8000824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000828:	e00a      	b.n	8000840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4908      	ldr	r1, [pc, #32]	; (8000850 <__NVIC_SetPriority+0x50>)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	f003 030f 	and.w	r3, r3, #15
 8000836:	3b04      	subs	r3, #4
 8000838:	0112      	lsls	r2, r2, #4
 800083a:	b2d2      	uxtb	r2, r2
 800083c:	440b      	add	r3, r1
 800083e:	761a      	strb	r2, [r3, #24]
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000e100 	.word	0xe000e100
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000854:	b480      	push	{r7}
 8000856:	b089      	sub	sp, #36	; 0x24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	f1c3 0307 	rsb	r3, r3, #7
 800086e:	2b04      	cmp	r3, #4
 8000870:	bf28      	it	cs
 8000872:	2304      	movcs	r3, #4
 8000874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	3304      	adds	r3, #4
 800087a:	2b06      	cmp	r3, #6
 800087c:	d902      	bls.n	8000884 <NVIC_EncodePriority+0x30>
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	3b03      	subs	r3, #3
 8000882:	e000      	b.n	8000886 <NVIC_EncodePriority+0x32>
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000888:	f04f 32ff 	mov.w	r2, #4294967295
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	43da      	mvns	r2, r3
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	401a      	ands	r2, r3
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800089c:	f04f 31ff 	mov.w	r1, #4294967295
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	43d9      	mvns	r1, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ac:	4313      	orrs	r3, r2
         );
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3724      	adds	r7, #36	; 0x24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f7ff ff4f 	bl	8000764 <__NVIC_SetPriorityGrouping>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b086      	sub	sp, #24
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	4603      	mov	r3, r0
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
 80008da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008e0:	f7ff ff64 	bl	80007ac <__NVIC_GetPriorityGrouping>
 80008e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	68b9      	ldr	r1, [r7, #8]
 80008ea:	6978      	ldr	r0, [r7, #20]
 80008ec:	f7ff ffb2 	bl	8000854 <NVIC_EncodePriority>
 80008f0:	4602      	mov	r2, r0
 80008f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f6:	4611      	mov	r1, r2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff81 	bl	8000800 <__NVIC_SetPriority>
}
 80008fe:	bf00      	nop
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	4603      	mov	r3, r0
 800090e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff57 	bl	80007c8 <__NVIC_EnableIRQ>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000924:	b480      	push	{r7}
 8000926:	b08b      	sub	sp, #44	; 0x2c
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000936:	e169      	b.n	8000c0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000938:	2201      	movs	r2, #1
 800093a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	69fa      	ldr	r2, [r7, #28]
 8000948:	4013      	ands	r3, r2
 800094a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	429a      	cmp	r2, r3
 8000952:	f040 8158 	bne.w	8000c06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	4a9a      	ldr	r2, [pc, #616]	; (8000bc4 <HAL_GPIO_Init+0x2a0>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d05e      	beq.n	8000a1e <HAL_GPIO_Init+0xfa>
 8000960:	4a98      	ldr	r2, [pc, #608]	; (8000bc4 <HAL_GPIO_Init+0x2a0>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d875      	bhi.n	8000a52 <HAL_GPIO_Init+0x12e>
 8000966:	4a98      	ldr	r2, [pc, #608]	; (8000bc8 <HAL_GPIO_Init+0x2a4>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d058      	beq.n	8000a1e <HAL_GPIO_Init+0xfa>
 800096c:	4a96      	ldr	r2, [pc, #600]	; (8000bc8 <HAL_GPIO_Init+0x2a4>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d86f      	bhi.n	8000a52 <HAL_GPIO_Init+0x12e>
 8000972:	4a96      	ldr	r2, [pc, #600]	; (8000bcc <HAL_GPIO_Init+0x2a8>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d052      	beq.n	8000a1e <HAL_GPIO_Init+0xfa>
 8000978:	4a94      	ldr	r2, [pc, #592]	; (8000bcc <HAL_GPIO_Init+0x2a8>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d869      	bhi.n	8000a52 <HAL_GPIO_Init+0x12e>
 800097e:	4a94      	ldr	r2, [pc, #592]	; (8000bd0 <HAL_GPIO_Init+0x2ac>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d04c      	beq.n	8000a1e <HAL_GPIO_Init+0xfa>
 8000984:	4a92      	ldr	r2, [pc, #584]	; (8000bd0 <HAL_GPIO_Init+0x2ac>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d863      	bhi.n	8000a52 <HAL_GPIO_Init+0x12e>
 800098a:	4a92      	ldr	r2, [pc, #584]	; (8000bd4 <HAL_GPIO_Init+0x2b0>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d046      	beq.n	8000a1e <HAL_GPIO_Init+0xfa>
 8000990:	4a90      	ldr	r2, [pc, #576]	; (8000bd4 <HAL_GPIO_Init+0x2b0>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d85d      	bhi.n	8000a52 <HAL_GPIO_Init+0x12e>
 8000996:	2b12      	cmp	r3, #18
 8000998:	d82a      	bhi.n	80009f0 <HAL_GPIO_Init+0xcc>
 800099a:	2b12      	cmp	r3, #18
 800099c:	d859      	bhi.n	8000a52 <HAL_GPIO_Init+0x12e>
 800099e:	a201      	add	r2, pc, #4	; (adr r2, 80009a4 <HAL_GPIO_Init+0x80>)
 80009a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a4:	08000a1f 	.word	0x08000a1f
 80009a8:	080009f9 	.word	0x080009f9
 80009ac:	08000a0b 	.word	0x08000a0b
 80009b0:	08000a4d 	.word	0x08000a4d
 80009b4:	08000a53 	.word	0x08000a53
 80009b8:	08000a53 	.word	0x08000a53
 80009bc:	08000a53 	.word	0x08000a53
 80009c0:	08000a53 	.word	0x08000a53
 80009c4:	08000a53 	.word	0x08000a53
 80009c8:	08000a53 	.word	0x08000a53
 80009cc:	08000a53 	.word	0x08000a53
 80009d0:	08000a53 	.word	0x08000a53
 80009d4:	08000a53 	.word	0x08000a53
 80009d8:	08000a53 	.word	0x08000a53
 80009dc:	08000a53 	.word	0x08000a53
 80009e0:	08000a53 	.word	0x08000a53
 80009e4:	08000a53 	.word	0x08000a53
 80009e8:	08000a01 	.word	0x08000a01
 80009ec:	08000a15 	.word	0x08000a15
 80009f0:	4a79      	ldr	r2, [pc, #484]	; (8000bd8 <HAL_GPIO_Init+0x2b4>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d013      	beq.n	8000a1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009f6:	e02c      	b.n	8000a52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	623b      	str	r3, [r7, #32]
          break;
 80009fe:	e029      	b.n	8000a54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	3304      	adds	r3, #4
 8000a06:	623b      	str	r3, [r7, #32]
          break;
 8000a08:	e024      	b.n	8000a54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	3308      	adds	r3, #8
 8000a10:	623b      	str	r3, [r7, #32]
          break;
 8000a12:	e01f      	b.n	8000a54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	330c      	adds	r3, #12
 8000a1a:	623b      	str	r3, [r7, #32]
          break;
 8000a1c:	e01a      	b.n	8000a54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d102      	bne.n	8000a2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a26:	2304      	movs	r3, #4
 8000a28:	623b      	str	r3, [r7, #32]
          break;
 8000a2a:	e013      	b.n	8000a54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d105      	bne.n	8000a40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a34:	2308      	movs	r3, #8
 8000a36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	69fa      	ldr	r2, [r7, #28]
 8000a3c:	611a      	str	r2, [r3, #16]
          break;
 8000a3e:	e009      	b.n	8000a54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a40:	2308      	movs	r3, #8
 8000a42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	69fa      	ldr	r2, [r7, #28]
 8000a48:	615a      	str	r2, [r3, #20]
          break;
 8000a4a:	e003      	b.n	8000a54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
          break;
 8000a50:	e000      	b.n	8000a54 <HAL_GPIO_Init+0x130>
          break;
 8000a52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	2bff      	cmp	r3, #255	; 0xff
 8000a58:	d801      	bhi.n	8000a5e <HAL_GPIO_Init+0x13a>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	e001      	b.n	8000a62 <HAL_GPIO_Init+0x13e>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	3304      	adds	r3, #4
 8000a62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	2bff      	cmp	r3, #255	; 0xff
 8000a68:	d802      	bhi.n	8000a70 <HAL_GPIO_Init+0x14c>
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	e002      	b.n	8000a76 <HAL_GPIO_Init+0x152>
 8000a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a72:	3b08      	subs	r3, #8
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	210f      	movs	r1, #15
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	fa01 f303 	lsl.w	r3, r1, r3
 8000a84:	43db      	mvns	r3, r3
 8000a86:	401a      	ands	r2, r3
 8000a88:	6a39      	ldr	r1, [r7, #32]
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a90:	431a      	orrs	r2, r3
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	f000 80b1 	beq.w	8000c06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000aa4:	4b4d      	ldr	r3, [pc, #308]	; (8000bdc <HAL_GPIO_Init+0x2b8>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	4a4c      	ldr	r2, [pc, #304]	; (8000bdc <HAL_GPIO_Init+0x2b8>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6193      	str	r3, [r2, #24]
 8000ab0:	4b4a      	ldr	r3, [pc, #296]	; (8000bdc <HAL_GPIO_Init+0x2b8>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000abc:	4a48      	ldr	r2, [pc, #288]	; (8000be0 <HAL_GPIO_Init+0x2bc>)
 8000abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac0:	089b      	lsrs	r3, r3, #2
 8000ac2:	3302      	adds	r3, #2
 8000ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000acc:	f003 0303 	and.w	r3, r3, #3
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	220f      	movs	r2, #15
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	4013      	ands	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a40      	ldr	r2, [pc, #256]	; (8000be4 <HAL_GPIO_Init+0x2c0>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d013      	beq.n	8000b10 <HAL_GPIO_Init+0x1ec>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a3f      	ldr	r2, [pc, #252]	; (8000be8 <HAL_GPIO_Init+0x2c4>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d00d      	beq.n	8000b0c <HAL_GPIO_Init+0x1e8>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a3e      	ldr	r2, [pc, #248]	; (8000bec <HAL_GPIO_Init+0x2c8>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d007      	beq.n	8000b08 <HAL_GPIO_Init+0x1e4>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a3d      	ldr	r2, [pc, #244]	; (8000bf0 <HAL_GPIO_Init+0x2cc>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d101      	bne.n	8000b04 <HAL_GPIO_Init+0x1e0>
 8000b00:	2303      	movs	r3, #3
 8000b02:	e006      	b.n	8000b12 <HAL_GPIO_Init+0x1ee>
 8000b04:	2304      	movs	r3, #4
 8000b06:	e004      	b.n	8000b12 <HAL_GPIO_Init+0x1ee>
 8000b08:	2302      	movs	r3, #2
 8000b0a:	e002      	b.n	8000b12 <HAL_GPIO_Init+0x1ee>
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e000      	b.n	8000b12 <HAL_GPIO_Init+0x1ee>
 8000b10:	2300      	movs	r3, #0
 8000b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b14:	f002 0203 	and.w	r2, r2, #3
 8000b18:	0092      	lsls	r2, r2, #2
 8000b1a:	4093      	lsls	r3, r2
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b22:	492f      	ldr	r1, [pc, #188]	; (8000be0 <HAL_GPIO_Init+0x2bc>)
 8000b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b26:	089b      	lsrs	r3, r3, #2
 8000b28:	3302      	adds	r3, #2
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d006      	beq.n	8000b4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b3c:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	492c      	ldr	r1, [pc, #176]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	600b      	str	r3, [r1, #0]
 8000b48:	e006      	b.n	8000b58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b4a:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	43db      	mvns	r3, r3
 8000b52:	4928      	ldr	r1, [pc, #160]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b54:	4013      	ands	r3, r2
 8000b56:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d006      	beq.n	8000b72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b64:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b66:	685a      	ldr	r2, [r3, #4]
 8000b68:	4922      	ldr	r1, [pc, #136]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	604b      	str	r3, [r1, #4]
 8000b70:	e006      	b.n	8000b80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b72:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	491e      	ldr	r1, [pc, #120]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d006      	beq.n	8000b9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b8c:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b8e:	689a      	ldr	r2, [r3, #8]
 8000b90:	4918      	ldr	r1, [pc, #96]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	608b      	str	r3, [r1, #8]
 8000b98:	e006      	b.n	8000ba8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b9a:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	4914      	ldr	r1, [pc, #80]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d021      	beq.n	8000bf8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000bb6:	68da      	ldr	r2, [r3, #12]
 8000bb8:	490e      	ldr	r1, [pc, #56]	; (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	60cb      	str	r3, [r1, #12]
 8000bc0:	e021      	b.n	8000c06 <HAL_GPIO_Init+0x2e2>
 8000bc2:	bf00      	nop
 8000bc4:	10320000 	.word	0x10320000
 8000bc8:	10310000 	.word	0x10310000
 8000bcc:	10220000 	.word	0x10220000
 8000bd0:	10210000 	.word	0x10210000
 8000bd4:	10120000 	.word	0x10120000
 8000bd8:	10110000 	.word	0x10110000
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40010000 	.word	0x40010000
 8000be4:	40010800 	.word	0x40010800
 8000be8:	40010c00 	.word	0x40010c00
 8000bec:	40011000 	.word	0x40011000
 8000bf0:	40011400 	.word	0x40011400
 8000bf4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <HAL_GPIO_Init+0x304>)
 8000bfa:	68da      	ldr	r2, [r3, #12]
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	4909      	ldr	r1, [pc, #36]	; (8000c28 <HAL_GPIO_Init+0x304>)
 8000c02:	4013      	ands	r3, r2
 8000c04:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c08:	3301      	adds	r3, #1
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c12:	fa22 f303 	lsr.w	r3, r2, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f47f ae8e 	bne.w	8000938 <HAL_GPIO_Init+0x14>
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	bf00      	nop
 8000c20:	372c      	adds	r7, #44	; 0x2c
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	40010400 	.word	0x40010400

08000c2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d101      	bne.n	8000c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e272      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f000 8087 	beq.w	8000d5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c4c:	4b92      	ldr	r3, [pc, #584]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f003 030c 	and.w	r3, r3, #12
 8000c54:	2b04      	cmp	r3, #4
 8000c56:	d00c      	beq.n	8000c72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c58:	4b8f      	ldr	r3, [pc, #572]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f003 030c 	and.w	r3, r3, #12
 8000c60:	2b08      	cmp	r3, #8
 8000c62:	d112      	bne.n	8000c8a <HAL_RCC_OscConfig+0x5e>
 8000c64:	4b8c      	ldr	r3, [pc, #560]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c70:	d10b      	bne.n	8000c8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c72:	4b89      	ldr	r3, [pc, #548]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d06c      	beq.n	8000d58 <HAL_RCC_OscConfig+0x12c>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d168      	bne.n	8000d58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e24c      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c92:	d106      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x76>
 8000c94:	4b80      	ldr	r3, [pc, #512]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a7f      	ldr	r2, [pc, #508]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	e02e      	b.n	8000d00 <HAL_RCC_OscConfig+0xd4>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10c      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x98>
 8000caa:	4b7b      	ldr	r3, [pc, #492]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a7a      	ldr	r2, [pc, #488]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cb4:	6013      	str	r3, [r2, #0]
 8000cb6:	4b78      	ldr	r3, [pc, #480]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a77      	ldr	r2, [pc, #476]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	e01d      	b.n	8000d00 <HAL_RCC_OscConfig+0xd4>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ccc:	d10c      	bne.n	8000ce8 <HAL_RCC_OscConfig+0xbc>
 8000cce:	4b72      	ldr	r3, [pc, #456]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a71      	ldr	r2, [pc, #452]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	4b6f      	ldr	r3, [pc, #444]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a6e      	ldr	r2, [pc, #440]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	e00b      	b.n	8000d00 <HAL_RCC_OscConfig+0xd4>
 8000ce8:	4b6b      	ldr	r3, [pc, #428]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a6a      	ldr	r2, [pc, #424]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	4b68      	ldr	r3, [pc, #416]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a67      	ldr	r2, [pc, #412]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cfe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d013      	beq.n	8000d30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d08:	f7ff fd22 	bl	8000750 <HAL_GetTick>
 8000d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0e:	e008      	b.n	8000d22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d10:	f7ff fd1e 	bl	8000750 <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b64      	cmp	r3, #100	; 0x64
 8000d1c:	d901      	bls.n	8000d22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e200      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d22:	4b5d      	ldr	r3, [pc, #372]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d0f0      	beq.n	8000d10 <HAL_RCC_OscConfig+0xe4>
 8000d2e:	e014      	b.n	8000d5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d30:	f7ff fd0e 	bl	8000750 <HAL_GetTick>
 8000d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d36:	e008      	b.n	8000d4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d38:	f7ff fd0a 	bl	8000750 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	2b64      	cmp	r3, #100	; 0x64
 8000d44:	d901      	bls.n	8000d4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	e1ec      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d4a:	4b53      	ldr	r3, [pc, #332]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1f0      	bne.n	8000d38 <HAL_RCC_OscConfig+0x10c>
 8000d56:	e000      	b.n	8000d5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d063      	beq.n	8000e2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d66:	4b4c      	ldr	r3, [pc, #304]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 030c 	and.w	r3, r3, #12
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d00b      	beq.n	8000d8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d72:	4b49      	ldr	r3, [pc, #292]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 030c 	and.w	r3, r3, #12
 8000d7a:	2b08      	cmp	r3, #8
 8000d7c:	d11c      	bne.n	8000db8 <HAL_RCC_OscConfig+0x18c>
 8000d7e:	4b46      	ldr	r3, [pc, #280]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d116      	bne.n	8000db8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d8a:	4b43      	ldr	r3, [pc, #268]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d005      	beq.n	8000da2 <HAL_RCC_OscConfig+0x176>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	691b      	ldr	r3, [r3, #16]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d001      	beq.n	8000da2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e1c0      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da2:	4b3d      	ldr	r3, [pc, #244]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	4939      	ldr	r1, [pc, #228]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000db2:	4313      	orrs	r3, r2
 8000db4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000db6:	e03a      	b.n	8000e2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	691b      	ldr	r3, [r3, #16]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d020      	beq.n	8000e02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dc0:	4b36      	ldr	r3, [pc, #216]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc6:	f7ff fcc3 	bl	8000750 <HAL_GetTick>
 8000dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dcc:	e008      	b.n	8000de0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dce:	f7ff fcbf 	bl	8000750 <HAL_GetTick>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d901      	bls.n	8000de0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	e1a1      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de0:	4b2d      	ldr	r3, [pc, #180]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d0f0      	beq.n	8000dce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dec:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	4927      	ldr	r1, [pc, #156]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	600b      	str	r3, [r1, #0]
 8000e00:	e015      	b.n	8000e2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e02:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e08:	f7ff fca2 	bl	8000750 <HAL_GetTick>
 8000e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e0e:	e008      	b.n	8000e22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e10:	f7ff fc9e 	bl	8000750 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d901      	bls.n	8000e22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e180      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e22:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1f0      	bne.n	8000e10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0308 	and.w	r3, r3, #8
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d03a      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d019      	beq.n	8000e76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e42:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <HAL_RCC_OscConfig+0x274>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e48:	f7ff fc82 	bl	8000750 <HAL_GetTick>
 8000e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e4e:	e008      	b.n	8000e62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e50:	f7ff fc7e 	bl	8000750 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e160      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e62:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0f0      	beq.n	8000e50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f000 faf4 	bl	800145c <RCC_Delay>
 8000e74:	e01c      	b.n	8000eb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_RCC_OscConfig+0x274>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e7c:	f7ff fc68 	bl	8000750 <HAL_GetTick>
 8000e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e82:	e00f      	b.n	8000ea4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e84:	f7ff fc64 	bl	8000750 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d908      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e146      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
 8000e96:	bf00      	nop
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	42420000 	.word	0x42420000
 8000ea0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ea4:	4b92      	ldr	r3, [pc, #584]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea8:	f003 0302 	and.w	r3, r3, #2
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1e9      	bne.n	8000e84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f000 80a6 	beq.w	800100a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ec2:	4b8b      	ldr	r3, [pc, #556]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10d      	bne.n	8000eea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	4b88      	ldr	r3, [pc, #544]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	4a87      	ldr	r2, [pc, #540]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed8:	61d3      	str	r3, [r2, #28]
 8000eda:	4b85      	ldr	r3, [pc, #532]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eea:	4b82      	ldr	r3, [pc, #520]	; (80010f4 <HAL_RCC_OscConfig+0x4c8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d118      	bne.n	8000f28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ef6:	4b7f      	ldr	r3, [pc, #508]	; (80010f4 <HAL_RCC_OscConfig+0x4c8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a7e      	ldr	r2, [pc, #504]	; (80010f4 <HAL_RCC_OscConfig+0x4c8>)
 8000efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f02:	f7ff fc25 	bl	8000750 <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f08:	e008      	b.n	8000f1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f0a:	f7ff fc21 	bl	8000750 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b64      	cmp	r3, #100	; 0x64
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e103      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1c:	4b75      	ldr	r3, [pc, #468]	; (80010f4 <HAL_RCC_OscConfig+0x4c8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0f0      	beq.n	8000f0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d106      	bne.n	8000f3e <HAL_RCC_OscConfig+0x312>
 8000f30:	4b6f      	ldr	r3, [pc, #444]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f32:	6a1b      	ldr	r3, [r3, #32]
 8000f34:	4a6e      	ldr	r2, [pc, #440]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6213      	str	r3, [r2, #32]
 8000f3c:	e02d      	b.n	8000f9a <HAL_RCC_OscConfig+0x36e>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10c      	bne.n	8000f60 <HAL_RCC_OscConfig+0x334>
 8000f46:	4b6a      	ldr	r3, [pc, #424]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f48:	6a1b      	ldr	r3, [r3, #32]
 8000f4a:	4a69      	ldr	r2, [pc, #420]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f4c:	f023 0301 	bic.w	r3, r3, #1
 8000f50:	6213      	str	r3, [r2, #32]
 8000f52:	4b67      	ldr	r3, [pc, #412]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	4a66      	ldr	r2, [pc, #408]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f58:	f023 0304 	bic.w	r3, r3, #4
 8000f5c:	6213      	str	r3, [r2, #32]
 8000f5e:	e01c      	b.n	8000f9a <HAL_RCC_OscConfig+0x36e>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	2b05      	cmp	r3, #5
 8000f66:	d10c      	bne.n	8000f82 <HAL_RCC_OscConfig+0x356>
 8000f68:	4b61      	ldr	r3, [pc, #388]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f6a:	6a1b      	ldr	r3, [r3, #32]
 8000f6c:	4a60      	ldr	r2, [pc, #384]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f6e:	f043 0304 	orr.w	r3, r3, #4
 8000f72:	6213      	str	r3, [r2, #32]
 8000f74:	4b5e      	ldr	r3, [pc, #376]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	4a5d      	ldr	r2, [pc, #372]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	6213      	str	r3, [r2, #32]
 8000f80:	e00b      	b.n	8000f9a <HAL_RCC_OscConfig+0x36e>
 8000f82:	4b5b      	ldr	r3, [pc, #364]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f84:	6a1b      	ldr	r3, [r3, #32]
 8000f86:	4a5a      	ldr	r2, [pc, #360]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f88:	f023 0301 	bic.w	r3, r3, #1
 8000f8c:	6213      	str	r3, [r2, #32]
 8000f8e:	4b58      	ldr	r3, [pc, #352]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	6a1b      	ldr	r3, [r3, #32]
 8000f92:	4a57      	ldr	r2, [pc, #348]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f94:	f023 0304 	bic.w	r3, r3, #4
 8000f98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d015      	beq.n	8000fce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa2:	f7ff fbd5 	bl	8000750 <HAL_GetTick>
 8000fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fa8:	e00a      	b.n	8000fc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000faa:	f7ff fbd1 	bl	8000750 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e0b1      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fc0:	4b4b      	ldr	r3, [pc, #300]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000fc2:	6a1b      	ldr	r3, [r3, #32]
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0ee      	beq.n	8000faa <HAL_RCC_OscConfig+0x37e>
 8000fcc:	e014      	b.n	8000ff8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fce:	f7ff fbbf 	bl	8000750 <HAL_GetTick>
 8000fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fd4:	e00a      	b.n	8000fec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fd6:	f7ff fbbb 	bl	8000750 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e09b      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fec:	4b40      	ldr	r3, [pc, #256]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1ee      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000ff8:	7dfb      	ldrb	r3, [r7, #23]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d105      	bne.n	800100a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ffe:	4b3c      	ldr	r3, [pc, #240]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	4a3b      	ldr	r2, [pc, #236]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8001004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001008:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	2b00      	cmp	r3, #0
 8001010:	f000 8087 	beq.w	8001122 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001014:	4b36      	ldr	r3, [pc, #216]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 030c 	and.w	r3, r3, #12
 800101c:	2b08      	cmp	r3, #8
 800101e:	d061      	beq.n	80010e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	69db      	ldr	r3, [r3, #28]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d146      	bne.n	80010b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001028:	4b33      	ldr	r3, [pc, #204]	; (80010f8 <HAL_RCC_OscConfig+0x4cc>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102e:	f7ff fb8f 	bl	8000750 <HAL_GetTick>
 8001032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001034:	e008      	b.n	8001048 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001036:	f7ff fb8b 	bl	8000750 <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e06d      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001048:	4b29      	ldr	r3, [pc, #164]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1f0      	bne.n	8001036 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800105c:	d108      	bne.n	8001070 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800105e:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	4921      	ldr	r1, [pc, #132]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 800106c:	4313      	orrs	r3, r2
 800106e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001070:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a19      	ldr	r1, [r3, #32]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001080:	430b      	orrs	r3, r1
 8001082:	491b      	ldr	r1, [pc, #108]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8001084:	4313      	orrs	r3, r2
 8001086:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <HAL_RCC_OscConfig+0x4cc>)
 800108a:	2201      	movs	r2, #1
 800108c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108e:	f7ff fb5f 	bl	8000750 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001096:	f7ff fb5b 	bl	8000750 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e03d      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f0      	beq.n	8001096 <HAL_RCC_OscConfig+0x46a>
 80010b4:	e035      	b.n	8001122 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <HAL_RCC_OscConfig+0x4cc>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010bc:	f7ff fb48 	bl	8000750 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010c4:	f7ff fb44 	bl	8000750 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e026      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f0      	bne.n	80010c4 <HAL_RCC_OscConfig+0x498>
 80010e2:	e01e      	b.n	8001122 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69db      	ldr	r3, [r3, #28]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d107      	bne.n	80010fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e019      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40007000 	.word	0x40007000
 80010f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <HAL_RCC_OscConfig+0x500>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	429a      	cmp	r2, r3
 800110e:	d106      	bne.n	800111e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800111a:	429a      	cmp	r2, r3
 800111c:	d001      	beq.n	8001122 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40021000 	.word	0x40021000

08001130 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e0d0      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001144:	4b6a      	ldr	r3, [pc, #424]	; (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	429a      	cmp	r2, r3
 8001150:	d910      	bls.n	8001174 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001152:	4b67      	ldr	r3, [pc, #412]	; (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f023 0207 	bic.w	r2, r3, #7
 800115a:	4965      	ldr	r1, [pc, #404]	; (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	4313      	orrs	r3, r2
 8001160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001162:	4b63      	ldr	r3, [pc, #396]	; (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	429a      	cmp	r2, r3
 800116e:	d001      	beq.n	8001174 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e0b8      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d020      	beq.n	80011c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	2b00      	cmp	r3, #0
 800118a:	d005      	beq.n	8001198 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800118c:	4b59      	ldr	r3, [pc, #356]	; (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	4a58      	ldr	r2, [pc, #352]	; (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001192:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001196:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0308 	and.w	r3, r3, #8
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d005      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011a4:	4b53      	ldr	r3, [pc, #332]	; (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4a52      	ldr	r2, [pc, #328]	; (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011b0:	4b50      	ldr	r3, [pc, #320]	; (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	494d      	ldr	r1, [pc, #308]	; (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d040      	beq.n	8001250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d107      	bne.n	80011e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d6:	4b47      	ldr	r3, [pc, #284]	; (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d115      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e07f      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d107      	bne.n	80011fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ee:	4b41      	ldr	r3, [pc, #260]	; (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d109      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e073      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fe:	4b3d      	ldr	r3, [pc, #244]	; (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e06b      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800120e:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f023 0203 	bic.w	r2, r3, #3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	4936      	ldr	r1, [pc, #216]	; (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 800121c:	4313      	orrs	r3, r2
 800121e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001220:	f7ff fa96 	bl	8000750 <HAL_GetTick>
 8001224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001226:	e00a      	b.n	800123e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001228:	f7ff fa92 	bl	8000750 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	f241 3288 	movw	r2, #5000	; 0x1388
 8001236:	4293      	cmp	r3, r2
 8001238:	d901      	bls.n	800123e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e053      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800123e:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 020c 	and.w	r2, r3, #12
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	429a      	cmp	r2, r3
 800124e:	d1eb      	bne.n	8001228 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001250:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0307 	and.w	r3, r3, #7
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	429a      	cmp	r2, r3
 800125c:	d210      	bcs.n	8001280 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800125e:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f023 0207 	bic.w	r2, r3, #7
 8001266:	4922      	ldr	r1, [pc, #136]	; (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	4313      	orrs	r3, r2
 800126c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800126e:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	429a      	cmp	r2, r3
 800127a:	d001      	beq.n	8001280 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e032      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	2b00      	cmp	r3, #0
 800128a:	d008      	beq.n	800129e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	4916      	ldr	r1, [pc, #88]	; (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 800129a:	4313      	orrs	r3, r2
 800129c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d009      	beq.n	80012be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	490e      	ldr	r1, [pc, #56]	; (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012be:	f000 f821 	bl	8001304 <HAL_RCC_GetSysClockFreq>
 80012c2:	4602      	mov	r2, r0
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	091b      	lsrs	r3, r3, #4
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	490a      	ldr	r1, [pc, #40]	; (80012f8 <HAL_RCC_ClockConfig+0x1c8>)
 80012d0:	5ccb      	ldrb	r3, [r1, r3]
 80012d2:	fa22 f303 	lsr.w	r3, r2, r3
 80012d6:	4a09      	ldr	r2, [pc, #36]	; (80012fc <HAL_RCC_ClockConfig+0x1cc>)
 80012d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <HAL_RCC_ClockConfig+0x1d0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f944 	bl	800056c <HAL_InitTick>

  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40022000 	.word	0x40022000
 80012f4:	40021000 	.word	0x40021000
 80012f8:	080037b0 	.word	0x080037b0
 80012fc:	20000000 	.word	0x20000000
 8001300:	20000004 	.word	0x20000004

08001304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001304:	b490      	push	{r4, r7}
 8001306:	b08a      	sub	sp, #40	; 0x28
 8001308:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800130a:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <HAL_RCC_GetSysClockFreq+0xac>)
 800130c:	1d3c      	adds	r4, r7, #4
 800130e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001310:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001314:	f240 2301 	movw	r3, #513	; 0x201
 8001318:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
 800131e:	2300      	movs	r3, #0
 8001320:	61bb      	str	r3, [r7, #24]
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800132a:	2300      	movs	r3, #0
 800132c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800132e:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	2b04      	cmp	r3, #4
 800133c:	d002      	beq.n	8001344 <HAL_RCC_GetSysClockFreq+0x40>
 800133e:	2b08      	cmp	r3, #8
 8001340:	d003      	beq.n	800134a <HAL_RCC_GetSysClockFreq+0x46>
 8001342:	e02b      	b.n	800139c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001344:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001346:	623b      	str	r3, [r7, #32]
      break;
 8001348:	e02b      	b.n	80013a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	0c9b      	lsrs	r3, r3, #18
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	3328      	adds	r3, #40	; 0x28
 8001354:	443b      	add	r3, r7
 8001356:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800135a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d012      	beq.n	800138c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	0c5b      	lsrs	r3, r3, #17
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	3328      	adds	r3, #40	; 0x28
 8001372:	443b      	add	r3, r7
 8001374:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001378:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800137e:	fb03 f202 	mul.w	r2, r3, r2
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	fbb2 f3f3 	udiv	r3, r2, r3
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
 800138a:	e004      	b.n	8001396 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001390:	fb02 f303 	mul.w	r3, r2, r3
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	623b      	str	r3, [r7, #32]
      break;
 800139a:	e002      	b.n	80013a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800139e:	623b      	str	r3, [r7, #32]
      break;
 80013a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013a2:	6a3b      	ldr	r3, [r7, #32]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3728      	adds	r7, #40	; 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc90      	pop	{r4, r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	08003798 	.word	0x08003798
 80013b4:	40021000 	.word	0x40021000
 80013b8:	007a1200 	.word	0x007a1200
 80013bc:	003d0900 	.word	0x003d0900

080013c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013c4:	4b02      	ldr	r3, [pc, #8]	; (80013d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	20000000 	.word	0x20000000

080013d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013d8:	f7ff fff2 	bl	80013c0 <HAL_RCC_GetHCLKFreq>
 80013dc:	4602      	mov	r2, r0
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	0a1b      	lsrs	r3, r3, #8
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	4903      	ldr	r1, [pc, #12]	; (80013f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013ea:	5ccb      	ldrb	r3, [r1, r3]
 80013ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40021000 	.word	0x40021000
 80013f8:	080037c0 	.word	0x080037c0

080013fc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	220f      	movs	r2, #15
 800140a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <HAL_RCC_GetClockConfig+0x58>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0203 	and.w	r2, r3, #3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001418:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <HAL_RCC_GetClockConfig+0x58>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <HAL_RCC_GetClockConfig+0x58>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <HAL_RCC_GetClockConfig+0x58>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	08db      	lsrs	r3, r3, #3
 8001436:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_RCC_GetClockConfig+0x5c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0207 	and.w	r2, r3, #7
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	40021000 	.word	0x40021000
 8001458:	40022000 	.word	0x40022000

0800145c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <RCC_Delay+0x34>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <RCC_Delay+0x38>)
 800146a:	fba2 2303 	umull	r2, r3, r2, r3
 800146e:	0a5b      	lsrs	r3, r3, #9
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	fb02 f303 	mul.w	r3, r2, r3
 8001476:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001478:	bf00      	nop
  }
  while (Delay --);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	1e5a      	subs	r2, r3, #1
 800147e:	60fa      	str	r2, [r7, #12]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1f9      	bne.n	8001478 <RCC_Delay+0x1c>
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	20000000 	.word	0x20000000
 8001494:	10624dd3 	.word	0x10624dd3

08001498 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e041      	b.n	800152e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d106      	bne.n	80014c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff f808 	bl	80004d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2202      	movs	r2, #2
 80014c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3304      	adds	r3, #4
 80014d4:	4619      	mov	r1, r3
 80014d6:	4610      	mov	r0, r2
 80014d8:	f000 fc28 	bl	8001d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b01      	cmp	r3, #1
 800154a:	d001      	beq.n	8001550 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e03a      	b.n	80015c6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2202      	movs	r2, #2
 8001554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0201 	orr.w	r2, r2, #1
 8001566:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a18      	ldr	r2, [pc, #96]	; (80015d0 <HAL_TIM_Base_Start_IT+0x98>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00e      	beq.n	8001590 <HAL_TIM_Base_Start_IT+0x58>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800157a:	d009      	beq.n	8001590 <HAL_TIM_Base_Start_IT+0x58>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d004      	beq.n	8001590 <HAL_TIM_Base_Start_IT+0x58>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a13      	ldr	r2, [pc, #76]	; (80015d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d111      	bne.n	80015b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2b06      	cmp	r3, #6
 80015a0:	d010      	beq.n	80015c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f042 0201 	orr.w	r2, r2, #1
 80015b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015b2:	e007      	b.n	80015c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0201 	orr.w	r2, r2, #1
 80015c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	40012c00 	.word	0x40012c00
 80015d4:	40000400 	.word	0x40000400
 80015d8:	40000800 	.word	0x40000800

080015dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e041      	b.n	8001672 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d106      	bne.n	8001608 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 f839 	bl	800167a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2202      	movs	r2, #2
 800160c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3304      	adds	r3, #4
 8001618:	4619      	mov	r1, r3
 800161a:	4610      	mov	r0, r2
 800161c:	f000 fb86 	bl	8001d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d109      	bne.n	80016b0 <HAL_TIM_PWM_Start+0x24>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	bf14      	ite	ne
 80016a8:	2301      	movne	r3, #1
 80016aa:	2300      	moveq	r3, #0
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	e022      	b.n	80016f6 <HAL_TIM_PWM_Start+0x6a>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d109      	bne.n	80016ca <HAL_TIM_PWM_Start+0x3e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b01      	cmp	r3, #1
 80016c0:	bf14      	ite	ne
 80016c2:	2301      	movne	r3, #1
 80016c4:	2300      	moveq	r3, #0
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	e015      	b.n	80016f6 <HAL_TIM_PWM_Start+0x6a>
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	d109      	bne.n	80016e4 <HAL_TIM_PWM_Start+0x58>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b01      	cmp	r3, #1
 80016da:	bf14      	ite	ne
 80016dc:	2301      	movne	r3, #1
 80016de:	2300      	moveq	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	e008      	b.n	80016f6 <HAL_TIM_PWM_Start+0x6a>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	bf14      	ite	ne
 80016f0:	2301      	movne	r3, #1
 80016f2:	2300      	moveq	r3, #0
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e05e      	b.n	80017bc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d104      	bne.n	800170e <HAL_TIM_PWM_Start+0x82>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2202      	movs	r2, #2
 8001708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800170c:	e013      	b.n	8001736 <HAL_TIM_PWM_Start+0xaa>
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	2b04      	cmp	r3, #4
 8001712:	d104      	bne.n	800171e <HAL_TIM_PWM_Start+0x92>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2202      	movs	r2, #2
 8001718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800171c:	e00b      	b.n	8001736 <HAL_TIM_PWM_Start+0xaa>
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	2b08      	cmp	r3, #8
 8001722:	d104      	bne.n	800172e <HAL_TIM_PWM_Start+0xa2>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2202      	movs	r2, #2
 8001728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800172c:	e003      	b.n	8001736 <HAL_TIM_PWM_Start+0xaa>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2202      	movs	r2, #2
 8001732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2201      	movs	r2, #1
 800173c:	6839      	ldr	r1, [r7, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f000 fd74 	bl	800222c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a1e      	ldr	r2, [pc, #120]	; (80017c4 <HAL_TIM_PWM_Start+0x138>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d107      	bne.n	800175e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800175c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a18      	ldr	r2, [pc, #96]	; (80017c4 <HAL_TIM_PWM_Start+0x138>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d00e      	beq.n	8001786 <HAL_TIM_PWM_Start+0xfa>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001770:	d009      	beq.n	8001786 <HAL_TIM_PWM_Start+0xfa>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a14      	ldr	r2, [pc, #80]	; (80017c8 <HAL_TIM_PWM_Start+0x13c>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d004      	beq.n	8001786 <HAL_TIM_PWM_Start+0xfa>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a12      	ldr	r2, [pc, #72]	; (80017cc <HAL_TIM_PWM_Start+0x140>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d111      	bne.n	80017aa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2b06      	cmp	r3, #6
 8001796:	d010      	beq.n	80017ba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0201 	orr.w	r2, r2, #1
 80017a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017a8:	e007      	b.n	80017ba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f042 0201 	orr.w	r2, r2, #1
 80017b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40012c00 	.word	0x40012c00
 80017c8:	40000400 	.word	0x40000400
 80017cc:	40000800 	.word	0x40000800

080017d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d122      	bne.n	800182c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d11b      	bne.n	800182c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f06f 0202 	mvn.w	r2, #2
 80017fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 fa6f 	bl	8001cf6 <HAL_TIM_IC_CaptureCallback>
 8001818:	e005      	b.n	8001826 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 fa62 	bl	8001ce4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 fa71 	bl	8001d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	2b04      	cmp	r3, #4
 8001838:	d122      	bne.n	8001880 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b04      	cmp	r3, #4
 8001846:	d11b      	bne.n	8001880 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f06f 0204 	mvn.w	r2, #4
 8001850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2202      	movs	r2, #2
 8001856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 fa45 	bl	8001cf6 <HAL_TIM_IC_CaptureCallback>
 800186c:	e005      	b.n	800187a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 fa38 	bl	8001ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 fa47 	bl	8001d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b08      	cmp	r3, #8
 800188c:	d122      	bne.n	80018d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b08      	cmp	r3, #8
 800189a:	d11b      	bne.n	80018d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f06f 0208 	mvn.w	r2, #8
 80018a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2204      	movs	r2, #4
 80018aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 fa1b 	bl	8001cf6 <HAL_TIM_IC_CaptureCallback>
 80018c0:	e005      	b.n	80018ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 fa0e 	bl	8001ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 fa1d 	bl	8001d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	f003 0310 	and.w	r3, r3, #16
 80018de:	2b10      	cmp	r3, #16
 80018e0:	d122      	bne.n	8001928 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	f003 0310 	and.w	r3, r3, #16
 80018ec:	2b10      	cmp	r3, #16
 80018ee:	d11b      	bne.n	8001928 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f06f 0210 	mvn.w	r2, #16
 80018f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2208      	movs	r2, #8
 80018fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f9f1 	bl	8001cf6 <HAL_TIM_IC_CaptureCallback>
 8001914:	e005      	b.n	8001922 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f9e4 	bl	8001ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f9f3 	bl	8001d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b01      	cmp	r3, #1
 8001934:	d10e      	bne.n	8001954 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b01      	cmp	r3, #1
 8001942:	d107      	bne.n	8001954 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f06f 0201 	mvn.w	r2, #1
 800194c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7fe fd70 	bl	8000434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195e:	2b80      	cmp	r3, #128	; 0x80
 8001960:	d10e      	bne.n	8001980 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196c:	2b80      	cmp	r3, #128	; 0x80
 800196e:	d107      	bne.n	8001980 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 fce1 	bl	8002342 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800198a:	2b40      	cmp	r3, #64	; 0x40
 800198c:	d10e      	bne.n	80019ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001998:	2b40      	cmp	r3, #64	; 0x40
 800199a:	d107      	bne.n	80019ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f9b7 	bl	8001d1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	f003 0320 	and.w	r3, r3, #32
 80019b6:	2b20      	cmp	r3, #32
 80019b8:	d10e      	bne.n	80019d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	f003 0320 	and.w	r3, r3, #32
 80019c4:	2b20      	cmp	r3, #32
 80019c6:	d107      	bne.n	80019d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f06f 0220 	mvn.w	r2, #32
 80019d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 fcac 	bl	8002330 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d101      	bne.n	80019fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e0ac      	b.n	8001b54 <HAL_TIM_PWM_ConfigChannel+0x174>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b0c      	cmp	r3, #12
 8001a06:	f200 809f 	bhi.w	8001b48 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001a0a:	a201      	add	r2, pc, #4	; (adr r2, 8001a10 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a10:	08001a45 	.word	0x08001a45
 8001a14:	08001b49 	.word	0x08001b49
 8001a18:	08001b49 	.word	0x08001b49
 8001a1c:	08001b49 	.word	0x08001b49
 8001a20:	08001a85 	.word	0x08001a85
 8001a24:	08001b49 	.word	0x08001b49
 8001a28:	08001b49 	.word	0x08001b49
 8001a2c:	08001b49 	.word	0x08001b49
 8001a30:	08001ac7 	.word	0x08001ac7
 8001a34:	08001b49 	.word	0x08001b49
 8001a38:	08001b49 	.word	0x08001b49
 8001a3c:	08001b49 	.word	0x08001b49
 8001a40:	08001b07 	.word	0x08001b07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 f9d0 	bl	8001df0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	699a      	ldr	r2, [r3, #24]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0208 	orr.w	r2, r2, #8
 8001a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699a      	ldr	r2, [r3, #24]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0204 	bic.w	r2, r2, #4
 8001a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6999      	ldr	r1, [r3, #24]
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	619a      	str	r2, [r3, #24]
      break;
 8001a82:	e062      	b.n	8001b4a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 fa16 	bl	8001ebc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	699a      	ldr	r2, [r3, #24]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	699a      	ldr	r2, [r3, #24]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6999      	ldr	r1, [r3, #24]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	021a      	lsls	r2, r3, #8
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	619a      	str	r2, [r3, #24]
      break;
 8001ac4:	e041      	b.n	8001b4a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68b9      	ldr	r1, [r7, #8]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 fa5f 	bl	8001f90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	69da      	ldr	r2, [r3, #28]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 0208 	orr.w	r2, r2, #8
 8001ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	69da      	ldr	r2, [r3, #28]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0204 	bic.w	r2, r2, #4
 8001af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	69d9      	ldr	r1, [r3, #28]
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	691a      	ldr	r2, [r3, #16]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	61da      	str	r2, [r3, #28]
      break;
 8001b04:	e021      	b.n	8001b4a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68b9      	ldr	r1, [r7, #8]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f000 faa9 	bl	8002064 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	69da      	ldr	r2, [r3, #28]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	69da      	ldr	r2, [r3, #28]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	69d9      	ldr	r1, [r3, #28]
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	021a      	lsls	r2, r3, #8
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	61da      	str	r2, [r3, #28]
      break;
 8001b46:	e000      	b.n	8001b4a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001b48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <HAL_TIM_ConfigClockSource+0x18>
 8001b70:	2302      	movs	r3, #2
 8001b72:	e0b3      	b.n	8001cdc <HAL_TIM_ConfigClockSource+0x180>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b9a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bac:	d03e      	beq.n	8001c2c <HAL_TIM_ConfigClockSource+0xd0>
 8001bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bb2:	f200 8087 	bhi.w	8001cc4 <HAL_TIM_ConfigClockSource+0x168>
 8001bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bba:	f000 8085 	beq.w	8001cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8001bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bc2:	d87f      	bhi.n	8001cc4 <HAL_TIM_ConfigClockSource+0x168>
 8001bc4:	2b70      	cmp	r3, #112	; 0x70
 8001bc6:	d01a      	beq.n	8001bfe <HAL_TIM_ConfigClockSource+0xa2>
 8001bc8:	2b70      	cmp	r3, #112	; 0x70
 8001bca:	d87b      	bhi.n	8001cc4 <HAL_TIM_ConfigClockSource+0x168>
 8001bcc:	2b60      	cmp	r3, #96	; 0x60
 8001bce:	d050      	beq.n	8001c72 <HAL_TIM_ConfigClockSource+0x116>
 8001bd0:	2b60      	cmp	r3, #96	; 0x60
 8001bd2:	d877      	bhi.n	8001cc4 <HAL_TIM_ConfigClockSource+0x168>
 8001bd4:	2b50      	cmp	r3, #80	; 0x50
 8001bd6:	d03c      	beq.n	8001c52 <HAL_TIM_ConfigClockSource+0xf6>
 8001bd8:	2b50      	cmp	r3, #80	; 0x50
 8001bda:	d873      	bhi.n	8001cc4 <HAL_TIM_ConfigClockSource+0x168>
 8001bdc:	2b40      	cmp	r3, #64	; 0x40
 8001bde:	d058      	beq.n	8001c92 <HAL_TIM_ConfigClockSource+0x136>
 8001be0:	2b40      	cmp	r3, #64	; 0x40
 8001be2:	d86f      	bhi.n	8001cc4 <HAL_TIM_ConfigClockSource+0x168>
 8001be4:	2b30      	cmp	r3, #48	; 0x30
 8001be6:	d064      	beq.n	8001cb2 <HAL_TIM_ConfigClockSource+0x156>
 8001be8:	2b30      	cmp	r3, #48	; 0x30
 8001bea:	d86b      	bhi.n	8001cc4 <HAL_TIM_ConfigClockSource+0x168>
 8001bec:	2b20      	cmp	r3, #32
 8001bee:	d060      	beq.n	8001cb2 <HAL_TIM_ConfigClockSource+0x156>
 8001bf0:	2b20      	cmp	r3, #32
 8001bf2:	d867      	bhi.n	8001cc4 <HAL_TIM_ConfigClockSource+0x168>
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d05c      	beq.n	8001cb2 <HAL_TIM_ConfigClockSource+0x156>
 8001bf8:	2b10      	cmp	r3, #16
 8001bfa:	d05a      	beq.n	8001cb2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001bfc:	e062      	b.n	8001cc4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6818      	ldr	r0, [r3, #0]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	6899      	ldr	r1, [r3, #8]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	f000 faee 	bl	80021ee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001c20:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	609a      	str	r2, [r3, #8]
      break;
 8001c2a:	e04e      	b.n	8001cca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	6899      	ldr	r1, [r3, #8]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f000 fad7 	bl	80021ee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c4e:	609a      	str	r2, [r3, #8]
      break;
 8001c50:	e03b      	b.n	8001cca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6818      	ldr	r0, [r3, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	6859      	ldr	r1, [r3, #4]
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	f000 fa4e 	bl	8002100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2150      	movs	r1, #80	; 0x50
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 faa5 	bl	80021ba <TIM_ITRx_SetConfig>
      break;
 8001c70:	e02b      	b.n	8001cca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	6859      	ldr	r1, [r3, #4]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	f000 fa6c 	bl	800215c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2160      	movs	r1, #96	; 0x60
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 fa95 	bl	80021ba <TIM_ITRx_SetConfig>
      break;
 8001c90:	e01b      	b.n	8001cca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	6859      	ldr	r1, [r3, #4]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	f000 fa2e 	bl	8002100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2140      	movs	r1, #64	; 0x40
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 fa85 	bl	80021ba <TIM_ITRx_SetConfig>
      break;
 8001cb0:	e00b      	b.n	8001cca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	f000 fa7c 	bl	80021ba <TIM_ITRx_SetConfig>
        break;
 8001cc2:	e002      	b.n	8001cca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001cc4:	bf00      	nop
 8001cc6:	e000      	b.n	8001cca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001cc8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr

08001d1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a29      	ldr	r2, [pc, #164]	; (8001de4 <TIM_Base_SetConfig+0xb8>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d00b      	beq.n	8001d5c <TIM_Base_SetConfig+0x30>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d4a:	d007      	beq.n	8001d5c <TIM_Base_SetConfig+0x30>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a26      	ldr	r2, [pc, #152]	; (8001de8 <TIM_Base_SetConfig+0xbc>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d003      	beq.n	8001d5c <TIM_Base_SetConfig+0x30>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a25      	ldr	r2, [pc, #148]	; (8001dec <TIM_Base_SetConfig+0xc0>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d108      	bne.n	8001d6e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a1c      	ldr	r2, [pc, #112]	; (8001de4 <TIM_Base_SetConfig+0xb8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00b      	beq.n	8001d8e <TIM_Base_SetConfig+0x62>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d7c:	d007      	beq.n	8001d8e <TIM_Base_SetConfig+0x62>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a19      	ldr	r2, [pc, #100]	; (8001de8 <TIM_Base_SetConfig+0xbc>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d003      	beq.n	8001d8e <TIM_Base_SetConfig+0x62>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a18      	ldr	r2, [pc, #96]	; (8001dec <TIM_Base_SetConfig+0xc0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d108      	bne.n	8001da0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a07      	ldr	r2, [pc, #28]	; (8001de4 <TIM_Base_SetConfig+0xb8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d103      	bne.n	8001dd4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	615a      	str	r2, [r3, #20]
}
 8001dda:	bf00      	nop
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr
 8001de4:	40012c00 	.word	0x40012c00
 8001de8:	40000400 	.word	0x40000400
 8001dec:	40000800 	.word	0x40000800

08001df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	f023 0201 	bic.w	r2, r3, #1
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f023 0303 	bic.w	r3, r3, #3
 8001e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f023 0302 	bic.w	r3, r3, #2
 8001e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a1c      	ldr	r2, [pc, #112]	; (8001eb8 <TIM_OC1_SetConfig+0xc8>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d10c      	bne.n	8001e66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f023 0308 	bic.w	r3, r3, #8
 8001e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f023 0304 	bic.w	r3, r3, #4
 8001e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a13      	ldr	r2, [pc, #76]	; (8001eb8 <TIM_OC1_SetConfig+0xc8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d111      	bne.n	8001e92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	621a      	str	r2, [r3, #32]
}
 8001eac:	bf00      	nop
 8001eae:	371c      	adds	r7, #28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40012c00 	.word	0x40012c00

08001ebc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	f023 0210 	bic.w	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	021b      	lsls	r3, r3, #8
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f023 0320 	bic.w	r3, r3, #32
 8001f06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	011b      	lsls	r3, r3, #4
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a1d      	ldr	r2, [pc, #116]	; (8001f8c <TIM_OC2_SetConfig+0xd0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d10d      	bne.n	8001f38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	011b      	lsls	r3, r3, #4
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a14      	ldr	r2, [pc, #80]	; (8001f8c <TIM_OC2_SetConfig+0xd0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d113      	bne.n	8001f68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	621a      	str	r2, [r3, #32]
}
 8001f82:	bf00      	nop
 8001f84:	371c      	adds	r7, #28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	40012c00 	.word	0x40012c00

08001f90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b087      	sub	sp, #28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f023 0303 	bic.w	r3, r3, #3
 8001fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	021b      	lsls	r3, r3, #8
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a1d      	ldr	r2, [pc, #116]	; (8002060 <TIM_OC3_SetConfig+0xd0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d10d      	bne.n	800200a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ff4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a14      	ldr	r2, [pc, #80]	; (8002060 <TIM_OC3_SetConfig+0xd0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d113      	bne.n	800203a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	011b      	lsls	r3, r3, #4
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4313      	orrs	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4313      	orrs	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	621a      	str	r2, [r3, #32]
}
 8002054:	bf00      	nop
 8002056:	371c      	adds	r7, #28
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40012c00 	.word	0x40012c00

08002064 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002064:	b480      	push	{r7}
 8002066:	b087      	sub	sp, #28
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800209a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	031b      	lsls	r3, r3, #12
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a0f      	ldr	r2, [pc, #60]	; (80020fc <TIM_OC4_SetConfig+0x98>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d109      	bne.n	80020d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	019b      	lsls	r3, r3, #6
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	621a      	str	r2, [r3, #32]
}
 80020f2:	bf00      	nop
 80020f4:	371c      	adds	r7, #28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	40012c00 	.word	0x40012c00

08002100 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002100:	b480      	push	{r7}
 8002102:	b087      	sub	sp, #28
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	f023 0201 	bic.w	r2, r3, #1
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800212a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f023 030a 	bic.w	r3, r3, #10
 800213c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4313      	orrs	r3, r2
 8002144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	621a      	str	r2, [r3, #32]
}
 8002152:	bf00      	nop
 8002154:	371c      	adds	r7, #28
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800215c:	b480      	push	{r7}
 800215e:	b087      	sub	sp, #28
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	f023 0210 	bic.w	r2, r3, #16
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002186:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	031b      	lsls	r3, r3, #12
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	4313      	orrs	r3, r2
 8002190:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002198:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	621a      	str	r2, [r3, #32]
}
 80021b0:	bf00      	nop
 80021b2:	371c      	adds	r7, #28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr

080021ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b085      	sub	sp, #20
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f043 0307 	orr.w	r3, r3, #7
 80021dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	609a      	str	r2, [r3, #8]
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr

080021ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b087      	sub	sp, #28
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002208:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	021a      	lsls	r2, r3, #8
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	431a      	orrs	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	4313      	orrs	r3, r2
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4313      	orrs	r3, r2
 800221a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	609a      	str	r2, [r3, #8]
}
 8002222:	bf00      	nop
 8002224:	371c      	adds	r7, #28
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f003 031f 	and.w	r3, r3, #31
 800223e:	2201      	movs	r2, #1
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a1a      	ldr	r2, [r3, #32]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	43db      	mvns	r3, r3
 800224e:	401a      	ands	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6a1a      	ldr	r2, [r3, #32]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f003 031f 	and.w	r3, r3, #31
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	fa01 f303 	lsl.w	r3, r1, r3
 8002264:	431a      	orrs	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	621a      	str	r2, [r3, #32]
}
 800226a:	bf00      	nop
 800226c:	371c      	adds	r7, #28
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002288:	2302      	movs	r3, #2
 800228a:	e046      	b.n	800231a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2202      	movs	r2, #2
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a16      	ldr	r2, [pc, #88]	; (8002324 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d00e      	beq.n	80022ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d8:	d009      	beq.n	80022ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a12      	ldr	r2, [pc, #72]	; (8002328 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d004      	beq.n	80022ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a10      	ldr	r2, [pc, #64]	; (800232c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d10c      	bne.n	8002308 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr
 8002324:	40012c00 	.word	0x40012c00
 8002328:	40000400 	.word	0x40000400
 800232c:	40000800 	.word	0x40000800

08002330 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002366:	2b84      	cmp	r3, #132	; 0x84
 8002368:	d005      	beq.n	8002376 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800236a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4413      	add	r3, r2
 8002372:	3303      	adds	r3, #3
 8002374:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002376:	68fb      	ldr	r3, [r7, #12]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr

08002382 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002386:	f000 fad1 	bl	800292c <vTaskStartScheduler>
  
  return osOK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	bd80      	pop	{r7, pc}

08002390 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002392:	b089      	sub	sp, #36	; 0x24
 8002394:	af04      	add	r7, sp, #16
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d020      	beq.n	80023e4 <osThreadCreate+0x54>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d01c      	beq.n	80023e4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685c      	ldr	r4, [r3, #4]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681d      	ldr	r5, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691e      	ldr	r6, [r3, #16]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ffc9 	bl	8002354 <makeFreeRtosPriority>
 80023c2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023cc:	9202      	str	r2, [sp, #8]
 80023ce:	9301      	str	r3, [sp, #4]
 80023d0:	9100      	str	r1, [sp, #0]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	4632      	mov	r2, r6
 80023d6:	4629      	mov	r1, r5
 80023d8:	4620      	mov	r0, r4
 80023da:	f000 f8e8 	bl	80025ae <xTaskCreateStatic>
 80023de:	4603      	mov	r3, r0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	e01c      	b.n	800241e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685c      	ldr	r4, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023f0:	b29e      	uxth	r6, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ffab 	bl	8002354 <makeFreeRtosPriority>
 80023fe:	4602      	mov	r2, r0
 8002400:	f107 030c 	add.w	r3, r7, #12
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	9200      	str	r2, [sp, #0]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	4632      	mov	r2, r6
 800240c:	4629      	mov	r1, r5
 800240e:	4620      	mov	r0, r4
 8002410:	f000 f929 	bl	8002666 <xTaskCreate>
 8002414:	4603      	mov	r3, r0
 8002416:	2b01      	cmp	r3, #1
 8002418:	d001      	beq.n	800241e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800241a:	2300      	movs	r3, #0
 800241c:	e000      	b.n	8002420 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800241e:	68fb      	ldr	r3, [r7, #12]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002428 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <osDelay+0x16>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	e000      	b.n	8002440 <osDelay+0x18>
 800243e:	2301      	movs	r3, #1
 8002440:	4618      	mov	r0, r3
 8002442:	f000 fa3f 	bl	80028c4 <vTaskDelay>
  
  return osOK;
 8002446:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f103 0208 	add.w	r2, r3, #8
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f04f 32ff 	mov.w	r2, #4294967295
 8002468:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f103 0208 	add.w	r2, r3, #8
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f103 0208 	add.w	r2, r3, #8
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr

0800248e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr

080024a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024a6:	b480      	push	{r7}
 80024a8:	b085      	sub	sp, #20
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	601a      	str	r2, [r3, #0]
}
 80024e2:	bf00      	nop
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002502:	d103      	bne.n	800250c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	e00c      	b.n	8002526 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3308      	adds	r3, #8
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	e002      	b.n	800251a <vListInsert+0x2e>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	429a      	cmp	r2, r3
 8002524:	d2f6      	bcs.n	8002514 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	601a      	str	r2, [r3, #0]
}
 8002552:	bf00      	nop
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr

0800255c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6892      	ldr	r2, [r2, #8]
 8002572:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6852      	ldr	r2, [r2, #4]
 800257c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	429a      	cmp	r2, r3
 8002586:	d103      	bne.n	8002590 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	1e5a      	subs	r2, r3, #1
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr

080025ae <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b08e      	sub	sp, #56	; 0x38
 80025b2:	af04      	add	r7, sp, #16
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80025bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10a      	bne.n	80025d8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80025c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c6:	f383 8811 	msr	BASEPRI, r3
 80025ca:	f3bf 8f6f 	isb	sy
 80025ce:	f3bf 8f4f 	dsb	sy
 80025d2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80025d4:	bf00      	nop
 80025d6:	e7fe      	b.n	80025d6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80025d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10a      	bne.n	80025f4 <xTaskCreateStatic+0x46>
	__asm volatile
 80025de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e2:	f383 8811 	msr	BASEPRI, r3
 80025e6:	f3bf 8f6f 	isb	sy
 80025ea:	f3bf 8f4f 	dsb	sy
 80025ee:	61fb      	str	r3, [r7, #28]
}
 80025f0:	bf00      	nop
 80025f2:	e7fe      	b.n	80025f2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80025f4:	2354      	movs	r3, #84	; 0x54
 80025f6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	2b54      	cmp	r3, #84	; 0x54
 80025fc:	d00a      	beq.n	8002614 <xTaskCreateStatic+0x66>
	__asm volatile
 80025fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002602:	f383 8811 	msr	BASEPRI, r3
 8002606:	f3bf 8f6f 	isb	sy
 800260a:	f3bf 8f4f 	dsb	sy
 800260e:	61bb      	str	r3, [r7, #24]
}
 8002610:	bf00      	nop
 8002612:	e7fe      	b.n	8002612 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002616:	2b00      	cmp	r3, #0
 8002618:	d01e      	beq.n	8002658 <xTaskCreateStatic+0xaa>
 800261a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800261c:	2b00      	cmp	r3, #0
 800261e:	d01b      	beq.n	8002658 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002628:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	2202      	movs	r2, #2
 800262e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002632:	2300      	movs	r3, #0
 8002634:	9303      	str	r3, [sp, #12]
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	9302      	str	r3, [sp, #8]
 800263a:	f107 0314 	add.w	r3, r7, #20
 800263e:	9301      	str	r3, [sp, #4]
 8002640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f850 	bl	80026f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002650:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002652:	f000 f8cd 	bl	80027f0 <prvAddNewTaskToReadyList>
 8002656:	e001      	b.n	800265c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800265c:	697b      	ldr	r3, [r7, #20]
	}
 800265e:	4618      	mov	r0, r3
 8002660:	3728      	adds	r7, #40	; 0x28
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002666:	b580      	push	{r7, lr}
 8002668:	b08c      	sub	sp, #48	; 0x30
 800266a:	af04      	add	r7, sp, #16
 800266c:	60f8      	str	r0, [r7, #12]
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	603b      	str	r3, [r7, #0]
 8002672:	4613      	mov	r3, r2
 8002674:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002676:	88fb      	ldrh	r3, [r7, #6]
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4618      	mov	r0, r3
 800267c:	f000 fe68 	bl	8003350 <pvPortMalloc>
 8002680:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00e      	beq.n	80026a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002688:	2054      	movs	r0, #84	; 0x54
 800268a:	f000 fe61 	bl	8003350 <pvPortMalloc>
 800268e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	631a      	str	r2, [r3, #48]	; 0x30
 800269c:	e005      	b.n	80026aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800269e:	6978      	ldr	r0, [r7, #20]
 80026a0:	f000 ff1a 	bl	80034d8 <vPortFree>
 80026a4:	e001      	b.n	80026aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d017      	beq.n	80026e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80026b8:	88fa      	ldrh	r2, [r7, #6]
 80026ba:	2300      	movs	r3, #0
 80026bc:	9303      	str	r3, [sp, #12]
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	9302      	str	r3, [sp, #8]
 80026c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c4:	9301      	str	r3, [sp, #4]
 80026c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 f80e 	bl	80026f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80026d4:	69f8      	ldr	r0, [r7, #28]
 80026d6:	f000 f88b 	bl	80027f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80026da:	2301      	movs	r3, #1
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	e002      	b.n	80026e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80026e0:	f04f 33ff 	mov.w	r3, #4294967295
 80026e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80026e6:	69bb      	ldr	r3, [r7, #24]
	}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3720      	adds	r7, #32
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80026fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002708:	3b01      	subs	r3, #1
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	f023 0307 	bic.w	r3, r3, #7
 8002716:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002726:	f383 8811 	msr	BASEPRI, r3
 800272a:	f3bf 8f6f 	isb	sy
 800272e:	f3bf 8f4f 	dsb	sy
 8002732:	617b      	str	r3, [r7, #20]
}
 8002734:	bf00      	nop
 8002736:	e7fe      	b.n	8002736 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
 800273c:	e012      	b.n	8002764 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	4413      	add	r3, r2
 8002744:	7819      	ldrb	r1, [r3, #0]
 8002746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	4413      	add	r3, r2
 800274c:	3334      	adds	r3, #52	; 0x34
 800274e:	460a      	mov	r2, r1
 8002750:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	4413      	add	r3, r2
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d006      	beq.n	800276c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3301      	adds	r3, #1
 8002762:	61fb      	str	r3, [r7, #28]
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	2b0f      	cmp	r3, #15
 8002768:	d9e9      	bls.n	800273e <prvInitialiseNewTask+0x4e>
 800276a:	e000      	b.n	800276e <prvInitialiseNewTask+0x7e>
		{
			break;
 800276c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800276e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002778:	2b06      	cmp	r3, #6
 800277a:	d901      	bls.n	8002780 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800277c:	2306      	movs	r3, #6
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002784:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800278a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800278c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278e:	2200      	movs	r2, #0
 8002790:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002794:	3304      	adds	r3, #4
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fe79 	bl	800248e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800279c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279e:	3318      	adds	r3, #24
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fe74 	bl	800248e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80027a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ae:	f1c3 0207 	rsb	r2, r3, #7
 80027b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80027b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80027bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027be:	2200      	movs	r2, #0
 80027c0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80027c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	68f9      	ldr	r1, [r7, #12]
 80027ce:	69b8      	ldr	r0, [r7, #24]
 80027d0:	f000 fc0e 	bl	8002ff0 <pxPortInitialiseStack>
 80027d4:	4602      	mov	r2, r0
 80027d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80027da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80027e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80027e6:	bf00      	nop
 80027e8:	3720      	adds	r7, #32
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80027f8:	f000 fce8 	bl	80031cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80027fc:	4b2a      	ldr	r3, [pc, #168]	; (80028a8 <prvAddNewTaskToReadyList+0xb8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	3301      	adds	r3, #1
 8002802:	4a29      	ldr	r2, [pc, #164]	; (80028a8 <prvAddNewTaskToReadyList+0xb8>)
 8002804:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002806:	4b29      	ldr	r3, [pc, #164]	; (80028ac <prvAddNewTaskToReadyList+0xbc>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800280e:	4a27      	ldr	r2, [pc, #156]	; (80028ac <prvAddNewTaskToReadyList+0xbc>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002814:	4b24      	ldr	r3, [pc, #144]	; (80028a8 <prvAddNewTaskToReadyList+0xb8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d110      	bne.n	800283e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800281c:	f000 fac0 	bl	8002da0 <prvInitialiseTaskLists>
 8002820:	e00d      	b.n	800283e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002822:	4b23      	ldr	r3, [pc, #140]	; (80028b0 <prvAddNewTaskToReadyList+0xc0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d109      	bne.n	800283e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800282a:	4b20      	ldr	r3, [pc, #128]	; (80028ac <prvAddNewTaskToReadyList+0xbc>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	429a      	cmp	r2, r3
 8002836:	d802      	bhi.n	800283e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002838:	4a1c      	ldr	r2, [pc, #112]	; (80028ac <prvAddNewTaskToReadyList+0xbc>)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800283e:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <prvAddNewTaskToReadyList+0xc4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	3301      	adds	r3, #1
 8002844:	4a1b      	ldr	r2, [pc, #108]	; (80028b4 <prvAddNewTaskToReadyList+0xc4>)
 8002846:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	2201      	movs	r2, #1
 800284e:	409a      	lsls	r2, r3
 8002850:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <prvAddNewTaskToReadyList+0xc8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4313      	orrs	r3, r2
 8002856:	4a18      	ldr	r2, [pc, #96]	; (80028b8 <prvAddNewTaskToReadyList+0xc8>)
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4a15      	ldr	r2, [pc, #84]	; (80028bc <prvAddNewTaskToReadyList+0xcc>)
 8002868:	441a      	add	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3304      	adds	r3, #4
 800286e:	4619      	mov	r1, r3
 8002870:	4610      	mov	r0, r2
 8002872:	f7ff fe18 	bl	80024a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002876:	f000 fcd9 	bl	800322c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800287a:	4b0d      	ldr	r3, [pc, #52]	; (80028b0 <prvAddNewTaskToReadyList+0xc0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00e      	beq.n	80028a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <prvAddNewTaskToReadyList+0xbc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	429a      	cmp	r2, r3
 800288e:	d207      	bcs.n	80028a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <prvAddNewTaskToReadyList+0xd0>)
 8002892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	f3bf 8f4f 	dsb	sy
 800289c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	2000041c 	.word	0x2000041c
 80028ac:	2000031c 	.word	0x2000031c
 80028b0:	20000428 	.word	0x20000428
 80028b4:	20000438 	.word	0x20000438
 80028b8:	20000424 	.word	0x20000424
 80028bc:	20000320 	.word	0x20000320
 80028c0:	e000ed04 	.word	0xe000ed04

080028c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d017      	beq.n	8002906 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80028d6:	4b13      	ldr	r3, [pc, #76]	; (8002924 <vTaskDelay+0x60>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <vTaskDelay+0x30>
	__asm volatile
 80028de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e2:	f383 8811 	msr	BASEPRI, r3
 80028e6:	f3bf 8f6f 	isb	sy
 80028ea:	f3bf 8f4f 	dsb	sy
 80028ee:	60bb      	str	r3, [r7, #8]
}
 80028f0:	bf00      	nop
 80028f2:	e7fe      	b.n	80028f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80028f4:	f000 f87a 	bl	80029ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80028f8:	2100      	movs	r1, #0
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fb12 	bl	8002f24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002900:	f000 f882 	bl	8002a08 <xTaskResumeAll>
 8002904:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d107      	bne.n	800291c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <vTaskDelay+0x64>)
 800290e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800291c:	bf00      	nop
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20000444 	.word	0x20000444
 8002928:	e000ed04 	.word	0xe000ed04

0800292c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002932:	2300      	movs	r3, #0
 8002934:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002936:	2300      	movs	r3, #0
 8002938:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800293a:	463a      	mov	r2, r7
 800293c:	1d39      	adds	r1, r7, #4
 800293e:	f107 0308 	add.w	r3, r7, #8
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd fc04 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002948:	6839      	ldr	r1, [r7, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	9202      	str	r2, [sp, #8]
 8002950:	9301      	str	r3, [sp, #4]
 8002952:	2300      	movs	r3, #0
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	2300      	movs	r3, #0
 8002958:	460a      	mov	r2, r1
 800295a:	491e      	ldr	r1, [pc, #120]	; (80029d4 <vTaskStartScheduler+0xa8>)
 800295c:	481e      	ldr	r0, [pc, #120]	; (80029d8 <vTaskStartScheduler+0xac>)
 800295e:	f7ff fe26 	bl	80025ae <xTaskCreateStatic>
 8002962:	4603      	mov	r3, r0
 8002964:	4a1d      	ldr	r2, [pc, #116]	; (80029dc <vTaskStartScheduler+0xb0>)
 8002966:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002968:	4b1c      	ldr	r3, [pc, #112]	; (80029dc <vTaskStartScheduler+0xb0>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d002      	beq.n	8002976 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002970:	2301      	movs	r3, #1
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	e001      	b.n	800297a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d116      	bne.n	80029ae <vTaskStartScheduler+0x82>
	__asm volatile
 8002980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002984:	f383 8811 	msr	BASEPRI, r3
 8002988:	f3bf 8f6f 	isb	sy
 800298c:	f3bf 8f4f 	dsb	sy
 8002990:	613b      	str	r3, [r7, #16]
}
 8002992:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002994:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <vTaskStartScheduler+0xb4>)
 8002996:	f04f 32ff 	mov.w	r2, #4294967295
 800299a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800299c:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <vTaskStartScheduler+0xb8>)
 800299e:	2201      	movs	r2, #1
 80029a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80029a2:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <vTaskStartScheduler+0xbc>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80029a8:	f000 fb9e 	bl	80030e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80029ac:	e00e      	b.n	80029cc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b4:	d10a      	bne.n	80029cc <vTaskStartScheduler+0xa0>
	__asm volatile
 80029b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ba:	f383 8811 	msr	BASEPRI, r3
 80029be:	f3bf 8f6f 	isb	sy
 80029c2:	f3bf 8f4f 	dsb	sy
 80029c6:	60fb      	str	r3, [r7, #12]
}
 80029c8:	bf00      	nop
 80029ca:	e7fe      	b.n	80029ca <vTaskStartScheduler+0x9e>
}
 80029cc:	bf00      	nop
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	080037a8 	.word	0x080037a8
 80029d8:	08002d71 	.word	0x08002d71
 80029dc:	20000440 	.word	0x20000440
 80029e0:	2000043c 	.word	0x2000043c
 80029e4:	20000428 	.word	0x20000428
 80029e8:	20000420 	.word	0x20000420

080029ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80029f0:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <vTaskSuspendAll+0x18>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	3301      	adds	r3, #1
 80029f6:	4a03      	ldr	r2, [pc, #12]	; (8002a04 <vTaskSuspendAll+0x18>)
 80029f8:	6013      	str	r3, [r2, #0]
}
 80029fa:	bf00      	nop
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20000444 	.word	0x20000444

08002a08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002a12:	2300      	movs	r3, #0
 8002a14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002a16:	4b41      	ldr	r3, [pc, #260]	; (8002b1c <xTaskResumeAll+0x114>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10a      	bne.n	8002a34 <xTaskResumeAll+0x2c>
	__asm volatile
 8002a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a22:	f383 8811 	msr	BASEPRI, r3
 8002a26:	f3bf 8f6f 	isb	sy
 8002a2a:	f3bf 8f4f 	dsb	sy
 8002a2e:	603b      	str	r3, [r7, #0]
}
 8002a30:	bf00      	nop
 8002a32:	e7fe      	b.n	8002a32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002a34:	f000 fbca 	bl	80031cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002a38:	4b38      	ldr	r3, [pc, #224]	; (8002b1c <xTaskResumeAll+0x114>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	4a37      	ldr	r2, [pc, #220]	; (8002b1c <xTaskResumeAll+0x114>)
 8002a40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a42:	4b36      	ldr	r3, [pc, #216]	; (8002b1c <xTaskResumeAll+0x114>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d161      	bne.n	8002b0e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a4a:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <xTaskResumeAll+0x118>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d05d      	beq.n	8002b0e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a52:	e02e      	b.n	8002ab2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002a54:	4b33      	ldr	r3, [pc, #204]	; (8002b24 <xTaskResumeAll+0x11c>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	3318      	adds	r3, #24
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff fd7b 	bl	800255c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fd76 	bl	800255c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	2201      	movs	r2, #1
 8002a76:	409a      	lsls	r2, r3
 8002a78:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <xTaskResumeAll+0x120>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	4a2a      	ldr	r2, [pc, #168]	; (8002b28 <xTaskResumeAll+0x120>)
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4a27      	ldr	r2, [pc, #156]	; (8002b2c <xTaskResumeAll+0x124>)
 8002a90:	441a      	add	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	3304      	adds	r3, #4
 8002a96:	4619      	mov	r1, r3
 8002a98:	4610      	mov	r0, r2
 8002a9a:	f7ff fd04 	bl	80024a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa2:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <xTaskResumeAll+0x128>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d302      	bcc.n	8002ab2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002aac:	4b21      	ldr	r3, [pc, #132]	; (8002b34 <xTaskResumeAll+0x12c>)
 8002aae:	2201      	movs	r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ab2:	4b1c      	ldr	r3, [pc, #112]	; (8002b24 <xTaskResumeAll+0x11c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1cc      	bne.n	8002a54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002ac0:	f000 fa0c 	bl	8002edc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002ac4:	4b1c      	ldr	r3, [pc, #112]	; (8002b38 <xTaskResumeAll+0x130>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d010      	beq.n	8002af2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002ad0:	f000 f836 	bl	8002b40 <xTaskIncrementTick>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002ada:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <xTaskResumeAll+0x12c>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1f1      	bne.n	8002ad0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002aec:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <xTaskResumeAll+0x130>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002af2:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <xTaskResumeAll+0x12c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d009      	beq.n	8002b0e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002afa:	2301      	movs	r3, #1
 8002afc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002afe:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <xTaskResumeAll+0x134>)
 8002b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	f3bf 8f4f 	dsb	sy
 8002b0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002b0e:	f000 fb8d 	bl	800322c <vPortExitCritical>

	return xAlreadyYielded;
 8002b12:	68bb      	ldr	r3, [r7, #8]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20000444 	.word	0x20000444
 8002b20:	2000041c 	.word	0x2000041c
 8002b24:	200003dc 	.word	0x200003dc
 8002b28:	20000424 	.word	0x20000424
 8002b2c:	20000320 	.word	0x20000320
 8002b30:	2000031c 	.word	0x2000031c
 8002b34:	20000430 	.word	0x20000430
 8002b38:	2000042c 	.word	0x2000042c
 8002b3c:	e000ed04 	.word	0xe000ed04

08002b40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b4a:	4b51      	ldr	r3, [pc, #324]	; (8002c90 <xTaskIncrementTick+0x150>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f040 808d 	bne.w	8002c6e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002b54:	4b4f      	ldr	r3, [pc, #316]	; (8002c94 <xTaskIncrementTick+0x154>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002b5c:	4a4d      	ldr	r2, [pc, #308]	; (8002c94 <xTaskIncrementTick+0x154>)
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d120      	bne.n	8002baa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002b68:	4b4b      	ldr	r3, [pc, #300]	; (8002c98 <xTaskIncrementTick+0x158>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <xTaskIncrementTick+0x48>
	__asm volatile
 8002b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b76:	f383 8811 	msr	BASEPRI, r3
 8002b7a:	f3bf 8f6f 	isb	sy
 8002b7e:	f3bf 8f4f 	dsb	sy
 8002b82:	603b      	str	r3, [r7, #0]
}
 8002b84:	bf00      	nop
 8002b86:	e7fe      	b.n	8002b86 <xTaskIncrementTick+0x46>
 8002b88:	4b43      	ldr	r3, [pc, #268]	; (8002c98 <xTaskIncrementTick+0x158>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	4b43      	ldr	r3, [pc, #268]	; (8002c9c <xTaskIncrementTick+0x15c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a41      	ldr	r2, [pc, #260]	; (8002c98 <xTaskIncrementTick+0x158>)
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	4a41      	ldr	r2, [pc, #260]	; (8002c9c <xTaskIncrementTick+0x15c>)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	4b40      	ldr	r3, [pc, #256]	; (8002ca0 <xTaskIncrementTick+0x160>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	4a3f      	ldr	r2, [pc, #252]	; (8002ca0 <xTaskIncrementTick+0x160>)
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	f000 f999 	bl	8002edc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002baa:	4b3e      	ldr	r3, [pc, #248]	; (8002ca4 <xTaskIncrementTick+0x164>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d34d      	bcc.n	8002c50 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bb4:	4b38      	ldr	r3, [pc, #224]	; (8002c98 <xTaskIncrementTick+0x158>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <xTaskIncrementTick+0x82>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <xTaskIncrementTick+0x84>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d004      	beq.n	8002bd2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bc8:	4b36      	ldr	r3, [pc, #216]	; (8002ca4 <xTaskIncrementTick+0x164>)
 8002bca:	f04f 32ff 	mov.w	r2, #4294967295
 8002bce:	601a      	str	r2, [r3, #0]
					break;
 8002bd0:	e03e      	b.n	8002c50 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002bd2:	4b31      	ldr	r3, [pc, #196]	; (8002c98 <xTaskIncrementTick+0x158>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d203      	bcs.n	8002bf2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002bea:	4a2e      	ldr	r2, [pc, #184]	; (8002ca4 <xTaskIncrementTick+0x164>)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6013      	str	r3, [r2, #0]
						break;
 8002bf0:	e02e      	b.n	8002c50 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fcb0 	bl	800255c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d004      	beq.n	8002c0e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	3318      	adds	r3, #24
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fca7 	bl	800255c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c12:	2201      	movs	r2, #1
 8002c14:	409a      	lsls	r2, r3
 8002c16:	4b24      	ldr	r3, [pc, #144]	; (8002ca8 <xTaskIncrementTick+0x168>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	4a22      	ldr	r2, [pc, #136]	; (8002ca8 <xTaskIncrementTick+0x168>)
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4a1f      	ldr	r2, [pc, #124]	; (8002cac <xTaskIncrementTick+0x16c>)
 8002c2e:	441a      	add	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	3304      	adds	r3, #4
 8002c34:	4619      	mov	r1, r3
 8002c36:	4610      	mov	r0, r2
 8002c38:	f7ff fc35 	bl	80024a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c40:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <xTaskIncrementTick+0x170>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d3b4      	bcc.n	8002bb4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c4e:	e7b1      	b.n	8002bb4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002c50:	4b17      	ldr	r3, [pc, #92]	; (8002cb0 <xTaskIncrementTick+0x170>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c56:	4915      	ldr	r1, [pc, #84]	; (8002cac <xTaskIncrementTick+0x16c>)
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d907      	bls.n	8002c78 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	e004      	b.n	8002c78 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002c6e:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <xTaskIncrementTick+0x174>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	3301      	adds	r3, #1
 8002c74:	4a0f      	ldr	r2, [pc, #60]	; (8002cb4 <xTaskIncrementTick+0x174>)
 8002c76:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002c78:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <xTaskIncrementTick+0x178>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002c80:	2301      	movs	r3, #1
 8002c82:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002c84:	697b      	ldr	r3, [r7, #20]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000444 	.word	0x20000444
 8002c94:	20000420 	.word	0x20000420
 8002c98:	200003d4 	.word	0x200003d4
 8002c9c:	200003d8 	.word	0x200003d8
 8002ca0:	20000434 	.word	0x20000434
 8002ca4:	2000043c 	.word	0x2000043c
 8002ca8:	20000424 	.word	0x20000424
 8002cac:	20000320 	.word	0x20000320
 8002cb0:	2000031c 	.word	0x2000031c
 8002cb4:	2000042c 	.word	0x2000042c
 8002cb8:	20000430 	.word	0x20000430

08002cbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002cc2:	4b26      	ldr	r3, [pc, #152]	; (8002d5c <vTaskSwitchContext+0xa0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002cca:	4b25      	ldr	r3, [pc, #148]	; (8002d60 <vTaskSwitchContext+0xa4>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002cd0:	e03f      	b.n	8002d52 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002cd2:	4b23      	ldr	r3, [pc, #140]	; (8002d60 <vTaskSwitchContext+0xa4>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002cd8:	4b22      	ldr	r3, [pc, #136]	; (8002d64 <vTaskSwitchContext+0xa8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	fab3 f383 	clz	r3, r3
 8002ce4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002ce6:	7afb      	ldrb	r3, [r7, #11]
 8002ce8:	f1c3 031f 	rsb	r3, r3, #31
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	491e      	ldr	r1, [pc, #120]	; (8002d68 <vTaskSwitchContext+0xac>)
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10a      	bne.n	8002d18 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d06:	f383 8811 	msr	BASEPRI, r3
 8002d0a:	f3bf 8f6f 	isb	sy
 8002d0e:	f3bf 8f4f 	dsb	sy
 8002d12:	607b      	str	r3, [r7, #4]
}
 8002d14:	bf00      	nop
 8002d16:	e7fe      	b.n	8002d16 <vTaskSwitchContext+0x5a>
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4a11      	ldr	r2, [pc, #68]	; (8002d68 <vTaskSwitchContext+0xac>)
 8002d24:	4413      	add	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	3308      	adds	r3, #8
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d104      	bne.n	8002d48 <vTaskSwitchContext+0x8c>
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	605a      	str	r2, [r3, #4]
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	4a07      	ldr	r2, [pc, #28]	; (8002d6c <vTaskSwitchContext+0xb0>)
 8002d50:	6013      	str	r3, [r2, #0]
}
 8002d52:	bf00      	nop
 8002d54:	371c      	adds	r7, #28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr
 8002d5c:	20000444 	.word	0x20000444
 8002d60:	20000430 	.word	0x20000430
 8002d64:	20000424 	.word	0x20000424
 8002d68:	20000320 	.word	0x20000320
 8002d6c:	2000031c 	.word	0x2000031c

08002d70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002d78:	f000 f852 	bl	8002e20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002d7c:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <prvIdleTask+0x28>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d9f9      	bls.n	8002d78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <prvIdleTask+0x2c>)
 8002d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	f3bf 8f4f 	dsb	sy
 8002d90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002d94:	e7f0      	b.n	8002d78 <prvIdleTask+0x8>
 8002d96:	bf00      	nop
 8002d98:	20000320 	.word	0x20000320
 8002d9c:	e000ed04 	.word	0xe000ed04

08002da0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002da6:	2300      	movs	r3, #0
 8002da8:	607b      	str	r3, [r7, #4]
 8002daa:	e00c      	b.n	8002dc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4a12      	ldr	r2, [pc, #72]	; (8002e00 <prvInitialiseTaskLists+0x60>)
 8002db8:	4413      	add	r3, r2
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fb48 	bl	8002450 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	607b      	str	r3, [r7, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b06      	cmp	r3, #6
 8002dca:	d9ef      	bls.n	8002dac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002dcc:	480d      	ldr	r0, [pc, #52]	; (8002e04 <prvInitialiseTaskLists+0x64>)
 8002dce:	f7ff fb3f 	bl	8002450 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002dd2:	480d      	ldr	r0, [pc, #52]	; (8002e08 <prvInitialiseTaskLists+0x68>)
 8002dd4:	f7ff fb3c 	bl	8002450 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002dd8:	480c      	ldr	r0, [pc, #48]	; (8002e0c <prvInitialiseTaskLists+0x6c>)
 8002dda:	f7ff fb39 	bl	8002450 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002dde:	480c      	ldr	r0, [pc, #48]	; (8002e10 <prvInitialiseTaskLists+0x70>)
 8002de0:	f7ff fb36 	bl	8002450 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002de4:	480b      	ldr	r0, [pc, #44]	; (8002e14 <prvInitialiseTaskLists+0x74>)
 8002de6:	f7ff fb33 	bl	8002450 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002dea:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <prvInitialiseTaskLists+0x78>)
 8002dec:	4a05      	ldr	r2, [pc, #20]	; (8002e04 <prvInitialiseTaskLists+0x64>)
 8002dee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002df0:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <prvInitialiseTaskLists+0x7c>)
 8002df2:	4a05      	ldr	r2, [pc, #20]	; (8002e08 <prvInitialiseTaskLists+0x68>)
 8002df4:	601a      	str	r2, [r3, #0]
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000320 	.word	0x20000320
 8002e04:	200003ac 	.word	0x200003ac
 8002e08:	200003c0 	.word	0x200003c0
 8002e0c:	200003dc 	.word	0x200003dc
 8002e10:	200003f0 	.word	0x200003f0
 8002e14:	20000408 	.word	0x20000408
 8002e18:	200003d4 	.word	0x200003d4
 8002e1c:	200003d8 	.word	0x200003d8

08002e20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e26:	e019      	b.n	8002e5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002e28:	f000 f9d0 	bl	80031cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002e2c:	4b10      	ldr	r3, [pc, #64]	; (8002e70 <prvCheckTasksWaitingTermination+0x50>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3304      	adds	r3, #4
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fb8f 	bl	800255c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002e3e:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <prvCheckTasksWaitingTermination+0x54>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	4a0b      	ldr	r2, [pc, #44]	; (8002e74 <prvCheckTasksWaitingTermination+0x54>)
 8002e46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002e48:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <prvCheckTasksWaitingTermination+0x58>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	4a0a      	ldr	r2, [pc, #40]	; (8002e78 <prvCheckTasksWaitingTermination+0x58>)
 8002e50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002e52:	f000 f9eb 	bl	800322c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f810 	bl	8002e7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e5c:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <prvCheckTasksWaitingTermination+0x58>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1e1      	bne.n	8002e28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	200003f0 	.word	0x200003f0
 8002e74:	2000041c 	.word	0x2000041c
 8002e78:	20000404 	.word	0x20000404

08002e7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d108      	bne.n	8002ea0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fb20 	bl	80034d8 <vPortFree>
				vPortFree( pxTCB );
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 fb1d 	bl	80034d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002e9e:	e018      	b.n	8002ed2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d103      	bne.n	8002eb2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fb14 	bl	80034d8 <vPortFree>
	}
 8002eb0:	e00f      	b.n	8002ed2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d00a      	beq.n	8002ed2 <prvDeleteTCB+0x56>
	__asm volatile
 8002ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec0:	f383 8811 	msr	BASEPRI, r3
 8002ec4:	f3bf 8f6f 	isb	sy
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	60fb      	str	r3, [r7, #12]
}
 8002ece:	bf00      	nop
 8002ed0:	e7fe      	b.n	8002ed0 <prvDeleteTCB+0x54>
	}
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <prvResetNextTaskUnblockTime+0x40>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <prvResetNextTaskUnblockTime+0x14>
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <prvResetNextTaskUnblockTime+0x16>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d004      	beq.n	8002f00 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002ef6:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <prvResetNextTaskUnblockTime+0x44>)
 8002ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8002efc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002efe:	e008      	b.n	8002f12 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f00:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <prvResetNextTaskUnblockTime+0x40>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	4a04      	ldr	r2, [pc, #16]	; (8002f20 <prvResetNextTaskUnblockTime+0x44>)
 8002f10:	6013      	str	r3, [r2, #0]
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr
 8002f1c:	200003d4 	.word	0x200003d4
 8002f20:	2000043c 	.word	0x2000043c

08002f24 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002f2e:	4b29      	ldr	r3, [pc, #164]	; (8002fd4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f34:	4b28      	ldr	r3, [pc, #160]	; (8002fd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fb0e 	bl	800255c <uxListRemove>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10b      	bne.n	8002f5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002f46:	4b24      	ldr	r3, [pc, #144]	; (8002fd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43da      	mvns	r2, r3
 8002f54:	4b21      	ldr	r3, [pc, #132]	; (8002fdc <prvAddCurrentTaskToDelayedList+0xb8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	4a20      	ldr	r2, [pc, #128]	; (8002fdc <prvAddCurrentTaskToDelayedList+0xb8>)
 8002f5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f64:	d10a      	bne.n	8002f7c <prvAddCurrentTaskToDelayedList+0x58>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d007      	beq.n	8002f7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f6c:	4b1a      	ldr	r3, [pc, #104]	; (8002fd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	3304      	adds	r3, #4
 8002f72:	4619      	mov	r1, r3
 8002f74:	481a      	ldr	r0, [pc, #104]	; (8002fe0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002f76:	f7ff fa96 	bl	80024a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002f7a:	e026      	b.n	8002fca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4413      	add	r3, r2
 8002f82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002f84:	4b14      	ldr	r3, [pc, #80]	; (8002fd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d209      	bcs.n	8002fa8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f94:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	f7ff faa3 	bl	80024ec <vListInsert>
}
 8002fa6:	e010      	b.n	8002fca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fa8:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	f7ff fa99 	bl	80024ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002fba:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <prvAddCurrentTaskToDelayedList+0xc8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d202      	bcs.n	8002fca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002fc4:	4a09      	ldr	r2, [pc, #36]	; (8002fec <prvAddCurrentTaskToDelayedList+0xc8>)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	6013      	str	r3, [r2, #0]
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000420 	.word	0x20000420
 8002fd8:	2000031c 	.word	0x2000031c
 8002fdc:	20000424 	.word	0x20000424
 8002fe0:	20000408 	.word	0x20000408
 8002fe4:	200003d8 	.word	0x200003d8
 8002fe8:	200003d4 	.word	0x200003d4
 8002fec:	2000043c 	.word	0x2000043c

08002ff0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3b04      	subs	r3, #4
 8003000:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003008:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	3b04      	subs	r3, #4
 800300e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f023 0201 	bic.w	r2, r3, #1
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	3b04      	subs	r3, #4
 800301e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003020:	4a08      	ldr	r2, [pc, #32]	; (8003044 <pxPortInitialiseStack+0x54>)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	3b14      	subs	r3, #20
 800302a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	3b20      	subs	r3, #32
 8003036:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003038:	68fb      	ldr	r3, [r7, #12]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr
 8003044:	08003049 	.word	0x08003049

08003048 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800304e:	2300      	movs	r3, #0
 8003050:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003052:	4b12      	ldr	r3, [pc, #72]	; (800309c <prvTaskExitError+0x54>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305a:	d00a      	beq.n	8003072 <prvTaskExitError+0x2a>
	__asm volatile
 800305c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003060:	f383 8811 	msr	BASEPRI, r3
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	60fb      	str	r3, [r7, #12]
}
 800306e:	bf00      	nop
 8003070:	e7fe      	b.n	8003070 <prvTaskExitError+0x28>
	__asm volatile
 8003072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003076:	f383 8811 	msr	BASEPRI, r3
 800307a:	f3bf 8f6f 	isb	sy
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	60bb      	str	r3, [r7, #8]
}
 8003084:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003086:	bf00      	nop
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0fc      	beq.n	8003088 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800308e:	bf00      	nop
 8003090:	bf00      	nop
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	2000000c 	.word	0x2000000c

080030a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80030a0:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <pxCurrentTCBConst2>)
 80030a2:	6819      	ldr	r1, [r3, #0]
 80030a4:	6808      	ldr	r0, [r1, #0]
 80030a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80030aa:	f380 8809 	msr	PSP, r0
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f04f 0000 	mov.w	r0, #0
 80030b6:	f380 8811 	msr	BASEPRI, r0
 80030ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80030be:	4770      	bx	lr

080030c0 <pxCurrentTCBConst2>:
 80030c0:	2000031c 	.word	0x2000031c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80030c4:	bf00      	nop
 80030c6:	bf00      	nop

080030c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80030c8:	4806      	ldr	r0, [pc, #24]	; (80030e4 <prvPortStartFirstTask+0x1c>)
 80030ca:	6800      	ldr	r0, [r0, #0]
 80030cc:	6800      	ldr	r0, [r0, #0]
 80030ce:	f380 8808 	msr	MSP, r0
 80030d2:	b662      	cpsie	i
 80030d4:	b661      	cpsie	f
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	f3bf 8f6f 	isb	sy
 80030de:	df00      	svc	0
 80030e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80030e2:	bf00      	nop
 80030e4:	e000ed08 	.word	0xe000ed08

080030e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80030ee:	4b32      	ldr	r3, [pc, #200]	; (80031b8 <xPortStartScheduler+0xd0>)
 80030f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	22ff      	movs	r2, #255	; 0xff
 80030fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	b2db      	uxtb	r3, r3
 800310c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003110:	b2da      	uxtb	r2, r3
 8003112:	4b2a      	ldr	r3, [pc, #168]	; (80031bc <xPortStartScheduler+0xd4>)
 8003114:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003116:	4b2a      	ldr	r3, [pc, #168]	; (80031c0 <xPortStartScheduler+0xd8>)
 8003118:	2207      	movs	r2, #7
 800311a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800311c:	e009      	b.n	8003132 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800311e:	4b28      	ldr	r3, [pc, #160]	; (80031c0 <xPortStartScheduler+0xd8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3b01      	subs	r3, #1
 8003124:	4a26      	ldr	r2, [pc, #152]	; (80031c0 <xPortStartScheduler+0xd8>)
 8003126:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	b2db      	uxtb	r3, r3
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	b2db      	uxtb	r3, r3
 8003130:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003132:	78fb      	ldrb	r3, [r7, #3]
 8003134:	b2db      	uxtb	r3, r3
 8003136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313a:	2b80      	cmp	r3, #128	; 0x80
 800313c:	d0ef      	beq.n	800311e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800313e:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <xPortStartScheduler+0xd8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f1c3 0307 	rsb	r3, r3, #7
 8003146:	2b04      	cmp	r3, #4
 8003148:	d00a      	beq.n	8003160 <xPortStartScheduler+0x78>
	__asm volatile
 800314a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314e:	f383 8811 	msr	BASEPRI, r3
 8003152:	f3bf 8f6f 	isb	sy
 8003156:	f3bf 8f4f 	dsb	sy
 800315a:	60bb      	str	r3, [r7, #8]
}
 800315c:	bf00      	nop
 800315e:	e7fe      	b.n	800315e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003160:	4b17      	ldr	r3, [pc, #92]	; (80031c0 <xPortStartScheduler+0xd8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	021b      	lsls	r3, r3, #8
 8003166:	4a16      	ldr	r2, [pc, #88]	; (80031c0 <xPortStartScheduler+0xd8>)
 8003168:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800316a:	4b15      	ldr	r3, [pc, #84]	; (80031c0 <xPortStartScheduler+0xd8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003172:	4a13      	ldr	r2, [pc, #76]	; (80031c0 <xPortStartScheduler+0xd8>)
 8003174:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	b2da      	uxtb	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800317e:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <xPortStartScheduler+0xdc>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a10      	ldr	r2, [pc, #64]	; (80031c4 <xPortStartScheduler+0xdc>)
 8003184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003188:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800318a:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <xPortStartScheduler+0xdc>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a0d      	ldr	r2, [pc, #52]	; (80031c4 <xPortStartScheduler+0xdc>)
 8003190:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003194:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003196:	f000 f8b9 	bl	800330c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800319a:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <xPortStartScheduler+0xe0>)
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80031a0:	f7ff ff92 	bl	80030c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80031a4:	f7ff fd8a 	bl	8002cbc <vTaskSwitchContext>
	prvTaskExitError();
 80031a8:	f7ff ff4e 	bl	8003048 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	e000e400 	.word	0xe000e400
 80031bc:	20000448 	.word	0x20000448
 80031c0:	2000044c 	.word	0x2000044c
 80031c4:	e000ed20 	.word	0xe000ed20
 80031c8:	2000000c 	.word	0x2000000c

080031cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
	__asm volatile
 80031d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d6:	f383 8811 	msr	BASEPRI, r3
 80031da:	f3bf 8f6f 	isb	sy
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	607b      	str	r3, [r7, #4]
}
 80031e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80031e6:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <vPortEnterCritical+0x58>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	3301      	adds	r3, #1
 80031ec:	4a0d      	ldr	r2, [pc, #52]	; (8003224 <vPortEnterCritical+0x58>)
 80031ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80031f0:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <vPortEnterCritical+0x58>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d10f      	bne.n	8003218 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <vPortEnterCritical+0x5c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <vPortEnterCritical+0x4c>
	__asm volatile
 8003202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003206:	f383 8811 	msr	BASEPRI, r3
 800320a:	f3bf 8f6f 	isb	sy
 800320e:	f3bf 8f4f 	dsb	sy
 8003212:	603b      	str	r3, [r7, #0]
}
 8003214:	bf00      	nop
 8003216:	e7fe      	b.n	8003216 <vPortEnterCritical+0x4a>
	}
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	2000000c 	.word	0x2000000c
 8003228:	e000ed04 	.word	0xe000ed04

0800322c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <vPortExitCritical+0x4c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10a      	bne.n	8003250 <vPortExitCritical+0x24>
	__asm volatile
 800323a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323e:	f383 8811 	msr	BASEPRI, r3
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	607b      	str	r3, [r7, #4]
}
 800324c:	bf00      	nop
 800324e:	e7fe      	b.n	800324e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003250:	4b09      	ldr	r3, [pc, #36]	; (8003278 <vPortExitCritical+0x4c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3b01      	subs	r3, #1
 8003256:	4a08      	ldr	r2, [pc, #32]	; (8003278 <vPortExitCritical+0x4c>)
 8003258:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800325a:	4b07      	ldr	r3, [pc, #28]	; (8003278 <vPortExitCritical+0x4c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d105      	bne.n	800326e <vPortExitCritical+0x42>
 8003262:	2300      	movs	r3, #0
 8003264:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800326c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr
 8003278:	2000000c 	.word	0x2000000c
 800327c:	00000000 	.word	0x00000000

08003280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003280:	f3ef 8009 	mrs	r0, PSP
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <pxCurrentTCBConst>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003290:	6010      	str	r0, [r2, #0]
 8003292:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003296:	f04f 0050 	mov.w	r0, #80	; 0x50
 800329a:	f380 8811 	msr	BASEPRI, r0
 800329e:	f7ff fd0d 	bl	8002cbc <vTaskSwitchContext>
 80032a2:	f04f 0000 	mov.w	r0, #0
 80032a6:	f380 8811 	msr	BASEPRI, r0
 80032aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80032ae:	6819      	ldr	r1, [r3, #0]
 80032b0:	6808      	ldr	r0, [r1, #0]
 80032b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80032b6:	f380 8809 	msr	PSP, r0
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	4770      	bx	lr

080032c0 <pxCurrentTCBConst>:
 80032c0:	2000031c 	.word	0x2000031c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop

080032c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
	__asm volatile
 80032ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d2:	f383 8811 	msr	BASEPRI, r3
 80032d6:	f3bf 8f6f 	isb	sy
 80032da:	f3bf 8f4f 	dsb	sy
 80032de:	607b      	str	r3, [r7, #4]
}
 80032e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80032e2:	f7ff fc2d 	bl	8002b40 <xTaskIncrementTick>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80032ec:	4b06      	ldr	r3, [pc, #24]	; (8003308 <SysTick_Handler+0x40>)
 80032ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	2300      	movs	r3, #0
 80032f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	f383 8811 	msr	BASEPRI, r3
}
 80032fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003300:	bf00      	nop
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	e000ed04 	.word	0xe000ed04

0800330c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003310:	4b0a      	ldr	r3, [pc, #40]	; (800333c <vPortSetupTimerInterrupt+0x30>)
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003316:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <vPortSetupTimerInterrupt+0x34>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800331c:	4b09      	ldr	r3, [pc, #36]	; (8003344 <vPortSetupTimerInterrupt+0x38>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a09      	ldr	r2, [pc, #36]	; (8003348 <vPortSetupTimerInterrupt+0x3c>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	099b      	lsrs	r3, r3, #6
 8003328:	4a08      	ldr	r2, [pc, #32]	; (800334c <vPortSetupTimerInterrupt+0x40>)
 800332a:	3b01      	subs	r3, #1
 800332c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800332e:	4b03      	ldr	r3, [pc, #12]	; (800333c <vPortSetupTimerInterrupt+0x30>)
 8003330:	2207      	movs	r2, #7
 8003332:	601a      	str	r2, [r3, #0]
}
 8003334:	bf00      	nop
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr
 800333c:	e000e010 	.word	0xe000e010
 8003340:	e000e018 	.word	0xe000e018
 8003344:	20000000 	.word	0x20000000
 8003348:	10624dd3 	.word	0x10624dd3
 800334c:	e000e014 	.word	0xe000e014

08003350 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08a      	sub	sp, #40	; 0x28
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003358:	2300      	movs	r3, #0
 800335a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800335c:	f7ff fb46 	bl	80029ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003360:	4b58      	ldr	r3, [pc, #352]	; (80034c4 <pvPortMalloc+0x174>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003368:	f000 f910 	bl	800358c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800336c:	4b56      	ldr	r3, [pc, #344]	; (80034c8 <pvPortMalloc+0x178>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	f040 808e 	bne.w	8003496 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01d      	beq.n	80033bc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003380:	2208      	movs	r2, #8
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4413      	add	r3, r2
 8003386:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	2b00      	cmp	r3, #0
 8003390:	d014      	beq.n	80033bc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f023 0307 	bic.w	r3, r3, #7
 8003398:	3308      	adds	r3, #8
 800339a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <pvPortMalloc+0x6c>
	__asm volatile
 80033a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	617b      	str	r3, [r7, #20]
}
 80033b8:	bf00      	nop
 80033ba:	e7fe      	b.n	80033ba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d069      	beq.n	8003496 <pvPortMalloc+0x146>
 80033c2:	4b42      	ldr	r3, [pc, #264]	; (80034cc <pvPortMalloc+0x17c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d864      	bhi.n	8003496 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80033cc:	4b40      	ldr	r3, [pc, #256]	; (80034d0 <pvPortMalloc+0x180>)
 80033ce:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80033d0:	4b3f      	ldr	r3, [pc, #252]	; (80034d0 <pvPortMalloc+0x180>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80033d6:	e004      	b.n	80033e2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d903      	bls.n	80033f4 <pvPortMalloc+0xa4>
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f1      	bne.n	80033d8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80033f4:	4b33      	ldr	r3, [pc, #204]	; (80034c4 <pvPortMalloc+0x174>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d04b      	beq.n	8003496 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2208      	movs	r2, #8
 8003404:	4413      	add	r3, r2
 8003406:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	1ad2      	subs	r2, r2, r3
 8003418:	2308      	movs	r3, #8
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	429a      	cmp	r2, r3
 800341e:	d91f      	bls.n	8003460 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4413      	add	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <pvPortMalloc+0xf8>
	__asm volatile
 8003432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003436:	f383 8811 	msr	BASEPRI, r3
 800343a:	f3bf 8f6f 	isb	sy
 800343e:	f3bf 8f4f 	dsb	sy
 8003442:	613b      	str	r3, [r7, #16]
}
 8003444:	bf00      	nop
 8003446:	e7fe      	b.n	8003446 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	1ad2      	subs	r2, r2, r3
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800345a:	69b8      	ldr	r0, [r7, #24]
 800345c:	f000 f8f8 	bl	8003650 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003460:	4b1a      	ldr	r3, [pc, #104]	; (80034cc <pvPortMalloc+0x17c>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	4a18      	ldr	r2, [pc, #96]	; (80034cc <pvPortMalloc+0x17c>)
 800346c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800346e:	4b17      	ldr	r3, [pc, #92]	; (80034cc <pvPortMalloc+0x17c>)
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	4b18      	ldr	r3, [pc, #96]	; (80034d4 <pvPortMalloc+0x184>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d203      	bcs.n	8003482 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800347a:	4b14      	ldr	r3, [pc, #80]	; (80034cc <pvPortMalloc+0x17c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a15      	ldr	r2, [pc, #84]	; (80034d4 <pvPortMalloc+0x184>)
 8003480:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <pvPortMalloc+0x178>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	431a      	orrs	r2, r3
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003496:	f7ff fab7 	bl	8002a08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <pvPortMalloc+0x16a>
	__asm volatile
 80034a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	60fb      	str	r3, [r7, #12]
}
 80034b6:	bf00      	nop
 80034b8:	e7fe      	b.n	80034b8 <pvPortMalloc+0x168>
	return pvReturn;
 80034ba:	69fb      	ldr	r3, [r7, #28]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3728      	adds	r7, #40	; 0x28
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	20001058 	.word	0x20001058
 80034c8:	20001064 	.word	0x20001064
 80034cc:	2000105c 	.word	0x2000105c
 80034d0:	20001050 	.word	0x20001050
 80034d4:	20001060 	.word	0x20001060

080034d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d048      	beq.n	800357c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80034ea:	2308      	movs	r3, #8
 80034ec:	425b      	negs	r3, r3
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4413      	add	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	4b21      	ldr	r3, [pc, #132]	; (8003584 <vPortFree+0xac>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4013      	ands	r3, r2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10a      	bne.n	800351c <vPortFree+0x44>
	__asm volatile
 8003506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350a:	f383 8811 	msr	BASEPRI, r3
 800350e:	f3bf 8f6f 	isb	sy
 8003512:	f3bf 8f4f 	dsb	sy
 8003516:	60fb      	str	r3, [r7, #12]
}
 8003518:	bf00      	nop
 800351a:	e7fe      	b.n	800351a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <vPortFree+0x62>
	__asm volatile
 8003524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003528:	f383 8811 	msr	BASEPRI, r3
 800352c:	f3bf 8f6f 	isb	sy
 8003530:	f3bf 8f4f 	dsb	sy
 8003534:	60bb      	str	r3, [r7, #8]
}
 8003536:	bf00      	nop
 8003538:	e7fe      	b.n	8003538 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	4b11      	ldr	r3, [pc, #68]	; (8003584 <vPortFree+0xac>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4013      	ands	r3, r2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d019      	beq.n	800357c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d115      	bne.n	800357c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <vPortFree+0xac>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	43db      	mvns	r3, r3
 800355a:	401a      	ands	r2, r3
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003560:	f7ff fa44 	bl	80029ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	4b07      	ldr	r3, [pc, #28]	; (8003588 <vPortFree+0xb0>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4413      	add	r3, r2
 800356e:	4a06      	ldr	r2, [pc, #24]	; (8003588 <vPortFree+0xb0>)
 8003570:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003572:	6938      	ldr	r0, [r7, #16]
 8003574:	f000 f86c 	bl	8003650 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003578:	f7ff fa46 	bl	8002a08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800357c:	bf00      	nop
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20001064 	.word	0x20001064
 8003588:	2000105c 	.word	0x2000105c

0800358c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003592:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003596:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003598:	4b27      	ldr	r3, [pc, #156]	; (8003638 <prvHeapInit+0xac>)
 800359a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00c      	beq.n	80035c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	3307      	adds	r3, #7
 80035aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0307 	bic.w	r3, r3, #7
 80035b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	4a1f      	ldr	r2, [pc, #124]	; (8003638 <prvHeapInit+0xac>)
 80035bc:	4413      	add	r3, r2
 80035be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80035c4:	4a1d      	ldr	r2, [pc, #116]	; (800363c <prvHeapInit+0xb0>)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80035ca:	4b1c      	ldr	r3, [pc, #112]	; (800363c <prvHeapInit+0xb0>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	4413      	add	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80035d8:	2208      	movs	r2, #8
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 0307 	bic.w	r3, r3, #7
 80035e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4a15      	ldr	r2, [pc, #84]	; (8003640 <prvHeapInit+0xb4>)
 80035ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80035ee:	4b14      	ldr	r3, [pc, #80]	; (8003640 <prvHeapInit+0xb4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2200      	movs	r2, #0
 80035f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80035f6:	4b12      	ldr	r3, [pc, #72]	; (8003640 <prvHeapInit+0xb4>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	1ad2      	subs	r2, r2, r3
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800360c:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <prvHeapInit+0xb4>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	4a0a      	ldr	r2, [pc, #40]	; (8003644 <prvHeapInit+0xb8>)
 800361a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	4a09      	ldr	r2, [pc, #36]	; (8003648 <prvHeapInit+0xbc>)
 8003622:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003624:	4b09      	ldr	r3, [pc, #36]	; (800364c <prvHeapInit+0xc0>)
 8003626:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800362a:	601a      	str	r2, [r3, #0]
}
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	20000450 	.word	0x20000450
 800363c:	20001050 	.word	0x20001050
 8003640:	20001058 	.word	0x20001058
 8003644:	20001060 	.word	0x20001060
 8003648:	2000105c 	.word	0x2000105c
 800364c:	20001064 	.word	0x20001064

08003650 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003658:	4b27      	ldr	r3, [pc, #156]	; (80036f8 <prvInsertBlockIntoFreeList+0xa8>)
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	e002      	b.n	8003664 <prvInsertBlockIntoFreeList+0x14>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	429a      	cmp	r2, r3
 800366c:	d8f7      	bhi.n	800365e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	4413      	add	r3, r2
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	429a      	cmp	r2, r3
 800367e:	d108      	bne.n	8003692 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	441a      	add	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	441a      	add	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d118      	bne.n	80036d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	4b14      	ldr	r3, [pc, #80]	; (80036fc <prvInsertBlockIntoFreeList+0xac>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d00d      	beq.n	80036ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	441a      	add	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	e008      	b.n	80036e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80036ce:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <prvInsertBlockIntoFreeList+0xac>)
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	e003      	b.n	80036e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d002      	beq.n	80036ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036ee:	bf00      	nop
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr
 80036f8:	20001050 	.word	0x20001050
 80036fc:	20001058 	.word	0x20001058

08003700 <__libc_init_array>:
 8003700:	b570      	push	{r4, r5, r6, lr}
 8003702:	2600      	movs	r6, #0
 8003704:	4d0c      	ldr	r5, [pc, #48]	; (8003738 <__libc_init_array+0x38>)
 8003706:	4c0d      	ldr	r4, [pc, #52]	; (800373c <__libc_init_array+0x3c>)
 8003708:	1b64      	subs	r4, r4, r5
 800370a:	10a4      	asrs	r4, r4, #2
 800370c:	42a6      	cmp	r6, r4
 800370e:	d109      	bne.n	8003724 <__libc_init_array+0x24>
 8003710:	f000 f822 	bl	8003758 <_init>
 8003714:	2600      	movs	r6, #0
 8003716:	4d0a      	ldr	r5, [pc, #40]	; (8003740 <__libc_init_array+0x40>)
 8003718:	4c0a      	ldr	r4, [pc, #40]	; (8003744 <__libc_init_array+0x44>)
 800371a:	1b64      	subs	r4, r4, r5
 800371c:	10a4      	asrs	r4, r4, #2
 800371e:	42a6      	cmp	r6, r4
 8003720:	d105      	bne.n	800372e <__libc_init_array+0x2e>
 8003722:	bd70      	pop	{r4, r5, r6, pc}
 8003724:	f855 3b04 	ldr.w	r3, [r5], #4
 8003728:	4798      	blx	r3
 800372a:	3601      	adds	r6, #1
 800372c:	e7ee      	b.n	800370c <__libc_init_array+0xc>
 800372e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003732:	4798      	blx	r3
 8003734:	3601      	adds	r6, #1
 8003736:	e7f2      	b.n	800371e <__libc_init_array+0x1e>
 8003738:	080037c8 	.word	0x080037c8
 800373c:	080037c8 	.word	0x080037c8
 8003740:	080037c8 	.word	0x080037c8
 8003744:	080037cc 	.word	0x080037cc

08003748 <memset>:
 8003748:	4603      	mov	r3, r0
 800374a:	4402      	add	r2, r0
 800374c:	4293      	cmp	r3, r2
 800374e:	d100      	bne.n	8003752 <memset+0xa>
 8003750:	4770      	bx	lr
 8003752:	f803 1b01 	strb.w	r1, [r3], #1
 8003756:	e7f9      	b.n	800374c <memset+0x4>

08003758 <_init>:
 8003758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375a:	bf00      	nop
 800375c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375e:	bc08      	pop	{r3}
 8003760:	469e      	mov	lr, r3
 8003762:	4770      	bx	lr

08003764 <_fini>:
 8003764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003766:	bf00      	nop
 8003768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800376a:	bc08      	pop	{r3}
 800376c:	469e      	mov	lr, r3
 800376e:	4770      	bx	lr
