
CodeMainRobocon2023_V1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08006684  08006684  00016684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067a8  080067a8  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080067a8  080067a8  000167a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067b0  080067b0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067b0  080067b0  000167b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067b4  080067b4  000167b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080067b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          0000424c  20000088  20000088  00020088  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200042d4  200042d4  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001523a  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c79  00000000  00000000  000352ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001148  00000000  00000000  00037f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001040  00000000  00000000  000390b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000227e0  00000000  00000000  0003a0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000133a1  00000000  00000000  0005c8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2fd9  00000000  00000000  0006fc71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00142c4a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d10  00000000  00000000  00142c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800666c 	.word	0x0800666c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800666c 	.word	0x0800666c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b974 	b.w	8000e0c <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	468e      	mov	lr, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14d      	bne.n	8000be6 <__udivmoddi4+0xaa>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4694      	mov	ip, r2
 8000b4e:	d969      	bls.n	8000c24 <__udivmoddi4+0xe8>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b152      	cbz	r2, 8000b6c <__udivmoddi4+0x30>
 8000b56:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5a:	f1c2 0120 	rsb	r1, r2, #32
 8000b5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b66:	ea41 0e03 	orr.w	lr, r1, r3
 8000b6a:	4094      	lsls	r4, r2
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	0c21      	lsrs	r1, r4, #16
 8000b72:	fbbe f6f8 	udiv	r6, lr, r8
 8000b76:	fa1f f78c 	uxth.w	r7, ip
 8000b7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b82:	fb06 f107 	mul.w	r1, r6, r7
 8000b86:	4299      	cmp	r1, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x64>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b92:	f080 811f 	bcs.w	8000dd4 <__udivmoddi4+0x298>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 811c 	bls.w	8000dd4 <__udivmoddi4+0x298>
 8000b9c:	3e02      	subs	r6, #2
 8000b9e:	4463      	add	r3, ip
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb0:	fb00 f707 	mul.w	r7, r0, r7
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	d90a      	bls.n	8000bce <__udivmoddi4+0x92>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc0:	f080 810a 	bcs.w	8000dd8 <__udivmoddi4+0x29c>
 8000bc4:	42a7      	cmp	r7, r4
 8000bc6:	f240 8107 	bls.w	8000dd8 <__udivmoddi4+0x29c>
 8000bca:	4464      	add	r4, ip
 8000bcc:	3802      	subs	r0, #2
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	1be4      	subs	r4, r4, r7
 8000bd4:	2600      	movs	r6, #0
 8000bd6:	b11d      	cbz	r5, 8000be0 <__udivmoddi4+0xa4>
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000be0:	4631      	mov	r1, r6
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0xc2>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	f000 80ef 	beq.w	8000dce <__udivmoddi4+0x292>
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f683 	clz	r6, r3
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d14a      	bne.n	8000c9c <__udivmoddi4+0x160>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xd4>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80f9 	bhi.w	8000e02 <__udivmoddi4+0x2c6>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0303 	sbc.w	r3, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	469e      	mov	lr, r3
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d0e0      	beq.n	8000be0 <__udivmoddi4+0xa4>
 8000c1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c22:	e7dd      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000c24:	b902      	cbnz	r2, 8000c28 <__udivmoddi4+0xec>
 8000c26:	deff      	udf	#255	; 0xff
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	f040 8092 	bne.w	8000d56 <__udivmoddi4+0x21a>
 8000c32:	eba1 010c 	sub.w	r1, r1, ip
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f fe8c 	uxth.w	lr, ip
 8000c3e:	2601      	movs	r6, #1
 8000c40:	0c20      	lsrs	r0, r4, #16
 8000c42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c46:	fb07 1113 	mls	r1, r7, r3, r1
 8000c4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c4e:	fb0e f003 	mul.w	r0, lr, r3
 8000c52:	4288      	cmp	r0, r1
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x12c>
 8000c56:	eb1c 0101 	adds.w	r1, ip, r1
 8000c5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x12a>
 8000c60:	4288      	cmp	r0, r1
 8000c62:	f200 80cb 	bhi.w	8000dfc <__udivmoddi4+0x2c0>
 8000c66:	4643      	mov	r3, r8
 8000c68:	1a09      	subs	r1, r1, r0
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c70:	fb07 1110 	mls	r1, r7, r0, r1
 8000c74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c78:	fb0e fe00 	mul.w	lr, lr, r0
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x156>
 8000c80:	eb1c 0404 	adds.w	r4, ip, r4
 8000c84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c88:	d202      	bcs.n	8000c90 <__udivmoddi4+0x154>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f200 80bb 	bhi.w	8000e06 <__udivmoddi4+0x2ca>
 8000c90:	4608      	mov	r0, r1
 8000c92:	eba4 040e 	sub.w	r4, r4, lr
 8000c96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c9a:	e79c      	b.n	8000bd6 <__udivmoddi4+0x9a>
 8000c9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ca0:	40b3      	lsls	r3, r6
 8000ca2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ca6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000caa:	fa20 f407 	lsr.w	r4, r0, r7
 8000cae:	fa01 f306 	lsl.w	r3, r1, r6
 8000cb2:	431c      	orrs	r4, r3
 8000cb4:	40f9      	lsrs	r1, r7
 8000cb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cba:	fa00 f306 	lsl.w	r3, r0, r6
 8000cbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cc2:	0c20      	lsrs	r0, r4, #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000ccc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b8>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ce4:	f080 8088 	bcs.w	8000df8 <__udivmoddi4+0x2bc>
 8000ce8:	4288      	cmp	r0, r1
 8000cea:	f240 8085 	bls.w	8000df8 <__udivmoddi4+0x2bc>
 8000cee:	f1a8 0802 	sub.w	r8, r8, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000d00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d08:	458e      	cmp	lr, r1
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x1e2>
 8000d0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d14:	d26c      	bcs.n	8000df0 <__udivmoddi4+0x2b4>
 8000d16:	458e      	cmp	lr, r1
 8000d18:	d96a      	bls.n	8000df0 <__udivmoddi4+0x2b4>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4461      	add	r1, ip
 8000d1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d22:	fba0 9402 	umull	r9, r4, r0, r2
 8000d26:	eba1 010e 	sub.w	r1, r1, lr
 8000d2a:	42a1      	cmp	r1, r4
 8000d2c:	46c8      	mov	r8, r9
 8000d2e:	46a6      	mov	lr, r4
 8000d30:	d356      	bcc.n	8000de0 <__udivmoddi4+0x2a4>
 8000d32:	d053      	beq.n	8000ddc <__udivmoddi4+0x2a0>
 8000d34:	b15d      	cbz	r5, 8000d4e <__udivmoddi4+0x212>
 8000d36:	ebb3 0208 	subs.w	r2, r3, r8
 8000d3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d42:	fa22 f306 	lsr.w	r3, r2, r6
 8000d46:	40f1      	lsrs	r1, r6
 8000d48:	431f      	orrs	r7, r3
 8000d4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d4e:	2600      	movs	r6, #0
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	f1c2 0320 	rsb	r3, r2, #32
 8000d5a:	40d8      	lsrs	r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	fa21 f303 	lsr.w	r3, r1, r3
 8000d64:	4091      	lsls	r1, r2
 8000d66:	4301      	orrs	r1, r0
 8000d68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6c:	fa1f fe8c 	uxth.w	lr, ip
 8000d70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d74:	fb07 3610 	mls	r6, r7, r0, r3
 8000d78:	0c0b      	lsrs	r3, r1, #16
 8000d7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d82:	429e      	cmp	r6, r3
 8000d84:	fa04 f402 	lsl.w	r4, r4, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x260>
 8000d8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d92:	d22f      	bcs.n	8000df4 <__udivmoddi4+0x2b8>
 8000d94:	429e      	cmp	r6, r3
 8000d96:	d92d      	bls.n	8000df4 <__udivmoddi4+0x2b8>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	b289      	uxth	r1, r1
 8000da0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000da4:	fb07 3316 	mls	r3, r7, r6, r3
 8000da8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dac:	fb06 f30e 	mul.w	r3, r6, lr
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x28a>
 8000db4:	eb1c 0101 	adds.w	r1, ip, r1
 8000db8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dbc:	d216      	bcs.n	8000dec <__udivmoddi4+0x2b0>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d914      	bls.n	8000dec <__udivmoddi4+0x2b0>
 8000dc2:	3e02      	subs	r6, #2
 8000dc4:	4461      	add	r1, ip
 8000dc6:	1ac9      	subs	r1, r1, r3
 8000dc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dcc:	e738      	b.n	8000c40 <__udivmoddi4+0x104>
 8000dce:	462e      	mov	r6, r5
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	e705      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000dd4:	4606      	mov	r6, r0
 8000dd6:	e6e3      	b.n	8000ba0 <__udivmoddi4+0x64>
 8000dd8:	4618      	mov	r0, r3
 8000dda:	e6f8      	b.n	8000bce <__udivmoddi4+0x92>
 8000ddc:	454b      	cmp	r3, r9
 8000dde:	d2a9      	bcs.n	8000d34 <__udivmoddi4+0x1f8>
 8000de0:	ebb9 0802 	subs.w	r8, r9, r2
 8000de4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000de8:	3801      	subs	r0, #1
 8000dea:	e7a3      	b.n	8000d34 <__udivmoddi4+0x1f8>
 8000dec:	4646      	mov	r6, r8
 8000dee:	e7ea      	b.n	8000dc6 <__udivmoddi4+0x28a>
 8000df0:	4620      	mov	r0, r4
 8000df2:	e794      	b.n	8000d1e <__udivmoddi4+0x1e2>
 8000df4:	4640      	mov	r0, r8
 8000df6:	e7d1      	b.n	8000d9c <__udivmoddi4+0x260>
 8000df8:	46d0      	mov	r8, sl
 8000dfa:	e77b      	b.n	8000cf4 <__udivmoddi4+0x1b8>
 8000dfc:	3b02      	subs	r3, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	e732      	b.n	8000c68 <__udivmoddi4+0x12c>
 8000e02:	4630      	mov	r0, r6
 8000e04:	e709      	b.n	8000c1a <__udivmoddi4+0xde>
 8000e06:	4464      	add	r4, ip
 8000e08:	3802      	subs	r0, #2
 8000e0a:	e742      	b.n	8000c92 <__udivmoddi4+0x156>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <vApplicationGetIdleTaskMemory+0x2c>)
 8000e20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	4a06      	ldr	r2, [pc, #24]	; (8000e40 <vApplicationGetIdleTaskMemory+0x30>)
 8000e26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2280      	movs	r2, #128	; 0x80
 8000e2c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e2e:	bf00      	nop
 8000e30:	3714      	adds	r7, #20
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	200000a4 	.word	0x200000a4
 8000e40:	20000158 	.word	0x20000158
 8000e44:	00000000 	.word	0x00000000

08000e48 <Pid_cal>:

/* USER CODE BEGIN PFP */

/*G�?i trong  HAL_TIM_PeriodElapsedCallback*/
double alpha;
void Pid_cal(){
 8000e48:	b5b0      	push	{r4, r5, r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	e2 = goc_target2 - goc_hientai;
 8000e4c:	4b96      	ldr	r3, [pc, #600]	; (80010a8 <Pid_cal+0x260>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b96      	ldr	r3, [pc, #600]	; (80010ac <Pid_cal+0x264>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	4a96      	ldr	r2, [pc, #600]	; (80010b0 <Pid_cal+0x268>)
 8000e58:	6013      	str	r3, [r2, #0]
	if(goc_target2>=0){
 8000e5a:	4b93      	ldr	r3, [pc, #588]	; (80010a8 <Pid_cal+0x260>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	db1d      	blt.n	8000e9e <Pid_cal+0x56>
		if((e2<goc_target2*(1/3)))
 8000e62:	4b93      	ldr	r3, [pc, #588]	; (80010b0 <Pid_cal+0x268>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	da0c      	bge.n	8000e84 <Pid_cal+0x3c>
			{alpha = 0.1;
 8000e6a:	4992      	ldr	r1, [pc, #584]	; (80010b4 <Pid_cal+0x26c>)
 8000e6c:	a384      	add	r3, pc, #528	; (adr r3, 8001080 <Pid_cal+0x238>)
 8000e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e72:	e9c1 2300 	strd	r2, r3, [r1]
			kp2 = 0.08;}
 8000e76:	4990      	ldr	r1, [pc, #576]	; (80010b8 <Pid_cal+0x270>)
 8000e78:	a383      	add	r3, pc, #524	; (adr r3, 8001088 <Pid_cal+0x240>)
 8000e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7e:	e9c1 2300 	strd	r2, r3, [r1]
 8000e82:	e029      	b.n	8000ed8 <Pid_cal+0x90>
		else {
		alpha = 0.8;
 8000e84:	498b      	ldr	r1, [pc, #556]	; (80010b4 <Pid_cal+0x26c>)
 8000e86:	a382      	add	r3, pc, #520	; (adr r3, 8001090 <Pid_cal+0x248>)
 8000e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8c:	e9c1 2300 	strd	r2, r3, [r1]
		kp2 = 0.5;}
 8000e90:	4989      	ldr	r1, [pc, #548]	; (80010b8 <Pid_cal+0x270>)
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	4b89      	ldr	r3, [pc, #548]	; (80010bc <Pid_cal+0x274>)
 8000e98:	e9c1 2300 	strd	r2, r3, [r1]
 8000e9c:	e01c      	b.n	8000ed8 <Pid_cal+0x90>
	}else{
		if((e2>goc_target2*(1/3)))
 8000e9e:	4b84      	ldr	r3, [pc, #528]	; (80010b0 <Pid_cal+0x268>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	dd0c      	ble.n	8000ec0 <Pid_cal+0x78>
					{alpha = 0.1;
 8000ea6:	4983      	ldr	r1, [pc, #524]	; (80010b4 <Pid_cal+0x26c>)
 8000ea8:	a375      	add	r3, pc, #468	; (adr r3, 8001080 <Pid_cal+0x238>)
 8000eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eae:	e9c1 2300 	strd	r2, r3, [r1]
					kp2 = 0.08;}
 8000eb2:	4981      	ldr	r1, [pc, #516]	; (80010b8 <Pid_cal+0x270>)
 8000eb4:	a374      	add	r3, pc, #464	; (adr r3, 8001088 <Pid_cal+0x240>)
 8000eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eba:	e9c1 2300 	strd	r2, r3, [r1]
 8000ebe:	e00b      	b.n	8000ed8 <Pid_cal+0x90>
				else {
				alpha = 0.8;
 8000ec0:	497c      	ldr	r1, [pc, #496]	; (80010b4 <Pid_cal+0x26c>)
 8000ec2:	a373      	add	r3, pc, #460	; (adr r3, 8001090 <Pid_cal+0x248>)
 8000ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec8:	e9c1 2300 	strd	r2, r3, [r1]
				kp2 = 0.5;}
 8000ecc:	497a      	ldr	r1, [pc, #488]	; (80010b8 <Pid_cal+0x270>)
 8000ece:	f04f 0200 	mov.w	r2, #0
 8000ed2:	4b7a      	ldr	r3, [pc, #488]	; (80010bc <Pid_cal+0x274>)
 8000ed4:	e9c1 2300 	strd	r2, r3, [r1]
	}

	    up2 = kp2*e2;
 8000ed8:	4b75      	ldr	r3, [pc, #468]	; (80010b0 <Pid_cal+0x268>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fac9 	bl	8000474 <__aeabi_i2d>
 8000ee2:	4b75      	ldr	r3, [pc, #468]	; (80010b8 <Pid_cal+0x270>)
 8000ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee8:	f7ff fb2e 	bl	8000548 <__aeabi_dmul>
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	4973      	ldr	r1, [pc, #460]	; (80010c0 <Pid_cal+0x278>)
 8000ef2:	e9c1 2300 	strd	r2, r3, [r1]
		ud2 = kd2*(e2 - pre_e2)/0.001;
 8000ef6:	4b6e      	ldr	r3, [pc, #440]	; (80010b0 <Pid_cal+0x268>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff faba 	bl	8000474 <__aeabi_i2d>
 8000f00:	4b70      	ldr	r3, [pc, #448]	; (80010c4 <Pid_cal+0x27c>)
 8000f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f06:	f7ff f967 	bl	80001d8 <__aeabi_dsub>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	4610      	mov	r0, r2
 8000f10:	4619      	mov	r1, r3
 8000f12:	4b6d      	ldr	r3, [pc, #436]	; (80010c8 <Pid_cal+0x280>)
 8000f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f18:	f7ff fb16 	bl	8000548 <__aeabi_dmul>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
 8000f24:	a35c      	add	r3, pc, #368	; (adr r3, 8001098 <Pid_cal+0x250>)
 8000f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2a:	f7ff fc37 	bl	800079c <__aeabi_ddiv>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	4966      	ldr	r1, [pc, #408]	; (80010cc <Pid_cal+0x284>)
 8000f34:	e9c1 2300 	strd	r2, r3, [r1]
//		ui2 = ui_p2 + ki2*e2*0.001;
		udf2 = (1-alpha)*uf2_p+alpha*ud2;
 8000f38:	4b5e      	ldr	r3, [pc, #376]	; (80010b4 <Pid_cal+0x26c>)
 8000f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3e:	f04f 0000 	mov.w	r0, #0
 8000f42:	4963      	ldr	r1, [pc, #396]	; (80010d0 <Pid_cal+0x288>)
 8000f44:	f7ff f948 	bl	80001d8 <__aeabi_dsub>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4b60      	ldr	r3, [pc, #384]	; (80010d4 <Pid_cal+0x28c>)
 8000f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f56:	f7ff faf7 	bl	8000548 <__aeabi_dmul>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4614      	mov	r4, r2
 8000f60:	461d      	mov	r5, r3
 8000f62:	4b54      	ldr	r3, [pc, #336]	; (80010b4 <Pid_cal+0x26c>)
 8000f64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f68:	4b58      	ldr	r3, [pc, #352]	; (80010cc <Pid_cal+0x284>)
 8000f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6e:	f7ff faeb 	bl	8000548 <__aeabi_dmul>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4620      	mov	r0, r4
 8000f78:	4629      	mov	r1, r5
 8000f7a:	f7ff f92f 	bl	80001dc <__adddf3>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4955      	ldr	r1, [pc, #340]	; (80010d8 <Pid_cal+0x290>)
 8000f84:	e9c1 2300 	strd	r2, r3, [r1]

//		if(ui2>8)ui2=8;
//		else if(ui2<-8)ui2=-8;


		pre_e2 = e2;
 8000f88:	4b49      	ldr	r3, [pc, #292]	; (80010b0 <Pid_cal+0x268>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fa71 	bl	8000474 <__aeabi_i2d>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	494b      	ldr	r1, [pc, #300]	; (80010c4 <Pid_cal+0x27c>)
 8000f98:	e9c1 2300 	strd	r2, r3, [r1]
		uf2_p = udf2;
 8000f9c:	4b4e      	ldr	r3, [pc, #312]	; (80010d8 <Pid_cal+0x290>)
 8000f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa2:	494c      	ldr	r1, [pc, #304]	; (80010d4 <Pid_cal+0x28c>)
 8000fa4:	e9c1 2300 	strd	r2, r3, [r1]
//		ui_p2 = ui2;

		if (u2>0)dir2=1;
 8000fa8:	4b4c      	ldr	r3, [pc, #304]	; (80010dc <Pid_cal+0x294>)
 8000faa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	f7ff fd57 	bl	8000a68 <__aeabi_dcmpgt>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <Pid_cal+0x180>
 8000fc0:	4b47      	ldr	r3, [pc, #284]	; (80010e0 <Pid_cal+0x298>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	e00f      	b.n	8000fe8 <Pid_cal+0x1a0>
		else if (u2<0)dir2 = -1;
 8000fc8:	4b44      	ldr	r3, [pc, #272]	; (80010dc <Pid_cal+0x294>)
 8000fca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	f04f 0300 	mov.w	r3, #0
 8000fd6:	f7ff fd29 	bl	8000a2c <__aeabi_dcmplt>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <Pid_cal+0x1a0>
 8000fe0:	4b3f      	ldr	r3, [pc, #252]	; (80010e0 <Pid_cal+0x298>)
 8000fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe6:	601a      	str	r2, [r3, #0]
		u2 = up2 + udf2;
 8000fe8:	4b35      	ldr	r3, [pc, #212]	; (80010c0 <Pid_cal+0x278>)
 8000fea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fee:	4b3a      	ldr	r3, [pc, #232]	; (80010d8 <Pid_cal+0x290>)
 8000ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff4:	f7ff f8f2 	bl	80001dc <__adddf3>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4937      	ldr	r1, [pc, #220]	; (80010dc <Pid_cal+0x294>)
 8000ffe:	e9c1 2300 	strd	r2, r3, [r1]
		if (u2> 300)u2 =300;//180
 8001002:	4b36      	ldr	r3, [pc, #216]	; (80010dc <Pid_cal+0x294>)
 8001004:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001008:	a325      	add	r3, pc, #148	; (adr r3, 80010a0 <Pid_cal+0x258>)
 800100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100e:	f7ff fd2b 	bl	8000a68 <__aeabi_dcmpgt>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d006      	beq.n	8001026 <Pid_cal+0x1de>
 8001018:	4930      	ldr	r1, [pc, #192]	; (80010dc <Pid_cal+0x294>)
 800101a:	a321      	add	r3, pc, #132	; (adr r3, 80010a0 <Pid_cal+0x258>)
 800101c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001020:	e9c1 2300 	strd	r2, r3, [r1]
 8001024:	e010      	b.n	8001048 <Pid_cal+0x200>
		else if (u2<-300)u2=-300;//-180
 8001026:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <Pid_cal+0x294>)
 8001028:	e9d3 0100 	ldrd	r0, r1, [r3]
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	4b2c      	ldr	r3, [pc, #176]	; (80010e4 <Pid_cal+0x29c>)
 8001032:	f7ff fcfb 	bl	8000a2c <__aeabi_dcmplt>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <Pid_cal+0x200>
 800103c:	4927      	ldr	r1, [pc, #156]	; (80010dc <Pid_cal+0x294>)
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <Pid_cal+0x29c>)
 8001044:	e9c1 2300 	strd	r2, r3, [r1]
		pwm = abs(u2);
 8001048:	4b24      	ldr	r3, [pc, #144]	; (80010dc <Pid_cal+0x294>)
 800104a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104e:	4610      	mov	r0, r2
 8001050:	4619      	mov	r1, r3
 8001052:	f7ff fd13 	bl	8000a7c <__aeabi_d2iz>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	bfb8      	it	lt
 800105c:	425b      	neglt	r3, r3
 800105e:	b29a      	uxth	r2, r3
 8001060:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <Pid_cal+0x2a0>)
 8001062:	801a      	strh	r2, [r3, #0]
		if((pwm < 10)&&(e2!=0)){//85
 8001064:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <Pid_cal+0x2a0>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	2b09      	cmp	r3, #9
 800106a:	d806      	bhi.n	800107a <Pid_cal+0x232>
 800106c:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <Pid_cal+0x268>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <Pid_cal+0x232>
			pwm = 10;
 8001074:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <Pid_cal+0x2a0>)
 8001076:	220a      	movs	r2, #10
 8001078:	801a      	strh	r2, [r3, #0]
		}
}
 800107a:	bf00      	nop
 800107c:	bdb0      	pop	{r4, r5, r7, pc}
 800107e:	bf00      	nop
 8001080:	9999999a 	.word	0x9999999a
 8001084:	3fb99999 	.word	0x3fb99999
 8001088:	47ae147b 	.word	0x47ae147b
 800108c:	3fb47ae1 	.word	0x3fb47ae1
 8001090:	9999999a 	.word	0x9999999a
 8001094:	3fe99999 	.word	0x3fe99999
 8001098:	d2f1a9fc 	.word	0xd2f1a9fc
 800109c:	3f50624d 	.word	0x3f50624d
 80010a0:	00000000 	.word	0x00000000
 80010a4:	4072c000 	.word	0x4072c000
 80010a8:	20000494 	.word	0x20000494
 80010ac:	20000480 	.word	0x20000480
 80010b0:	2000049c 	.word	0x2000049c
 80010b4:	200004d8 	.word	0x200004d8
 80010b8:	20000000 	.word	0x20000000
 80010bc:	3fe00000 	.word	0x3fe00000
 80010c0:	200004a8 	.word	0x200004a8
 80010c4:	200004a0 	.word	0x200004a0
 80010c8:	20000008 	.word	0x20000008
 80010cc:	200004b0 	.word	0x200004b0
 80010d0:	3ff00000 	.word	0x3ff00000
 80010d4:	200004c0 	.word	0x200004c0
 80010d8:	200004b8 	.word	0x200004b8
 80010dc:	200004c8 	.word	0x200004c8
 80010e0:	20000490 	.word	0x20000490
 80010e4:	c072c000 	.word	0xc072c000
 80010e8:	200004d4 	.word	0x200004d4

080010ec <GetDataCompass>:


char ds[12];
uint8_t uart1_ds, ds_ind, ds_cnt, ds_flg;

void GetDataCompass(){
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
	GocRobot = ds[1] - 48;
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <GetDataCompass+0x7c>)
 80010f4:	785b      	ldrb	r3, [r3, #1]
 80010f6:	3b30      	subs	r3, #48	; 0x30
 80010f8:	4a1c      	ldr	r2, [pc, #112]	; (800116c <GetDataCompass+0x80>)
 80010fa:	6013      	str	r3, [r2, #0]
	int x = 2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	607b      	str	r3, [r7, #4]
	while((ds[x] >= 48) && (ds[x] <= 57)){
 8001100:	e016      	b.n	8001130 <GetDataCompass+0x44>
		GocRobot = GocRobot * 10;
 8001102:	4b1a      	ldr	r3, [pc, #104]	; (800116c <GetDataCompass+0x80>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	461a      	mov	r2, r3
 8001110:	4b16      	ldr	r3, [pc, #88]	; (800116c <GetDataCompass+0x80>)
 8001112:	601a      	str	r2, [r3, #0]
		GocRobot += ds[x] -48;
 8001114:	4a14      	ldr	r2, [pc, #80]	; (8001168 <GetDataCompass+0x7c>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <GetDataCompass+0x80>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4413      	add	r3, r2
 8001126:	4a11      	ldr	r2, [pc, #68]	; (800116c <GetDataCompass+0x80>)
 8001128:	6013      	str	r3, [r2, #0]
		++x;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3301      	adds	r3, #1
 800112e:	607b      	str	r3, [r7, #4]
	while((ds[x] >= 48) && (ds[x] <= 57)){
 8001130:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <GetDataCompass+0x7c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b2f      	cmp	r3, #47	; 0x2f
 800113a:	d905      	bls.n	8001148 <GetDataCompass+0x5c>
 800113c:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <GetDataCompass+0x7c>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b39      	cmp	r3, #57	; 0x39
 8001146:	d9dc      	bls.n	8001102 <GetDataCompass+0x16>
	}

	if(ds[0] == '-'){
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <GetDataCompass+0x7c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b2d      	cmp	r3, #45	; 0x2d
 800114e:	d104      	bne.n	800115a <GetDataCompass+0x6e>
		GocRobot = -GocRobot;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <GetDataCompass+0x80>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	425b      	negs	r3, r3
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <GetDataCompass+0x80>)
 8001158:	6013      	str	r3, [r2, #0]
	}
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000508 	.word	0x20000508
 800116c:	20000500 	.word	0x20000500

08001170 <HAL_UART_RxCpltCallback>:

//char UARTRX1_Buffer[17];
//char DataMain[17];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
//	if(huart->Instance == USART1){
//
//	}

	if(huart->Instance == USART2){
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a34      	ldr	r2, [pc, #208]	; (8001250 <HAL_UART_RxCpltCallback+0xe0>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d120      	bne.n	80011c4 <HAL_UART_RxCpltCallback+0x54>
//		HAL_UART_Receive_IT(&huart2, (uint8_t*)UARTRX2_Buffer, 10);

		if(uart1_ds != '\n')
 8001182:	4b34      	ldr	r3, [pc, #208]	; (8001254 <HAL_UART_RxCpltCallback+0xe4>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b0a      	cmp	r3, #10
 8001188:	d00b      	beq.n	80011a2 <HAL_UART_RxCpltCallback+0x32>
				ds[ds_ind++] = uart1_ds;
 800118a:	4b33      	ldr	r3, [pc, #204]	; (8001258 <HAL_UART_RxCpltCallback+0xe8>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	b2d1      	uxtb	r1, r2
 8001192:	4a31      	ldr	r2, [pc, #196]	; (8001258 <HAL_UART_RxCpltCallback+0xe8>)
 8001194:	7011      	strb	r1, [r2, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <HAL_UART_RxCpltCallback+0xe4>)
 800119a:	7819      	ldrb	r1, [r3, #0]
 800119c:	4b2f      	ldr	r3, [pc, #188]	; (800125c <HAL_UART_RxCpltCallback+0xec>)
 800119e:	5499      	strb	r1, [r3, r2]
 80011a0:	e00b      	b.n	80011ba <HAL_UART_RxCpltCallback+0x4a>
		else{
				GetDataCompass();
 80011a2:	f7ff ffa3 	bl	80010ec <GetDataCompass>
				ds_cnt = ds_ind;
 80011a6:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <HAL_UART_RxCpltCallback+0xe8>)
 80011a8:	781a      	ldrb	r2, [r3, #0]
 80011aa:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <HAL_UART_RxCpltCallback+0xf0>)
 80011ac:	701a      	strb	r2, [r3, #0]
				ds_flg = 1;
 80011ae:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <HAL_UART_RxCpltCallback+0xf4>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	701a      	strb	r2, [r3, #0]
				ds_ind = 0;
 80011b4:	4b28      	ldr	r3, [pc, #160]	; (8001258 <HAL_UART_RxCpltCallback+0xe8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, &uart1_ds, 1);
 80011ba:	2201      	movs	r2, #1
 80011bc:	4925      	ldr	r1, [pc, #148]	; (8001254 <HAL_UART_RxCpltCallback+0xe4>)
 80011be:	482a      	ldr	r0, [pc, #168]	; (8001268 <HAL_UART_RxCpltCallback+0xf8>)
 80011c0:	f002 ff53 	bl	800406a <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART3){
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a28      	ldr	r2, [pc, #160]	; (800126c <HAL_UART_RxCpltCallback+0xfc>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d13c      	bne.n	8001248 <HAL_UART_RxCpltCallback+0xd8>
		HAL_UART_Receive_IT(&huart3, (uint8_t*)UARTRX3_Buffer, 9);
 80011ce:	2209      	movs	r2, #9
 80011d0:	4927      	ldr	r1, [pc, #156]	; (8001270 <HAL_UART_RxCpltCallback+0x100>)
 80011d2:	4828      	ldr	r0, [pc, #160]	; (8001274 <HAL_UART_RxCpltCallback+0x104>)
 80011d4:	f002 ff49 	bl	800406a <HAL_UART_Receive_IT>
		int ViTriData = -1;
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295
 80011dc:	617b      	str	r3, [r7, #20]
		for(int i = 0; i <= 8; ++i){
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	e010      	b.n	8001206 <HAL_UART_RxCpltCallback+0x96>
			if((UARTRX3_Buffer[i] == (RFAddress << 1 | 0)) || (UARTRX3_Buffer[i] == (RFAddress << 1 | 1))){
 80011e4:	4a22      	ldr	r2, [pc, #136]	; (8001270 <HAL_UART_RxCpltCallback+0x100>)
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4413      	add	r3, r2
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b94      	cmp	r3, #148	; 0x94
 80011ee:	d005      	beq.n	80011fc <HAL_UART_RxCpltCallback+0x8c>
 80011f0:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <HAL_UART_RxCpltCallback+0x100>)
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4413      	add	r3, r2
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b95      	cmp	r3, #149	; 0x95
 80011fa:	d101      	bne.n	8001200 <HAL_UART_RxCpltCallback+0x90>
				ViTriData = i;
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	617b      	str	r3, [r7, #20]
		for(int i = 0; i <= 8; ++i){
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	3301      	adds	r3, #1
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	2b08      	cmp	r3, #8
 800120a:	ddeb      	ble.n	80011e4 <HAL_UART_RxCpltCallback+0x74>
			}
		}
		if(ViTriData != -1){
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001212:	d019      	beq.n	8001248 <HAL_UART_RxCpltCallback+0xd8>
			int cnt = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
			while(cnt < 9){
 8001218:	e013      	b.n	8001242 <HAL_UART_RxCpltCallback+0xd2>
				DataTayGame[cnt] = UARTRX3_Buffer[ViTriData];
 800121a:	4a15      	ldr	r2, [pc, #84]	; (8001270 <HAL_UART_RxCpltCallback+0x100>)
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	4413      	add	r3, r2
 8001220:	7819      	ldrb	r1, [r3, #0]
 8001222:	4a15      	ldr	r2, [pc, #84]	; (8001278 <HAL_UART_RxCpltCallback+0x108>)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4413      	add	r3, r2
 8001228:	460a      	mov	r2, r1
 800122a:	701a      	strb	r2, [r3, #0]
				++ViTriData;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	3301      	adds	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
				if(ViTriData == 9){
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	2b09      	cmp	r3, #9
 8001236:	d101      	bne.n	800123c <HAL_UART_RxCpltCallback+0xcc>
					ViTriData = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
				}
				++cnt;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	3301      	adds	r3, #1
 8001240:	60fb      	str	r3, [r7, #12]
			while(cnt < 9){
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2b08      	cmp	r3, #8
 8001246:	dde8      	ble.n	800121a <HAL_UART_RxCpltCallback+0xaa>
			}
		}
	}
}
 8001248:	bf00      	nop
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40004400 	.word	0x40004400
 8001254:	20000514 	.word	0x20000514
 8001258:	20000515 	.word	0x20000515
 800125c:	20000508 	.word	0x20000508
 8001260:	20000516 	.word	0x20000516
 8001264:	20000517 	.word	0x20000517
 8001268:	200003e4 	.word	0x200003e4
 800126c:	40004800 	.word	0x40004800
 8001270:	200004e8 	.word	0x200004e8
 8001274:	20000428 	.word	0x20000428
 8001278:	200004f4 	.word	0x200004f4

0800127c <ControlDriver>:


uint8_t UART1TxData[17];
/*Hàm truy�?n data xuống cho các board driver*/
int ControlDriver(uint8_t Mode1, int Dir1, uint16_t Speed1, uint16_t Rotate1, uint8_t Mode2, int Dir2, uint16_t Speed2, uint16_t Rotate2, uint8_t Mode3, int Dir3, uint16_t Speed3, uint16_t Rotate3){
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	4611      	mov	r1, r2
 8001286:	461a      	mov	r2, r3
 8001288:	4603      	mov	r3, r0
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	460b      	mov	r3, r1
 800128e:	81bb      	strh	r3, [r7, #12]
 8001290:	4613      	mov	r3, r2
 8001292:	80fb      	strh	r3, [r7, #6]
	UART1TxData[0] = 149;
 8001294:	4b57      	ldr	r3, [pc, #348]	; (80013f4 <ControlDriver+0x178>)
 8001296:	2295      	movs	r2, #149	; 0x95
 8001298:	701a      	strb	r2, [r3, #0]

	if(Dir1 == -1){
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a0:	d108      	bne.n	80012b4 <ControlDriver+0x38>
		UART1TxData[1] = (Mode1 & 3) << 1;
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	f003 0306 	and.w	r3, r3, #6
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4b51      	ldr	r3, [pc, #324]	; (80013f4 <ControlDriver+0x178>)
 80012b0:	705a      	strb	r2, [r3, #1]
 80012b2:	e00e      	b.n	80012d2 <ControlDriver+0x56>
	}
	else if(Dir1 == 1){
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d10b      	bne.n	80012d2 <ControlDriver+0x56>
		UART1TxData[1] = (Mode1 & 3) << 1 | 1;
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	b25b      	sxtb	r3, r3
 80012c0:	f003 0306 	and.w	r3, r3, #6
 80012c4:	b25b      	sxtb	r3, r3
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	b25b      	sxtb	r3, r3
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4b49      	ldr	r3, [pc, #292]	; (80013f4 <ControlDriver+0x178>)
 80012d0:	705a      	strb	r2, [r3, #1]
	}

	UART1TxData[2] = Speed1 >> 8;
 80012d2:	89bb      	ldrh	r3, [r7, #12]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b46      	ldr	r3, [pc, #280]	; (80013f4 <ControlDriver+0x178>)
 80012dc:	709a      	strb	r2, [r3, #2]
	UART1TxData[3] = Speed1;
 80012de:	89bb      	ldrh	r3, [r7, #12]
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4b44      	ldr	r3, [pc, #272]	; (80013f4 <ControlDriver+0x178>)
 80012e4:	70da      	strb	r2, [r3, #3]

	UART1TxData[4] = Rotate1 >> 8;
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b41      	ldr	r3, [pc, #260]	; (80013f4 <ControlDriver+0x178>)
 80012f0:	711a      	strb	r2, [r3, #4]
	UART1TxData[5] = Rotate1;
 80012f2:	88fb      	ldrh	r3, [r7, #6]
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b3f      	ldr	r3, [pc, #252]	; (80013f4 <ControlDriver+0x178>)
 80012f8:	715a      	strb	r2, [r3, #5]

	if(Dir2 == -1){
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001300:	d108      	bne.n	8001314 <ControlDriver+0x98>
		UART1TxData[6] = (Mode2 & 3) << 1;
 8001302:	7e3b      	ldrb	r3, [r7, #24]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	b2db      	uxtb	r3, r3
 8001308:	f003 0306 	and.w	r3, r3, #6
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4b39      	ldr	r3, [pc, #228]	; (80013f4 <ControlDriver+0x178>)
 8001310:	719a      	strb	r2, [r3, #6]
 8001312:	e00e      	b.n	8001332 <ControlDriver+0xb6>
	}
	else if(Dir2 == 1){
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d10b      	bne.n	8001332 <ControlDriver+0xb6>
		UART1TxData[6] = (Mode2 & 3) << 1 | 1;
 800131a:	7e3b      	ldrb	r3, [r7, #24]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	b25b      	sxtb	r3, r3
 8001320:	f003 0306 	and.w	r3, r3, #6
 8001324:	b25b      	sxtb	r3, r3
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	b25b      	sxtb	r3, r3
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <ControlDriver+0x178>)
 8001330:	719a      	strb	r2, [r3, #6]
	}

	UART1TxData[7] = Speed2 >> 8;
 8001332:	8c3b      	ldrh	r3, [r7, #32]
 8001334:	0a1b      	lsrs	r3, r3, #8
 8001336:	b29b      	uxth	r3, r3
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <ControlDriver+0x178>)
 800133c:	71da      	strb	r2, [r3, #7]
	UART1TxData[8] = Speed2;
 800133e:	8c3b      	ldrh	r3, [r7, #32]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b2c      	ldr	r3, [pc, #176]	; (80013f4 <ControlDriver+0x178>)
 8001344:	721a      	strb	r2, [r3, #8]

	UART1TxData[9] = Rotate2 >> 8;
 8001346:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001348:	0a1b      	lsrs	r3, r3, #8
 800134a:	b29b      	uxth	r3, r3
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <ControlDriver+0x178>)
 8001350:	725a      	strb	r2, [r3, #9]
	UART1TxData[10] = Rotate2;
 8001352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <ControlDriver+0x178>)
 8001358:	729a      	strb	r2, [r3, #10]

	if(Dir3 == -1){
 800135a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001360:	d109      	bne.n	8001376 <ControlDriver+0xfa>
		UART1TxData[11] = (Mode3 & 3) << 1;
 8001362:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	b2db      	uxtb	r3, r3
 800136a:	f003 0306 	and.w	r3, r3, #6
 800136e:	b2da      	uxtb	r2, r3
 8001370:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <ControlDriver+0x178>)
 8001372:	72da      	strb	r2, [r3, #11]
 8001374:	e00f      	b.n	8001396 <ControlDriver+0x11a>
	}
	else if(Dir3 == 1){
 8001376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001378:	2b01      	cmp	r3, #1
 800137a:	d10c      	bne.n	8001396 <ControlDriver+0x11a>
		UART1TxData[11] = (Mode3 & 3) << 1 | 1;
 800137c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	b25b      	sxtb	r3, r3
 8001384:	f003 0306 	and.w	r3, r3, #6
 8001388:	b25b      	sxtb	r3, r3
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	b25b      	sxtb	r3, r3
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <ControlDriver+0x178>)
 8001394:	72da      	strb	r2, [r3, #11]
	}

	UART1TxData[12] = Speed3 >> 8;
 8001396:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	b29b      	uxth	r3, r3
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <ControlDriver+0x178>)
 80013a0:	731a      	strb	r2, [r3, #12]
	UART1TxData[13] = Speed3;
 80013a2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <ControlDriver+0x178>)
 80013a8:	735a      	strb	r2, [r3, #13]

	UART1TxData[14] = Rotate3 >> 8;
 80013aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80013ac:	0a1b      	lsrs	r3, r3, #8
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <ControlDriver+0x178>)
 80013b4:	739a      	strb	r2, [r3, #14]
	UART1TxData[15] = Rotate3;
 80013b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <ControlDriver+0x178>)
 80013bc:	73da      	strb	r2, [r3, #15]

	UART1TxData[16] = 10;
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <ControlDriver+0x178>)
 80013c0:	220a      	movs	r2, #10
 80013c2:	741a      	strb	r2, [r3, #16]

	if(HAL_UART_Transmit(&huart1, (uint8_t *) UART1TxData, 17, 1000) != HAL_OK){
 80013c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c8:	2211      	movs	r2, #17
 80013ca:	490a      	ldr	r1, [pc, #40]	; (80013f4 <ControlDriver+0x178>)
 80013cc:	480a      	ldr	r0, [pc, #40]	; (80013f8 <ControlDriver+0x17c>)
 80013ce:	f002 fdba 	bl	8003f46 <HAL_UART_Transmit>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d004      	beq.n	80013e2 <ControlDriver+0x166>
		osDelay(1);
 80013d8:	2001      	movs	r0, #1
 80013da:	f003 fe4a 	bl	8005072 <osDelay>
		return 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	e003      	b.n	80013ea <ControlDriver+0x16e>
	}
	osDelay(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f003 fe45 	bl	8005072 <osDelay>
	return 1;
 80013e8:	2301      	movs	r3, #1
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000518 	.word	0x20000518
 80013f8:	200003a0 	.word	0x200003a0

080013fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013fc:	b5b0      	push	{r4, r5, r7, lr}
 80013fe:	b09c      	sub	sp, #112	; 0x70
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001402:	f001 f845 	bl	8002490 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(5000);
 8001406:	f241 3088 	movw	r0, #5000	; 0x1388
 800140a:	f001 f883 	bl	8002514 <HAL_Delay>
  GocRobot = -999;
 800140e:	4b33      	ldr	r3, [pc, #204]	; (80014dc <main+0xe0>)
 8001410:	4a33      	ldr	r2, [pc, #204]	; (80014e0 <main+0xe4>)
 8001412:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001414:	f000 f87e 	bl	8001514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001418:	f000 f9b2 	bl	8001780 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800141c:	f000 f930 	bl	8001680 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001420:	f000 f95a 	bl	80016d8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001424:	f000 f982 	bl	800172c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001428:	f000 f8de 	bl	80015e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Receive_IT(&huart2, &uart1_ds, 1);
 800142c:	2201      	movs	r2, #1
 800142e:	492d      	ldr	r1, [pc, #180]	; (80014e4 <main+0xe8>)
 8001430:	482d      	ldr	r0, [pc, #180]	; (80014e8 <main+0xec>)
 8001432:	f002 fe1a 	bl	800406a <HAL_UART_Receive_IT>
  //Uart3 Connect to HC-12
  HAL_UART_Receive_IT(&huart3, (uint8_t*)UARTRX3_Buffer, 9);
 8001436:	2209      	movs	r2, #9
 8001438:	492c      	ldr	r1, [pc, #176]	; (80014ec <main+0xf0>)
 800143a:	482d      	ldr	r0, [pc, #180]	; (80014f0 <main+0xf4>)
 800143c:	f002 fe15 	bl	800406a <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001440:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <main+0xf8>)
 8001442:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001446:	461d      	mov	r5, r3
 8001448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800144a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800144c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001450:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001454:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f003 fdbd 	bl	8004fda <osThreadCreate>
 8001460:	4603      	mov	r3, r0
 8001462:	4a25      	ldr	r2, [pc, #148]	; (80014f8 <main+0xfc>)
 8001464:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, TaskBlinkLed, osPriorityIdle, 0, 128);
 8001466:	4b25      	ldr	r3, [pc, #148]	; (80014fc <main+0x100>)
 8001468:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800146c:	461d      	mov	r5, r3
 800146e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001470:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001472:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001476:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 800147a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f003 fdaa 	bl	8004fda <osThreadCreate>
 8001486:	4603      	mov	r3, r0
 8001488:	4a1d      	ldr	r2, [pc, #116]	; (8001500 <main+0x104>)
 800148a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, TaskUART, osPriorityIdle, 0, 128);
 800148c:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <main+0x108>)
 800148e:	f107 041c 	add.w	r4, r7, #28
 8001492:	461d      	mov	r5, r3
 8001494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001498:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800149c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 80014a0:	f107 031c 	add.w	r3, r7, #28
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f003 fd97 	bl	8004fda <osThreadCreate>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4a16      	ldr	r2, [pc, #88]	; (8001508 <main+0x10c>)
 80014b0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_setting */
  osThreadDef(Task_setting, TaskXoayLaBan, osPriorityAboveNormal, 0, 128);
 80014b2:	4b16      	ldr	r3, [pc, #88]	; (800150c <main+0x110>)
 80014b4:	463c      	mov	r4, r7
 80014b6:	461d      	mov	r5, r3
 80014b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_settingHandle = osThreadCreate(osThread(Task_setting), NULL);
 80014c4:	463b      	mov	r3, r7
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f003 fd86 	bl	8004fda <osThreadCreate>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <main+0x114>)
 80014d2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80014d4:	f003 fd7a 	bl	8004fcc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  ControlDriver(0, 0, 0, 0, 0);

  while (1)
 80014d8:	e7fe      	b.n	80014d8 <main+0xdc>
 80014da:	bf00      	nop
 80014dc:	20000500 	.word	0x20000500
 80014e0:	fffffc19 	.word	0xfffffc19
 80014e4:	20000514 	.word	0x20000514
 80014e8:	200003e4 	.word	0x200003e4
 80014ec:	200004e8 	.word	0x200004e8
 80014f0:	20000428 	.word	0x20000428
 80014f4:	080066b8 	.word	0x080066b8
 80014f8:	2000046c 	.word	0x2000046c
 80014fc:	080066d4 	.word	0x080066d4
 8001500:	20000470 	.word	0x20000470
 8001504:	080066f0 	.word	0x080066f0
 8001508:	20000474 	.word	0x20000474
 800150c:	0800670c 	.word	0x0800670c
 8001510:	20000478 	.word	0x20000478

08001514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b094      	sub	sp, #80	; 0x50
 8001518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151a:	f107 0320 	add.w	r3, r7, #32
 800151e:	2230      	movs	r2, #48	; 0x30
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f004 ffd8 	bl	80064d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	4b28      	ldr	r3, [pc, #160]	; (80015e0 <SystemClock_Config+0xcc>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	4a27      	ldr	r2, [pc, #156]	; (80015e0 <SystemClock_Config+0xcc>)
 8001542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001546:	6413      	str	r3, [r2, #64]	; 0x40
 8001548:	4b25      	ldr	r3, [pc, #148]	; (80015e0 <SystemClock_Config+0xcc>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001554:	2300      	movs	r3, #0
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <SystemClock_Config+0xd0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a21      	ldr	r2, [pc, #132]	; (80015e4 <SystemClock_Config+0xd0>)
 800155e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <SystemClock_Config+0xd0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001570:	2301      	movs	r3, #1
 8001572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157a:	2302      	movs	r3, #2
 800157c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800157e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001584:	2304      	movs	r3, #4
 8001586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001588:	23a8      	movs	r3, #168	; 0xa8
 800158a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800158c:	2302      	movs	r3, #2
 800158e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001590:	2304      	movs	r3, #4
 8001592:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001594:	f107 0320 	add.w	r3, r7, #32
 8001598:	4618      	mov	r0, r3
 800159a:	f001 fb3b 	bl	8002c14 <HAL_RCC_OscConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015a4:	f000 fd60 	bl	8002068 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a8:	230f      	movs	r3, #15
 80015aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ac:	2302      	movs	r3, #2
 80015ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	2105      	movs	r1, #5
 80015c6:	4618      	mov	r0, r3
 80015c8:	f001 fd9c 	bl	8003104 <HAL_RCC_ClockConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015d2:	f000 fd49 	bl	8002068 <Error_Handler>
  }
}
 80015d6:	bf00      	nop
 80015d8:	3750      	adds	r7, #80	; 0x50
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40007000 	.word	0x40007000

080015e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ee:	f107 0308 	add.w	r3, r7, #8
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fc:	463b      	mov	r3, r7
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001604:	4b1d      	ldr	r3, [pc, #116]	; (800167c <MX_TIM2_Init+0x94>)
 8001606:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800160a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <MX_TIM2_Init+0x94>)
 800160e:	2253      	movs	r2, #83	; 0x53
 8001610:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001612:	4b1a      	ldr	r3, [pc, #104]	; (800167c <MX_TIM2_Init+0x94>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <MX_TIM2_Init+0x94>)
 800161a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800161e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001620:	4b16      	ldr	r3, [pc, #88]	; (800167c <MX_TIM2_Init+0x94>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <MX_TIM2_Init+0x94>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800162c:	4813      	ldr	r0, [pc, #76]	; (800167c <MX_TIM2_Init+0x94>)
 800162e:	f001 ffbb 	bl	80035a8 <HAL_TIM_Base_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001638:	f000 fd16 	bl	8002068 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001640:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001642:	f107 0308 	add.w	r3, r7, #8
 8001646:	4619      	mov	r1, r3
 8001648:	480c      	ldr	r0, [pc, #48]	; (800167c <MX_TIM2_Init+0x94>)
 800164a:	f002 f975 	bl	8003938 <HAL_TIM_ConfigClockSource>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001654:	f000 fd08 	bl	8002068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001658:	2300      	movs	r3, #0
 800165a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001660:	463b      	mov	r3, r7
 8001662:	4619      	mov	r1, r3
 8001664:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_TIM2_Init+0x94>)
 8001666:	f002 fb91 	bl	8003d8c <HAL_TIMEx_MasterConfigSynchronization>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001670:	f000 fcfa 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001674:	bf00      	nop
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000358 	.word	0x20000358

08001680 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <MX_USART1_UART_Init+0x50>)
 8001686:	4a13      	ldr	r2, [pc, #76]	; (80016d4 <MX_USART1_UART_Init+0x54>)
 8001688:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_USART1_UART_Init+0x50>)
 800168c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001690:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001692:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_USART1_UART_Init+0x50>)
 8001694:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001698:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800169a:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <MX_USART1_UART_Init+0x50>)
 800169c:	2200      	movs	r2, #0
 800169e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_USART1_UART_Init+0x50>)
 80016a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_USART1_UART_Init+0x50>)
 80016aa:	220c      	movs	r2, #12
 80016ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MX_USART1_UART_Init+0x50>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_USART1_UART_Init+0x50>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_USART1_UART_Init+0x50>)
 80016bc:	f002 fbf6 	bl	8003eac <HAL_UART_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 80016c6:	f000 fccf 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200003a0 	.word	0x200003a0
 80016d4:	40011000 	.word	0x40011000

080016d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 80016de:	4a12      	ldr	r2, [pc, #72]	; (8001728 <MX_USART2_UART_Init+0x50>)
 80016e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 80016e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 80016fe:	220c      	movs	r2, #12
 8001700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 800170a:	2200      	movs	r2, #0
 800170c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800170e:	4805      	ldr	r0, [pc, #20]	; (8001724 <MX_USART2_UART_Init+0x4c>)
 8001710:	f002 fbcc 	bl	8003eac <HAL_UART_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800171a:	f000 fca5 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200003e4 	.word	0x200003e4
 8001728:	40004400 	.word	0x40004400

0800172c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <MX_USART3_UART_Init+0x50>)
 8001734:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001738:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800173c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001752:	220c      	movs	r2, #12
 8001754:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_USART3_UART_Init+0x4c>)
 8001764:	f002 fba2 	bl	8003eac <HAL_UART_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800176e:	f000 fc7b 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000428 	.word	0x20000428
 800177c:	40004800 	.word	0x40004800

08001780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001786:	f107 030c 	add.w	r3, r7, #12
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	4b30      	ldr	r3, [pc, #192]	; (800185c <MX_GPIO_Init+0xdc>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a2f      	ldr	r2, [pc, #188]	; (800185c <MX_GPIO_Init+0xdc>)
 80017a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b2d      	ldr	r3, [pc, #180]	; (800185c <MX_GPIO_Init+0xdc>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	4b29      	ldr	r3, [pc, #164]	; (800185c <MX_GPIO_Init+0xdc>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a28      	ldr	r2, [pc, #160]	; (800185c <MX_GPIO_Init+0xdc>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b26      	ldr	r3, [pc, #152]	; (800185c <MX_GPIO_Init+0xdc>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	603b      	str	r3, [r7, #0]
 80017d2:	4b22      	ldr	r3, [pc, #136]	; (800185c <MX_GPIO_Init+0xdc>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a21      	ldr	r2, [pc, #132]	; (800185c <MX_GPIO_Init+0xdc>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b1f      	ldr	r3, [pc, #124]	; (800185c <MX_GPIO_Init+0xdc>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|CompassReset_Pin, GPIO_PIN_RESET);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2112      	movs	r1, #18
 80017ee:	481c      	ldr	r0, [pc, #112]	; (8001860 <MX_GPIO_Init+0xe0>)
 80017f0:	f001 f9dc 	bl	8002bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RelayKhanCap_GPIO_Port, RelayKhanCap_Pin, GPIO_PIN_RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017fa:	481a      	ldr	r0, [pc, #104]	; (8001864 <MX_GPIO_Init+0xe4>)
 80017fc:	f001 f9d6 	bl	8002bac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin CompassReset_Pin */
  GPIO_InitStruct.Pin = LED_Pin|CompassReset_Pin;
 8001800:	2312      	movs	r3, #18
 8001802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001804:	2301      	movs	r3, #1
 8001806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001810:	f107 030c 	add.w	r3, r7, #12
 8001814:	4619      	mov	r1, r3
 8001816:	4812      	ldr	r0, [pc, #72]	; (8001860 <MX_GPIO_Init+0xe0>)
 8001818:	f001 f814 	bl	8002844 <HAL_GPIO_Init>

  /*Configure GPIO pins : CB_thanh_Pin CB_cot_Pin */
  GPIO_InitStruct.Pin = CB_thanh_Pin|CB_cot_Pin;
 800181c:	23a0      	movs	r3, #160	; 0xa0
 800181e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001820:	2300      	movs	r3, #0
 8001822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	f107 030c 	add.w	r3, r7, #12
 800182c:	4619      	mov	r1, r3
 800182e:	480c      	ldr	r0, [pc, #48]	; (8001860 <MX_GPIO_Init+0xe0>)
 8001830:	f001 f808 	bl	8002844 <HAL_GPIO_Init>

  /*Configure GPIO pin : RelayKhanCap_Pin */
  GPIO_InitStruct.Pin = RelayKhanCap_Pin;
 8001834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001838:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183a:	2301      	movs	r3, #1
 800183c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RelayKhanCap_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	4619      	mov	r1, r3
 800184c:	4805      	ldr	r0, [pc, #20]	; (8001864 <MX_GPIO_Init+0xe4>)
 800184e:	f000 fff9 	bl	8002844 <HAL_GPIO_Init>

}
 8001852:	bf00      	nop
 8001854:	3720      	adds	r7, #32
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	40020000 	.word	0x40020000
 8001864:	40020400 	.word	0x40020400

08001868 <batthanh>:

/* USER CODE BEGIN 4 */
void batthanh(void){
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af08      	add	r7, sp, #32
	v_t = 20;
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <batthanh+0x6c>)
 8001870:	2214      	movs	r2, #20
 8001872:	601a      	str	r2, [r3, #0]
	forward = 2;
 8001874:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <batthanh+0x70>)
 8001876:	2202      	movs	r2, #2
 8001878:	601a      	str	r2, [r3, #0]
	while(1){
		if(HAL_GPIO_ReadPin(CB_thanh_GPIO_Port, CB_thanh_Pin)==0){
 800187a:	2120      	movs	r1, #32
 800187c:	4817      	ldr	r0, [pc, #92]	; (80018dc <batthanh+0x74>)
 800187e:	f001 f97d 	bl	8002b7c <HAL_GPIO_ReadPin>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f8      	bne.n	800187a <batthanh+0x12>
			v_t = 0;
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <batthanh+0x6c>)
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
			osDelay(1000);
 800188e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001892:	f003 fbee 	bl	8005072 <osDelay>

			forward = 0;
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <batthanh+0x70>)
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
			  RotatePid = 0;
 800189c:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <batthanh+0x78>)
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
			  ControlDriver(0, 1, 0, 90, 0, 1, 0, 90, 0, 1, 0, 90);
 80018a2:	235a      	movs	r3, #90	; 0x5a
 80018a4:	9307      	str	r3, [sp, #28]
 80018a6:	2300      	movs	r3, #0
 80018a8:	9306      	str	r3, [sp, #24]
 80018aa:	2301      	movs	r3, #1
 80018ac:	9305      	str	r3, [sp, #20]
 80018ae:	2300      	movs	r3, #0
 80018b0:	9304      	str	r3, [sp, #16]
 80018b2:	235a      	movs	r3, #90	; 0x5a
 80018b4:	9303      	str	r3, [sp, #12]
 80018b6:	2300      	movs	r3, #0
 80018b8:	9302      	str	r3, [sp, #8]
 80018ba:	2301      	movs	r3, #1
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	2300      	movs	r3, #0
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	235a      	movs	r3, #90	; 0x5a
 80018c4:	2200      	movs	r2, #0
 80018c6:	2101      	movs	r1, #1
 80018c8:	2000      	movs	r0, #0
 80018ca:	f7ff fcd7 	bl	800127c <ControlDriver>
			  return;
 80018ce:	bf00      	nop
		}
	}
}
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000488 	.word	0x20000488
 80018d8:	20000484 	.word	0x20000484
 80018dc:	40020000 	.word	0x40020000
 80018e0:	200004d0 	.word	0x200004d0
 80018e4:	00000000 	.word	0x00000000

080018e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80018e8:	b5b0      	push	{r4, r5, r7, lr}
 80018ea:	b08a      	sub	sp, #40	; 0x28
 80018ec:	af08      	add	r7, sp, #32
 80018ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  /*Nhấn nút F1*/
	  if(DataTayGame[7] == 128 && !DangThucThi){
 80018f0:	4bb7      	ldr	r3, [pc, #732]	; (8001bd0 <StartDefaultTask+0x2e8>)
 80018f2:	79db      	ldrb	r3, [r3, #7]
 80018f4:	2b80      	cmp	r3, #128	; 0x80
 80018f6:	f040 80c4 	bne.w	8001a82 <StartDefaultTask+0x19a>
 80018fa:	4bb6      	ldr	r3, [pc, #728]	; (8001bd4 <StartDefaultTask+0x2ec>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f040 80bf 	bne.w	8001a82 <StartDefaultTask+0x19a>

		  ControlDriver(0, 1, 0, 90, 0, 1, 0, 90, 0, 1, 0, 90);
 8001904:	235a      	movs	r3, #90	; 0x5a
 8001906:	9307      	str	r3, [sp, #28]
 8001908:	2300      	movs	r3, #0
 800190a:	9306      	str	r3, [sp, #24]
 800190c:	2301      	movs	r3, #1
 800190e:	9305      	str	r3, [sp, #20]
 8001910:	2300      	movs	r3, #0
 8001912:	9304      	str	r3, [sp, #16]
 8001914:	235a      	movs	r3, #90	; 0x5a
 8001916:	9303      	str	r3, [sp, #12]
 8001918:	2300      	movs	r3, #0
 800191a:	9302      	str	r3, [sp, #8]
 800191c:	2301      	movs	r3, #1
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	2300      	movs	r3, #0
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	235a      	movs	r3, #90	; 0x5a
 8001926:	2200      	movs	r2, #0
 8001928:	2101      	movs	r1, #1
 800192a:	2000      	movs	r0, #0
 800192c:	f7ff fca6 	bl	800127c <ControlDriver>
		  osDelay(1500);
 8001930:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001934:	f003 fb9d 	bl	8005072 <osDelay>
		  goc_target = 0;
 8001938:	4ba7      	ldr	r3, [pc, #668]	; (8001bd8 <StartDefaultTask+0x2f0>)
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]


		  forward = 1;
 800193e:	4ba7      	ldr	r3, [pc, #668]	; (8001bdc <StartDefaultTask+0x2f4>)
 8001940:	2201      	movs	r2, #1
 8001942:	601a      	str	r2, [r3, #0]
		  RotatePid = 0;
 8001944:	4ba6      	ldr	r3, [pc, #664]	; (8001be0 <StartDefaultTask+0x2f8>)
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
		  v_t = 120;
 800194a:	4ba6      	ldr	r3, [pc, #664]	; (8001be4 <StartDefaultTask+0x2fc>)
 800194c:	2278      	movs	r2, #120	; 0x78
 800194e:	601a      	str	r2, [r3, #0]
		  osDelay(3800);
 8001950:	f640 60d8 	movw	r0, #3800	; 0xed8
 8001954:	f003 fb8d 	bl	8005072 <osDelay>
		  v_t = 0;
 8001958:	4ba2      	ldr	r3, [pc, #648]	; (8001be4 <StartDefaultTask+0x2fc>)
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
		  osDelay(500);
 800195e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001962:	f003 fb86 	bl	8005072 <osDelay>
		  forward = 0;
 8001966:	4b9d      	ldr	r3, [pc, #628]	; (8001bdc <StartDefaultTask+0x2f4>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
		  RotatePid = 0;
 800196c:	4b9c      	ldr	r3, [pc, #624]	; (8001be0 <StartDefaultTask+0x2f8>)
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
		  ControlDriver(0, 1, 0, (90-0.8*e1), 0, 1, 0, (90-0.8*e1), 0, 1, 0, (90+0.8*e1));
 8001972:	4b9d      	ldr	r3, [pc, #628]	; (8001be8 <StartDefaultTask+0x300>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fd7c 	bl	8000474 <__aeabi_i2d>
 800197c:	a392      	add	r3, pc, #584	; (adr r3, 8001bc8 <StartDefaultTask+0x2e0>)
 800197e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001982:	f7fe fde1 	bl	8000548 <__aeabi_dmul>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	f04f 0000 	mov.w	r0, #0
 800198e:	4997      	ldr	r1, [pc, #604]	; (8001bec <StartDefaultTask+0x304>)
 8001990:	f7fe fc22 	bl	80001d8 <__aeabi_dsub>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	f7ff f896 	bl	8000acc <__aeabi_d2uiz>
 80019a0:	4603      	mov	r3, r0
 80019a2:	b29d      	uxth	r5, r3
 80019a4:	4b90      	ldr	r3, [pc, #576]	; (8001be8 <StartDefaultTask+0x300>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fd63 	bl	8000474 <__aeabi_i2d>
 80019ae:	a386      	add	r3, pc, #536	; (adr r3, 8001bc8 <StartDefaultTask+0x2e0>)
 80019b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b4:	f7fe fdc8 	bl	8000548 <__aeabi_dmul>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	f04f 0000 	mov.w	r0, #0
 80019c0:	498a      	ldr	r1, [pc, #552]	; (8001bec <StartDefaultTask+0x304>)
 80019c2:	f7fe fc09 	bl	80001d8 <__aeabi_dsub>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	f7ff f87d 	bl	8000acc <__aeabi_d2uiz>
 80019d2:	4603      	mov	r3, r0
 80019d4:	b29c      	uxth	r4, r3
 80019d6:	4b84      	ldr	r3, [pc, #528]	; (8001be8 <StartDefaultTask+0x300>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fd4a 	bl	8000474 <__aeabi_i2d>
 80019e0:	a379      	add	r3, pc, #484	; (adr r3, 8001bc8 <StartDefaultTask+0x2e0>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	f7fe fdaf 	bl	8000548 <__aeabi_dmul>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	4b7d      	ldr	r3, [pc, #500]	; (8001bec <StartDefaultTask+0x304>)
 80019f8:	f7fe fbf0 	bl	80001dc <__adddf3>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	f7ff f862 	bl	8000acc <__aeabi_d2uiz>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	9307      	str	r3, [sp, #28]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	9306      	str	r3, [sp, #24]
 8001a12:	2301      	movs	r3, #1
 8001a14:	9305      	str	r3, [sp, #20]
 8001a16:	2300      	movs	r3, #0
 8001a18:	9304      	str	r3, [sp, #16]
 8001a1a:	9403      	str	r4, [sp, #12]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	9302      	str	r3, [sp, #8]
 8001a20:	2301      	movs	r3, #1
 8001a22:	9301      	str	r3, [sp, #4]
 8001a24:	2300      	movs	r3, #0
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	462b      	mov	r3, r5
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f7ff fc24 	bl	800127c <ControlDriver>
		  osDelay(1000);
 8001a34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a38:	f003 fb1b 	bl	8005072 <osDelay>
		  ControlDriver(0, 1, 0, (90), 0, 1, 0, (90), 0, 1, 0, (90));
 8001a3c:	235a      	movs	r3, #90	; 0x5a
 8001a3e:	9307      	str	r3, [sp, #28]
 8001a40:	2300      	movs	r3, #0
 8001a42:	9306      	str	r3, [sp, #24]
 8001a44:	2301      	movs	r3, #1
 8001a46:	9305      	str	r3, [sp, #20]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	9304      	str	r3, [sp, #16]
 8001a4c:	235a      	movs	r3, #90	; 0x5a
 8001a4e:	9303      	str	r3, [sp, #12]
 8001a50:	2300      	movs	r3, #0
 8001a52:	9302      	str	r3, [sp, #8]
 8001a54:	2301      	movs	r3, #1
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	2300      	movs	r3, #0
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	235a      	movs	r3, #90	; 0x5a
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2101      	movs	r1, #1
 8001a62:	2000      	movs	r0, #0
 8001a64:	f7ff fc0a 	bl	800127c <ControlDriver>
		  osDelay(2000);
 8001a68:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a6c:	f003 fb01 	bl	8005072 <osDelay>
		  goc_target2 = 0;
 8001a70:	4b5f      	ldr	r3, [pc, #380]	; (8001bf0 <StartDefaultTask+0x308>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
		  RotatePid = 1;
 8001a76:	4b5a      	ldr	r3, [pc, #360]	; (8001be0 <StartDefaultTask+0x2f8>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]
		 DangThucThi = 1;
 8001a7c:	4b55      	ldr	r3, [pc, #340]	; (8001bd4 <StartDefaultTask+0x2ec>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	601a      	str	r2, [r3, #0]
	  }

////
	  /*Nhấn nút F2*/
	  if(DataTayGame[7] == 64 && !DangThucThi){
 8001a82:	4b53      	ldr	r3, [pc, #332]	; (8001bd0 <StartDefaultTask+0x2e8>)
 8001a84:	79db      	ldrb	r3, [r3, #7]
 8001a86:	2b40      	cmp	r3, #64	; 0x40
 8001a88:	d13c      	bne.n	8001b04 <StartDefaultTask+0x21c>
 8001a8a:	4b52      	ldr	r3, [pc, #328]	; (8001bd4 <StartDefaultTask+0x2ec>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d138      	bne.n	8001b04 <StartDefaultTask+0x21c>
		  forward = 0;
 8001a92:	4b52      	ldr	r3, [pc, #328]	; (8001bdc <StartDefaultTask+0x2f4>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
		  RotatePid = 0;
 8001a98:	4b51      	ldr	r3, [pc, #324]	; (8001be0 <StartDefaultTask+0x2f8>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
		  ControlDriver(0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0);
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	9307      	str	r3, [sp, #28]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	9306      	str	r3, [sp, #24]
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	9305      	str	r3, [sp, #20]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	9304      	str	r3, [sp, #16]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	9303      	str	r3, [sp, #12]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	9302      	str	r3, [sp, #8]
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	2300      	movs	r3, #0
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f7ff fbd9 	bl	800127c <ControlDriver>
		  osDelay(2000);
 8001aca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ace:	f003 fad0 	bl	8005072 <osDelay>
		  ControlDriver(3, 1, 0, 0, 3, 1, 0, 0, 3, 1, 0, 0);
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	9307      	str	r3, [sp, #28]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	9306      	str	r3, [sp, #24]
 8001ada:	2301      	movs	r3, #1
 8001adc:	9305      	str	r3, [sp, #20]
 8001ade:	2303      	movs	r3, #3
 8001ae0:	9304      	str	r3, [sp, #16]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	9303      	str	r3, [sp, #12]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	9302      	str	r3, [sp, #8]
 8001aea:	2301      	movs	r3, #1
 8001aec:	9301      	str	r3, [sp, #4]
 8001aee:	2303      	movs	r3, #3
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	2300      	movs	r3, #0
 8001af4:	2200      	movs	r2, #0
 8001af6:	2101      	movs	r1, #1
 8001af8:	2003      	movs	r0, #3
 8001afa:	f7ff fbbf 	bl	800127c <ControlDriver>
		  DangThucThi = 1;
 8001afe:	4b35      	ldr	r3, [pc, #212]	; (8001bd4 <StartDefaultTask+0x2ec>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
	  }
////
////	  /*Nhấn nút F3*/
		  if(DataTayGame[7] == 32 && !DangThucThi){
 8001b04:	4b32      	ldr	r3, [pc, #200]	; (8001bd0 <StartDefaultTask+0x2e8>)
 8001b06:	79db      	ldrb	r3, [r3, #7]
 8001b08:	2b20      	cmp	r3, #32
 8001b0a:	d151      	bne.n	8001bb0 <StartDefaultTask+0x2c8>
 8001b0c:	4b31      	ldr	r3, [pc, #196]	; (8001bd4 <StartDefaultTask+0x2ec>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d14d      	bne.n	8001bb0 <StartDefaultTask+0x2c8>
			  forward = 0;
 8001b14:	4b31      	ldr	r3, [pc, #196]	; (8001bdc <StartDefaultTask+0x2f4>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
			  RotatePid = 0;
 8001b1a:	4b31      	ldr	r3, [pc, #196]	; (8001be0 <StartDefaultTask+0x2f8>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
			  ControlDriver(0, 1, 0, 60, 0, -1, 0, 120, 0, 1, 0, 180);
 8001b20:	23b4      	movs	r3, #180	; 0xb4
 8001b22:	9307      	str	r3, [sp, #28]
 8001b24:	2300      	movs	r3, #0
 8001b26:	9306      	str	r3, [sp, #24]
 8001b28:	2301      	movs	r3, #1
 8001b2a:	9305      	str	r3, [sp, #20]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	9304      	str	r3, [sp, #16]
 8001b30:	2378      	movs	r3, #120	; 0x78
 8001b32:	9303      	str	r3, [sp, #12]
 8001b34:	2300      	movs	r3, #0
 8001b36:	9302      	str	r3, [sp, #8]
 8001b38:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3c:	9301      	str	r3, [sp, #4]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	233c      	movs	r3, #60	; 0x3c
 8001b44:	2200      	movs	r2, #0
 8001b46:	2101      	movs	r1, #1
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f7ff fb97 	bl	800127c <ControlDriver>

			  goc_target2 = -90;
 8001b4e:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <StartDefaultTask+0x308>)
 8001b50:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8001b54:	601a      	str	r2, [r3, #0]
			  RotatePid = 1;
 8001b56:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <StartDefaultTask+0x2f8>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]
			  osDelay(5000);
 8001b5c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001b60:	f003 fa87 	bl	8005072 <osDelay>

			  RotatePid = 0;
 8001b64:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <StartDefaultTask+0x2f8>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
			  ControlDriver(0, 1, 0, 30, 0, 1, 0, 30, 0, 1, 0, 30);
 8001b6a:	231e      	movs	r3, #30
 8001b6c:	9307      	str	r3, [sp, #28]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	9306      	str	r3, [sp, #24]
 8001b72:	2301      	movs	r3, #1
 8001b74:	9305      	str	r3, [sp, #20]
 8001b76:	2300      	movs	r3, #0
 8001b78:	9304      	str	r3, [sp, #16]
 8001b7a:	231e      	movs	r3, #30
 8001b7c:	9303      	str	r3, [sp, #12]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	9302      	str	r3, [sp, #8]
 8001b82:	2301      	movs	r3, #1
 8001b84:	9301      	str	r3, [sp, #4]
 8001b86:	2300      	movs	r3, #0
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	231e      	movs	r3, #30
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2101      	movs	r1, #1
 8001b90:	2000      	movs	r0, #0
 8001b92:	f7ff fb73 	bl	800127c <ControlDriver>
			  osDelay(2000);
 8001b96:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b9a:	f003 fa6a 	bl	8005072 <osDelay>

			  goc_target = -90;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <StartDefaultTask+0x2f0>)
 8001ba0:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8001ba4:	601a      	str	r2, [r3, #0]
			  batthanh();
 8001ba6:	f7ff fe5f 	bl	8001868 <batthanh>
			  DangThucThi = 1;
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <StartDefaultTask+0x2ec>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	601a      	str	r2, [r3, #0]
		  }
////
//	  /*Nhấn nút F4*/
	  if(DataTayGame[7] == 16 && !DangThucThi){
 8001bb0:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <StartDefaultTask+0x2e8>)
 8001bb2:	79db      	ldrb	r3, [r3, #7]
 8001bb4:	2b10      	cmp	r3, #16
 8001bb6:	d13c      	bne.n	8001c32 <StartDefaultTask+0x34a>
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <StartDefaultTask+0x2ec>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d138      	bne.n	8001c32 <StartDefaultTask+0x34a>
 8001bc0:	e018      	b.n	8001bf4 <StartDefaultTask+0x30c>
 8001bc2:	bf00      	nop
 8001bc4:	f3af 8000 	nop.w
 8001bc8:	9999999a 	.word	0x9999999a
 8001bcc:	3fe99999 	.word	0x3fe99999
 8001bd0:	200004f4 	.word	0x200004f4
 8001bd4:	20000504 	.word	0x20000504
 8001bd8:	2000047c 	.word	0x2000047c
 8001bdc:	20000484 	.word	0x20000484
 8001be0:	200004d0 	.word	0x200004d0
 8001be4:	20000488 	.word	0x20000488
 8001be8:	20000498 	.word	0x20000498
 8001bec:	40568000 	.word	0x40568000
 8001bf0:	20000494 	.word	0x20000494
		  forward = 0;
 8001bf4:	4b59      	ldr	r3, [pc, #356]	; (8001d5c <StartDefaultTask+0x474>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
		  RotatePid = 0;
 8001bfa:	4b59      	ldr	r3, [pc, #356]	; (8001d60 <StartDefaultTask+0x478>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]

		  ControlDriver(0, 1, 0, 90, 0, 1, 0, 90, 0, 1, 0, 90);
 8001c00:	235a      	movs	r3, #90	; 0x5a
 8001c02:	9307      	str	r3, [sp, #28]
 8001c04:	2300      	movs	r3, #0
 8001c06:	9306      	str	r3, [sp, #24]
 8001c08:	2301      	movs	r3, #1
 8001c0a:	9305      	str	r3, [sp, #20]
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	9304      	str	r3, [sp, #16]
 8001c10:	235a      	movs	r3, #90	; 0x5a
 8001c12:	9303      	str	r3, [sp, #12]
 8001c14:	2300      	movs	r3, #0
 8001c16:	9302      	str	r3, [sp, #8]
 8001c18:	2301      	movs	r3, #1
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	235a      	movs	r3, #90	; 0x5a
 8001c22:	2200      	movs	r2, #0
 8001c24:	2101      	movs	r1, #1
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7ff fb28 	bl	800127c <ControlDriver>
	  	  DangThucThi = 1;
 8001c2c:	4b4d      	ldr	r3, [pc, #308]	; (8001d64 <StartDefaultTask+0x47c>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	601a      	str	r2, [r3, #0]




	  /*Nhấn nút F5*/
	  if(DataTayGame[7] == 8 && !DangThucThi){
 8001c32:	4b4d      	ldr	r3, [pc, #308]	; (8001d68 <StartDefaultTask+0x480>)
 8001c34:	79db      	ldrb	r3, [r3, #7]
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d13b      	bne.n	8001cb2 <StartDefaultTask+0x3ca>
 8001c3a:	4b4a      	ldr	r3, [pc, #296]	; (8001d64 <StartDefaultTask+0x47c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d137      	bne.n	8001cb2 <StartDefaultTask+0x3ca>
		  forward = 0;
 8001c42:	4b46      	ldr	r3, [pc, #280]	; (8001d5c <StartDefaultTask+0x474>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
		  RotatePid = 0;
 8001c48:	4b45      	ldr	r3, [pc, #276]	; (8001d60 <StartDefaultTask+0x478>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
		  ControlDriver(0, 1, 0, 190, 0, 1, 0, 190, 0, 1, 0, 190);
 8001c4e:	23be      	movs	r3, #190	; 0xbe
 8001c50:	9307      	str	r3, [sp, #28]
 8001c52:	2300      	movs	r3, #0
 8001c54:	9306      	str	r3, [sp, #24]
 8001c56:	2301      	movs	r3, #1
 8001c58:	9305      	str	r3, [sp, #20]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	9304      	str	r3, [sp, #16]
 8001c5e:	23be      	movs	r3, #190	; 0xbe
 8001c60:	9303      	str	r3, [sp, #12]
 8001c62:	2300      	movs	r3, #0
 8001c64:	9302      	str	r3, [sp, #8]
 8001c66:	2301      	movs	r3, #1
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	23be      	movs	r3, #190	; 0xbe
 8001c70:	2200      	movs	r2, #0
 8001c72:	2101      	movs	r1, #1
 8001c74:	2000      	movs	r0, #0
 8001c76:	f7ff fb01 	bl	800127c <ControlDriver>
		  osDelay(2000);
 8001c7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c7e:	f003 f9f8 	bl	8005072 <osDelay>
		  goc_target = -90;
 8001c82:	4b3a      	ldr	r3, [pc, #232]	; (8001d6c <StartDefaultTask+0x484>)
 8001c84:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8001c88:	601a      	str	r2, [r3, #0]
		  v_t = 30;
 8001c8a:	4b39      	ldr	r3, [pc, #228]	; (8001d70 <StartDefaultTask+0x488>)
 8001c8c:	221e      	movs	r2, #30
 8001c8e:	601a      	str	r2, [r3, #0]
		  forward = 3 ;
 8001c90:	4b32      	ldr	r3, [pc, #200]	; (8001d5c <StartDefaultTask+0x474>)
 8001c92:	2203      	movs	r2, #3
 8001c94:	601a      	str	r2, [r3, #0]
		  osDelay(4000);
 8001c96:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001c9a:	f003 f9ea 	bl	8005072 <osDelay>
		  v_t = 0;
 8001c9e:	4b34      	ldr	r3, [pc, #208]	; (8001d70 <StartDefaultTask+0x488>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
		  osDelay(1000);
 8001ca4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ca8:	f003 f9e3 	bl	8005072 <osDelay>

	  	  DangThucThi = 1;
 8001cac:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <StartDefaultTask+0x47c>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]
	  }
//
	  /*Nhấn nút F8*/
	  if(DataTayGame[7] == 4 && !DangThucThi){
 8001cb2:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <StartDefaultTask+0x480>)
 8001cb4:	79db      	ldrb	r3, [r3, #7]
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d144      	bne.n	8001d44 <StartDefaultTask+0x45c>
 8001cba:	4b2a      	ldr	r3, [pc, #168]	; (8001d64 <StartDefaultTask+0x47c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d140      	bne.n	8001d44 <StartDefaultTask+0x45c>
		  i1+=1;
 8001cc2:	4b2c      	ldr	r3, [pc, #176]	; (8001d74 <StartDefaultTask+0x48c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	4a2a      	ldr	r2, [pc, #168]	; (8001d74 <StartDefaultTask+0x48c>)
 8001cca:	6013      	str	r3, [r2, #0]
					  if((i1%2 == 0)&&(i1 != 0)){
 8001ccc:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <StartDefaultTask+0x48c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d107      	bne.n	8001ce8 <StartDefaultTask+0x400>
 8001cd8:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <StartDefaultTask+0x48c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <StartDefaultTask+0x400>
						  goc_target2 = 0;
 8001ce0:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <StartDefaultTask+0x490>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	e009      	b.n	8001cfc <StartDefaultTask+0x414>
					  }
					  else if(i1%2 != 0 ){
 8001ce8:	4b22      	ldr	r3, [pc, #136]	; (8001d74 <StartDefaultTask+0x48c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <StartDefaultTask+0x414>
						  goc_target2 = -20;
 8001cf4:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <StartDefaultTask+0x490>)
 8001cf6:	f06f 0213 	mvn.w	r2, #19
 8001cfa:	601a      	str	r2, [r3, #0]
					  }
//	  goc_target2  -= 90;
		  forward = 0;
 8001cfc:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <StartDefaultTask+0x474>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
		  ControlDriver(0, 1, 0, 60, 0, -1, 0, 120, 0, 1, 0, 180);
 8001d02:	23b4      	movs	r3, #180	; 0xb4
 8001d04:	9307      	str	r3, [sp, #28]
 8001d06:	2300      	movs	r3, #0
 8001d08:	9306      	str	r3, [sp, #24]
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	9305      	str	r3, [sp, #20]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	9304      	str	r3, [sp, #16]
 8001d12:	2378      	movs	r3, #120	; 0x78
 8001d14:	9303      	str	r3, [sp, #12]
 8001d16:	2300      	movs	r3, #0
 8001d18:	9302      	str	r3, [sp, #8]
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1e:	9301      	str	r3, [sp, #4]
 8001d20:	2300      	movs	r3, #0
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	233c      	movs	r3, #60	; 0x3c
 8001d26:	2200      	movs	r2, #0
 8001d28:	2101      	movs	r1, #1
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f7ff faa6 	bl	800127c <ControlDriver>
		  osDelay(1000);
 8001d30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d34:	f003 f99d 	bl	8005072 <osDelay>
		  RotatePid = 1;
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <StartDefaultTask+0x478>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]
//		  ControlDriver(0, -1, 500, 90, 0, -1, 500, 90, 0, -1, 500, 90);
//		  DangThucThi = 1;

//		  ControlDriver(0, -1, 500, 60, 0, 1, 500, 120, 0, -1, 500, 180);
//
		  DangThucThi = 1;
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <StartDefaultTask+0x47c>)
 8001d40:	2201      	movs	r2, #1
 8001d42:	601a      	str	r2, [r3, #0]
	  }

	  if(DataTayGame[7] == 0){
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <StartDefaultTask+0x480>)
 8001d46:	79db      	ldrb	r3, [r3, #7]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d102      	bne.n	8001d52 <StartDefaultTask+0x46a>
		  DangThucThi = 0;
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <StartDefaultTask+0x47c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
	  }

	  osDelay(1);
 8001d52:	2001      	movs	r0, #1
 8001d54:	f003 f98d 	bl	8005072 <osDelay>
	  if(DataTayGame[7] == 128 && !DangThucThi){
 8001d58:	e5ca      	b.n	80018f0 <StartDefaultTask+0x8>
 8001d5a:	bf00      	nop
 8001d5c:	20000484 	.word	0x20000484
 8001d60:	200004d0 	.word	0x200004d0
 8001d64:	20000504 	.word	0x20000504
 8001d68:	200004f4 	.word	0x200004f4
 8001d6c:	2000047c 	.word	0x2000047c
 8001d70:	20000488 	.word	0x20000488
 8001d74:	2000048c 	.word	0x2000048c
 8001d78:	20000494 	.word	0x20000494

08001d7c <TaskBlinkLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskBlinkLed */
void TaskBlinkLed(void const * argument)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
//	  System.CompassStatus = HAL_GPIO_ReadPin(CompassReady_GPIO_Port, CompassReady_Pin);
	  if(GocRobot != -999){
 8001d84:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <TaskBlinkLed+0x40>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a0d      	ldr	r2, [pc, #52]	; (8001dc0 <TaskBlinkLed+0x44>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d00a      	beq.n	8001da4 <TaskBlinkLed+0x28>
		  System.CompassStatus = 1;
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <TaskBlinkLed+0x48>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	605a      	str	r2, [r3, #4]
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001d94:	2102      	movs	r1, #2
 8001d96:	480c      	ldr	r0, [pc, #48]	; (8001dc8 <TaskBlinkLed+0x4c>)
 8001d98:	f000 ff21 	bl	8002bde <HAL_GPIO_TogglePin>
		  osDelay(50);
 8001d9c:	2032      	movs	r0, #50	; 0x32
 8001d9e:	f003 f968 	bl	8005072 <osDelay>
 8001da2:	e7ef      	b.n	8001d84 <TaskBlinkLed+0x8>
	  }
	  else {
		  System.CompassStatus = 0;
 8001da4:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <TaskBlinkLed+0x48>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	605a      	str	r2, [r3, #4]
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001daa:	2102      	movs	r1, #2
 8001dac:	4806      	ldr	r0, [pc, #24]	; (8001dc8 <TaskBlinkLed+0x4c>)
 8001dae:	f000 ff16 	bl	8002bde <HAL_GPIO_TogglePin>
		  osDelay(500);
 8001db2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001db6:	f003 f95c 	bl	8005072 <osDelay>
	  if(GocRobot != -999){
 8001dba:	e7e3      	b.n	8001d84 <TaskBlinkLed+0x8>
 8001dbc:	20000500 	.word	0x20000500
 8001dc0:	fffffc19 	.word	0xfffffc19
 8001dc4:	200004e0 	.word	0x200004e0
 8001dc8:	40020000 	.word	0x40020000

08001dcc <TaskUART>:
*/

char DebugStr[200];
/* USER CODE END Header_TaskUART */
void TaskUART(void const * argument)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	  snprintf(DebugStr, "{GocRobot: %d, U: %d, E: %d, EI: %d}", GocRobot, u, e, ei);
//	  HAL_UART_Transmit(&huart3, (uint8_t *) DebugStr, 199, 1000);
	  osDelay(100);
 8001dd4:	2064      	movs	r0, #100	; 0x64
 8001dd6:	f003 f94c 	bl	8005072 <osDelay>
 8001dda:	e7fb      	b.n	8001dd4 <TaskUART+0x8>
 8001ddc:	0000      	movs	r0, r0
	...

08001de0 <TaskXoayLaBan>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskXoayLaBan */
void TaskXoayLaBan(void const * argument)
{
 8001de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001de4:	b08b      	sub	sp, #44	; 0x2c
 8001de6:	af08      	add	r7, sp, #32
 8001de8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskXoayLaBan */
  /* Infinite loop */
  for(;;)
  {
	  if(forward == 1){
 8001dea:	4b85      	ldr	r3, [pc, #532]	; (8002000 <TaskXoayLaBan+0x220>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d170      	bne.n	8001ed4 <TaskXoayLaBan+0xf4>
	  		  ControlDriver(1, -1, v_t, (90-0.8*e1), 1, -1, v_t, (90-0.8*e1), 1, -1, v_t, (90+0.8*e1));
 8001df2:	4b84      	ldr	r3, [pc, #528]	; (8002004 <TaskXoayLaBan+0x224>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	fa1f f883 	uxth.w	r8, r3
 8001dfa:	4b83      	ldr	r3, [pc, #524]	; (8002008 <TaskXoayLaBan+0x228>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fb38 	bl	8000474 <__aeabi_i2d>
 8001e04:	a37c      	add	r3, pc, #496	; (adr r3, 8001ff8 <TaskXoayLaBan+0x218>)
 8001e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0a:	f7fe fb9d 	bl	8000548 <__aeabi_dmul>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	f04f 0000 	mov.w	r0, #0
 8001e16:	497d      	ldr	r1, [pc, #500]	; (800200c <TaskXoayLaBan+0x22c>)
 8001e18:	f7fe f9de 	bl	80001d8 <__aeabi_dsub>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	f7fe fe52 	bl	8000acc <__aeabi_d2uiz>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	fa1f f983 	uxth.w	r9, r3
 8001e2e:	4b75      	ldr	r3, [pc, #468]	; (8002004 <TaskXoayLaBan+0x224>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	b29c      	uxth	r4, r3
 8001e34:	4b74      	ldr	r3, [pc, #464]	; (8002008 <TaskXoayLaBan+0x228>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe fb1b 	bl	8000474 <__aeabi_i2d>
 8001e3e:	a36e      	add	r3, pc, #440	; (adr r3, 8001ff8 <TaskXoayLaBan+0x218>)
 8001e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e44:	f7fe fb80 	bl	8000548 <__aeabi_dmul>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	f04f 0000 	mov.w	r0, #0
 8001e50:	496e      	ldr	r1, [pc, #440]	; (800200c <TaskXoayLaBan+0x22c>)
 8001e52:	f7fe f9c1 	bl	80001d8 <__aeabi_dsub>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f7fe fe35 	bl	8000acc <__aeabi_d2uiz>
 8001e62:	4603      	mov	r3, r0
 8001e64:	b29d      	uxth	r5, r3
 8001e66:	4b67      	ldr	r3, [pc, #412]	; (8002004 <TaskXoayLaBan+0x224>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	b29e      	uxth	r6, r3
 8001e6c:	4b66      	ldr	r3, [pc, #408]	; (8002008 <TaskXoayLaBan+0x228>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe faff 	bl	8000474 <__aeabi_i2d>
 8001e76:	a360      	add	r3, pc, #384	; (adr r3, 8001ff8 <TaskXoayLaBan+0x218>)
 8001e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7c:	f7fe fb64 	bl	8000548 <__aeabi_dmul>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4610      	mov	r0, r2
 8001e86:	4619      	mov	r1, r3
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	4b5f      	ldr	r3, [pc, #380]	; (800200c <TaskXoayLaBan+0x22c>)
 8001e8e:	f7fe f9a5 	bl	80001dc <__adddf3>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4610      	mov	r0, r2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f7fe fe17 	bl	8000acc <__aeabi_d2uiz>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	9307      	str	r3, [sp, #28]
 8001ea4:	9606      	str	r6, [sp, #24]
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	9305      	str	r3, [sp, #20]
 8001eac:	2301      	movs	r3, #1
 8001eae:	9304      	str	r3, [sp, #16]
 8001eb0:	9503      	str	r5, [sp, #12]
 8001eb2:	9402      	str	r4, [sp, #8]
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb8:	9301      	str	r3, [sp, #4]
 8001eba:	2301      	movs	r3, #1
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	464b      	mov	r3, r9
 8001ec0:	4642      	mov	r2, r8
 8001ec2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec6:	2001      	movs	r0, #1
 8001ec8:	f7ff f9d8 	bl	800127c <ControlDriver>
	  		  osDelay(1);
 8001ecc:	2001      	movs	r0, #1
 8001ece:	f003 f8d0 	bl	8005072 <osDelay>
 8001ed2:	e002      	b.n	8001eda <TaskXoayLaBan+0xfa>
	  	  }
	  else{
		  osDelay(1);
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	f003 f8cc 	bl	8005072 <osDelay>
	  }
	  if(RotatePid == 1){
 8001eda:	4b4d      	ldr	r3, [pc, #308]	; (8002010 <TaskXoayLaBan+0x230>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d11f      	bne.n	8001f22 <TaskXoayLaBan+0x142>
		  ControlDriver(2, -dir2, pwm, 60,2 , dir2, pwm, 120, 2, -dir2, pwm, 180);
 8001ee2:	4b4c      	ldr	r3, [pc, #304]	; (8002014 <TaskXoayLaBan+0x234>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	425c      	negs	r4, r3
 8001ee8:	4b4b      	ldr	r3, [pc, #300]	; (8002018 <TaskXoayLaBan+0x238>)
 8001eea:	881d      	ldrh	r5, [r3, #0]
 8001eec:	4b49      	ldr	r3, [pc, #292]	; (8002014 <TaskXoayLaBan+0x234>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a49      	ldr	r2, [pc, #292]	; (8002018 <TaskXoayLaBan+0x238>)
 8001ef2:	8812      	ldrh	r2, [r2, #0]
 8001ef4:	4947      	ldr	r1, [pc, #284]	; (8002014 <TaskXoayLaBan+0x234>)
 8001ef6:	6809      	ldr	r1, [r1, #0]
 8001ef8:	4249      	negs	r1, r1
 8001efa:	4847      	ldr	r0, [pc, #284]	; (8002018 <TaskXoayLaBan+0x238>)
 8001efc:	8800      	ldrh	r0, [r0, #0]
 8001efe:	26b4      	movs	r6, #180	; 0xb4
 8001f00:	9607      	str	r6, [sp, #28]
 8001f02:	9006      	str	r0, [sp, #24]
 8001f04:	9105      	str	r1, [sp, #20]
 8001f06:	2102      	movs	r1, #2
 8001f08:	9104      	str	r1, [sp, #16]
 8001f0a:	2178      	movs	r1, #120	; 0x78
 8001f0c:	9103      	str	r1, [sp, #12]
 8001f0e:	9202      	str	r2, [sp, #8]
 8001f10:	9301      	str	r3, [sp, #4]
 8001f12:	2302      	movs	r3, #2
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	233c      	movs	r3, #60	; 0x3c
 8001f18:	462a      	mov	r2, r5
 8001f1a:	4621      	mov	r1, r4
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	f7ff f9ad 	bl	800127c <ControlDriver>
	  }
	  if((forward == 2)){
 8001f22:	4b37      	ldr	r3, [pc, #220]	; (8002000 <TaskXoayLaBan+0x220>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d12d      	bne.n	8001f86 <TaskXoayLaBan+0x1a6>
		  ControlDriver(1, 1, v_t, (30+1*e1), 1, 1, v_t, (30+1*e1), 1, 1, v_t, (30-1*e1));
 8001f2a:	4b36      	ldr	r3, [pc, #216]	; (8002004 <TaskXoayLaBan+0x224>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	b29c      	uxth	r4, r3
 8001f30:	4b35      	ldr	r3, [pc, #212]	; (8002008 <TaskXoayLaBan+0x228>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	331e      	adds	r3, #30
 8001f38:	b29d      	uxth	r5, r3
 8001f3a:	4b32      	ldr	r3, [pc, #200]	; (8002004 <TaskXoayLaBan+0x224>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	4a31      	ldr	r2, [pc, #196]	; (8002008 <TaskXoayLaBan+0x228>)
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	b292      	uxth	r2, r2
 8001f46:	321e      	adds	r2, #30
 8001f48:	b292      	uxth	r2, r2
 8001f4a:	492e      	ldr	r1, [pc, #184]	; (8002004 <TaskXoayLaBan+0x224>)
 8001f4c:	6809      	ldr	r1, [r1, #0]
 8001f4e:	b289      	uxth	r1, r1
 8001f50:	482d      	ldr	r0, [pc, #180]	; (8002008 <TaskXoayLaBan+0x228>)
 8001f52:	6800      	ldr	r0, [r0, #0]
 8001f54:	b280      	uxth	r0, r0
 8001f56:	f1c0 001e 	rsb	r0, r0, #30
 8001f5a:	b280      	uxth	r0, r0
 8001f5c:	9007      	str	r0, [sp, #28]
 8001f5e:	9106      	str	r1, [sp, #24]
 8001f60:	2101      	movs	r1, #1
 8001f62:	9105      	str	r1, [sp, #20]
 8001f64:	2101      	movs	r1, #1
 8001f66:	9104      	str	r1, [sp, #16]
 8001f68:	9203      	str	r2, [sp, #12]
 8001f6a:	9302      	str	r3, [sp, #8]
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	9301      	str	r3, [sp, #4]
 8001f70:	2301      	movs	r3, #1
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	462b      	mov	r3, r5
 8001f76:	4622      	mov	r2, r4
 8001f78:	2101      	movs	r1, #1
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	f7ff f97e 	bl	800127c <ControlDriver>
		  osDelay(1);
 8001f80:	2001      	movs	r0, #1
 8001f82:	f003 f876 	bl	8005072 <osDelay>
	  }
	  if((forward == 3)){
 8001f86:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <TaskXoayLaBan+0x220>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	f47f af2d 	bne.w	8001dea <TaskXoayLaBan+0xa>
	  		  ControlDriver(1, -1, v_t, (190-1*e1), 1, -1, v_t, (190+1*e1), 1, -1, v_t, (190-1*e1));
 8001f90:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <TaskXoayLaBan+0x224>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	b29c      	uxth	r4, r3
 8001f96:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <TaskXoayLaBan+0x228>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	f1c3 03be 	rsb	r3, r3, #190	; 0xbe
 8001fa0:	b29d      	uxth	r5, r3
 8001fa2:	4b18      	ldr	r3, [pc, #96]	; (8002004 <TaskXoayLaBan+0x224>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	4a17      	ldr	r2, [pc, #92]	; (8002008 <TaskXoayLaBan+0x228>)
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	b292      	uxth	r2, r2
 8001fae:	32be      	adds	r2, #190	; 0xbe
 8001fb0:	b292      	uxth	r2, r2
 8001fb2:	4914      	ldr	r1, [pc, #80]	; (8002004 <TaskXoayLaBan+0x224>)
 8001fb4:	6809      	ldr	r1, [r1, #0]
 8001fb6:	b289      	uxth	r1, r1
 8001fb8:	4813      	ldr	r0, [pc, #76]	; (8002008 <TaskXoayLaBan+0x228>)
 8001fba:	6800      	ldr	r0, [r0, #0]
 8001fbc:	b280      	uxth	r0, r0
 8001fbe:	f1c0 00be 	rsb	r0, r0, #190	; 0xbe
 8001fc2:	b280      	uxth	r0, r0
 8001fc4:	9007      	str	r0, [sp, #28]
 8001fc6:	9106      	str	r1, [sp, #24]
 8001fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fcc:	9105      	str	r1, [sp, #20]
 8001fce:	2101      	movs	r1, #1
 8001fd0:	9104      	str	r1, [sp, #16]
 8001fd2:	9203      	str	r2, [sp, #12]
 8001fd4:	9302      	str	r3, [sp, #8]
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	2301      	movs	r3, #1
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	462b      	mov	r3, r5
 8001fe2:	4622      	mov	r2, r4
 8001fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe8:	2001      	movs	r0, #1
 8001fea:	f7ff f947 	bl	800127c <ControlDriver>
	  		  osDelay(1);
 8001fee:	2001      	movs	r0, #1
 8001ff0:	f003 f83f 	bl	8005072 <osDelay>
	  if(forward == 1){
 8001ff4:	e6f9      	b.n	8001dea <TaskXoayLaBan+0xa>
 8001ff6:	bf00      	nop
 8001ff8:	9999999a 	.word	0x9999999a
 8001ffc:	3fe99999 	.word	0x3fe99999
 8002000:	20000484 	.word	0x20000484
 8002004:	20000488 	.word	0x20000488
 8002008:	20000498 	.word	0x20000498
 800200c:	40568000 	.word	0x40568000
 8002010:	200004d0 	.word	0x200004d0
 8002014:	20000490 	.word	0x20000490
 8002018:	200004d4 	.word	0x200004d4

0800201c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d101      	bne.n	8002032 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800202e:	f000 fa51 	bl	80024d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  goc_hientai = GocRobot;
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a09      	ldr	r2, [pc, #36]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002038:	6013      	str	r3, [r2, #0]
  e1 = goc_target - goc_hientai;
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4b07      	ldr	r3, [pc, #28]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	4a07      	ldr	r2, [pc, #28]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002046:	6013      	str	r3, [r2, #0]
  Pid_cal();
 8002048:	f7fe fefe 	bl	8000e48 <Pid_cal>
  /* USER CODE END Callback 1 */
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40000800 	.word	0x40000800
 8002058:	20000500 	.word	0x20000500
 800205c:	20000480 	.word	0x20000480
 8002060:	2000047c 	.word	0x2000047c
 8002064:	20000498 	.word	0x20000498

08002068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800206c:	b672      	cpsid	i
}
 800206e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002070:	e7fe      	b.n	8002070 <Error_Handler+0x8>
	...

08002074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]
 800207e:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_MspInit+0x54>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	4a11      	ldr	r2, [pc, #68]	; (80020c8 <HAL_MspInit+0x54>)
 8002084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002088:	6453      	str	r3, [r2, #68]	; 0x44
 800208a:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <HAL_MspInit+0x54>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	603b      	str	r3, [r7, #0]
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_MspInit+0x54>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <HAL_MspInit+0x54>)
 80020a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <HAL_MspInit+0x54>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	210f      	movs	r1, #15
 80020b6:	f06f 0001 	mvn.w	r0, #1
 80020ba:	f000 fb07 	bl	80026cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800

080020cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020dc:	d10d      	bne.n	80020fa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_TIM_Base_MspInit+0x3c>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a08      	ldr	r2, [pc, #32]	; (8002108 <HAL_TIM_Base_MspInit+0x3c>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_TIM_Base_MspInit+0x3c>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800

0800210c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08e      	sub	sp, #56	; 0x38
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a58      	ldr	r2, [pc, #352]	; (800228c <HAL_UART_MspInit+0x180>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d135      	bne.n	800219a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	623b      	str	r3, [r7, #32]
 8002132:	4b57      	ldr	r3, [pc, #348]	; (8002290 <HAL_UART_MspInit+0x184>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	4a56      	ldr	r2, [pc, #344]	; (8002290 <HAL_UART_MspInit+0x184>)
 8002138:	f043 0310 	orr.w	r3, r3, #16
 800213c:	6453      	str	r3, [r2, #68]	; 0x44
 800213e:	4b54      	ldr	r3, [pc, #336]	; (8002290 <HAL_UART_MspInit+0x184>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	623b      	str	r3, [r7, #32]
 8002148:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
 800214e:	4b50      	ldr	r3, [pc, #320]	; (8002290 <HAL_UART_MspInit+0x184>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4a4f      	ldr	r2, [pc, #316]	; (8002290 <HAL_UART_MspInit+0x184>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4b4d      	ldr	r3, [pc, #308]	; (8002290 <HAL_UART_MspInit+0x184>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	61fb      	str	r3, [r7, #28]
 8002164:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002166:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002174:	2303      	movs	r3, #3
 8002176:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002178:	2307      	movs	r3, #7
 800217a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002180:	4619      	mov	r1, r3
 8002182:	4844      	ldr	r0, [pc, #272]	; (8002294 <HAL_UART_MspInit+0x188>)
 8002184:	f000 fb5e 	bl	8002844 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002188:	2200      	movs	r2, #0
 800218a:	2105      	movs	r1, #5
 800218c:	2025      	movs	r0, #37	; 0x25
 800218e:	f000 fa9d 	bl	80026cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002192:	2025      	movs	r0, #37	; 0x25
 8002194:	f000 fab6 	bl	8002704 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002198:	e073      	b.n	8002282 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a3e      	ldr	r2, [pc, #248]	; (8002298 <HAL_UART_MspInit+0x18c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d134      	bne.n	800220e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021a4:	2300      	movs	r3, #0
 80021a6:	61bb      	str	r3, [r7, #24]
 80021a8:	4b39      	ldr	r3, [pc, #228]	; (8002290 <HAL_UART_MspInit+0x184>)
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	4a38      	ldr	r2, [pc, #224]	; (8002290 <HAL_UART_MspInit+0x184>)
 80021ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b2:	6413      	str	r3, [r2, #64]	; 0x40
 80021b4:	4b36      	ldr	r3, [pc, #216]	; (8002290 <HAL_UART_MspInit+0x184>)
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	4b32      	ldr	r3, [pc, #200]	; (8002290 <HAL_UART_MspInit+0x184>)
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	4a31      	ldr	r2, [pc, #196]	; (8002290 <HAL_UART_MspInit+0x184>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6313      	str	r3, [r2, #48]	; 0x30
 80021d0:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <HAL_UART_MspInit+0x184>)
 80021d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021dc:	230c      	movs	r3, #12
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	2302      	movs	r3, #2
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e8:	2303      	movs	r3, #3
 80021ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021ec:	2307      	movs	r3, #7
 80021ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f4:	4619      	mov	r1, r3
 80021f6:	4827      	ldr	r0, [pc, #156]	; (8002294 <HAL_UART_MspInit+0x188>)
 80021f8:	f000 fb24 	bl	8002844 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80021fc:	2200      	movs	r2, #0
 80021fe:	2105      	movs	r1, #5
 8002200:	2026      	movs	r0, #38	; 0x26
 8002202:	f000 fa63 	bl	80026cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002206:	2026      	movs	r0, #38	; 0x26
 8002208:	f000 fa7c 	bl	8002704 <HAL_NVIC_EnableIRQ>
}
 800220c:	e039      	b.n	8002282 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART3)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a22      	ldr	r2, [pc, #136]	; (800229c <HAL_UART_MspInit+0x190>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d134      	bne.n	8002282 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002218:	2300      	movs	r3, #0
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <HAL_UART_MspInit+0x184>)
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	4a1b      	ldr	r2, [pc, #108]	; (8002290 <HAL_UART_MspInit+0x184>)
 8002222:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002226:	6413      	str	r3, [r2, #64]	; 0x40
 8002228:	4b19      	ldr	r3, [pc, #100]	; (8002290 <HAL_UART_MspInit+0x184>)
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	4b15      	ldr	r3, [pc, #84]	; (8002290 <HAL_UART_MspInit+0x184>)
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	4a14      	ldr	r2, [pc, #80]	; (8002290 <HAL_UART_MspInit+0x184>)
 800223e:	f043 0302 	orr.w	r3, r3, #2
 8002242:	6313      	str	r3, [r2, #48]	; 0x30
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_UART_MspInit+0x184>)
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002250:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225e:	2303      	movs	r3, #3
 8002260:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002262:	2307      	movs	r3, #7
 8002264:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800226a:	4619      	mov	r1, r3
 800226c:	480c      	ldr	r0, [pc, #48]	; (80022a0 <HAL_UART_MspInit+0x194>)
 800226e:	f000 fae9 	bl	8002844 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	2105      	movs	r1, #5
 8002276:	2027      	movs	r0, #39	; 0x27
 8002278:	f000 fa28 	bl	80026cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800227c:	2027      	movs	r0, #39	; 0x27
 800227e:	f000 fa41 	bl	8002704 <HAL_NVIC_EnableIRQ>
}
 8002282:	bf00      	nop
 8002284:	3738      	adds	r7, #56	; 0x38
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40011000 	.word	0x40011000
 8002290:	40023800 	.word	0x40023800
 8002294:	40020000 	.word	0x40020000
 8002298:	40004400 	.word	0x40004400
 800229c:	40004800 	.word	0x40004800
 80022a0:	40020400 	.word	0x40020400

080022a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08e      	sub	sp, #56	; 0x38
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	4b33      	ldr	r3, [pc, #204]	; (8002388 <HAL_InitTick+0xe4>)
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	4a32      	ldr	r2, [pc, #200]	; (8002388 <HAL_InitTick+0xe4>)
 80022be:	f043 0304 	orr.w	r3, r3, #4
 80022c2:	6413      	str	r3, [r2, #64]	; 0x40
 80022c4:	4b30      	ldr	r3, [pc, #192]	; (8002388 <HAL_InitTick+0xe4>)
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022d0:	f107 0210 	add.w	r2, r7, #16
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	4611      	mov	r1, r2
 80022da:	4618      	mov	r0, r3
 80022dc:	f001 f932 	bl	8003544 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80022e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d103      	bne.n	80022f2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80022ea:	f001 f903 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 80022ee:	6378      	str	r0, [r7, #52]	; 0x34
 80022f0:	e004      	b.n	80022fc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80022f2:	f001 f8ff 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 80022f6:	4603      	mov	r3, r0
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022fe:	4a23      	ldr	r2, [pc, #140]	; (800238c <HAL_InitTick+0xe8>)
 8002300:	fba2 2303 	umull	r2, r3, r2, r3
 8002304:	0c9b      	lsrs	r3, r3, #18
 8002306:	3b01      	subs	r3, #1
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800230a:	4b21      	ldr	r3, [pc, #132]	; (8002390 <HAL_InitTick+0xec>)
 800230c:	4a21      	ldr	r2, [pc, #132]	; (8002394 <HAL_InitTick+0xf0>)
 800230e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002310:	4b1f      	ldr	r3, [pc, #124]	; (8002390 <HAL_InitTick+0xec>)
 8002312:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002316:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002318:	4a1d      	ldr	r2, [pc, #116]	; (8002390 <HAL_InitTick+0xec>)
 800231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231c:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800231e:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <HAL_InitTick+0xec>)
 8002320:	2200      	movs	r2, #0
 8002322:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002324:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <HAL_InitTick+0xec>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800232a:	4b19      	ldr	r3, [pc, #100]	; (8002390 <HAL_InitTick+0xec>)
 800232c:	2200      	movs	r2, #0
 800232e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002330:	4817      	ldr	r0, [pc, #92]	; (8002390 <HAL_InitTick+0xec>)
 8002332:	f001 f939 	bl	80035a8 <HAL_TIM_Base_Init>
 8002336:	4603      	mov	r3, r0
 8002338:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800233c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002340:	2b00      	cmp	r3, #0
 8002342:	d11b      	bne.n	800237c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002344:	4812      	ldr	r0, [pc, #72]	; (8002390 <HAL_InitTick+0xec>)
 8002346:	f001 f97f 	bl	8003648 <HAL_TIM_Base_Start_IT>
 800234a:	4603      	mov	r3, r0
 800234c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002350:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002354:	2b00      	cmp	r3, #0
 8002356:	d111      	bne.n	800237c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002358:	201e      	movs	r0, #30
 800235a:	f000 f9d3 	bl	8002704 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b0f      	cmp	r3, #15
 8002362:	d808      	bhi.n	8002376 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002364:	2200      	movs	r2, #0
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	201e      	movs	r0, #30
 800236a:	f000 f9af 	bl	80026cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800236e:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <HAL_InitTick+0xf4>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	e002      	b.n	800237c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800237c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002380:	4618      	mov	r0, r3
 8002382:	3738      	adds	r7, #56	; 0x38
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40023800 	.word	0x40023800
 800238c:	431bde83 	.word	0x431bde83
 8002390:	2000052c 	.word	0x2000052c
 8002394:	40000800 	.word	0x40000800
 8002398:	20000014 	.word	0x20000014

0800239c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023a0:	e7fe      	b.n	80023a0 <NMI_Handler+0x4>

080023a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023a6:	e7fe      	b.n	80023a6 <HardFault_Handler+0x4>

080023a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023ac:	e7fe      	b.n	80023ac <MemManage_Handler+0x4>

080023ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023b2:	e7fe      	b.n	80023b2 <BusFault_Handler+0x4>

080023b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b8:	e7fe      	b.n	80023b8 <UsageFault_Handler+0x4>

080023ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80023cc:	4802      	ldr	r0, [pc, #8]	; (80023d8 <TIM4_IRQHandler+0x10>)
 80023ce:	f001 f9ab 	bl	8003728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	2000052c 	.word	0x2000052c

080023dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023e0:	4802      	ldr	r0, [pc, #8]	; (80023ec <USART1_IRQHandler+0x10>)
 80023e2:	f001 fe73 	bl	80040cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	200003a0 	.word	0x200003a0

080023f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023f4:	4802      	ldr	r0, [pc, #8]	; (8002400 <USART2_IRQHandler+0x10>)
 80023f6:	f001 fe69 	bl	80040cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	200003e4 	.word	0x200003e4

08002404 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002408:	4802      	ldr	r0, [pc, #8]	; (8002414 <USART3_IRQHandler+0x10>)
 800240a:	f001 fe5f 	bl	80040cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000428 	.word	0x20000428

08002418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <SystemInit+0x20>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002422:	4a05      	ldr	r2, [pc, #20]	; (8002438 <SystemInit+0x20>)
 8002424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}/**
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800243c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002474 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002440:	480d      	ldr	r0, [pc, #52]	; (8002478 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002442:	490e      	ldr	r1, [pc, #56]	; (800247c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002444:	4a0e      	ldr	r2, [pc, #56]	; (8002480 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002448:	e002      	b.n	8002450 <LoopCopyDataInit>

0800244a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800244a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800244c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800244e:	3304      	adds	r3, #4

08002450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002454:	d3f9      	bcc.n	800244a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002456:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002458:	4c0b      	ldr	r4, [pc, #44]	; (8002488 <LoopFillZerobss+0x26>)
  movs r3, #0
 800245a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800245c:	e001      	b.n	8002462 <LoopFillZerobss>

0800245e <FillZerobss>:
FillZerobss:
  str  r3, [r2]
 800245e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002460:	3204      	adds	r2, #4

08002462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002464:	d3fb      	bcc.n	800245e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002466:	f7ff ffd7 	bl	8002418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800246a:	f004 f80f 	bl	800648c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800246e:	f7fe ffc5 	bl	80013fc <main>
  bx  lr    
 8002472:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002474:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800247c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002480:	080067b8 	.word	0x080067b8
  ldr r2, =_sbss
 8002484:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002488:	200042d4 	.word	0x200042d4

0800248c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800248c:	e7fe      	b.n	800248c <ADC_IRQHandler>
	...

08002490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002494:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <HAL_Init+0x40>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a0d      	ldr	r2, [pc, #52]	; (80024d0 <HAL_Init+0x40>)
 800249a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800249e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_Init+0x40>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <HAL_Init+0x40>)
 80024a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024ac:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <HAL_Init+0x40>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a07      	ldr	r2, [pc, #28]	; (80024d0 <HAL_Init+0x40>)
 80024b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b8:	2003      	movs	r0, #3
 80024ba:	f000 f8fc 	bl	80026b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024be:	200f      	movs	r0, #15
 80024c0:	f7ff fef0 	bl	80022a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c4:	f7ff fdd6 	bl	8002074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023c00 	.word	0x40023c00

080024d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_IncTick+0x20>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_IncTick+0x24>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	4a04      	ldr	r2, [pc, #16]	; (80024f8 <HAL_IncTick+0x24>)
 80024e6:	6013      	str	r3, [r2, #0]
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000018 	.word	0x20000018
 80024f8:	20000574 	.word	0x20000574

080024fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <HAL_GetTick+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000574 	.word	0x20000574

08002514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800251c:	f7ff ffee 	bl	80024fc <HAL_GetTick>
 8002520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252c:	d005      	beq.n	800253a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <HAL_Delay+0x44>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4413      	add	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800253a:	bf00      	nop
 800253c:	f7ff ffde 	bl	80024fc <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	429a      	cmp	r2, r3
 800254a:	d8f7      	bhi.n	800253c <HAL_Delay+0x28>
  {
  }
}
 800254c:	bf00      	nop
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000018 	.word	0x20000018

0800255c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800256c:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <__NVIC_SetPriorityGrouping+0x44>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002578:	4013      	ands	r3, r2
 800257a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800258c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800258e:	4a04      	ldr	r2, [pc, #16]	; (80025a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	60d3      	str	r3, [r2, #12]
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a8:	4b04      	ldr	r3, [pc, #16]	; (80025bc <__NVIC_GetPriorityGrouping+0x18>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	0a1b      	lsrs	r3, r3, #8
 80025ae:	f003 0307 	and.w	r3, r3, #7
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	db0b      	blt.n	80025ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	f003 021f 	and.w	r2, r3, #31
 80025d8:	4907      	ldr	r1, [pc, #28]	; (80025f8 <__NVIC_EnableIRQ+0x38>)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	2001      	movs	r0, #1
 80025e2:	fa00 f202 	lsl.w	r2, r0, r2
 80025e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	e000e100 	.word	0xe000e100

080025fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260c:	2b00      	cmp	r3, #0
 800260e:	db0a      	blt.n	8002626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	b2da      	uxtb	r2, r3
 8002614:	490c      	ldr	r1, [pc, #48]	; (8002648 <__NVIC_SetPriority+0x4c>)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	0112      	lsls	r2, r2, #4
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	440b      	add	r3, r1
 8002620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002624:	e00a      	b.n	800263c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4908      	ldr	r1, [pc, #32]	; (800264c <__NVIC_SetPriority+0x50>)
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	3b04      	subs	r3, #4
 8002634:	0112      	lsls	r2, r2, #4
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	440b      	add	r3, r1
 800263a:	761a      	strb	r2, [r3, #24]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	e000e100 	.word	0xe000e100
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	; 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f1c3 0307 	rsb	r3, r3, #7
 800266a:	2b04      	cmp	r3, #4
 800266c:	bf28      	it	cs
 800266e:	2304      	movcs	r3, #4
 8002670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3304      	adds	r3, #4
 8002676:	2b06      	cmp	r3, #6
 8002678:	d902      	bls.n	8002680 <NVIC_EncodePriority+0x30>
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3b03      	subs	r3, #3
 800267e:	e000      	b.n	8002682 <NVIC_EncodePriority+0x32>
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	f04f 32ff 	mov.w	r2, #4294967295
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43da      	mvns	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	401a      	ands	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002698:	f04f 31ff 	mov.w	r1, #4294967295
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	fa01 f303 	lsl.w	r3, r1, r3
 80026a2:	43d9      	mvns	r1, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	4313      	orrs	r3, r2
         );
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3724      	adds	r7, #36	; 0x24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff ff4c 	bl	800255c <__NVIC_SetPriorityGrouping>
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026de:	f7ff ff61 	bl	80025a4 <__NVIC_GetPriorityGrouping>
 80026e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	68b9      	ldr	r1, [r7, #8]
 80026e8:	6978      	ldr	r0, [r7, #20]
 80026ea:	f7ff ffb1 	bl	8002650 <NVIC_EncodePriority>
 80026ee:	4602      	mov	r2, r0
 80026f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f4:	4611      	mov	r1, r2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff ff80 	bl	80025fc <__NVIC_SetPriority>
}
 80026fc:	bf00      	nop
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff ff54 	bl	80025c0 <__NVIC_EnableIRQ>
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800272e:	f7ff fee5 	bl	80024fc <HAL_GetTick>
 8002732:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d008      	beq.n	8002752 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2280      	movs	r2, #128	; 0x80
 8002744:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e052      	b.n	80027f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0216 	bic.w	r2, r2, #22
 8002760:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695a      	ldr	r2, [r3, #20]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002770:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d103      	bne.n	8002782 <HAL_DMA_Abort+0x62>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800277e:	2b00      	cmp	r3, #0
 8002780:	d007      	beq.n	8002792 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0208 	bic.w	r2, r2, #8
 8002790:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0201 	bic.w	r2, r2, #1
 80027a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027a2:	e013      	b.n	80027cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027a4:	f7ff feaa 	bl	80024fc <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b05      	cmp	r3, #5
 80027b0:	d90c      	bls.n	80027cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2220      	movs	r2, #32
 80027b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2203      	movs	r2, #3
 80027bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e015      	b.n	80027f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1e4      	bne.n	80027a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027de:	223f      	movs	r2, #63	; 0x3f
 80027e0:	409a      	lsls	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d004      	beq.n	800281e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2280      	movs	r2, #128	; 0x80
 8002818:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e00c      	b.n	8002838 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2205      	movs	r2, #5
 8002822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002844:	b480      	push	{r7}
 8002846:	b089      	sub	sp, #36	; 0x24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002856:	2300      	movs	r3, #0
 8002858:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
 800285e:	e16b      	b.n	8002b38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002860:	2201      	movs	r2, #1
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	4013      	ands	r3, r2
 8002872:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	429a      	cmp	r2, r3
 800287a:	f040 815a 	bne.w	8002b32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b01      	cmp	r3, #1
 8002888:	d005      	beq.n	8002896 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002892:	2b02      	cmp	r3, #2
 8002894:	d130      	bne.n	80028f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	2203      	movs	r2, #3
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4013      	ands	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028cc:	2201      	movs	r2, #1
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	091b      	lsrs	r3, r3, #4
 80028e2:	f003 0201 	and.w	r2, r3, #1
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	2b03      	cmp	r3, #3
 8002902:	d017      	beq.n	8002934 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	2203      	movs	r2, #3
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4313      	orrs	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 0303 	and.w	r3, r3, #3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d123      	bne.n	8002988 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	08da      	lsrs	r2, r3, #3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3208      	adds	r2, #8
 8002948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800294c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	220f      	movs	r2, #15
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	08da      	lsrs	r2, r3, #3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3208      	adds	r2, #8
 8002982:	69b9      	ldr	r1, [r7, #24]
 8002984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	2203      	movs	r2, #3
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0203 	and.w	r2, r3, #3
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80b4 	beq.w	8002b32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	4b60      	ldr	r3, [pc, #384]	; (8002b50 <HAL_GPIO_Init+0x30c>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	4a5f      	ldr	r2, [pc, #380]	; (8002b50 <HAL_GPIO_Init+0x30c>)
 80029d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029d8:	6453      	str	r3, [r2, #68]	; 0x44
 80029da:	4b5d      	ldr	r3, [pc, #372]	; (8002b50 <HAL_GPIO_Init+0x30c>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029e6:	4a5b      	ldr	r2, [pc, #364]	; (8002b54 <HAL_GPIO_Init+0x310>)
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	089b      	lsrs	r3, r3, #2
 80029ec:	3302      	adds	r3, #2
 80029ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	220f      	movs	r2, #15
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a52      	ldr	r2, [pc, #328]	; (8002b58 <HAL_GPIO_Init+0x314>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d02b      	beq.n	8002a6a <HAL_GPIO_Init+0x226>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a51      	ldr	r2, [pc, #324]	; (8002b5c <HAL_GPIO_Init+0x318>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d025      	beq.n	8002a66 <HAL_GPIO_Init+0x222>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a50      	ldr	r2, [pc, #320]	; (8002b60 <HAL_GPIO_Init+0x31c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d01f      	beq.n	8002a62 <HAL_GPIO_Init+0x21e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a4f      	ldr	r2, [pc, #316]	; (8002b64 <HAL_GPIO_Init+0x320>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d019      	beq.n	8002a5e <HAL_GPIO_Init+0x21a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a4e      	ldr	r2, [pc, #312]	; (8002b68 <HAL_GPIO_Init+0x324>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d013      	beq.n	8002a5a <HAL_GPIO_Init+0x216>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a4d      	ldr	r2, [pc, #308]	; (8002b6c <HAL_GPIO_Init+0x328>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00d      	beq.n	8002a56 <HAL_GPIO_Init+0x212>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a4c      	ldr	r2, [pc, #304]	; (8002b70 <HAL_GPIO_Init+0x32c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d007      	beq.n	8002a52 <HAL_GPIO_Init+0x20e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a4b      	ldr	r2, [pc, #300]	; (8002b74 <HAL_GPIO_Init+0x330>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d101      	bne.n	8002a4e <HAL_GPIO_Init+0x20a>
 8002a4a:	2307      	movs	r3, #7
 8002a4c:	e00e      	b.n	8002a6c <HAL_GPIO_Init+0x228>
 8002a4e:	2308      	movs	r3, #8
 8002a50:	e00c      	b.n	8002a6c <HAL_GPIO_Init+0x228>
 8002a52:	2306      	movs	r3, #6
 8002a54:	e00a      	b.n	8002a6c <HAL_GPIO_Init+0x228>
 8002a56:	2305      	movs	r3, #5
 8002a58:	e008      	b.n	8002a6c <HAL_GPIO_Init+0x228>
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	e006      	b.n	8002a6c <HAL_GPIO_Init+0x228>
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e004      	b.n	8002a6c <HAL_GPIO_Init+0x228>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e002      	b.n	8002a6c <HAL_GPIO_Init+0x228>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <HAL_GPIO_Init+0x228>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	69fa      	ldr	r2, [r7, #28]
 8002a6e:	f002 0203 	and.w	r2, r2, #3
 8002a72:	0092      	lsls	r2, r2, #2
 8002a74:	4093      	lsls	r3, r2
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a7c:	4935      	ldr	r1, [pc, #212]	; (8002b54 <HAL_GPIO_Init+0x310>)
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	089b      	lsrs	r3, r3, #2
 8002a82:	3302      	adds	r3, #2
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a8a:	4b3b      	ldr	r3, [pc, #236]	; (8002b78 <HAL_GPIO_Init+0x334>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aae:	4a32      	ldr	r2, [pc, #200]	; (8002b78 <HAL_GPIO_Init+0x334>)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ab4:	4b30      	ldr	r3, [pc, #192]	; (8002b78 <HAL_GPIO_Init+0x334>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ad8:	4a27      	ldr	r2, [pc, #156]	; (8002b78 <HAL_GPIO_Init+0x334>)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ade:	4b26      	ldr	r3, [pc, #152]	; (8002b78 <HAL_GPIO_Init+0x334>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b02:	4a1d      	ldr	r2, [pc, #116]	; (8002b78 <HAL_GPIO_Init+0x334>)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b08:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <HAL_GPIO_Init+0x334>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b2c:	4a12      	ldr	r2, [pc, #72]	; (8002b78 <HAL_GPIO_Init+0x334>)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3301      	adds	r3, #1
 8002b36:	61fb      	str	r3, [r7, #28]
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	2b0f      	cmp	r3, #15
 8002b3c:	f67f ae90 	bls.w	8002860 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b40:	bf00      	nop
 8002b42:	bf00      	nop
 8002b44:	3724      	adds	r7, #36	; 0x24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40013800 	.word	0x40013800
 8002b58:	40020000 	.word	0x40020000
 8002b5c:	40020400 	.word	0x40020400
 8002b60:	40020800 	.word	0x40020800
 8002b64:	40020c00 	.word	0x40020c00
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	40021400 	.word	0x40021400
 8002b70:	40021800 	.word	0x40021800
 8002b74:	40021c00 	.word	0x40021c00
 8002b78:	40013c00 	.word	0x40013c00

08002b7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691a      	ldr	r2, [r3, #16]
 8002b8c:	887b      	ldrh	r3, [r7, #2]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d002      	beq.n	8002b9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b94:	2301      	movs	r3, #1
 8002b96:	73fb      	strb	r3, [r7, #15]
 8002b98:	e001      	b.n	8002b9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	807b      	strh	r3, [r7, #2]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bbc:	787b      	ldrb	r3, [r7, #1]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bc2:	887a      	ldrh	r2, [r7, #2]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bc8:	e003      	b.n	8002bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bca:	887b      	ldrh	r3, [r7, #2]
 8002bcc:	041a      	lsls	r2, r3, #16
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	619a      	str	r2, [r3, #24]
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b085      	sub	sp, #20
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	460b      	mov	r3, r1
 8002be8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bf0:	887a      	ldrh	r2, [r7, #2]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	041a      	lsls	r2, r3, #16
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	43d9      	mvns	r1, r3
 8002bfc:	887b      	ldrh	r3, [r7, #2]
 8002bfe:	400b      	ands	r3, r1
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	619a      	str	r2, [r3, #24]
}
 8002c06:	bf00      	nop
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e267      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d075      	beq.n	8002d1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c32:	4b88      	ldr	r3, [pc, #544]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d00c      	beq.n	8002c58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c3e:	4b85      	ldr	r3, [pc, #532]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d112      	bne.n	8002c70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c4a:	4b82      	ldr	r3, [pc, #520]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c56:	d10b      	bne.n	8002c70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c58:	4b7e      	ldr	r3, [pc, #504]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d05b      	beq.n	8002d1c <HAL_RCC_OscConfig+0x108>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d157      	bne.n	8002d1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e242      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c78:	d106      	bne.n	8002c88 <HAL_RCC_OscConfig+0x74>
 8002c7a:	4b76      	ldr	r3, [pc, #472]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a75      	ldr	r2, [pc, #468]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	e01d      	b.n	8002cc4 <HAL_RCC_OscConfig+0xb0>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c90:	d10c      	bne.n	8002cac <HAL_RCC_OscConfig+0x98>
 8002c92:	4b70      	ldr	r3, [pc, #448]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a6f      	ldr	r2, [pc, #444]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	4b6d      	ldr	r3, [pc, #436]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a6c      	ldr	r2, [pc, #432]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	e00b      	b.n	8002cc4 <HAL_RCC_OscConfig+0xb0>
 8002cac:	4b69      	ldr	r3, [pc, #420]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a68      	ldr	r2, [pc, #416]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	4b66      	ldr	r3, [pc, #408]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a65      	ldr	r2, [pc, #404]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d013      	beq.n	8002cf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7ff fc16 	bl	80024fc <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd4:	f7ff fc12 	bl	80024fc <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b64      	cmp	r3, #100	; 0x64
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e207      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce6:	4b5b      	ldr	r3, [pc, #364]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0xc0>
 8002cf2:	e014      	b.n	8002d1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf4:	f7ff fc02 	bl	80024fc <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cfc:	f7ff fbfe 	bl	80024fc <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	; 0x64
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e1f3      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0e:	4b51      	ldr	r3, [pc, #324]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0xe8>
 8002d1a:	e000      	b.n	8002d1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d063      	beq.n	8002df2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d2a:	4b4a      	ldr	r3, [pc, #296]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00b      	beq.n	8002d4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d36:	4b47      	ldr	r3, [pc, #284]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d11c      	bne.n	8002d7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d42:	4b44      	ldr	r3, [pc, #272]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d116      	bne.n	8002d7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4e:	4b41      	ldr	r3, [pc, #260]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d005      	beq.n	8002d66 <HAL_RCC_OscConfig+0x152>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d001      	beq.n	8002d66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e1c7      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d66:	4b3b      	ldr	r3, [pc, #236]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4937      	ldr	r1, [pc, #220]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7a:	e03a      	b.n	8002df2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d020      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d84:	4b34      	ldr	r3, [pc, #208]	; (8002e58 <HAL_RCC_OscConfig+0x244>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8a:	f7ff fbb7 	bl	80024fc <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d92:	f7ff fbb3 	bl	80024fc <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e1a8      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da4:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db0:	4b28      	ldr	r3, [pc, #160]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	4925      	ldr	r1, [pc, #148]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	600b      	str	r3, [r1, #0]
 8002dc4:	e015      	b.n	8002df2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dc6:	4b24      	ldr	r3, [pc, #144]	; (8002e58 <HAL_RCC_OscConfig+0x244>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dcc:	f7ff fb96 	bl	80024fc <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd4:	f7ff fb92 	bl	80024fc <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e187      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de6:	4b1b      	ldr	r3, [pc, #108]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d036      	beq.n	8002e6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d016      	beq.n	8002e34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e06:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <HAL_RCC_OscConfig+0x248>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0c:	f7ff fb76 	bl	80024fc <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e14:	f7ff fb72 	bl	80024fc <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e167      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e26:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCC_OscConfig+0x200>
 8002e32:	e01b      	b.n	8002e6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e34:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <HAL_RCC_OscConfig+0x248>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3a:	f7ff fb5f 	bl	80024fc <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e40:	e00e      	b.n	8002e60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e42:	f7ff fb5b 	bl	80024fc <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d907      	bls.n	8002e60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e150      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
 8002e54:	40023800 	.word	0x40023800
 8002e58:	42470000 	.word	0x42470000
 8002e5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e60:	4b88      	ldr	r3, [pc, #544]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1ea      	bne.n	8002e42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 8097 	beq.w	8002fa8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e7e:	4b81      	ldr	r3, [pc, #516]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10f      	bne.n	8002eaa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	4b7d      	ldr	r3, [pc, #500]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	4a7c      	ldr	r2, [pc, #496]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e98:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9a:	4b7a      	ldr	r3, [pc, #488]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eaa:	4b77      	ldr	r3, [pc, #476]	; (8003088 <HAL_RCC_OscConfig+0x474>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d118      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eb6:	4b74      	ldr	r3, [pc, #464]	; (8003088 <HAL_RCC_OscConfig+0x474>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a73      	ldr	r2, [pc, #460]	; (8003088 <HAL_RCC_OscConfig+0x474>)
 8002ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec2:	f7ff fb1b 	bl	80024fc <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eca:	f7ff fb17 	bl	80024fc <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e10c      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002edc:	4b6a      	ldr	r3, [pc, #424]	; (8003088 <HAL_RCC_OscConfig+0x474>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d106      	bne.n	8002efe <HAL_RCC_OscConfig+0x2ea>
 8002ef0:	4b64      	ldr	r3, [pc, #400]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	4a63      	ldr	r2, [pc, #396]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	6713      	str	r3, [r2, #112]	; 0x70
 8002efc:	e01c      	b.n	8002f38 <HAL_RCC_OscConfig+0x324>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b05      	cmp	r3, #5
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x30c>
 8002f06:	4b5f      	ldr	r3, [pc, #380]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	4a5e      	ldr	r2, [pc, #376]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f0c:	f043 0304 	orr.w	r3, r3, #4
 8002f10:	6713      	str	r3, [r2, #112]	; 0x70
 8002f12:	4b5c      	ldr	r3, [pc, #368]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	4a5b      	ldr	r2, [pc, #364]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1e:	e00b      	b.n	8002f38 <HAL_RCC_OscConfig+0x324>
 8002f20:	4b58      	ldr	r3, [pc, #352]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f24:	4a57      	ldr	r2, [pc, #348]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f26:	f023 0301 	bic.w	r3, r3, #1
 8002f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2c:	4b55      	ldr	r3, [pc, #340]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f30:	4a54      	ldr	r2, [pc, #336]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f32:	f023 0304 	bic.w	r3, r3, #4
 8002f36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d015      	beq.n	8002f6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f40:	f7ff fadc 	bl	80024fc <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f46:	e00a      	b.n	8002f5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f48:	f7ff fad8 	bl	80024fc <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e0cb      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5e:	4b49      	ldr	r3, [pc, #292]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0ee      	beq.n	8002f48 <HAL_RCC_OscConfig+0x334>
 8002f6a:	e014      	b.n	8002f96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6c:	f7ff fac6 	bl	80024fc <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f72:	e00a      	b.n	8002f8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f74:	f7ff fac2 	bl	80024fc <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e0b5      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8a:	4b3e      	ldr	r3, [pc, #248]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1ee      	bne.n	8002f74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f96:	7dfb      	ldrb	r3, [r7, #23]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d105      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f9c:	4b39      	ldr	r3, [pc, #228]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	4a38      	ldr	r2, [pc, #224]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002fa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fa6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80a1 	beq.w	80030f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fb2:	4b34      	ldr	r3, [pc, #208]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d05c      	beq.n	8003078 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d141      	bne.n	800304a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc6:	4b31      	ldr	r3, [pc, #196]	; (800308c <HAL_RCC_OscConfig+0x478>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7ff fa96 	bl	80024fc <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd4:	f7ff fa92 	bl	80024fc <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e087      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe6:	4b27      	ldr	r3, [pc, #156]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69da      	ldr	r2, [r3, #28]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	019b      	lsls	r3, r3, #6
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003008:	085b      	lsrs	r3, r3, #1
 800300a:	3b01      	subs	r3, #1
 800300c:	041b      	lsls	r3, r3, #16
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	061b      	lsls	r3, r3, #24
 8003016:	491b      	ldr	r1, [pc, #108]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8003018:	4313      	orrs	r3, r2
 800301a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800301c:	4b1b      	ldr	r3, [pc, #108]	; (800308c <HAL_RCC_OscConfig+0x478>)
 800301e:	2201      	movs	r2, #1
 8003020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003022:	f7ff fa6b 	bl	80024fc <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800302a:	f7ff fa67 	bl	80024fc <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e05c      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303c:	4b11      	ldr	r3, [pc, #68]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x416>
 8003048:	e054      	b.n	80030f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304a:	4b10      	ldr	r3, [pc, #64]	; (800308c <HAL_RCC_OscConfig+0x478>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003050:	f7ff fa54 	bl	80024fc <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003058:	f7ff fa50 	bl	80024fc <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e045      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x444>
 8003076:	e03d      	b.n	80030f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d107      	bne.n	8003090 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e038      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
 8003084:	40023800 	.word	0x40023800
 8003088:	40007000 	.word	0x40007000
 800308c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003090:	4b1b      	ldr	r3, [pc, #108]	; (8003100 <HAL_RCC_OscConfig+0x4ec>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d028      	beq.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d121      	bne.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d11a      	bne.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030c0:	4013      	ands	r3, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d111      	bne.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d6:	085b      	lsrs	r3, r3, #1
 80030d8:	3b01      	subs	r3, #1
 80030da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030dc:	429a      	cmp	r2, r3
 80030de:	d107      	bne.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40023800 	.word	0x40023800

08003104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0cc      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003118:	4b68      	ldr	r3, [pc, #416]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d90c      	bls.n	8003140 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4b65      	ldr	r3, [pc, #404]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800312e:	4b63      	ldr	r3, [pc, #396]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0b8      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d020      	beq.n	800318e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003158:	4b59      	ldr	r3, [pc, #356]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	4a58      	ldr	r2, [pc, #352]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003162:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003170:	4b53      	ldr	r3, [pc, #332]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	4a52      	ldr	r2, [pc, #328]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800317a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800317c:	4b50      	ldr	r3, [pc, #320]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	494d      	ldr	r1, [pc, #308]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d044      	beq.n	8003224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d119      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e07f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d003      	beq.n	80031c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d107      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c2:	4b3f      	ldr	r3, [pc, #252]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e06f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d2:	4b3b      	ldr	r3, [pc, #236]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e067      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031e2:	4b37      	ldr	r3, [pc, #220]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f023 0203 	bic.w	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4934      	ldr	r1, [pc, #208]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031f4:	f7ff f982 	bl	80024fc <HAL_GetTick>
 80031f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031fc:	f7ff f97e 	bl	80024fc <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	; 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e04f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003212:	4b2b      	ldr	r3, [pc, #172]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 020c 	and.w	r2, r3, #12
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	429a      	cmp	r2, r3
 8003222:	d1eb      	bne.n	80031fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003224:	4b25      	ldr	r3, [pc, #148]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d20c      	bcs.n	800324c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003232:	4b22      	ldr	r3, [pc, #136]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	4b20      	ldr	r3, [pc, #128]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e032      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003258:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4916      	ldr	r1, [pc, #88]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d009      	beq.n	800328a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003276:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	490e      	ldr	r1, [pc, #56]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800328a:	f000 f821 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 800328e:	4602      	mov	r2, r0
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	490a      	ldr	r1, [pc, #40]	; (80032c4 <HAL_RCC_ClockConfig+0x1c0>)
 800329c:	5ccb      	ldrb	r3, [r1, r3]
 800329e:	fa22 f303 	lsr.w	r3, r2, r3
 80032a2:	4a09      	ldr	r2, [pc, #36]	; (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 80032a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032a6:	4b09      	ldr	r3, [pc, #36]	; (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fe fffa 	bl	80022a4 <HAL_InitTick>

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40023c00 	.word	0x40023c00
 80032c0:	40023800 	.word	0x40023800
 80032c4:	08006730 	.word	0x08006730
 80032c8:	20000010 	.word	0x20000010
 80032cc:	20000014 	.word	0x20000014

080032d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032d4:	b094      	sub	sp, #80	; 0x50
 80032d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	647b      	str	r3, [r7, #68]	; 0x44
 80032dc:	2300      	movs	r3, #0
 80032de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032e0:	2300      	movs	r3, #0
 80032e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032e8:	4b79      	ldr	r3, [pc, #484]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d00d      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0x40>
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	f200 80e1 	bhi.w	80034bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0x34>
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d003      	beq.n	800330a <HAL_RCC_GetSysClockFreq+0x3a>
 8003302:	e0db      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003304:	4b73      	ldr	r3, [pc, #460]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003306:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003308:	e0db      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800330a:	4b73      	ldr	r3, [pc, #460]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800330c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800330e:	e0d8      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003310:	4b6f      	ldr	r3, [pc, #444]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003318:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800331a:	4b6d      	ldr	r3, [pc, #436]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d063      	beq.n	80033ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003326:	4b6a      	ldr	r3, [pc, #424]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	099b      	lsrs	r3, r3, #6
 800332c:	2200      	movs	r2, #0
 800332e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003330:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003338:	633b      	str	r3, [r7, #48]	; 0x30
 800333a:	2300      	movs	r3, #0
 800333c:	637b      	str	r3, [r7, #52]	; 0x34
 800333e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003342:	4622      	mov	r2, r4
 8003344:	462b      	mov	r3, r5
 8003346:	f04f 0000 	mov.w	r0, #0
 800334a:	f04f 0100 	mov.w	r1, #0
 800334e:	0159      	lsls	r1, r3, #5
 8003350:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003354:	0150      	lsls	r0, r2, #5
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4621      	mov	r1, r4
 800335c:	1a51      	subs	r1, r2, r1
 800335e:	6139      	str	r1, [r7, #16]
 8003360:	4629      	mov	r1, r5
 8003362:	eb63 0301 	sbc.w	r3, r3, r1
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003374:	4659      	mov	r1, fp
 8003376:	018b      	lsls	r3, r1, #6
 8003378:	4651      	mov	r1, sl
 800337a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800337e:	4651      	mov	r1, sl
 8003380:	018a      	lsls	r2, r1, #6
 8003382:	4651      	mov	r1, sl
 8003384:	ebb2 0801 	subs.w	r8, r2, r1
 8003388:	4659      	mov	r1, fp
 800338a:	eb63 0901 	sbc.w	r9, r3, r1
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800339a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800339e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033a2:	4690      	mov	r8, r2
 80033a4:	4699      	mov	r9, r3
 80033a6:	4623      	mov	r3, r4
 80033a8:	eb18 0303 	adds.w	r3, r8, r3
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	462b      	mov	r3, r5
 80033b0:	eb49 0303 	adc.w	r3, r9, r3
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	f04f 0300 	mov.w	r3, #0
 80033be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033c2:	4629      	mov	r1, r5
 80033c4:	024b      	lsls	r3, r1, #9
 80033c6:	4621      	mov	r1, r4
 80033c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033cc:	4621      	mov	r1, r4
 80033ce:	024a      	lsls	r2, r1, #9
 80033d0:	4610      	mov	r0, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d6:	2200      	movs	r2, #0
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033e0:	f7fd fb94 	bl	8000b0c <__aeabi_uldivmod>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4613      	mov	r3, r2
 80033ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033ec:	e058      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ee:	4b38      	ldr	r3, [pc, #224]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	099b      	lsrs	r3, r3, #6
 80033f4:	2200      	movs	r2, #0
 80033f6:	4618      	mov	r0, r3
 80033f8:	4611      	mov	r1, r2
 80033fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033fe:	623b      	str	r3, [r7, #32]
 8003400:	2300      	movs	r3, #0
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
 8003404:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003408:	4642      	mov	r2, r8
 800340a:	464b      	mov	r3, r9
 800340c:	f04f 0000 	mov.w	r0, #0
 8003410:	f04f 0100 	mov.w	r1, #0
 8003414:	0159      	lsls	r1, r3, #5
 8003416:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800341a:	0150      	lsls	r0, r2, #5
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4641      	mov	r1, r8
 8003422:	ebb2 0a01 	subs.w	sl, r2, r1
 8003426:	4649      	mov	r1, r9
 8003428:	eb63 0b01 	sbc.w	fp, r3, r1
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003438:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800343c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003440:	ebb2 040a 	subs.w	r4, r2, sl
 8003444:	eb63 050b 	sbc.w	r5, r3, fp
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	00eb      	lsls	r3, r5, #3
 8003452:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003456:	00e2      	lsls	r2, r4, #3
 8003458:	4614      	mov	r4, r2
 800345a:	461d      	mov	r5, r3
 800345c:	4643      	mov	r3, r8
 800345e:	18e3      	adds	r3, r4, r3
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	464b      	mov	r3, r9
 8003464:	eb45 0303 	adc.w	r3, r5, r3
 8003468:	607b      	str	r3, [r7, #4]
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003476:	4629      	mov	r1, r5
 8003478:	028b      	lsls	r3, r1, #10
 800347a:	4621      	mov	r1, r4
 800347c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003480:	4621      	mov	r1, r4
 8003482:	028a      	lsls	r2, r1, #10
 8003484:	4610      	mov	r0, r2
 8003486:	4619      	mov	r1, r3
 8003488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800348a:	2200      	movs	r2, #0
 800348c:	61bb      	str	r3, [r7, #24]
 800348e:	61fa      	str	r2, [r7, #28]
 8003490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003494:	f7fd fb3a 	bl	8000b0c <__aeabi_uldivmod>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4613      	mov	r3, r2
 800349e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034a0:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	0c1b      	lsrs	r3, r3, #16
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	3301      	adds	r3, #1
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80034b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034ba:	e002      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80034be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3750      	adds	r7, #80	; 0x50
 80034c8:	46bd      	mov	sp, r7
 80034ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ce:	bf00      	nop
 80034d0:	40023800 	.word	0x40023800
 80034d4:	00f42400 	.word	0x00f42400
 80034d8:	007a1200 	.word	0x007a1200

080034dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e0:	4b03      	ldr	r3, [pc, #12]	; (80034f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034e2:	681b      	ldr	r3, [r3, #0]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	20000010 	.word	0x20000010

080034f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034f8:	f7ff fff0 	bl	80034dc <HAL_RCC_GetHCLKFreq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4b05      	ldr	r3, [pc, #20]	; (8003514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	0a9b      	lsrs	r3, r3, #10
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	4903      	ldr	r1, [pc, #12]	; (8003518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800350a:	5ccb      	ldrb	r3, [r1, r3]
 800350c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003510:	4618      	mov	r0, r3
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40023800 	.word	0x40023800
 8003518:	08006740 	.word	0x08006740

0800351c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003520:	f7ff ffdc 	bl	80034dc <HAL_RCC_GetHCLKFreq>
 8003524:	4602      	mov	r2, r0
 8003526:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	0b5b      	lsrs	r3, r3, #13
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	4903      	ldr	r1, [pc, #12]	; (8003540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003532:	5ccb      	ldrb	r3, [r1, r3]
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003538:	4618      	mov	r0, r3
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40023800 	.word	0x40023800
 8003540:	08006740 	.word	0x08006740

08003544 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	220f      	movs	r2, #15
 8003552:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003554:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <HAL_RCC_GetClockConfig+0x5c>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0203 	and.w	r2, r3, #3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003560:	4b0f      	ldr	r3, [pc, #60]	; (80035a0 <HAL_RCC_GetClockConfig+0x5c>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800356c:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <HAL_RCC_GetClockConfig+0x5c>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003578:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <HAL_RCC_GetClockConfig+0x5c>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	08db      	lsrs	r3, r3, #3
 800357e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003586:	4b07      	ldr	r3, [pc, #28]	; (80035a4 <HAL_RCC_GetClockConfig+0x60>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0207 	and.w	r2, r3, #7
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	601a      	str	r2, [r3, #0]
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40023800 	.word	0x40023800
 80035a4:	40023c00 	.word	0x40023c00

080035a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e041      	b.n	800363e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d106      	bne.n	80035d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fe fd7c 	bl	80020cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3304      	adds	r3, #4
 80035e4:	4619      	mov	r1, r3
 80035e6:	4610      	mov	r0, r2
 80035e8:	f000 fa96 	bl	8003b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	d001      	beq.n	8003660 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e04e      	b.n	80036fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a23      	ldr	r2, [pc, #140]	; (800370c <HAL_TIM_Base_Start_IT+0xc4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d022      	beq.n	80036c8 <HAL_TIM_Base_Start_IT+0x80>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368a:	d01d      	beq.n	80036c8 <HAL_TIM_Base_Start_IT+0x80>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1f      	ldr	r2, [pc, #124]	; (8003710 <HAL_TIM_Base_Start_IT+0xc8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d018      	beq.n	80036c8 <HAL_TIM_Base_Start_IT+0x80>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1e      	ldr	r2, [pc, #120]	; (8003714 <HAL_TIM_Base_Start_IT+0xcc>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d013      	beq.n	80036c8 <HAL_TIM_Base_Start_IT+0x80>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a1c      	ldr	r2, [pc, #112]	; (8003718 <HAL_TIM_Base_Start_IT+0xd0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00e      	beq.n	80036c8 <HAL_TIM_Base_Start_IT+0x80>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a1b      	ldr	r2, [pc, #108]	; (800371c <HAL_TIM_Base_Start_IT+0xd4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d009      	beq.n	80036c8 <HAL_TIM_Base_Start_IT+0x80>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a19      	ldr	r2, [pc, #100]	; (8003720 <HAL_TIM_Base_Start_IT+0xd8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d004      	beq.n	80036c8 <HAL_TIM_Base_Start_IT+0x80>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a18      	ldr	r2, [pc, #96]	; (8003724 <HAL_TIM_Base_Start_IT+0xdc>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d111      	bne.n	80036ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b06      	cmp	r3, #6
 80036d8:	d010      	beq.n	80036fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0201 	orr.w	r2, r2, #1
 80036e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ea:	e007      	b.n	80036fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40010000 	.word	0x40010000
 8003710:	40000400 	.word	0x40000400
 8003714:	40000800 	.word	0x40000800
 8003718:	40000c00 	.word	0x40000c00
 800371c:	40010400 	.word	0x40010400
 8003720:	40014000 	.word	0x40014000
 8003724:	40001800 	.word	0x40001800

08003728 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b02      	cmp	r3, #2
 800373c:	d122      	bne.n	8003784 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b02      	cmp	r3, #2
 800374a:	d11b      	bne.n	8003784 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f06f 0202 	mvn.w	r2, #2
 8003754:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f9b5 	bl	8003ada <HAL_TIM_IC_CaptureCallback>
 8003770:	e005      	b.n	800377e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f9a7 	bl	8003ac6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f9b8 	bl	8003aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b04      	cmp	r3, #4
 8003790:	d122      	bne.n	80037d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b04      	cmp	r3, #4
 800379e:	d11b      	bne.n	80037d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f06f 0204 	mvn.w	r2, #4
 80037a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2202      	movs	r2, #2
 80037ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f98b 	bl	8003ada <HAL_TIM_IC_CaptureCallback>
 80037c4:	e005      	b.n	80037d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f97d 	bl	8003ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f98e 	bl	8003aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d122      	bne.n	800382c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d11b      	bne.n	800382c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0208 	mvn.w	r2, #8
 80037fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2204      	movs	r2, #4
 8003802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f961 	bl	8003ada <HAL_TIM_IC_CaptureCallback>
 8003818:	e005      	b.n	8003826 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f953 	bl	8003ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f964 	bl	8003aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b10      	cmp	r3, #16
 8003838:	d122      	bne.n	8003880 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f003 0310 	and.w	r3, r3, #16
 8003844:	2b10      	cmp	r3, #16
 8003846:	d11b      	bne.n	8003880 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0210 	mvn.w	r2, #16
 8003850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2208      	movs	r2, #8
 8003856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f937 	bl	8003ada <HAL_TIM_IC_CaptureCallback>
 800386c:	e005      	b.n	800387a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f929 	bl	8003ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f93a 	bl	8003aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b01      	cmp	r3, #1
 800388c:	d10e      	bne.n	80038ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b01      	cmp	r3, #1
 800389a:	d107      	bne.n	80038ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0201 	mvn.w	r2, #1
 80038a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7fe fbb8 	bl	800201c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b6:	2b80      	cmp	r3, #128	; 0x80
 80038b8:	d10e      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c4:	2b80      	cmp	r3, #128	; 0x80
 80038c6:	d107      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fae0 	bl	8003e98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e2:	2b40      	cmp	r3, #64	; 0x40
 80038e4:	d10e      	bne.n	8003904 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f0:	2b40      	cmp	r3, #64	; 0x40
 80038f2:	d107      	bne.n	8003904 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f8ff 	bl	8003b02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b20      	cmp	r3, #32
 8003910:	d10e      	bne.n	8003930 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b20      	cmp	r3, #32
 800391e:	d107      	bne.n	8003930 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0220 	mvn.w	r2, #32
 8003928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 faaa 	bl	8003e84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003930:	bf00      	nop
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_TIM_ConfigClockSource+0x1c>
 8003950:	2302      	movs	r3, #2
 8003952:	e0b4      	b.n	8003abe <HAL_TIM_ConfigClockSource+0x186>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003972:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800397a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800398c:	d03e      	beq.n	8003a0c <HAL_TIM_ConfigClockSource+0xd4>
 800398e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003992:	f200 8087 	bhi.w	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800399a:	f000 8086 	beq.w	8003aaa <HAL_TIM_ConfigClockSource+0x172>
 800399e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a2:	d87f      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80039a4:	2b70      	cmp	r3, #112	; 0x70
 80039a6:	d01a      	beq.n	80039de <HAL_TIM_ConfigClockSource+0xa6>
 80039a8:	2b70      	cmp	r3, #112	; 0x70
 80039aa:	d87b      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80039ac:	2b60      	cmp	r3, #96	; 0x60
 80039ae:	d050      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x11a>
 80039b0:	2b60      	cmp	r3, #96	; 0x60
 80039b2:	d877      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80039b4:	2b50      	cmp	r3, #80	; 0x50
 80039b6:	d03c      	beq.n	8003a32 <HAL_TIM_ConfigClockSource+0xfa>
 80039b8:	2b50      	cmp	r3, #80	; 0x50
 80039ba:	d873      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80039bc:	2b40      	cmp	r3, #64	; 0x40
 80039be:	d058      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0x13a>
 80039c0:	2b40      	cmp	r3, #64	; 0x40
 80039c2:	d86f      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80039c4:	2b30      	cmp	r3, #48	; 0x30
 80039c6:	d064      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x15a>
 80039c8:	2b30      	cmp	r3, #48	; 0x30
 80039ca:	d86b      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	d060      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x15a>
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	d867      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d05c      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x15a>
 80039d8:	2b10      	cmp	r3, #16
 80039da:	d05a      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x15a>
 80039dc:	e062      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	6899      	ldr	r1, [r3, #8]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f000 f9ad 	bl	8003d4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	609a      	str	r2, [r3, #8]
      break;
 8003a0a:	e04f      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6818      	ldr	r0, [r3, #0]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	6899      	ldr	r1, [r3, #8]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f000 f996 	bl	8003d4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a2e:	609a      	str	r2, [r3, #8]
      break;
 8003a30:	e03c      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	6859      	ldr	r1, [r3, #4]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f000 f90a 	bl	8003c58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2150      	movs	r1, #80	; 0x50
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 f963 	bl	8003d16 <TIM_ITRx_SetConfig>
      break;
 8003a50:	e02c      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	6859      	ldr	r1, [r3, #4]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f000 f929 	bl	8003cb6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2160      	movs	r1, #96	; 0x60
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 f953 	bl	8003d16 <TIM_ITRx_SetConfig>
      break;
 8003a70:	e01c      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	6859      	ldr	r1, [r3, #4]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f000 f8ea 	bl	8003c58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2140      	movs	r1, #64	; 0x40
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 f943 	bl	8003d16 <TIM_ITRx_SetConfig>
      break;
 8003a90:	e00c      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	f000 f93a 	bl	8003d16 <TIM_ITRx_SetConfig>
      break;
 8003aa2:	e003      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa8:	e000      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003aaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
	...

08003b18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a40      	ldr	r2, [pc, #256]	; (8003c2c <TIM_Base_SetConfig+0x114>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d013      	beq.n	8003b58 <TIM_Base_SetConfig+0x40>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b36:	d00f      	beq.n	8003b58 <TIM_Base_SetConfig+0x40>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a3d      	ldr	r2, [pc, #244]	; (8003c30 <TIM_Base_SetConfig+0x118>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00b      	beq.n	8003b58 <TIM_Base_SetConfig+0x40>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a3c      	ldr	r2, [pc, #240]	; (8003c34 <TIM_Base_SetConfig+0x11c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d007      	beq.n	8003b58 <TIM_Base_SetConfig+0x40>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a3b      	ldr	r2, [pc, #236]	; (8003c38 <TIM_Base_SetConfig+0x120>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d003      	beq.n	8003b58 <TIM_Base_SetConfig+0x40>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a3a      	ldr	r2, [pc, #232]	; (8003c3c <TIM_Base_SetConfig+0x124>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d108      	bne.n	8003b6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a2f      	ldr	r2, [pc, #188]	; (8003c2c <TIM_Base_SetConfig+0x114>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d02b      	beq.n	8003bca <TIM_Base_SetConfig+0xb2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b78:	d027      	beq.n	8003bca <TIM_Base_SetConfig+0xb2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a2c      	ldr	r2, [pc, #176]	; (8003c30 <TIM_Base_SetConfig+0x118>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d023      	beq.n	8003bca <TIM_Base_SetConfig+0xb2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a2b      	ldr	r2, [pc, #172]	; (8003c34 <TIM_Base_SetConfig+0x11c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d01f      	beq.n	8003bca <TIM_Base_SetConfig+0xb2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a2a      	ldr	r2, [pc, #168]	; (8003c38 <TIM_Base_SetConfig+0x120>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d01b      	beq.n	8003bca <TIM_Base_SetConfig+0xb2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a29      	ldr	r2, [pc, #164]	; (8003c3c <TIM_Base_SetConfig+0x124>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d017      	beq.n	8003bca <TIM_Base_SetConfig+0xb2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a28      	ldr	r2, [pc, #160]	; (8003c40 <TIM_Base_SetConfig+0x128>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d013      	beq.n	8003bca <TIM_Base_SetConfig+0xb2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a27      	ldr	r2, [pc, #156]	; (8003c44 <TIM_Base_SetConfig+0x12c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00f      	beq.n	8003bca <TIM_Base_SetConfig+0xb2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a26      	ldr	r2, [pc, #152]	; (8003c48 <TIM_Base_SetConfig+0x130>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00b      	beq.n	8003bca <TIM_Base_SetConfig+0xb2>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a25      	ldr	r2, [pc, #148]	; (8003c4c <TIM_Base_SetConfig+0x134>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d007      	beq.n	8003bca <TIM_Base_SetConfig+0xb2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a24      	ldr	r2, [pc, #144]	; (8003c50 <TIM_Base_SetConfig+0x138>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d003      	beq.n	8003bca <TIM_Base_SetConfig+0xb2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a23      	ldr	r2, [pc, #140]	; (8003c54 <TIM_Base_SetConfig+0x13c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d108      	bne.n	8003bdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a0a      	ldr	r2, [pc, #40]	; (8003c2c <TIM_Base_SetConfig+0x114>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d003      	beq.n	8003c10 <TIM_Base_SetConfig+0xf8>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a0c      	ldr	r2, [pc, #48]	; (8003c3c <TIM_Base_SetConfig+0x124>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d103      	bne.n	8003c18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	615a      	str	r2, [r3, #20]
}
 8003c1e:	bf00      	nop
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40010000 	.word	0x40010000
 8003c30:	40000400 	.word	0x40000400
 8003c34:	40000800 	.word	0x40000800
 8003c38:	40000c00 	.word	0x40000c00
 8003c3c:	40010400 	.word	0x40010400
 8003c40:	40014000 	.word	0x40014000
 8003c44:	40014400 	.word	0x40014400
 8003c48:	40014800 	.word	0x40014800
 8003c4c:	40001800 	.word	0x40001800
 8003c50:	40001c00 	.word	0x40001c00
 8003c54:	40002000 	.word	0x40002000

08003c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	f023 0201 	bic.w	r2, r3, #1
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f023 030a 	bic.w	r3, r3, #10
 8003c94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	621a      	str	r2, [r3, #32]
}
 8003caa:	bf00      	nop
 8003cac:	371c      	adds	r7, #28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b087      	sub	sp, #28
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	60f8      	str	r0, [r7, #12]
 8003cbe:	60b9      	str	r1, [r7, #8]
 8003cc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	f023 0210 	bic.w	r2, r3, #16
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ce0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	031b      	lsls	r3, r3, #12
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cf2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	621a      	str	r2, [r3, #32]
}
 8003d0a:	bf00      	nop
 8003d0c:	371c      	adds	r7, #28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b085      	sub	sp, #20
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	f043 0307 	orr.w	r3, r3, #7
 8003d38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	609a      	str	r2, [r3, #8]
}
 8003d40:	bf00      	nop
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
 8003d58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	021a      	lsls	r2, r3, #8
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	609a      	str	r2, [r3, #8]
}
 8003d80:	bf00      	nop
 8003d82:	371c      	adds	r7, #28
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e05a      	b.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a21      	ldr	r2, [pc, #132]	; (8003e68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d022      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df0:	d01d      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a1d      	ldr	r2, [pc, #116]	; (8003e6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d018      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a1b      	ldr	r2, [pc, #108]	; (8003e70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d013      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a1a      	ldr	r2, [pc, #104]	; (8003e74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00e      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a18      	ldr	r2, [pc, #96]	; (8003e78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d009      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a17      	ldr	r2, [pc, #92]	; (8003e7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d004      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a15      	ldr	r2, [pc, #84]	; (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d10c      	bne.n	8003e48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40010000 	.word	0x40010000
 8003e6c:	40000400 	.word	0x40000400
 8003e70:	40000800 	.word	0x40000800
 8003e74:	40000c00 	.word	0x40000c00
 8003e78:	40010400 	.word	0x40010400
 8003e7c:	40014000 	.word	0x40014000
 8003e80:	40001800 	.word	0x40001800

08003e84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e03f      	b.n	8003f3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fe f91a 	bl	800210c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2224      	movs	r2, #36	; 0x24
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 fddf 	bl	8004ab4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695a      	ldr	r2, [r3, #20]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b08a      	sub	sp, #40	; 0x28
 8003f4a:	af02      	add	r7, sp, #8
 8003f4c:	60f8      	str	r0, [r7, #12]
 8003f4e:	60b9      	str	r1, [r7, #8]
 8003f50:	603b      	str	r3, [r7, #0]
 8003f52:	4613      	mov	r3, r2
 8003f54:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b20      	cmp	r3, #32
 8003f64:	d17c      	bne.n	8004060 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d002      	beq.n	8003f72 <HAL_UART_Transmit+0x2c>
 8003f6c:	88fb      	ldrh	r3, [r7, #6]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e075      	b.n	8004062 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_UART_Transmit+0x3e>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e06e      	b.n	8004062 <HAL_UART_Transmit+0x11c>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2221      	movs	r2, #33	; 0x21
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f9a:	f7fe faaf 	bl	80024fc <HAL_GetTick>
 8003f9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	88fa      	ldrh	r2, [r7, #6]
 8003fa4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	88fa      	ldrh	r2, [r7, #6]
 8003faa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb4:	d108      	bne.n	8003fc8 <HAL_UART_Transmit+0x82>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d104      	bne.n	8003fc8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	e003      	b.n	8003fd0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003fd8:	e02a      	b.n	8004030 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2180      	movs	r1, #128	; 0x80
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 fb1f 	bl	8004628 <UART_WaitOnFlagUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e036      	b.n	8004062 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10b      	bne.n	8004012 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004008:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	3302      	adds	r3, #2
 800400e:	61bb      	str	r3, [r7, #24]
 8004010:	e007      	b.n	8004022 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	781a      	ldrb	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	3301      	adds	r3, #1
 8004020:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1cf      	bne.n	8003fda <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2200      	movs	r2, #0
 8004042:	2140      	movs	r1, #64	; 0x40
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 faef 	bl	8004628 <UART_WaitOnFlagUntilTimeout>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e006      	b.n	8004062 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	e000      	b.n	8004062 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004060:	2302      	movs	r3, #2
  }
}
 8004062:	4618      	mov	r0, r3
 8004064:	3720      	adds	r7, #32
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b084      	sub	sp, #16
 800406e:	af00      	add	r7, sp, #0
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	4613      	mov	r3, r2
 8004076:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b20      	cmp	r3, #32
 8004082:	d11d      	bne.n	80040c0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_UART_Receive_IT+0x26>
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e016      	b.n	80040c2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409a:	2b01      	cmp	r3, #1
 800409c:	d101      	bne.n	80040a2 <HAL_UART_Receive_IT+0x38>
 800409e:	2302      	movs	r3, #2
 80040a0:	e00f      	b.n	80040c2 <HAL_UART_Receive_IT+0x58>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80040b0:	88fb      	ldrh	r3, [r7, #6]
 80040b2:	461a      	mov	r2, r3
 80040b4:	68b9      	ldr	r1, [r7, #8]
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 fb24 	bl	8004704 <UART_Start_Receive_IT>
 80040bc:	4603      	mov	r3, r0
 80040be:	e000      	b.n	80040c2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80040c0:	2302      	movs	r3, #2
  }
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b0ba      	sub	sp, #232	; 0xe8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800410a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10f      	bne.n	8004132 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <HAL_UART_IRQHandler+0x66>
 800411e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fc07 	bl	800493e <UART_Receive_IT>
      return;
 8004130:	e256      	b.n	80045e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 80de 	beq.w	80042f8 <HAL_UART_IRQHandler+0x22c>
 800413c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d106      	bne.n	8004156 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800414c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80d1 	beq.w	80042f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00b      	beq.n	800417a <HAL_UART_IRQHandler+0xae>
 8004162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416a:	2b00      	cmp	r3, #0
 800416c:	d005      	beq.n	800417a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	f043 0201 	orr.w	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800417a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00b      	beq.n	800419e <HAL_UART_IRQHandler+0xd2>
 8004186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d005      	beq.n	800419e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	f043 0202 	orr.w	r2, r3, #2
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800419e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00b      	beq.n	80041c2 <HAL_UART_IRQHandler+0xf6>
 80041aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d005      	beq.n	80041c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	f043 0204 	orr.w	r2, r3, #4
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d011      	beq.n	80041f2 <HAL_UART_IRQHandler+0x126>
 80041ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d105      	bne.n	80041e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	f043 0208 	orr.w	r2, r3, #8
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 81ed 	beq.w	80045d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b00      	cmp	r3, #0
 8004206:	d008      	beq.n	800421a <HAL_UART_IRQHandler+0x14e>
 8004208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800420c:	f003 0320 	and.w	r3, r3, #32
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 fb92 	bl	800493e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004224:	2b40      	cmp	r3, #64	; 0x40
 8004226:	bf0c      	ite	eq
 8004228:	2301      	moveq	r3, #1
 800422a:	2300      	movne	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d103      	bne.n	8004246 <HAL_UART_IRQHandler+0x17a>
 800423e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d04f      	beq.n	80042e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fa9a 	bl	8004780 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004256:	2b40      	cmp	r3, #64	; 0x40
 8004258:	d141      	bne.n	80042de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3314      	adds	r3, #20
 8004260:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004270:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004278:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3314      	adds	r3, #20
 8004282:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004286:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800428a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004292:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004296:	e841 2300 	strex	r3, r2, [r1]
 800429a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800429e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1d9      	bne.n	800425a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d013      	beq.n	80042d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b2:	4a7d      	ldr	r2, [pc, #500]	; (80044a8 <HAL_UART_IRQHandler+0x3dc>)
 80042b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fe faa0 	bl	8002800 <HAL_DMA_Abort_IT>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d016      	beq.n	80042f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042d0:	4610      	mov	r0, r2
 80042d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d4:	e00e      	b.n	80042f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f990 	bl	80045fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042dc:	e00a      	b.n	80042f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f98c 	bl	80045fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e4:	e006      	b.n	80042f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f988 	bl	80045fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80042f2:	e170      	b.n	80045d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f4:	bf00      	nop
    return;
 80042f6:	e16e      	b.n	80045d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	f040 814a 	bne.w	8004596 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004306:	f003 0310 	and.w	r3, r3, #16
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 8143 	beq.w	8004596 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004314:	f003 0310 	and.w	r3, r3, #16
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 813c 	beq.w	8004596 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800431e:	2300      	movs	r3, #0
 8004320:	60bb      	str	r3, [r7, #8]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	60bb      	str	r3, [r7, #8]
 8004332:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433e:	2b40      	cmp	r3, #64	; 0x40
 8004340:	f040 80b4 	bne.w	80044ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004350:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 8140 	beq.w	80045da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800435e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004362:	429a      	cmp	r2, r3
 8004364:	f080 8139 	bcs.w	80045da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800436e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800437a:	f000 8088 	beq.w	800448e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	330c      	adds	r3, #12
 8004384:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004388:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004394:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800439c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	330c      	adds	r3, #12
 80043a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80043aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80043b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043ba:	e841 2300 	strex	r3, r2, [r1]
 80043be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1d9      	bne.n	800437e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3314      	adds	r3, #20
 80043d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043d4:	e853 3f00 	ldrex	r3, [r3]
 80043d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043dc:	f023 0301 	bic.w	r3, r3, #1
 80043e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3314      	adds	r3, #20
 80043ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004400:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1e1      	bne.n	80043ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3314      	adds	r3, #20
 800440c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004410:	e853 3f00 	ldrex	r3, [r3]
 8004414:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004418:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800441c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3314      	adds	r3, #20
 8004426:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800442a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800442c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004430:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004432:	e841 2300 	strex	r3, r2, [r1]
 8004436:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004438:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1e3      	bne.n	8004406 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2220      	movs	r2, #32
 8004442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	330c      	adds	r3, #12
 8004452:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004456:	e853 3f00 	ldrex	r3, [r3]
 800445a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800445c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800445e:	f023 0310 	bic.w	r3, r3, #16
 8004462:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	330c      	adds	r3, #12
 800446c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004470:	65ba      	str	r2, [r7, #88]	; 0x58
 8004472:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004474:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004476:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004478:	e841 2300 	strex	r3, r2, [r1]
 800447c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800447e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1e3      	bne.n	800444c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004488:	4618      	mov	r0, r3
 800448a:	f7fe f949 	bl	8002720 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004496:	b29b      	uxth	r3, r3
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	b29b      	uxth	r3, r3
 800449c:	4619      	mov	r1, r3
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f8b6 	bl	8004610 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044a4:	e099      	b.n	80045da <HAL_UART_IRQHandler+0x50e>
 80044a6:	bf00      	nop
 80044a8:	08004847 	.word	0x08004847
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 808b 	beq.w	80045de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80044c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 8086 	beq.w	80045de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	330c      	adds	r3, #12
 80044d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044dc:	e853 3f00 	ldrex	r3, [r3]
 80044e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	330c      	adds	r3, #12
 80044f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80044f6:	647a      	str	r2, [r7, #68]	; 0x44
 80044f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e3      	bne.n	80044d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3314      	adds	r3, #20
 8004510:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	e853 3f00 	ldrex	r3, [r3]
 8004518:	623b      	str	r3, [r7, #32]
   return(result);
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	f023 0301 	bic.w	r3, r3, #1
 8004520:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3314      	adds	r3, #20
 800452a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800452e:	633a      	str	r2, [r7, #48]	; 0x30
 8004530:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e3      	bne.n	800450a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2220      	movs	r2, #32
 8004546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	330c      	adds	r3, #12
 8004556:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	e853 3f00 	ldrex	r3, [r3]
 800455e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0310 	bic.w	r3, r3, #16
 8004566:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	330c      	adds	r3, #12
 8004570:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004574:	61fa      	str	r2, [r7, #28]
 8004576:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004578:	69b9      	ldr	r1, [r7, #24]
 800457a:	69fa      	ldr	r2, [r7, #28]
 800457c:	e841 2300 	strex	r3, r2, [r1]
 8004580:	617b      	str	r3, [r7, #20]
   return(result);
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1e3      	bne.n	8004550 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004588:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800458c:	4619      	mov	r1, r3
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f83e 	bl	8004610 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004594:	e023      	b.n	80045de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800459a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d009      	beq.n	80045b6 <HAL_UART_IRQHandler+0x4ea>
 80045a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f95d 	bl	800486e <UART_Transmit_IT>
    return;
 80045b4:	e014      	b.n	80045e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00e      	beq.n	80045e0 <HAL_UART_IRQHandler+0x514>
 80045c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d008      	beq.n	80045e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f99d 	bl	800490e <UART_EndTransmit_IT>
    return;
 80045d4:	e004      	b.n	80045e0 <HAL_UART_IRQHandler+0x514>
    return;
 80045d6:	bf00      	nop
 80045d8:	e002      	b.n	80045e0 <HAL_UART_IRQHandler+0x514>
      return;
 80045da:	bf00      	nop
 80045dc:	e000      	b.n	80045e0 <HAL_UART_IRQHandler+0x514>
      return;
 80045de:	bf00      	nop
  }
}
 80045e0:	37e8      	adds	r7, #232	; 0xe8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop

080045e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b090      	sub	sp, #64	; 0x40
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	603b      	str	r3, [r7, #0]
 8004634:	4613      	mov	r3, r2
 8004636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004638:	e050      	b.n	80046dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800463c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004640:	d04c      	beq.n	80046dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004644:	2b00      	cmp	r3, #0
 8004646:	d007      	beq.n	8004658 <UART_WaitOnFlagUntilTimeout+0x30>
 8004648:	f7fd ff58 	bl	80024fc <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004654:	429a      	cmp	r2, r3
 8004656:	d241      	bcs.n	80046dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	330c      	adds	r3, #12
 800465e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004662:	e853 3f00 	ldrex	r3, [r3]
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800466e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	330c      	adds	r3, #12
 8004676:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004678:	637a      	str	r2, [r7, #52]	; 0x34
 800467a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800467e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004680:	e841 2300 	strex	r3, r2, [r1]
 8004684:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e5      	bne.n	8004658 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3314      	adds	r3, #20
 8004692:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	e853 3f00 	ldrex	r3, [r3]
 800469a:	613b      	str	r3, [r7, #16]
   return(result);
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f023 0301 	bic.w	r3, r3, #1
 80046a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3314      	adds	r3, #20
 80046aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046ac:	623a      	str	r2, [r7, #32]
 80046ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b0:	69f9      	ldr	r1, [r7, #28]
 80046b2:	6a3a      	ldr	r2, [r7, #32]
 80046b4:	e841 2300 	strex	r3, r2, [r1]
 80046b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1e5      	bne.n	800468c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e00f      	b.n	80046fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	4013      	ands	r3, r2
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	bf0c      	ite	eq
 80046ec:	2301      	moveq	r3, #1
 80046ee:	2300      	movne	r3, #0
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	461a      	mov	r2, r3
 80046f4:	79fb      	ldrb	r3, [r7, #7]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d09f      	beq.n	800463a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3740      	adds	r7, #64	; 0x40
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	4613      	mov	r3, r2
 8004710:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	88fa      	ldrh	r2, [r7, #6]
 800471c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	88fa      	ldrh	r2, [r7, #6]
 8004722:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2222      	movs	r2, #34	; 0x22
 800472e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d007      	beq.n	8004752 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004750:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695a      	ldr	r2, [r3, #20]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f042 0201 	orr.w	r2, r2, #1
 8004760:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f042 0220 	orr.w	r2, r2, #32
 8004770:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004780:	b480      	push	{r7}
 8004782:	b095      	sub	sp, #84	; 0x54
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	330c      	adds	r3, #12
 800478e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004792:	e853 3f00 	ldrex	r3, [r3]
 8004796:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800479e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	330c      	adds	r3, #12
 80047a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047a8:	643a      	str	r2, [r7, #64]	; 0x40
 80047aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047b0:	e841 2300 	strex	r3, r2, [r1]
 80047b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1e5      	bne.n	8004788 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3314      	adds	r3, #20
 80047c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	e853 3f00 	ldrex	r3, [r3]
 80047ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	f023 0301 	bic.w	r3, r3, #1
 80047d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3314      	adds	r3, #20
 80047da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047e4:	e841 2300 	strex	r3, r2, [r1]
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1e5      	bne.n	80047bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d119      	bne.n	800482c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	330c      	adds	r3, #12
 80047fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	e853 3f00 	ldrex	r3, [r3]
 8004806:	60bb      	str	r3, [r7, #8]
   return(result);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f023 0310 	bic.w	r3, r3, #16
 800480e:	647b      	str	r3, [r7, #68]	; 0x44
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	330c      	adds	r3, #12
 8004816:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004818:	61ba      	str	r2, [r7, #24]
 800481a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481c:	6979      	ldr	r1, [r7, #20]
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	e841 2300 	strex	r3, r2, [r1]
 8004824:	613b      	str	r3, [r7, #16]
   return(result);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1e5      	bne.n	80047f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	631a      	str	r2, [r3, #48]	; 0x30
}
 800483a:	bf00      	nop
 800483c:	3754      	adds	r7, #84	; 0x54
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b084      	sub	sp, #16
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004852:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f7ff fecb 	bl	80045fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004866:	bf00      	nop
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800486e:	b480      	push	{r7}
 8004870:	b085      	sub	sp, #20
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b21      	cmp	r3, #33	; 0x21
 8004880:	d13e      	bne.n	8004900 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800488a:	d114      	bne.n	80048b6 <UART_Transmit_IT+0x48>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d110      	bne.n	80048b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	1c9a      	adds	r2, r3, #2
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	621a      	str	r2, [r3, #32]
 80048b4:	e008      	b.n	80048c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	1c59      	adds	r1, r3, #1
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6211      	str	r1, [r2, #32]
 80048c0:	781a      	ldrb	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	4619      	mov	r1, r3
 80048d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10f      	bne.n	80048fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048fc:	2300      	movs	r3, #0
 80048fe:	e000      	b.n	8004902 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004900:	2302      	movs	r3, #2
  }
}
 8004902:	4618      	mov	r0, r3
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b082      	sub	sp, #8
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68da      	ldr	r2, [r3, #12]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004924:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2220      	movs	r2, #32
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7ff fe5a 	bl	80045e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b08c      	sub	sp, #48	; 0x30
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b22      	cmp	r3, #34	; 0x22
 8004950:	f040 80ab 	bne.w	8004aaa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800495c:	d117      	bne.n	800498e <UART_Receive_IT+0x50>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d113      	bne.n	800498e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004966:	2300      	movs	r3, #0
 8004968:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	b29b      	uxth	r3, r3
 8004978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800497c:	b29a      	uxth	r2, r3
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004986:	1c9a      	adds	r2, r3, #2
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	629a      	str	r2, [r3, #40]	; 0x28
 800498c:	e026      	b.n	80049dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004992:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004994:	2300      	movs	r3, #0
 8004996:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a0:	d007      	beq.n	80049b2 <UART_Receive_IT+0x74>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10a      	bne.n	80049c0 <UART_Receive_IT+0x82>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d106      	bne.n	80049c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049bc:	701a      	strb	r2, [r3, #0]
 80049be:	e008      	b.n	80049d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	4619      	mov	r1, r3
 80049ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d15a      	bne.n	8004aa6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0220 	bic.w	r2, r2, #32
 80049fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695a      	ldr	r2, [r3, #20]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 0201 	bic.w	r2, r2, #1
 8004a1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d135      	bne.n	8004a9c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	330c      	adds	r3, #12
 8004a3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	e853 3f00 	ldrex	r3, [r3]
 8004a44:	613b      	str	r3, [r7, #16]
   return(result);
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f023 0310 	bic.w	r3, r3, #16
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	330c      	adds	r3, #12
 8004a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a56:	623a      	str	r2, [r7, #32]
 8004a58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5a:	69f9      	ldr	r1, [r7, #28]
 8004a5c:	6a3a      	ldr	r2, [r7, #32]
 8004a5e:	e841 2300 	strex	r3, r2, [r1]
 8004a62:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1e5      	bne.n	8004a36 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0310 	and.w	r3, r3, #16
 8004a74:	2b10      	cmp	r3, #16
 8004a76:	d10a      	bne.n	8004a8e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a92:	4619      	mov	r1, r3
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff fdbb 	bl	8004610 <HAL_UARTEx_RxEventCallback>
 8004a9a:	e002      	b.n	8004aa2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7fc fb67 	bl	8001170 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	e002      	b.n	8004aac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	e000      	b.n	8004aac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004aaa:	2302      	movs	r3, #2
  }
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3730      	adds	r7, #48	; 0x30
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ab8:	b0c0      	sub	sp, #256	; 0x100
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad0:	68d9      	ldr	r1, [r3, #12]
 8004ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	ea40 0301 	orr.w	r3, r0, r1
 8004adc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	431a      	orrs	r2, r3
 8004aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b0c:	f021 010c 	bic.w	r1, r1, #12
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b1a:	430b      	orrs	r3, r1
 8004b1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2e:	6999      	ldr	r1, [r3, #24]
 8004b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	ea40 0301 	orr.w	r3, r0, r1
 8004b3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	4b8f      	ldr	r3, [pc, #572]	; (8004d80 <UART_SetConfig+0x2cc>)
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d005      	beq.n	8004b54 <UART_SetConfig+0xa0>
 8004b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	4b8d      	ldr	r3, [pc, #564]	; (8004d84 <UART_SetConfig+0x2d0>)
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d104      	bne.n	8004b5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b54:	f7fe fce2 	bl	800351c <HAL_RCC_GetPCLK2Freq>
 8004b58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b5c:	e003      	b.n	8004b66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b5e:	f7fe fcc9 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 8004b62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b70:	f040 810c 	bne.w	8004d8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b86:	4622      	mov	r2, r4
 8004b88:	462b      	mov	r3, r5
 8004b8a:	1891      	adds	r1, r2, r2
 8004b8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b8e:	415b      	adcs	r3, r3
 8004b90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b96:	4621      	mov	r1, r4
 8004b98:	eb12 0801 	adds.w	r8, r2, r1
 8004b9c:	4629      	mov	r1, r5
 8004b9e:	eb43 0901 	adc.w	r9, r3, r1
 8004ba2:	f04f 0200 	mov.w	r2, #0
 8004ba6:	f04f 0300 	mov.w	r3, #0
 8004baa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bb6:	4690      	mov	r8, r2
 8004bb8:	4699      	mov	r9, r3
 8004bba:	4623      	mov	r3, r4
 8004bbc:	eb18 0303 	adds.w	r3, r8, r3
 8004bc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bc4:	462b      	mov	r3, r5
 8004bc6:	eb49 0303 	adc.w	r3, r9, r3
 8004bca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004bde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004be2:	460b      	mov	r3, r1
 8004be4:	18db      	adds	r3, r3, r3
 8004be6:	653b      	str	r3, [r7, #80]	; 0x50
 8004be8:	4613      	mov	r3, r2
 8004bea:	eb42 0303 	adc.w	r3, r2, r3
 8004bee:	657b      	str	r3, [r7, #84]	; 0x54
 8004bf0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004bf4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004bf8:	f7fb ff88 	bl	8000b0c <__aeabi_uldivmod>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4b61      	ldr	r3, [pc, #388]	; (8004d88 <UART_SetConfig+0x2d4>)
 8004c02:	fba3 2302 	umull	r2, r3, r3, r2
 8004c06:	095b      	lsrs	r3, r3, #5
 8004c08:	011c      	lsls	r4, r3, #4
 8004c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c1c:	4642      	mov	r2, r8
 8004c1e:	464b      	mov	r3, r9
 8004c20:	1891      	adds	r1, r2, r2
 8004c22:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c24:	415b      	adcs	r3, r3
 8004c26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c2c:	4641      	mov	r1, r8
 8004c2e:	eb12 0a01 	adds.w	sl, r2, r1
 8004c32:	4649      	mov	r1, r9
 8004c34:	eb43 0b01 	adc.w	fp, r3, r1
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	f04f 0300 	mov.w	r3, #0
 8004c40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c4c:	4692      	mov	sl, r2
 8004c4e:	469b      	mov	fp, r3
 8004c50:	4643      	mov	r3, r8
 8004c52:	eb1a 0303 	adds.w	r3, sl, r3
 8004c56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c5a:	464b      	mov	r3, r9
 8004c5c:	eb4b 0303 	adc.w	r3, fp, r3
 8004c60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	18db      	adds	r3, r3, r3
 8004c7c:	643b      	str	r3, [r7, #64]	; 0x40
 8004c7e:	4613      	mov	r3, r2
 8004c80:	eb42 0303 	adc.w	r3, r2, r3
 8004c84:	647b      	str	r3, [r7, #68]	; 0x44
 8004c86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c8e:	f7fb ff3d 	bl	8000b0c <__aeabi_uldivmod>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	4611      	mov	r1, r2
 8004c98:	4b3b      	ldr	r3, [pc, #236]	; (8004d88 <UART_SetConfig+0x2d4>)
 8004c9a:	fba3 2301 	umull	r2, r3, r3, r1
 8004c9e:	095b      	lsrs	r3, r3, #5
 8004ca0:	2264      	movs	r2, #100	; 0x64
 8004ca2:	fb02 f303 	mul.w	r3, r2, r3
 8004ca6:	1acb      	subs	r3, r1, r3
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004cae:	4b36      	ldr	r3, [pc, #216]	; (8004d88 <UART_SetConfig+0x2d4>)
 8004cb0:	fba3 2302 	umull	r2, r3, r3, r2
 8004cb4:	095b      	lsrs	r3, r3, #5
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cbc:	441c      	add	r4, r3
 8004cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ccc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004cd0:	4642      	mov	r2, r8
 8004cd2:	464b      	mov	r3, r9
 8004cd4:	1891      	adds	r1, r2, r2
 8004cd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cd8:	415b      	adcs	r3, r3
 8004cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ce0:	4641      	mov	r1, r8
 8004ce2:	1851      	adds	r1, r2, r1
 8004ce4:	6339      	str	r1, [r7, #48]	; 0x30
 8004ce6:	4649      	mov	r1, r9
 8004ce8:	414b      	adcs	r3, r1
 8004cea:	637b      	str	r3, [r7, #52]	; 0x34
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004cf8:	4659      	mov	r1, fp
 8004cfa:	00cb      	lsls	r3, r1, #3
 8004cfc:	4651      	mov	r1, sl
 8004cfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d02:	4651      	mov	r1, sl
 8004d04:	00ca      	lsls	r2, r1, #3
 8004d06:	4610      	mov	r0, r2
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	4642      	mov	r2, r8
 8004d0e:	189b      	adds	r3, r3, r2
 8004d10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d14:	464b      	mov	r3, r9
 8004d16:	460a      	mov	r2, r1
 8004d18:	eb42 0303 	adc.w	r3, r2, r3
 8004d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d34:	460b      	mov	r3, r1
 8004d36:	18db      	adds	r3, r3, r3
 8004d38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	eb42 0303 	adc.w	r3, r2, r3
 8004d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d4a:	f7fb fedf 	bl	8000b0c <__aeabi_uldivmod>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	4b0d      	ldr	r3, [pc, #52]	; (8004d88 <UART_SetConfig+0x2d4>)
 8004d54:	fba3 1302 	umull	r1, r3, r3, r2
 8004d58:	095b      	lsrs	r3, r3, #5
 8004d5a:	2164      	movs	r1, #100	; 0x64
 8004d5c:	fb01 f303 	mul.w	r3, r1, r3
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	3332      	adds	r3, #50	; 0x32
 8004d66:	4a08      	ldr	r2, [pc, #32]	; (8004d88 <UART_SetConfig+0x2d4>)
 8004d68:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6c:	095b      	lsrs	r3, r3, #5
 8004d6e:	f003 0207 	and.w	r2, r3, #7
 8004d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4422      	add	r2, r4
 8004d7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d7c:	e105      	b.n	8004f8a <UART_SetConfig+0x4d6>
 8004d7e:	bf00      	nop
 8004d80:	40011000 	.word	0x40011000
 8004d84:	40011400 	.word	0x40011400
 8004d88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d90:	2200      	movs	r2, #0
 8004d92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d9e:	4642      	mov	r2, r8
 8004da0:	464b      	mov	r3, r9
 8004da2:	1891      	adds	r1, r2, r2
 8004da4:	6239      	str	r1, [r7, #32]
 8004da6:	415b      	adcs	r3, r3
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24
 8004daa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dae:	4641      	mov	r1, r8
 8004db0:	1854      	adds	r4, r2, r1
 8004db2:	4649      	mov	r1, r9
 8004db4:	eb43 0501 	adc.w	r5, r3, r1
 8004db8:	f04f 0200 	mov.w	r2, #0
 8004dbc:	f04f 0300 	mov.w	r3, #0
 8004dc0:	00eb      	lsls	r3, r5, #3
 8004dc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dc6:	00e2      	lsls	r2, r4, #3
 8004dc8:	4614      	mov	r4, r2
 8004dca:	461d      	mov	r5, r3
 8004dcc:	4643      	mov	r3, r8
 8004dce:	18e3      	adds	r3, r4, r3
 8004dd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004dd4:	464b      	mov	r3, r9
 8004dd6:	eb45 0303 	adc.w	r3, r5, r3
 8004dda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004dea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	f04f 0300 	mov.w	r3, #0
 8004df6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	008b      	lsls	r3, r1, #2
 8004dfe:	4621      	mov	r1, r4
 8004e00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e04:	4621      	mov	r1, r4
 8004e06:	008a      	lsls	r2, r1, #2
 8004e08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e0c:	f7fb fe7e 	bl	8000b0c <__aeabi_uldivmod>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4b60      	ldr	r3, [pc, #384]	; (8004f98 <UART_SetConfig+0x4e4>)
 8004e16:	fba3 2302 	umull	r2, r3, r3, r2
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	011c      	lsls	r4, r3, #4
 8004e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e22:	2200      	movs	r2, #0
 8004e24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e30:	4642      	mov	r2, r8
 8004e32:	464b      	mov	r3, r9
 8004e34:	1891      	adds	r1, r2, r2
 8004e36:	61b9      	str	r1, [r7, #24]
 8004e38:	415b      	adcs	r3, r3
 8004e3a:	61fb      	str	r3, [r7, #28]
 8004e3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e40:	4641      	mov	r1, r8
 8004e42:	1851      	adds	r1, r2, r1
 8004e44:	6139      	str	r1, [r7, #16]
 8004e46:	4649      	mov	r1, r9
 8004e48:	414b      	adcs	r3, r1
 8004e4a:	617b      	str	r3, [r7, #20]
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e58:	4659      	mov	r1, fp
 8004e5a:	00cb      	lsls	r3, r1, #3
 8004e5c:	4651      	mov	r1, sl
 8004e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e62:	4651      	mov	r1, sl
 8004e64:	00ca      	lsls	r2, r1, #3
 8004e66:	4610      	mov	r0, r2
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	4642      	mov	r2, r8
 8004e6e:	189b      	adds	r3, r3, r2
 8004e70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e74:	464b      	mov	r3, r9
 8004e76:	460a      	mov	r2, r1
 8004e78:	eb42 0303 	adc.w	r3, r2, r3
 8004e7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e8c:	f04f 0200 	mov.w	r2, #0
 8004e90:	f04f 0300 	mov.w	r3, #0
 8004e94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e98:	4649      	mov	r1, r9
 8004e9a:	008b      	lsls	r3, r1, #2
 8004e9c:	4641      	mov	r1, r8
 8004e9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ea2:	4641      	mov	r1, r8
 8004ea4:	008a      	lsls	r2, r1, #2
 8004ea6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004eaa:	f7fb fe2f 	bl	8000b0c <__aeabi_uldivmod>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	4b39      	ldr	r3, [pc, #228]	; (8004f98 <UART_SetConfig+0x4e4>)
 8004eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8004eb8:	095b      	lsrs	r3, r3, #5
 8004eba:	2164      	movs	r1, #100	; 0x64
 8004ebc:	fb01 f303 	mul.w	r3, r1, r3
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	3332      	adds	r3, #50	; 0x32
 8004ec6:	4a34      	ldr	r2, [pc, #208]	; (8004f98 <UART_SetConfig+0x4e4>)
 8004ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ecc:	095b      	lsrs	r3, r3, #5
 8004ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ed2:	441c      	add	r4, r3
 8004ed4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ed8:	2200      	movs	r2, #0
 8004eda:	673b      	str	r3, [r7, #112]	; 0x70
 8004edc:	677a      	str	r2, [r7, #116]	; 0x74
 8004ede:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ee2:	4642      	mov	r2, r8
 8004ee4:	464b      	mov	r3, r9
 8004ee6:	1891      	adds	r1, r2, r2
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	415b      	adcs	r3, r3
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ef2:	4641      	mov	r1, r8
 8004ef4:	1851      	adds	r1, r2, r1
 8004ef6:	6039      	str	r1, [r7, #0]
 8004ef8:	4649      	mov	r1, r9
 8004efa:	414b      	adcs	r3, r1
 8004efc:	607b      	str	r3, [r7, #4]
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	f04f 0300 	mov.w	r3, #0
 8004f06:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f0a:	4659      	mov	r1, fp
 8004f0c:	00cb      	lsls	r3, r1, #3
 8004f0e:	4651      	mov	r1, sl
 8004f10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f14:	4651      	mov	r1, sl
 8004f16:	00ca      	lsls	r2, r1, #3
 8004f18:	4610      	mov	r0, r2
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	4642      	mov	r2, r8
 8004f20:	189b      	adds	r3, r3, r2
 8004f22:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f24:	464b      	mov	r3, r9
 8004f26:	460a      	mov	r2, r1
 8004f28:	eb42 0303 	adc.w	r3, r2, r3
 8004f2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	663b      	str	r3, [r7, #96]	; 0x60
 8004f38:	667a      	str	r2, [r7, #100]	; 0x64
 8004f3a:	f04f 0200 	mov.w	r2, #0
 8004f3e:	f04f 0300 	mov.w	r3, #0
 8004f42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f46:	4649      	mov	r1, r9
 8004f48:	008b      	lsls	r3, r1, #2
 8004f4a:	4641      	mov	r1, r8
 8004f4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f50:	4641      	mov	r1, r8
 8004f52:	008a      	lsls	r2, r1, #2
 8004f54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f58:	f7fb fdd8 	bl	8000b0c <__aeabi_uldivmod>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <UART_SetConfig+0x4e4>)
 8004f62:	fba3 1302 	umull	r1, r3, r3, r2
 8004f66:	095b      	lsrs	r3, r3, #5
 8004f68:	2164      	movs	r1, #100	; 0x64
 8004f6a:	fb01 f303 	mul.w	r3, r1, r3
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	011b      	lsls	r3, r3, #4
 8004f72:	3332      	adds	r3, #50	; 0x32
 8004f74:	4a08      	ldr	r2, [pc, #32]	; (8004f98 <UART_SetConfig+0x4e4>)
 8004f76:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	f003 020f 	and.w	r2, r3, #15
 8004f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4422      	add	r2, r4
 8004f88:	609a      	str	r2, [r3, #8]
}
 8004f8a:	bf00      	nop
 8004f8c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f90:	46bd      	mov	sp, r7
 8004f92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f96:	bf00      	nop
 8004f98:	51eb851f 	.word	0x51eb851f

08004f9c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fae:	2b84      	cmp	r3, #132	; 0x84
 8004fb0:	d005      	beq.n	8004fbe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004fb2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	4413      	add	r3, r2
 8004fba:	3303      	adds	r3, #3
 8004fbc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004fd0:	f000 faf6 	bl	80055c0 <vTaskStartScheduler>
  
  return osOK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004fda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fdc:	b089      	sub	sp, #36	; 0x24
 8004fde:	af04      	add	r7, sp, #16
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d020      	beq.n	800502e <osThreadCreate+0x54>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d01c      	beq.n	800502e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685c      	ldr	r4, [r3, #4]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681d      	ldr	r5, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691e      	ldr	r6, [r3, #16]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005006:	4618      	mov	r0, r3
 8005008:	f7ff ffc8 	bl	8004f9c <makeFreeRtosPriority>
 800500c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005016:	9202      	str	r2, [sp, #8]
 8005018:	9301      	str	r3, [sp, #4]
 800501a:	9100      	str	r1, [sp, #0]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	4632      	mov	r2, r6
 8005020:	4629      	mov	r1, r5
 8005022:	4620      	mov	r0, r4
 8005024:	f000 f8ed 	bl	8005202 <xTaskCreateStatic>
 8005028:	4603      	mov	r3, r0
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	e01c      	b.n	8005068 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685c      	ldr	r4, [r3, #4]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800503a:	b29e      	uxth	r6, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff ffaa 	bl	8004f9c <makeFreeRtosPriority>
 8005048:	4602      	mov	r2, r0
 800504a:	f107 030c 	add.w	r3, r7, #12
 800504e:	9301      	str	r3, [sp, #4]
 8005050:	9200      	str	r2, [sp, #0]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	4632      	mov	r2, r6
 8005056:	4629      	mov	r1, r5
 8005058:	4620      	mov	r0, r4
 800505a:	f000 f92f 	bl	80052bc <xTaskCreate>
 800505e:	4603      	mov	r3, r0
 8005060:	2b01      	cmp	r3, #1
 8005062:	d001      	beq.n	8005068 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005064:	2300      	movs	r3, #0
 8005066:	e000      	b.n	800506a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005068:	68fb      	ldr	r3, [r7, #12]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005072 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b084      	sub	sp, #16
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <osDelay+0x16>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	e000      	b.n	800508a <osDelay+0x18>
 8005088:	2301      	movs	r3, #1
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fa64 	bl	8005558 <vTaskDelay>
  
  return osOK;
 8005090:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f103 0208 	add.w	r2, r3, #8
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f04f 32ff 	mov.w	r2, #4294967295
 80050b2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f103 0208 	add.w	r2, r3, #8
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f103 0208 	add.w	r2, r3, #8
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	601a      	str	r2, [r3, #0]
}
 8005130:	bf00      	nop
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005152:	d103      	bne.n	800515c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	60fb      	str	r3, [r7, #12]
 800515a:	e00c      	b.n	8005176 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3308      	adds	r3, #8
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	e002      	b.n	800516a <vListInsert+0x2e>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	429a      	cmp	r2, r3
 8005174:	d2f6      	bcs.n	8005164 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	601a      	str	r2, [r3, #0]
}
 80051a2:	bf00      	nop
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051ae:	b480      	push	{r7}
 80051b0:	b085      	sub	sp, #20
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	6892      	ldr	r2, [r2, #8]
 80051c4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6852      	ldr	r2, [r2, #4]
 80051ce:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d103      	bne.n	80051e2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	1e5a      	subs	r2, r3, #1
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005202:	b580      	push	{r7, lr}
 8005204:	b08e      	sub	sp, #56	; 0x38
 8005206:	af04      	add	r7, sp, #16
 8005208:	60f8      	str	r0, [r7, #12]
 800520a:	60b9      	str	r1, [r7, #8]
 800520c:	607a      	str	r2, [r7, #4]
 800520e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10a      	bne.n	800522c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005228:	bf00      	nop
 800522a:	e7fe      	b.n	800522a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800522c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10a      	bne.n	8005248 <xTaskCreateStatic+0x46>
	__asm volatile
 8005232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	61fb      	str	r3, [r7, #28]
}
 8005244:	bf00      	nop
 8005246:	e7fe      	b.n	8005246 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005248:	23b4      	movs	r3, #180	; 0xb4
 800524a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	2bb4      	cmp	r3, #180	; 0xb4
 8005250:	d00a      	beq.n	8005268 <xTaskCreateStatic+0x66>
	__asm volatile
 8005252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	61bb      	str	r3, [r7, #24]
}
 8005264:	bf00      	nop
 8005266:	e7fe      	b.n	8005266 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005268:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800526a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01e      	beq.n	80052ae <xTaskCreateStatic+0xac>
 8005270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005272:	2b00      	cmp	r3, #0
 8005274:	d01b      	beq.n	80052ae <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800527e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	2202      	movs	r2, #2
 8005284:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005288:	2300      	movs	r3, #0
 800528a:	9303      	str	r3, [sp, #12]
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	9302      	str	r3, [sp, #8]
 8005290:	f107 0314 	add.w	r3, r7, #20
 8005294:	9301      	str	r3, [sp, #4]
 8005296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	68b9      	ldr	r1, [r7, #8]
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f000 f851 	bl	8005348 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052a8:	f000 f8ec 	bl	8005484 <prvAddNewTaskToReadyList>
 80052ac:	e001      	b.n	80052b2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80052b2:	697b      	ldr	r3, [r7, #20]
	}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3728      	adds	r7, #40	; 0x28
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b08c      	sub	sp, #48	; 0x30
 80052c0:	af04      	add	r7, sp, #16
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	603b      	str	r3, [r7, #0]
 80052c8:	4613      	mov	r3, r2
 80052ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80052cc:	88fb      	ldrh	r3, [r7, #6]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 fef1 	bl	80060b8 <pvPortMalloc>
 80052d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00e      	beq.n	80052fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052de:	20b4      	movs	r0, #180	; 0xb4
 80052e0:	f000 feea 	bl	80060b8 <pvPortMalloc>
 80052e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	631a      	str	r2, [r3, #48]	; 0x30
 80052f2:	e005      	b.n	8005300 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052f4:	6978      	ldr	r0, [r7, #20]
 80052f6:	f000 ffab 	bl	8006250 <vPortFree>
 80052fa:	e001      	b.n	8005300 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052fc:	2300      	movs	r3, #0
 80052fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d017      	beq.n	8005336 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800530e:	88fa      	ldrh	r2, [r7, #6]
 8005310:	2300      	movs	r3, #0
 8005312:	9303      	str	r3, [sp, #12]
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	9302      	str	r3, [sp, #8]
 8005318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531a:	9301      	str	r3, [sp, #4]
 800531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	68b9      	ldr	r1, [r7, #8]
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f000 f80f 	bl	8005348 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800532a:	69f8      	ldr	r0, [r7, #28]
 800532c:	f000 f8aa 	bl	8005484 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005330:	2301      	movs	r3, #1
 8005332:	61bb      	str	r3, [r7, #24]
 8005334:	e002      	b.n	800533c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005336:	f04f 33ff 	mov.w	r3, #4294967295
 800533a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800533c:	69bb      	ldr	r3, [r7, #24]
	}
 800533e:	4618      	mov	r0, r3
 8005340:	3720      	adds	r7, #32
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
 8005354:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005360:	3b01      	subs	r3, #1
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	f023 0307 	bic.w	r3, r3, #7
 800536e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	f003 0307 	and.w	r3, r3, #7
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00a      	beq.n	8005390 <prvInitialiseNewTask+0x48>
	__asm volatile
 800537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	617b      	str	r3, [r7, #20]
}
 800538c:	bf00      	nop
 800538e:	e7fe      	b.n	800538e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d01f      	beq.n	80053d6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005396:	2300      	movs	r3, #0
 8005398:	61fb      	str	r3, [r7, #28]
 800539a:	e012      	b.n	80053c2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	4413      	add	r3, r2
 80053a2:	7819      	ldrb	r1, [r3, #0]
 80053a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	4413      	add	r3, r2
 80053aa:	3334      	adds	r3, #52	; 0x34
 80053ac:	460a      	mov	r2, r1
 80053ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	4413      	add	r3, r2
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d006      	beq.n	80053ca <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	3301      	adds	r3, #1
 80053c0:	61fb      	str	r3, [r7, #28]
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	2b0f      	cmp	r3, #15
 80053c6:	d9e9      	bls.n	800539c <prvInitialiseNewTask+0x54>
 80053c8:	e000      	b.n	80053cc <prvInitialiseNewTask+0x84>
			{
				break;
 80053ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053d4:	e003      	b.n	80053de <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e0:	2b06      	cmp	r3, #6
 80053e2:	d901      	bls.n	80053e8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053e4:	2306      	movs	r3, #6
 80053e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053f2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80053f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f6:	2200      	movs	r2, #0
 80053f8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	3304      	adds	r3, #4
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff fe6b 	bl	80050da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005406:	3318      	adds	r3, #24
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff fe66 	bl	80050da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005412:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005416:	f1c3 0207 	rsb	r2, r3, #7
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005422:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005426:	2200      	movs	r2, #0
 8005428:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800542c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542e:	2200      	movs	r2, #0
 8005430:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005436:	334c      	adds	r3, #76	; 0x4c
 8005438:	2260      	movs	r2, #96	; 0x60
 800543a:	2100      	movs	r1, #0
 800543c:	4618      	mov	r0, r3
 800543e:	f001 f84b 	bl	80064d8 <memset>
 8005442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005444:	4a0c      	ldr	r2, [pc, #48]	; (8005478 <prvInitialiseNewTask+0x130>)
 8005446:	651a      	str	r2, [r3, #80]	; 0x50
 8005448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544a:	4a0c      	ldr	r2, [pc, #48]	; (800547c <prvInitialiseNewTask+0x134>)
 800544c:	655a      	str	r2, [r3, #84]	; 0x54
 800544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005450:	4a0b      	ldr	r2, [pc, #44]	; (8005480 <prvInitialiseNewTask+0x138>)
 8005452:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	68f9      	ldr	r1, [r7, #12]
 8005458:	69b8      	ldr	r0, [r7, #24]
 800545a:	f000 fc1f 	bl	8005c9c <pxPortInitialiseStack>
 800545e:	4602      	mov	r2, r0
 8005460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005462:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005466:	2b00      	cmp	r3, #0
 8005468:	d002      	beq.n	8005470 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800546a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800546e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005470:	bf00      	nop
 8005472:	3720      	adds	r7, #32
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	08006768 	.word	0x08006768
 800547c:	08006788 	.word	0x08006788
 8005480:	08006748 	.word	0x08006748

08005484 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800548c:	f000 fd32 	bl	8005ef4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005490:	4b2a      	ldr	r3, [pc, #168]	; (800553c <prvAddNewTaskToReadyList+0xb8>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3301      	adds	r3, #1
 8005496:	4a29      	ldr	r2, [pc, #164]	; (800553c <prvAddNewTaskToReadyList+0xb8>)
 8005498:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800549a:	4b29      	ldr	r3, [pc, #164]	; (8005540 <prvAddNewTaskToReadyList+0xbc>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d109      	bne.n	80054b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80054a2:	4a27      	ldr	r2, [pc, #156]	; (8005540 <prvAddNewTaskToReadyList+0xbc>)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054a8:	4b24      	ldr	r3, [pc, #144]	; (800553c <prvAddNewTaskToReadyList+0xb8>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d110      	bne.n	80054d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80054b0:	f000 facc 	bl	8005a4c <prvInitialiseTaskLists>
 80054b4:	e00d      	b.n	80054d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054b6:	4b23      	ldr	r3, [pc, #140]	; (8005544 <prvAddNewTaskToReadyList+0xc0>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d109      	bne.n	80054d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054be:	4b20      	ldr	r3, [pc, #128]	; (8005540 <prvAddNewTaskToReadyList+0xbc>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d802      	bhi.n	80054d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054cc:	4a1c      	ldr	r2, [pc, #112]	; (8005540 <prvAddNewTaskToReadyList+0xbc>)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054d2:	4b1d      	ldr	r3, [pc, #116]	; (8005548 <prvAddNewTaskToReadyList+0xc4>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3301      	adds	r3, #1
 80054d8:	4a1b      	ldr	r2, [pc, #108]	; (8005548 <prvAddNewTaskToReadyList+0xc4>)
 80054da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e0:	2201      	movs	r2, #1
 80054e2:	409a      	lsls	r2, r3
 80054e4:	4b19      	ldr	r3, [pc, #100]	; (800554c <prvAddNewTaskToReadyList+0xc8>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	4a18      	ldr	r2, [pc, #96]	; (800554c <prvAddNewTaskToReadyList+0xc8>)
 80054ec:	6013      	str	r3, [r2, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f2:	4613      	mov	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4a15      	ldr	r2, [pc, #84]	; (8005550 <prvAddNewTaskToReadyList+0xcc>)
 80054fc:	441a      	add	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	3304      	adds	r3, #4
 8005502:	4619      	mov	r1, r3
 8005504:	4610      	mov	r0, r2
 8005506:	f7ff fdf5 	bl	80050f4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800550a:	f000 fd23 	bl	8005f54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800550e:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <prvAddNewTaskToReadyList+0xc0>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00e      	beq.n	8005534 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005516:	4b0a      	ldr	r3, [pc, #40]	; (8005540 <prvAddNewTaskToReadyList+0xbc>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005520:	429a      	cmp	r2, r3
 8005522:	d207      	bcs.n	8005534 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005524:	4b0b      	ldr	r3, [pc, #44]	; (8005554 <prvAddNewTaskToReadyList+0xd0>)
 8005526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005534:	bf00      	nop
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	20000678 	.word	0x20000678
 8005540:	20000578 	.word	0x20000578
 8005544:	20000684 	.word	0x20000684
 8005548:	20000694 	.word	0x20000694
 800554c:	20000680 	.word	0x20000680
 8005550:	2000057c 	.word	0x2000057c
 8005554:	e000ed04 	.word	0xe000ed04

08005558 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005560:	2300      	movs	r3, #0
 8005562:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d017      	beq.n	800559a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800556a:	4b13      	ldr	r3, [pc, #76]	; (80055b8 <vTaskDelay+0x60>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <vTaskDelay+0x30>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	60bb      	str	r3, [r7, #8]
}
 8005584:	bf00      	nop
 8005586:	e7fe      	b.n	8005586 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005588:	f000 f884 	bl	8005694 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800558c:	2100      	movs	r1, #0
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fb1e 	bl	8005bd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005594:	f000 f88c 	bl	80056b0 <xTaskResumeAll>
 8005598:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d107      	bne.n	80055b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80055a0:	4b06      	ldr	r3, [pc, #24]	; (80055bc <vTaskDelay+0x64>)
 80055a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055b0:	bf00      	nop
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	200006a0 	.word	0x200006a0
 80055bc:	e000ed04 	.word	0xe000ed04

080055c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b08a      	sub	sp, #40	; 0x28
 80055c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055c6:	2300      	movs	r3, #0
 80055c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055ca:	2300      	movs	r3, #0
 80055cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055ce:	463a      	mov	r2, r7
 80055d0:	1d39      	adds	r1, r7, #4
 80055d2:	f107 0308 	add.w	r3, r7, #8
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fb fc1a 	bl	8000e10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80055dc:	6839      	ldr	r1, [r7, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	9202      	str	r2, [sp, #8]
 80055e4:	9301      	str	r3, [sp, #4]
 80055e6:	2300      	movs	r3, #0
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	2300      	movs	r3, #0
 80055ec:	460a      	mov	r2, r1
 80055ee:	4921      	ldr	r1, [pc, #132]	; (8005674 <vTaskStartScheduler+0xb4>)
 80055f0:	4821      	ldr	r0, [pc, #132]	; (8005678 <vTaskStartScheduler+0xb8>)
 80055f2:	f7ff fe06 	bl	8005202 <xTaskCreateStatic>
 80055f6:	4603      	mov	r3, r0
 80055f8:	4a20      	ldr	r2, [pc, #128]	; (800567c <vTaskStartScheduler+0xbc>)
 80055fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055fc:	4b1f      	ldr	r3, [pc, #124]	; (800567c <vTaskStartScheduler+0xbc>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005604:	2301      	movs	r3, #1
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	e001      	b.n	800560e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800560a:	2300      	movs	r3, #0
 800560c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d11b      	bne.n	800564c <vTaskStartScheduler+0x8c>
	__asm volatile
 8005614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	613b      	str	r3, [r7, #16]
}
 8005626:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005628:	4b15      	ldr	r3, [pc, #84]	; (8005680 <vTaskStartScheduler+0xc0>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	334c      	adds	r3, #76	; 0x4c
 800562e:	4a15      	ldr	r2, [pc, #84]	; (8005684 <vTaskStartScheduler+0xc4>)
 8005630:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005632:	4b15      	ldr	r3, [pc, #84]	; (8005688 <vTaskStartScheduler+0xc8>)
 8005634:	f04f 32ff 	mov.w	r2, #4294967295
 8005638:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800563a:	4b14      	ldr	r3, [pc, #80]	; (800568c <vTaskStartScheduler+0xcc>)
 800563c:	2201      	movs	r2, #1
 800563e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005640:	4b13      	ldr	r3, [pc, #76]	; (8005690 <vTaskStartScheduler+0xd0>)
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005646:	f000 fbb3 	bl	8005db0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800564a:	e00e      	b.n	800566a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005652:	d10a      	bne.n	800566a <vTaskStartScheduler+0xaa>
	__asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	60fb      	str	r3, [r7, #12]
}
 8005666:	bf00      	nop
 8005668:	e7fe      	b.n	8005668 <vTaskStartScheduler+0xa8>
}
 800566a:	bf00      	nop
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	08006728 	.word	0x08006728
 8005678:	08005a1d 	.word	0x08005a1d
 800567c:	2000069c 	.word	0x2000069c
 8005680:	20000578 	.word	0x20000578
 8005684:	20000020 	.word	0x20000020
 8005688:	20000698 	.word	0x20000698
 800568c:	20000684 	.word	0x20000684
 8005690:	2000067c 	.word	0x2000067c

08005694 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005698:	4b04      	ldr	r3, [pc, #16]	; (80056ac <vTaskSuspendAll+0x18>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3301      	adds	r3, #1
 800569e:	4a03      	ldr	r2, [pc, #12]	; (80056ac <vTaskSuspendAll+0x18>)
 80056a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80056a2:	bf00      	nop
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	200006a0 	.word	0x200006a0

080056b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80056b6:	2300      	movs	r3, #0
 80056b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80056ba:	2300      	movs	r3, #0
 80056bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80056be:	4b41      	ldr	r3, [pc, #260]	; (80057c4 <xTaskResumeAll+0x114>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10a      	bne.n	80056dc <xTaskResumeAll+0x2c>
	__asm volatile
 80056c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	603b      	str	r3, [r7, #0]
}
 80056d8:	bf00      	nop
 80056da:	e7fe      	b.n	80056da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80056dc:	f000 fc0a 	bl	8005ef4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80056e0:	4b38      	ldr	r3, [pc, #224]	; (80057c4 <xTaskResumeAll+0x114>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3b01      	subs	r3, #1
 80056e6:	4a37      	ldr	r2, [pc, #220]	; (80057c4 <xTaskResumeAll+0x114>)
 80056e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ea:	4b36      	ldr	r3, [pc, #216]	; (80057c4 <xTaskResumeAll+0x114>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d161      	bne.n	80057b6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056f2:	4b35      	ldr	r3, [pc, #212]	; (80057c8 <xTaskResumeAll+0x118>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d05d      	beq.n	80057b6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056fa:	e02e      	b.n	800575a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056fc:	4b33      	ldr	r3, [pc, #204]	; (80057cc <xTaskResumeAll+0x11c>)
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3318      	adds	r3, #24
 8005708:	4618      	mov	r0, r3
 800570a:	f7ff fd50 	bl	80051ae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3304      	adds	r3, #4
 8005712:	4618      	mov	r0, r3
 8005714:	f7ff fd4b 	bl	80051ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571c:	2201      	movs	r2, #1
 800571e:	409a      	lsls	r2, r3
 8005720:	4b2b      	ldr	r3, [pc, #172]	; (80057d0 <xTaskResumeAll+0x120>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4313      	orrs	r3, r2
 8005726:	4a2a      	ldr	r2, [pc, #168]	; (80057d0 <xTaskResumeAll+0x120>)
 8005728:	6013      	str	r3, [r2, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572e:	4613      	mov	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4413      	add	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4a27      	ldr	r2, [pc, #156]	; (80057d4 <xTaskResumeAll+0x124>)
 8005738:	441a      	add	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3304      	adds	r3, #4
 800573e:	4619      	mov	r1, r3
 8005740:	4610      	mov	r0, r2
 8005742:	f7ff fcd7 	bl	80050f4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574a:	4b23      	ldr	r3, [pc, #140]	; (80057d8 <xTaskResumeAll+0x128>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005750:	429a      	cmp	r2, r3
 8005752:	d302      	bcc.n	800575a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005754:	4b21      	ldr	r3, [pc, #132]	; (80057dc <xTaskResumeAll+0x12c>)
 8005756:	2201      	movs	r2, #1
 8005758:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800575a:	4b1c      	ldr	r3, [pc, #112]	; (80057cc <xTaskResumeAll+0x11c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1cc      	bne.n	80056fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005768:	f000 fa12 	bl	8005b90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800576c:	4b1c      	ldr	r3, [pc, #112]	; (80057e0 <xTaskResumeAll+0x130>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d010      	beq.n	800579a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005778:	f000 f836 	bl	80057e8 <xTaskIncrementTick>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d002      	beq.n	8005788 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005782:	4b16      	ldr	r3, [pc, #88]	; (80057dc <xTaskResumeAll+0x12c>)
 8005784:	2201      	movs	r2, #1
 8005786:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3b01      	subs	r3, #1
 800578c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1f1      	bne.n	8005778 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005794:	4b12      	ldr	r3, [pc, #72]	; (80057e0 <xTaskResumeAll+0x130>)
 8005796:	2200      	movs	r2, #0
 8005798:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800579a:	4b10      	ldr	r3, [pc, #64]	; (80057dc <xTaskResumeAll+0x12c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d009      	beq.n	80057b6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80057a2:	2301      	movs	r3, #1
 80057a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80057a6:	4b0f      	ldr	r3, [pc, #60]	; (80057e4 <xTaskResumeAll+0x134>)
 80057a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057b6:	f000 fbcd 	bl	8005f54 <vPortExitCritical>

	return xAlreadyYielded;
 80057ba:	68bb      	ldr	r3, [r7, #8]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	200006a0 	.word	0x200006a0
 80057c8:	20000678 	.word	0x20000678
 80057cc:	20000638 	.word	0x20000638
 80057d0:	20000680 	.word	0x20000680
 80057d4:	2000057c 	.word	0x2000057c
 80057d8:	20000578 	.word	0x20000578
 80057dc:	2000068c 	.word	0x2000068c
 80057e0:	20000688 	.word	0x20000688
 80057e4:	e000ed04 	.word	0xe000ed04

080057e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057ee:	2300      	movs	r3, #0
 80057f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057f2:	4b4e      	ldr	r3, [pc, #312]	; (800592c <xTaskIncrementTick+0x144>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f040 808e 	bne.w	8005918 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057fc:	4b4c      	ldr	r3, [pc, #304]	; (8005930 <xTaskIncrementTick+0x148>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3301      	adds	r3, #1
 8005802:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005804:	4a4a      	ldr	r2, [pc, #296]	; (8005930 <xTaskIncrementTick+0x148>)
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d120      	bne.n	8005852 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005810:	4b48      	ldr	r3, [pc, #288]	; (8005934 <xTaskIncrementTick+0x14c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00a      	beq.n	8005830 <xTaskIncrementTick+0x48>
	__asm volatile
 800581a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	603b      	str	r3, [r7, #0]
}
 800582c:	bf00      	nop
 800582e:	e7fe      	b.n	800582e <xTaskIncrementTick+0x46>
 8005830:	4b40      	ldr	r3, [pc, #256]	; (8005934 <xTaskIncrementTick+0x14c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	4b40      	ldr	r3, [pc, #256]	; (8005938 <xTaskIncrementTick+0x150>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a3e      	ldr	r2, [pc, #248]	; (8005934 <xTaskIncrementTick+0x14c>)
 800583c:	6013      	str	r3, [r2, #0]
 800583e:	4a3e      	ldr	r2, [pc, #248]	; (8005938 <xTaskIncrementTick+0x150>)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6013      	str	r3, [r2, #0]
 8005844:	4b3d      	ldr	r3, [pc, #244]	; (800593c <xTaskIncrementTick+0x154>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3301      	adds	r3, #1
 800584a:	4a3c      	ldr	r2, [pc, #240]	; (800593c <xTaskIncrementTick+0x154>)
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	f000 f99f 	bl	8005b90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005852:	4b3b      	ldr	r3, [pc, #236]	; (8005940 <xTaskIncrementTick+0x158>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	429a      	cmp	r2, r3
 800585a:	d348      	bcc.n	80058ee <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800585c:	4b35      	ldr	r3, [pc, #212]	; (8005934 <xTaskIncrementTick+0x14c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d104      	bne.n	8005870 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005866:	4b36      	ldr	r3, [pc, #216]	; (8005940 <xTaskIncrementTick+0x158>)
 8005868:	f04f 32ff 	mov.w	r2, #4294967295
 800586c:	601a      	str	r2, [r3, #0]
					break;
 800586e:	e03e      	b.n	80058ee <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005870:	4b30      	ldr	r3, [pc, #192]	; (8005934 <xTaskIncrementTick+0x14c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	429a      	cmp	r2, r3
 8005886:	d203      	bcs.n	8005890 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005888:	4a2d      	ldr	r2, [pc, #180]	; (8005940 <xTaskIncrementTick+0x158>)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800588e:	e02e      	b.n	80058ee <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	3304      	adds	r3, #4
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff fc8a 	bl	80051ae <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d004      	beq.n	80058ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	3318      	adds	r3, #24
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7ff fc81 	bl	80051ae <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	2201      	movs	r2, #1
 80058b2:	409a      	lsls	r2, r3
 80058b4:	4b23      	ldr	r3, [pc, #140]	; (8005944 <xTaskIncrementTick+0x15c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	4a22      	ldr	r2, [pc, #136]	; (8005944 <xTaskIncrementTick+0x15c>)
 80058bc:	6013      	str	r3, [r2, #0]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c2:	4613      	mov	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4a1f      	ldr	r2, [pc, #124]	; (8005948 <xTaskIncrementTick+0x160>)
 80058cc:	441a      	add	r2, r3
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	3304      	adds	r3, #4
 80058d2:	4619      	mov	r1, r3
 80058d4:	4610      	mov	r0, r2
 80058d6:	f7ff fc0d 	bl	80050f4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058de:	4b1b      	ldr	r3, [pc, #108]	; (800594c <xTaskIncrementTick+0x164>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d3b9      	bcc.n	800585c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80058e8:	2301      	movs	r3, #1
 80058ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058ec:	e7b6      	b.n	800585c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058ee:	4b17      	ldr	r3, [pc, #92]	; (800594c <xTaskIncrementTick+0x164>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f4:	4914      	ldr	r1, [pc, #80]	; (8005948 <xTaskIncrementTick+0x160>)
 80058f6:	4613      	mov	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	440b      	add	r3, r1
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d901      	bls.n	800590a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005906:	2301      	movs	r3, #1
 8005908:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800590a:	4b11      	ldr	r3, [pc, #68]	; (8005950 <xTaskIncrementTick+0x168>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d007      	beq.n	8005922 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005912:	2301      	movs	r3, #1
 8005914:	617b      	str	r3, [r7, #20]
 8005916:	e004      	b.n	8005922 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005918:	4b0e      	ldr	r3, [pc, #56]	; (8005954 <xTaskIncrementTick+0x16c>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3301      	adds	r3, #1
 800591e:	4a0d      	ldr	r2, [pc, #52]	; (8005954 <xTaskIncrementTick+0x16c>)
 8005920:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005922:	697b      	ldr	r3, [r7, #20]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	200006a0 	.word	0x200006a0
 8005930:	2000067c 	.word	0x2000067c
 8005934:	20000630 	.word	0x20000630
 8005938:	20000634 	.word	0x20000634
 800593c:	20000690 	.word	0x20000690
 8005940:	20000698 	.word	0x20000698
 8005944:	20000680 	.word	0x20000680
 8005948:	2000057c 	.word	0x2000057c
 800594c:	20000578 	.word	0x20000578
 8005950:	2000068c 	.word	0x2000068c
 8005954:	20000688 	.word	0x20000688

08005958 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800595e:	4b29      	ldr	r3, [pc, #164]	; (8005a04 <vTaskSwitchContext+0xac>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005966:	4b28      	ldr	r3, [pc, #160]	; (8005a08 <vTaskSwitchContext+0xb0>)
 8005968:	2201      	movs	r2, #1
 800596a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800596c:	e044      	b.n	80059f8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800596e:	4b26      	ldr	r3, [pc, #152]	; (8005a08 <vTaskSwitchContext+0xb0>)
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005974:	4b25      	ldr	r3, [pc, #148]	; (8005a0c <vTaskSwitchContext+0xb4>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	fab3 f383 	clz	r3, r3
 8005980:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005982:	7afb      	ldrb	r3, [r7, #11]
 8005984:	f1c3 031f 	rsb	r3, r3, #31
 8005988:	617b      	str	r3, [r7, #20]
 800598a:	4921      	ldr	r1, [pc, #132]	; (8005a10 <vTaskSwitchContext+0xb8>)
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	4613      	mov	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	440b      	add	r3, r1
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10a      	bne.n	80059b4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800599e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	607b      	str	r3, [r7, #4]
}
 80059b0:	bf00      	nop
 80059b2:	e7fe      	b.n	80059b2 <vTaskSwitchContext+0x5a>
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	4613      	mov	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4a14      	ldr	r2, [pc, #80]	; (8005a10 <vTaskSwitchContext+0xb8>)
 80059c0:	4413      	add	r3, r2
 80059c2:	613b      	str	r3, [r7, #16]
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	605a      	str	r2, [r3, #4]
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	3308      	adds	r3, #8
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d104      	bne.n	80059e4 <vTaskSwitchContext+0x8c>
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	605a      	str	r2, [r3, #4]
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	4a0a      	ldr	r2, [pc, #40]	; (8005a14 <vTaskSwitchContext+0xbc>)
 80059ec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80059ee:	4b09      	ldr	r3, [pc, #36]	; (8005a14 <vTaskSwitchContext+0xbc>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	334c      	adds	r3, #76	; 0x4c
 80059f4:	4a08      	ldr	r2, [pc, #32]	; (8005a18 <vTaskSwitchContext+0xc0>)
 80059f6:	6013      	str	r3, [r2, #0]
}
 80059f8:	bf00      	nop
 80059fa:	371c      	adds	r7, #28
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	200006a0 	.word	0x200006a0
 8005a08:	2000068c 	.word	0x2000068c
 8005a0c:	20000680 	.word	0x20000680
 8005a10:	2000057c 	.word	0x2000057c
 8005a14:	20000578 	.word	0x20000578
 8005a18:	20000020 	.word	0x20000020

08005a1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a24:	f000 f852 	bl	8005acc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a28:	4b06      	ldr	r3, [pc, #24]	; (8005a44 <prvIdleTask+0x28>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d9f9      	bls.n	8005a24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a30:	4b05      	ldr	r3, [pc, #20]	; (8005a48 <prvIdleTask+0x2c>)
 8005a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a40:	e7f0      	b.n	8005a24 <prvIdleTask+0x8>
 8005a42:	bf00      	nop
 8005a44:	2000057c 	.word	0x2000057c
 8005a48:	e000ed04 	.word	0xe000ed04

08005a4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a52:	2300      	movs	r3, #0
 8005a54:	607b      	str	r3, [r7, #4]
 8005a56:	e00c      	b.n	8005a72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4a12      	ldr	r2, [pc, #72]	; (8005aac <prvInitialiseTaskLists+0x60>)
 8005a64:	4413      	add	r3, r2
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7ff fb17 	bl	800509a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	607b      	str	r3, [r7, #4]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b06      	cmp	r3, #6
 8005a76:	d9ef      	bls.n	8005a58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a78:	480d      	ldr	r0, [pc, #52]	; (8005ab0 <prvInitialiseTaskLists+0x64>)
 8005a7a:	f7ff fb0e 	bl	800509a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a7e:	480d      	ldr	r0, [pc, #52]	; (8005ab4 <prvInitialiseTaskLists+0x68>)
 8005a80:	f7ff fb0b 	bl	800509a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a84:	480c      	ldr	r0, [pc, #48]	; (8005ab8 <prvInitialiseTaskLists+0x6c>)
 8005a86:	f7ff fb08 	bl	800509a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a8a:	480c      	ldr	r0, [pc, #48]	; (8005abc <prvInitialiseTaskLists+0x70>)
 8005a8c:	f7ff fb05 	bl	800509a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a90:	480b      	ldr	r0, [pc, #44]	; (8005ac0 <prvInitialiseTaskLists+0x74>)
 8005a92:	f7ff fb02 	bl	800509a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a96:	4b0b      	ldr	r3, [pc, #44]	; (8005ac4 <prvInitialiseTaskLists+0x78>)
 8005a98:	4a05      	ldr	r2, [pc, #20]	; (8005ab0 <prvInitialiseTaskLists+0x64>)
 8005a9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ac8 <prvInitialiseTaskLists+0x7c>)
 8005a9e:	4a05      	ldr	r2, [pc, #20]	; (8005ab4 <prvInitialiseTaskLists+0x68>)
 8005aa0:	601a      	str	r2, [r3, #0]
}
 8005aa2:	bf00      	nop
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	2000057c 	.word	0x2000057c
 8005ab0:	20000608 	.word	0x20000608
 8005ab4:	2000061c 	.word	0x2000061c
 8005ab8:	20000638 	.word	0x20000638
 8005abc:	2000064c 	.word	0x2000064c
 8005ac0:	20000664 	.word	0x20000664
 8005ac4:	20000630 	.word	0x20000630
 8005ac8:	20000634 	.word	0x20000634

08005acc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ad2:	e019      	b.n	8005b08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ad4:	f000 fa0e 	bl	8005ef4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ad8:	4b10      	ldr	r3, [pc, #64]	; (8005b1c <prvCheckTasksWaitingTermination+0x50>)
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	3304      	adds	r3, #4
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7ff fb62 	bl	80051ae <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005aea:	4b0d      	ldr	r3, [pc, #52]	; (8005b20 <prvCheckTasksWaitingTermination+0x54>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	3b01      	subs	r3, #1
 8005af0:	4a0b      	ldr	r2, [pc, #44]	; (8005b20 <prvCheckTasksWaitingTermination+0x54>)
 8005af2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005af4:	4b0b      	ldr	r3, [pc, #44]	; (8005b24 <prvCheckTasksWaitingTermination+0x58>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	4a0a      	ldr	r2, [pc, #40]	; (8005b24 <prvCheckTasksWaitingTermination+0x58>)
 8005afc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005afe:	f000 fa29 	bl	8005f54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f810 	bl	8005b28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b08:	4b06      	ldr	r3, [pc, #24]	; (8005b24 <prvCheckTasksWaitingTermination+0x58>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1e1      	bne.n	8005ad4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b10:	bf00      	nop
 8005b12:	bf00      	nop
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	2000064c 	.word	0x2000064c
 8005b20:	20000678 	.word	0x20000678
 8005b24:	20000660 	.word	0x20000660

08005b28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	334c      	adds	r3, #76	; 0x4c
 8005b34:	4618      	mov	r0, r3
 8005b36:	f000 fce5 	bl	8006504 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d108      	bne.n	8005b56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 fb81 	bl	8006250 <vPortFree>
				vPortFree( pxTCB );
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 fb7e 	bl	8006250 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b54:	e018      	b.n	8005b88 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d103      	bne.n	8005b68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fb75 	bl	8006250 <vPortFree>
	}
 8005b66:	e00f      	b.n	8005b88 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d00a      	beq.n	8005b88 <prvDeleteTCB+0x60>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	60fb      	str	r3, [r7, #12]
}
 8005b84:	bf00      	nop
 8005b86:	e7fe      	b.n	8005b86 <prvDeleteTCB+0x5e>
	}
 8005b88:	bf00      	nop
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b96:	4b0c      	ldr	r3, [pc, #48]	; (8005bc8 <prvResetNextTaskUnblockTime+0x38>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d104      	bne.n	8005baa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <prvResetNextTaskUnblockTime+0x3c>)
 8005ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ba8:	e008      	b.n	8005bbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005baa:	4b07      	ldr	r3, [pc, #28]	; (8005bc8 <prvResetNextTaskUnblockTime+0x38>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	4a04      	ldr	r2, [pc, #16]	; (8005bcc <prvResetNextTaskUnblockTime+0x3c>)
 8005bba:	6013      	str	r3, [r2, #0]
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	20000630 	.word	0x20000630
 8005bcc:	20000698 	.word	0x20000698

08005bd0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005bda:	4b29      	ldr	r3, [pc, #164]	; (8005c80 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005be0:	4b28      	ldr	r3, [pc, #160]	; (8005c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3304      	adds	r3, #4
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7ff fae1 	bl	80051ae <uxListRemove>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10b      	bne.n	8005c0a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005bf2:	4b24      	ldr	r3, [pc, #144]	; (8005c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfe:	43da      	mvns	r2, r3
 8005c00:	4b21      	ldr	r3, [pc, #132]	; (8005c88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4013      	ands	r3, r2
 8005c06:	4a20      	ldr	r2, [pc, #128]	; (8005c88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c08:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c10:	d10a      	bne.n	8005c28 <prvAddCurrentTaskToDelayedList+0x58>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d007      	beq.n	8005c28 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c18:	4b1a      	ldr	r3, [pc, #104]	; (8005c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	4619      	mov	r1, r3
 8005c20:	481a      	ldr	r0, [pc, #104]	; (8005c8c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005c22:	f7ff fa67 	bl	80050f4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c26:	e026      	b.n	8005c76 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c30:	4b14      	ldr	r3, [pc, #80]	; (8005c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d209      	bcs.n	8005c54 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c40:	4b13      	ldr	r3, [pc, #76]	; (8005c90 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	4b0f      	ldr	r3, [pc, #60]	; (8005c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3304      	adds	r3, #4
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	f7ff fa75 	bl	800513c <vListInsert>
}
 8005c52:	e010      	b.n	8005c76 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c54:	4b0f      	ldr	r3, [pc, #60]	; (8005c94 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	4b0a      	ldr	r3, [pc, #40]	; (8005c84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	4619      	mov	r1, r3
 8005c60:	4610      	mov	r0, r2
 8005c62:	f7ff fa6b 	bl	800513c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c66:	4b0c      	ldr	r3, [pc, #48]	; (8005c98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d202      	bcs.n	8005c76 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005c70:	4a09      	ldr	r2, [pc, #36]	; (8005c98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	6013      	str	r3, [r2, #0]
}
 8005c76:	bf00      	nop
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	2000067c 	.word	0x2000067c
 8005c84:	20000578 	.word	0x20000578
 8005c88:	20000680 	.word	0x20000680
 8005c8c:	20000664 	.word	0x20000664
 8005c90:	20000634 	.word	0x20000634
 8005c94:	20000630 	.word	0x20000630
 8005c98:	20000698 	.word	0x20000698

08005c9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	3b04      	subs	r3, #4
 8005cac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005cb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	3b04      	subs	r3, #4
 8005cba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f023 0201 	bic.w	r2, r3, #1
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3b04      	subs	r3, #4
 8005cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ccc:	4a0c      	ldr	r2, [pc, #48]	; (8005d00 <pxPortInitialiseStack+0x64>)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3b14      	subs	r3, #20
 8005cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3b04      	subs	r3, #4
 8005ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f06f 0202 	mvn.w	r2, #2
 8005cea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	3b20      	subs	r3, #32
 8005cf0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	08005d05 	.word	0x08005d05

08005d04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d0e:	4b12      	ldr	r3, [pc, #72]	; (8005d58 <prvTaskExitError+0x54>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d16:	d00a      	beq.n	8005d2e <prvTaskExitError+0x2a>
	__asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	60fb      	str	r3, [r7, #12]
}
 8005d2a:	bf00      	nop
 8005d2c:	e7fe      	b.n	8005d2c <prvTaskExitError+0x28>
	__asm volatile
 8005d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	60bb      	str	r3, [r7, #8]
}
 8005d40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d42:	bf00      	nop
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0fc      	beq.n	8005d44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d4a:	bf00      	nop
 8005d4c:	bf00      	nop
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	2000001c 	.word	0x2000001c
 8005d5c:	00000000 	.word	0x00000000

08005d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d60:	4b07      	ldr	r3, [pc, #28]	; (8005d80 <pxCurrentTCBConst2>)
 8005d62:	6819      	ldr	r1, [r3, #0]
 8005d64:	6808      	ldr	r0, [r1, #0]
 8005d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6a:	f380 8809 	msr	PSP, r0
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f04f 0000 	mov.w	r0, #0
 8005d76:	f380 8811 	msr	BASEPRI, r0
 8005d7a:	4770      	bx	lr
 8005d7c:	f3af 8000 	nop.w

08005d80 <pxCurrentTCBConst2>:
 8005d80:	20000578 	.word	0x20000578
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop

08005d88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d88:	4808      	ldr	r0, [pc, #32]	; (8005dac <prvPortStartFirstTask+0x24>)
 8005d8a:	6800      	ldr	r0, [r0, #0]
 8005d8c:	6800      	ldr	r0, [r0, #0]
 8005d8e:	f380 8808 	msr	MSP, r0
 8005d92:	f04f 0000 	mov.w	r0, #0
 8005d96:	f380 8814 	msr	CONTROL, r0
 8005d9a:	b662      	cpsie	i
 8005d9c:	b661      	cpsie	f
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	df00      	svc	0
 8005da8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005daa:	bf00      	nop
 8005dac:	e000ed08 	.word	0xe000ed08

08005db0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005db6:	4b46      	ldr	r3, [pc, #280]	; (8005ed0 <xPortStartScheduler+0x120>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a46      	ldr	r2, [pc, #280]	; (8005ed4 <xPortStartScheduler+0x124>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d10a      	bne.n	8005dd6 <xPortStartScheduler+0x26>
	__asm volatile
 8005dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	613b      	str	r3, [r7, #16]
}
 8005dd2:	bf00      	nop
 8005dd4:	e7fe      	b.n	8005dd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005dd6:	4b3e      	ldr	r3, [pc, #248]	; (8005ed0 <xPortStartScheduler+0x120>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a3f      	ldr	r2, [pc, #252]	; (8005ed8 <xPortStartScheduler+0x128>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d10a      	bne.n	8005df6 <xPortStartScheduler+0x46>
	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	60fb      	str	r3, [r7, #12]
}
 8005df2:	bf00      	nop
 8005df4:	e7fe      	b.n	8005df4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005df6:	4b39      	ldr	r3, [pc, #228]	; (8005edc <xPortStartScheduler+0x12c>)
 8005df8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	22ff      	movs	r2, #255	; 0xff
 8005e06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e10:	78fb      	ldrb	r3, [r7, #3]
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	4b31      	ldr	r3, [pc, #196]	; (8005ee0 <xPortStartScheduler+0x130>)
 8005e1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e1e:	4b31      	ldr	r3, [pc, #196]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e20:	2207      	movs	r2, #7
 8005e22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e24:	e009      	b.n	8005e3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005e26:	4b2f      	ldr	r3, [pc, #188]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	4a2d      	ldr	r2, [pc, #180]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e30:	78fb      	ldrb	r3, [r7, #3]
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e3a:	78fb      	ldrb	r3, [r7, #3]
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e42:	2b80      	cmp	r3, #128	; 0x80
 8005e44:	d0ef      	beq.n	8005e26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e46:	4b27      	ldr	r3, [pc, #156]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f1c3 0307 	rsb	r3, r3, #7
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d00a      	beq.n	8005e68 <xPortStartScheduler+0xb8>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	60bb      	str	r3, [r7, #8]
}
 8005e64:	bf00      	nop
 8005e66:	e7fe      	b.n	8005e66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e68:	4b1e      	ldr	r3, [pc, #120]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	021b      	lsls	r3, r3, #8
 8005e6e:	4a1d      	ldr	r2, [pc, #116]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e72:	4b1c      	ldr	r3, [pc, #112]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e7a:	4a1a      	ldr	r2, [pc, #104]	; (8005ee4 <xPortStartScheduler+0x134>)
 8005e7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e86:	4b18      	ldr	r3, [pc, #96]	; (8005ee8 <xPortStartScheduler+0x138>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a17      	ldr	r2, [pc, #92]	; (8005ee8 <xPortStartScheduler+0x138>)
 8005e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e92:	4b15      	ldr	r3, [pc, #84]	; (8005ee8 <xPortStartScheduler+0x138>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a14      	ldr	r2, [pc, #80]	; (8005ee8 <xPortStartScheduler+0x138>)
 8005e98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005e9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e9e:	f000 f8dd 	bl	800605c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ea2:	4b12      	ldr	r3, [pc, #72]	; (8005eec <xPortStartScheduler+0x13c>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ea8:	f000 f8fc 	bl	80060a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005eac:	4b10      	ldr	r3, [pc, #64]	; (8005ef0 <xPortStartScheduler+0x140>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a0f      	ldr	r2, [pc, #60]	; (8005ef0 <xPortStartScheduler+0x140>)
 8005eb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005eb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005eb8:	f7ff ff66 	bl	8005d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ebc:	f7ff fd4c 	bl	8005958 <vTaskSwitchContext>
	prvTaskExitError();
 8005ec0:	f7ff ff20 	bl	8005d04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	e000ed00 	.word	0xe000ed00
 8005ed4:	410fc271 	.word	0x410fc271
 8005ed8:	410fc270 	.word	0x410fc270
 8005edc:	e000e400 	.word	0xe000e400
 8005ee0:	200006a4 	.word	0x200006a4
 8005ee4:	200006a8 	.word	0x200006a8
 8005ee8:	e000ed20 	.word	0xe000ed20
 8005eec:	2000001c 	.word	0x2000001c
 8005ef0:	e000ef34 	.word	0xe000ef34

08005ef4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
	__asm volatile
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	607b      	str	r3, [r7, #4]
}
 8005f0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f0e:	4b0f      	ldr	r3, [pc, #60]	; (8005f4c <vPortEnterCritical+0x58>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3301      	adds	r3, #1
 8005f14:	4a0d      	ldr	r2, [pc, #52]	; (8005f4c <vPortEnterCritical+0x58>)
 8005f16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f18:	4b0c      	ldr	r3, [pc, #48]	; (8005f4c <vPortEnterCritical+0x58>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d10f      	bne.n	8005f40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f20:	4b0b      	ldr	r3, [pc, #44]	; (8005f50 <vPortEnterCritical+0x5c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00a      	beq.n	8005f40 <vPortEnterCritical+0x4c>
	__asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	603b      	str	r3, [r7, #0]
}
 8005f3c:	bf00      	nop
 8005f3e:	e7fe      	b.n	8005f3e <vPortEnterCritical+0x4a>
	}
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	2000001c 	.word	0x2000001c
 8005f50:	e000ed04 	.word	0xe000ed04

08005f54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f5a:	4b12      	ldr	r3, [pc, #72]	; (8005fa4 <vPortExitCritical+0x50>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10a      	bne.n	8005f78 <vPortExitCritical+0x24>
	__asm volatile
 8005f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	607b      	str	r3, [r7, #4]
}
 8005f74:	bf00      	nop
 8005f76:	e7fe      	b.n	8005f76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f78:	4b0a      	ldr	r3, [pc, #40]	; (8005fa4 <vPortExitCritical+0x50>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	4a09      	ldr	r2, [pc, #36]	; (8005fa4 <vPortExitCritical+0x50>)
 8005f80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f82:	4b08      	ldr	r3, [pc, #32]	; (8005fa4 <vPortExitCritical+0x50>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d105      	bne.n	8005f96 <vPortExitCritical+0x42>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	2000001c 	.word	0x2000001c
	...

08005fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005fb0:	f3ef 8009 	mrs	r0, PSP
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	4b15      	ldr	r3, [pc, #84]	; (8006010 <pxCurrentTCBConst>)
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	f01e 0f10 	tst.w	lr, #16
 8005fc0:	bf08      	it	eq
 8005fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fca:	6010      	str	r0, [r2, #0]
 8005fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005fd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005fd4:	f380 8811 	msr	BASEPRI, r0
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f7ff fcba 	bl	8005958 <vTaskSwitchContext>
 8005fe4:	f04f 0000 	mov.w	r0, #0
 8005fe8:	f380 8811 	msr	BASEPRI, r0
 8005fec:	bc09      	pop	{r0, r3}
 8005fee:	6819      	ldr	r1, [r3, #0]
 8005ff0:	6808      	ldr	r0, [r1, #0]
 8005ff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff6:	f01e 0f10 	tst.w	lr, #16
 8005ffa:	bf08      	it	eq
 8005ffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006000:	f380 8809 	msr	PSP, r0
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	f3af 8000 	nop.w

08006010 <pxCurrentTCBConst>:
 8006010:	20000578 	.word	0x20000578
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006014:	bf00      	nop
 8006016:	bf00      	nop

08006018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	607b      	str	r3, [r7, #4]
}
 8006030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006032:	f7ff fbd9 	bl	80057e8 <xTaskIncrementTick>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800603c:	4b06      	ldr	r3, [pc, #24]	; (8006058 <SysTick_Handler+0x40>)
 800603e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	2300      	movs	r3, #0
 8006046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	f383 8811 	msr	BASEPRI, r3
}
 800604e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006050:	bf00      	nop
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	e000ed04 	.word	0xe000ed04

0800605c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800605c:	b480      	push	{r7}
 800605e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006060:	4b0b      	ldr	r3, [pc, #44]	; (8006090 <vPortSetupTimerInterrupt+0x34>)
 8006062:	2200      	movs	r2, #0
 8006064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006066:	4b0b      	ldr	r3, [pc, #44]	; (8006094 <vPortSetupTimerInterrupt+0x38>)
 8006068:	2200      	movs	r2, #0
 800606a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800606c:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <vPortSetupTimerInterrupt+0x3c>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a0a      	ldr	r2, [pc, #40]	; (800609c <vPortSetupTimerInterrupt+0x40>)
 8006072:	fba2 2303 	umull	r2, r3, r2, r3
 8006076:	099b      	lsrs	r3, r3, #6
 8006078:	4a09      	ldr	r2, [pc, #36]	; (80060a0 <vPortSetupTimerInterrupt+0x44>)
 800607a:	3b01      	subs	r3, #1
 800607c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800607e:	4b04      	ldr	r3, [pc, #16]	; (8006090 <vPortSetupTimerInterrupt+0x34>)
 8006080:	2207      	movs	r2, #7
 8006082:	601a      	str	r2, [r3, #0]
}
 8006084:	bf00      	nop
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	e000e010 	.word	0xe000e010
 8006094:	e000e018 	.word	0xe000e018
 8006098:	20000010 	.word	0x20000010
 800609c:	10624dd3 	.word	0x10624dd3
 80060a0:	e000e014 	.word	0xe000e014

080060a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80060a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80060b4 <vPortEnableVFP+0x10>
 80060a8:	6801      	ldr	r1, [r0, #0]
 80060aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80060ae:	6001      	str	r1, [r0, #0]
 80060b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80060b2:	bf00      	nop
 80060b4:	e000ed88 	.word	0xe000ed88

080060b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08a      	sub	sp, #40	; 0x28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80060c0:	2300      	movs	r3, #0
 80060c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80060c4:	f7ff fae6 	bl	8005694 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80060c8:	4b5b      	ldr	r3, [pc, #364]	; (8006238 <pvPortMalloc+0x180>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80060d0:	f000 f920 	bl	8006314 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80060d4:	4b59      	ldr	r3, [pc, #356]	; (800623c <pvPortMalloc+0x184>)
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4013      	ands	r3, r2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f040 8093 	bne.w	8006208 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d01d      	beq.n	8006124 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80060e8:	2208      	movs	r2, #8
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4413      	add	r3, r2
 80060ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f003 0307 	and.w	r3, r3, #7
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d014      	beq.n	8006124 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f023 0307 	bic.w	r3, r3, #7
 8006100:	3308      	adds	r3, #8
 8006102:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f003 0307 	and.w	r3, r3, #7
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00a      	beq.n	8006124 <pvPortMalloc+0x6c>
	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	617b      	str	r3, [r7, #20]
}
 8006120:	bf00      	nop
 8006122:	e7fe      	b.n	8006122 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d06e      	beq.n	8006208 <pvPortMalloc+0x150>
 800612a:	4b45      	ldr	r3, [pc, #276]	; (8006240 <pvPortMalloc+0x188>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	429a      	cmp	r2, r3
 8006132:	d869      	bhi.n	8006208 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006134:	4b43      	ldr	r3, [pc, #268]	; (8006244 <pvPortMalloc+0x18c>)
 8006136:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006138:	4b42      	ldr	r3, [pc, #264]	; (8006244 <pvPortMalloc+0x18c>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800613e:	e004      	b.n	800614a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	429a      	cmp	r2, r3
 8006152:	d903      	bls.n	800615c <pvPortMalloc+0xa4>
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1f1      	bne.n	8006140 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800615c:	4b36      	ldr	r3, [pc, #216]	; (8006238 <pvPortMalloc+0x180>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006162:	429a      	cmp	r2, r3
 8006164:	d050      	beq.n	8006208 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006166:	6a3b      	ldr	r3, [r7, #32]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2208      	movs	r2, #8
 800616c:	4413      	add	r3, r2
 800616e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	1ad2      	subs	r2, r2, r3
 8006180:	2308      	movs	r3, #8
 8006182:	005b      	lsls	r3, r3, #1
 8006184:	429a      	cmp	r2, r3
 8006186:	d91f      	bls.n	80061c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4413      	add	r3, r2
 800618e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	f003 0307 	and.w	r3, r3, #7
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <pvPortMalloc+0xf8>
	__asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	613b      	str	r3, [r7, #16]
}
 80061ac:	bf00      	nop
 80061ae:	e7fe      	b.n	80061ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	1ad2      	subs	r2, r2, r3
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80061c2:	69b8      	ldr	r0, [r7, #24]
 80061c4:	f000 f908 	bl	80063d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80061c8:	4b1d      	ldr	r3, [pc, #116]	; (8006240 <pvPortMalloc+0x188>)
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	4a1b      	ldr	r2, [pc, #108]	; (8006240 <pvPortMalloc+0x188>)
 80061d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80061d6:	4b1a      	ldr	r3, [pc, #104]	; (8006240 <pvPortMalloc+0x188>)
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	4b1b      	ldr	r3, [pc, #108]	; (8006248 <pvPortMalloc+0x190>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d203      	bcs.n	80061ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80061e2:	4b17      	ldr	r3, [pc, #92]	; (8006240 <pvPortMalloc+0x188>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a18      	ldr	r2, [pc, #96]	; (8006248 <pvPortMalloc+0x190>)
 80061e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	4b13      	ldr	r3, [pc, #76]	; (800623c <pvPortMalloc+0x184>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	431a      	orrs	r2, r3
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	2200      	movs	r2, #0
 80061fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80061fe:	4b13      	ldr	r3, [pc, #76]	; (800624c <pvPortMalloc+0x194>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3301      	adds	r3, #1
 8006204:	4a11      	ldr	r2, [pc, #68]	; (800624c <pvPortMalloc+0x194>)
 8006206:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006208:	f7ff fa52 	bl	80056b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	f003 0307 	and.w	r3, r3, #7
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <pvPortMalloc+0x174>
	__asm volatile
 8006216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	60fb      	str	r3, [r7, #12]
}
 8006228:	bf00      	nop
 800622a:	e7fe      	b.n	800622a <pvPortMalloc+0x172>
	return pvReturn;
 800622c:	69fb      	ldr	r3, [r7, #28]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3728      	adds	r7, #40	; 0x28
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	200042b4 	.word	0x200042b4
 800623c:	200042c8 	.word	0x200042c8
 8006240:	200042b8 	.word	0x200042b8
 8006244:	200042ac 	.word	0x200042ac
 8006248:	200042bc 	.word	0x200042bc
 800624c:	200042c0 	.word	0x200042c0

08006250 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d04d      	beq.n	80062fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006262:	2308      	movs	r3, #8
 8006264:	425b      	negs	r3, r3
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	4413      	add	r3, r2
 800626a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	4b24      	ldr	r3, [pc, #144]	; (8006308 <vPortFree+0xb8>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4013      	ands	r3, r2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10a      	bne.n	8006294 <vPortFree+0x44>
	__asm volatile
 800627e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	60fb      	str	r3, [r7, #12]
}
 8006290:	bf00      	nop
 8006292:	e7fe      	b.n	8006292 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00a      	beq.n	80062b2 <vPortFree+0x62>
	__asm volatile
 800629c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	60bb      	str	r3, [r7, #8]
}
 80062ae:	bf00      	nop
 80062b0:	e7fe      	b.n	80062b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	4b14      	ldr	r3, [pc, #80]	; (8006308 <vPortFree+0xb8>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4013      	ands	r3, r2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d01e      	beq.n	80062fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d11a      	bne.n	80062fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	4b0e      	ldr	r3, [pc, #56]	; (8006308 <vPortFree+0xb8>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	43db      	mvns	r3, r3
 80062d2:	401a      	ands	r2, r3
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80062d8:	f7ff f9dc 	bl	8005694 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	4b0a      	ldr	r3, [pc, #40]	; (800630c <vPortFree+0xbc>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4413      	add	r3, r2
 80062e6:	4a09      	ldr	r2, [pc, #36]	; (800630c <vPortFree+0xbc>)
 80062e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80062ea:	6938      	ldr	r0, [r7, #16]
 80062ec:	f000 f874 	bl	80063d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80062f0:	4b07      	ldr	r3, [pc, #28]	; (8006310 <vPortFree+0xc0>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3301      	adds	r3, #1
 80062f6:	4a06      	ldr	r2, [pc, #24]	; (8006310 <vPortFree+0xc0>)
 80062f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80062fa:	f7ff f9d9 	bl	80056b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80062fe:	bf00      	nop
 8006300:	3718      	adds	r7, #24
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	200042c8 	.word	0x200042c8
 800630c:	200042b8 	.word	0x200042b8
 8006310:	200042c4 	.word	0x200042c4

08006314 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800631a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800631e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006320:	4b27      	ldr	r3, [pc, #156]	; (80063c0 <prvHeapInit+0xac>)
 8006322:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f003 0307 	and.w	r3, r3, #7
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00c      	beq.n	8006348 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	3307      	adds	r3, #7
 8006332:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f023 0307 	bic.w	r3, r3, #7
 800633a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	4a1f      	ldr	r2, [pc, #124]	; (80063c0 <prvHeapInit+0xac>)
 8006344:	4413      	add	r3, r2
 8006346:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800634c:	4a1d      	ldr	r2, [pc, #116]	; (80063c4 <prvHeapInit+0xb0>)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006352:	4b1c      	ldr	r3, [pc, #112]	; (80063c4 <prvHeapInit+0xb0>)
 8006354:	2200      	movs	r2, #0
 8006356:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	4413      	add	r3, r2
 800635e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006360:	2208      	movs	r2, #8
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	1a9b      	subs	r3, r3, r2
 8006366:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f023 0307 	bic.w	r3, r3, #7
 800636e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4a15      	ldr	r2, [pc, #84]	; (80063c8 <prvHeapInit+0xb4>)
 8006374:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006376:	4b14      	ldr	r3, [pc, #80]	; (80063c8 <prvHeapInit+0xb4>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2200      	movs	r2, #0
 800637c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800637e:	4b12      	ldr	r3, [pc, #72]	; (80063c8 <prvHeapInit+0xb4>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2200      	movs	r2, #0
 8006384:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	1ad2      	subs	r2, r2, r3
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006394:	4b0c      	ldr	r3, [pc, #48]	; (80063c8 <prvHeapInit+0xb4>)
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	4a0a      	ldr	r2, [pc, #40]	; (80063cc <prvHeapInit+0xb8>)
 80063a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	4a09      	ldr	r2, [pc, #36]	; (80063d0 <prvHeapInit+0xbc>)
 80063aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80063ac:	4b09      	ldr	r3, [pc, #36]	; (80063d4 <prvHeapInit+0xc0>)
 80063ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80063b2:	601a      	str	r2, [r3, #0]
}
 80063b4:	bf00      	nop
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	200006ac 	.word	0x200006ac
 80063c4:	200042ac 	.word	0x200042ac
 80063c8:	200042b4 	.word	0x200042b4
 80063cc:	200042bc 	.word	0x200042bc
 80063d0:	200042b8 	.word	0x200042b8
 80063d4:	200042c8 	.word	0x200042c8

080063d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80063e0:	4b28      	ldr	r3, [pc, #160]	; (8006484 <prvInsertBlockIntoFreeList+0xac>)
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	e002      	b.n	80063ec <prvInsertBlockIntoFreeList+0x14>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	60fb      	str	r3, [r7, #12]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d8f7      	bhi.n	80063e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	4413      	add	r3, r2
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	429a      	cmp	r2, r3
 8006406:	d108      	bne.n	800641a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	441a      	add	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	441a      	add	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	429a      	cmp	r2, r3
 800642c:	d118      	bne.n	8006460 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	4b15      	ldr	r3, [pc, #84]	; (8006488 <prvInsertBlockIntoFreeList+0xb0>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d00d      	beq.n	8006456 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	441a      	add	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	e008      	b.n	8006468 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006456:	4b0c      	ldr	r3, [pc, #48]	; (8006488 <prvInsertBlockIntoFreeList+0xb0>)
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	e003      	b.n	8006468 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	429a      	cmp	r2, r3
 800646e:	d002      	beq.n	8006476 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006476:	bf00      	nop
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	200042ac 	.word	0x200042ac
 8006488:	200042b4 	.word	0x200042b4

0800648c <__libc_init_array>:
 800648c:	b570      	push	{r4, r5, r6, lr}
 800648e:	4d0d      	ldr	r5, [pc, #52]	; (80064c4 <__libc_init_array+0x38>)
 8006490:	4c0d      	ldr	r4, [pc, #52]	; (80064c8 <__libc_init_array+0x3c>)
 8006492:	1b64      	subs	r4, r4, r5
 8006494:	10a4      	asrs	r4, r4, #2
 8006496:	2600      	movs	r6, #0
 8006498:	42a6      	cmp	r6, r4
 800649a:	d109      	bne.n	80064b0 <__libc_init_array+0x24>
 800649c:	4d0b      	ldr	r5, [pc, #44]	; (80064cc <__libc_init_array+0x40>)
 800649e:	4c0c      	ldr	r4, [pc, #48]	; (80064d0 <__libc_init_array+0x44>)
 80064a0:	f000 f8e4 	bl	800666c <_init>
 80064a4:	1b64      	subs	r4, r4, r5
 80064a6:	10a4      	asrs	r4, r4, #2
 80064a8:	2600      	movs	r6, #0
 80064aa:	42a6      	cmp	r6, r4
 80064ac:	d105      	bne.n	80064ba <__libc_init_array+0x2e>
 80064ae:	bd70      	pop	{r4, r5, r6, pc}
 80064b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b4:	4798      	blx	r3
 80064b6:	3601      	adds	r6, #1
 80064b8:	e7ee      	b.n	8006498 <__libc_init_array+0xc>
 80064ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80064be:	4798      	blx	r3
 80064c0:	3601      	adds	r6, #1
 80064c2:	e7f2      	b.n	80064aa <__libc_init_array+0x1e>
 80064c4:	080067b0 	.word	0x080067b0
 80064c8:	080067b0 	.word	0x080067b0
 80064cc:	080067b0 	.word	0x080067b0
 80064d0:	080067b4 	.word	0x080067b4

080064d4 <__retarget_lock_acquire_recursive>:
 80064d4:	4770      	bx	lr

080064d6 <__retarget_lock_release_recursive>:
 80064d6:	4770      	bx	lr

080064d8 <memset>:
 80064d8:	4402      	add	r2, r0
 80064da:	4603      	mov	r3, r0
 80064dc:	4293      	cmp	r3, r2
 80064de:	d100      	bne.n	80064e2 <memset+0xa>
 80064e0:	4770      	bx	lr
 80064e2:	f803 1b01 	strb.w	r1, [r3], #1
 80064e6:	e7f9      	b.n	80064dc <memset+0x4>

080064e8 <cleanup_glue>:
 80064e8:	b538      	push	{r3, r4, r5, lr}
 80064ea:	460c      	mov	r4, r1
 80064ec:	6809      	ldr	r1, [r1, #0]
 80064ee:	4605      	mov	r5, r0
 80064f0:	b109      	cbz	r1, 80064f6 <cleanup_glue+0xe>
 80064f2:	f7ff fff9 	bl	80064e8 <cleanup_glue>
 80064f6:	4621      	mov	r1, r4
 80064f8:	4628      	mov	r0, r5
 80064fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064fe:	f000 b869 	b.w	80065d4 <_free_r>
	...

08006504 <_reclaim_reent>:
 8006504:	4b2c      	ldr	r3, [pc, #176]	; (80065b8 <_reclaim_reent+0xb4>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4283      	cmp	r3, r0
 800650a:	b570      	push	{r4, r5, r6, lr}
 800650c:	4604      	mov	r4, r0
 800650e:	d051      	beq.n	80065b4 <_reclaim_reent+0xb0>
 8006510:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006512:	b143      	cbz	r3, 8006526 <_reclaim_reent+0x22>
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d14a      	bne.n	80065b0 <_reclaim_reent+0xac>
 800651a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800651c:	6819      	ldr	r1, [r3, #0]
 800651e:	b111      	cbz	r1, 8006526 <_reclaim_reent+0x22>
 8006520:	4620      	mov	r0, r4
 8006522:	f000 f857 	bl	80065d4 <_free_r>
 8006526:	6961      	ldr	r1, [r4, #20]
 8006528:	b111      	cbz	r1, 8006530 <_reclaim_reent+0x2c>
 800652a:	4620      	mov	r0, r4
 800652c:	f000 f852 	bl	80065d4 <_free_r>
 8006530:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006532:	b111      	cbz	r1, 800653a <_reclaim_reent+0x36>
 8006534:	4620      	mov	r0, r4
 8006536:	f000 f84d 	bl	80065d4 <_free_r>
 800653a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800653c:	b111      	cbz	r1, 8006544 <_reclaim_reent+0x40>
 800653e:	4620      	mov	r0, r4
 8006540:	f000 f848 	bl	80065d4 <_free_r>
 8006544:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006546:	b111      	cbz	r1, 800654e <_reclaim_reent+0x4a>
 8006548:	4620      	mov	r0, r4
 800654a:	f000 f843 	bl	80065d4 <_free_r>
 800654e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006550:	b111      	cbz	r1, 8006558 <_reclaim_reent+0x54>
 8006552:	4620      	mov	r0, r4
 8006554:	f000 f83e 	bl	80065d4 <_free_r>
 8006558:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800655a:	b111      	cbz	r1, 8006562 <_reclaim_reent+0x5e>
 800655c:	4620      	mov	r0, r4
 800655e:	f000 f839 	bl	80065d4 <_free_r>
 8006562:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006564:	b111      	cbz	r1, 800656c <_reclaim_reent+0x68>
 8006566:	4620      	mov	r0, r4
 8006568:	f000 f834 	bl	80065d4 <_free_r>
 800656c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800656e:	b111      	cbz	r1, 8006576 <_reclaim_reent+0x72>
 8006570:	4620      	mov	r0, r4
 8006572:	f000 f82f 	bl	80065d4 <_free_r>
 8006576:	69a3      	ldr	r3, [r4, #24]
 8006578:	b1e3      	cbz	r3, 80065b4 <_reclaim_reent+0xb0>
 800657a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800657c:	4620      	mov	r0, r4
 800657e:	4798      	blx	r3
 8006580:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006582:	b1b9      	cbz	r1, 80065b4 <_reclaim_reent+0xb0>
 8006584:	4620      	mov	r0, r4
 8006586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800658a:	f7ff bfad 	b.w	80064e8 <cleanup_glue>
 800658e:	5949      	ldr	r1, [r1, r5]
 8006590:	b941      	cbnz	r1, 80065a4 <_reclaim_reent+0xa0>
 8006592:	3504      	adds	r5, #4
 8006594:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006596:	2d80      	cmp	r5, #128	; 0x80
 8006598:	68d9      	ldr	r1, [r3, #12]
 800659a:	d1f8      	bne.n	800658e <_reclaim_reent+0x8a>
 800659c:	4620      	mov	r0, r4
 800659e:	f000 f819 	bl	80065d4 <_free_r>
 80065a2:	e7ba      	b.n	800651a <_reclaim_reent+0x16>
 80065a4:	680e      	ldr	r6, [r1, #0]
 80065a6:	4620      	mov	r0, r4
 80065a8:	f000 f814 	bl	80065d4 <_free_r>
 80065ac:	4631      	mov	r1, r6
 80065ae:	e7ef      	b.n	8006590 <_reclaim_reent+0x8c>
 80065b0:	2500      	movs	r5, #0
 80065b2:	e7ef      	b.n	8006594 <_reclaim_reent+0x90>
 80065b4:	bd70      	pop	{r4, r5, r6, pc}
 80065b6:	bf00      	nop
 80065b8:	20000020 	.word	0x20000020

080065bc <__malloc_lock>:
 80065bc:	4801      	ldr	r0, [pc, #4]	; (80065c4 <__malloc_lock+0x8>)
 80065be:	f7ff bf89 	b.w	80064d4 <__retarget_lock_acquire_recursive>
 80065c2:	bf00      	nop
 80065c4:	200042cc 	.word	0x200042cc

080065c8 <__malloc_unlock>:
 80065c8:	4801      	ldr	r0, [pc, #4]	; (80065d0 <__malloc_unlock+0x8>)
 80065ca:	f7ff bf84 	b.w	80064d6 <__retarget_lock_release_recursive>
 80065ce:	bf00      	nop
 80065d0:	200042cc 	.word	0x200042cc

080065d4 <_free_r>:
 80065d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065d6:	2900      	cmp	r1, #0
 80065d8:	d044      	beq.n	8006664 <_free_r+0x90>
 80065da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065de:	9001      	str	r0, [sp, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f1a1 0404 	sub.w	r4, r1, #4
 80065e6:	bfb8      	it	lt
 80065e8:	18e4      	addlt	r4, r4, r3
 80065ea:	f7ff ffe7 	bl	80065bc <__malloc_lock>
 80065ee:	4a1e      	ldr	r2, [pc, #120]	; (8006668 <_free_r+0x94>)
 80065f0:	9801      	ldr	r0, [sp, #4]
 80065f2:	6813      	ldr	r3, [r2, #0]
 80065f4:	b933      	cbnz	r3, 8006604 <_free_r+0x30>
 80065f6:	6063      	str	r3, [r4, #4]
 80065f8:	6014      	str	r4, [r2, #0]
 80065fa:	b003      	add	sp, #12
 80065fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006600:	f7ff bfe2 	b.w	80065c8 <__malloc_unlock>
 8006604:	42a3      	cmp	r3, r4
 8006606:	d908      	bls.n	800661a <_free_r+0x46>
 8006608:	6825      	ldr	r5, [r4, #0]
 800660a:	1961      	adds	r1, r4, r5
 800660c:	428b      	cmp	r3, r1
 800660e:	bf01      	itttt	eq
 8006610:	6819      	ldreq	r1, [r3, #0]
 8006612:	685b      	ldreq	r3, [r3, #4]
 8006614:	1949      	addeq	r1, r1, r5
 8006616:	6021      	streq	r1, [r4, #0]
 8006618:	e7ed      	b.n	80065f6 <_free_r+0x22>
 800661a:	461a      	mov	r2, r3
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	b10b      	cbz	r3, 8006624 <_free_r+0x50>
 8006620:	42a3      	cmp	r3, r4
 8006622:	d9fa      	bls.n	800661a <_free_r+0x46>
 8006624:	6811      	ldr	r1, [r2, #0]
 8006626:	1855      	adds	r5, r2, r1
 8006628:	42a5      	cmp	r5, r4
 800662a:	d10b      	bne.n	8006644 <_free_r+0x70>
 800662c:	6824      	ldr	r4, [r4, #0]
 800662e:	4421      	add	r1, r4
 8006630:	1854      	adds	r4, r2, r1
 8006632:	42a3      	cmp	r3, r4
 8006634:	6011      	str	r1, [r2, #0]
 8006636:	d1e0      	bne.n	80065fa <_free_r+0x26>
 8006638:	681c      	ldr	r4, [r3, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	6053      	str	r3, [r2, #4]
 800663e:	4421      	add	r1, r4
 8006640:	6011      	str	r1, [r2, #0]
 8006642:	e7da      	b.n	80065fa <_free_r+0x26>
 8006644:	d902      	bls.n	800664c <_free_r+0x78>
 8006646:	230c      	movs	r3, #12
 8006648:	6003      	str	r3, [r0, #0]
 800664a:	e7d6      	b.n	80065fa <_free_r+0x26>
 800664c:	6825      	ldr	r5, [r4, #0]
 800664e:	1961      	adds	r1, r4, r5
 8006650:	428b      	cmp	r3, r1
 8006652:	bf04      	itt	eq
 8006654:	6819      	ldreq	r1, [r3, #0]
 8006656:	685b      	ldreq	r3, [r3, #4]
 8006658:	6063      	str	r3, [r4, #4]
 800665a:	bf04      	itt	eq
 800665c:	1949      	addeq	r1, r1, r5
 800665e:	6021      	streq	r1, [r4, #0]
 8006660:	6054      	str	r4, [r2, #4]
 8006662:	e7ca      	b.n	80065fa <_free_r+0x26>
 8006664:	b003      	add	sp, #12
 8006666:	bd30      	pop	{r4, r5, pc}
 8006668:	200042d0 	.word	0x200042d0

0800666c <_init>:
 800666c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666e:	bf00      	nop
 8006670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006672:	bc08      	pop	{r3}
 8006674:	469e      	mov	lr, r3
 8006676:	4770      	bx	lr

08006678 <_fini>:
 8006678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667a:	bf00      	nop
 800667c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800667e:	bc08      	pop	{r3}
 8006680:	469e      	mov	lr, r3
 8006682:	4770      	bx	lr
