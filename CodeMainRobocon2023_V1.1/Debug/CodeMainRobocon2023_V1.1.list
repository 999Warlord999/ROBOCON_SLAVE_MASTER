
CodeMainRobocon2023_V1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08007874  08007874  00017874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079a0  080079a0  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080079a0  080079a0  000179a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079a8  080079a8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079a8  080079a8  000179a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079ac  080079ac  000179ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080079b0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00004308  20000088  20000088  00020088  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20004390  20004390  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016965  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f60  00000000  00000000  00036a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001258  00000000  00000000  00039980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001140  00000000  00000000  0003abd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d62  00000000  00000000  0003bd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014b45  00000000  00000000  0005fa7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df977  00000000  00000000  000745bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00153f36  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051b8  00000000  00000000  00153f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800785c 	.word	0x0800785c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800785c 	.word	0x0800785c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b974 	b.w	8000e0c <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	468e      	mov	lr, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14d      	bne.n	8000be6 <__udivmoddi4+0xaa>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4694      	mov	ip, r2
 8000b4e:	d969      	bls.n	8000c24 <__udivmoddi4+0xe8>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b152      	cbz	r2, 8000b6c <__udivmoddi4+0x30>
 8000b56:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5a:	f1c2 0120 	rsb	r1, r2, #32
 8000b5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b66:	ea41 0e03 	orr.w	lr, r1, r3
 8000b6a:	4094      	lsls	r4, r2
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	0c21      	lsrs	r1, r4, #16
 8000b72:	fbbe f6f8 	udiv	r6, lr, r8
 8000b76:	fa1f f78c 	uxth.w	r7, ip
 8000b7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b82:	fb06 f107 	mul.w	r1, r6, r7
 8000b86:	4299      	cmp	r1, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x64>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b92:	f080 811f 	bcs.w	8000dd4 <__udivmoddi4+0x298>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 811c 	bls.w	8000dd4 <__udivmoddi4+0x298>
 8000b9c:	3e02      	subs	r6, #2
 8000b9e:	4463      	add	r3, ip
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb0:	fb00 f707 	mul.w	r7, r0, r7
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	d90a      	bls.n	8000bce <__udivmoddi4+0x92>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc0:	f080 810a 	bcs.w	8000dd8 <__udivmoddi4+0x29c>
 8000bc4:	42a7      	cmp	r7, r4
 8000bc6:	f240 8107 	bls.w	8000dd8 <__udivmoddi4+0x29c>
 8000bca:	4464      	add	r4, ip
 8000bcc:	3802      	subs	r0, #2
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	1be4      	subs	r4, r4, r7
 8000bd4:	2600      	movs	r6, #0
 8000bd6:	b11d      	cbz	r5, 8000be0 <__udivmoddi4+0xa4>
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000be0:	4631      	mov	r1, r6
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0xc2>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	f000 80ef 	beq.w	8000dce <__udivmoddi4+0x292>
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f683 	clz	r6, r3
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d14a      	bne.n	8000c9c <__udivmoddi4+0x160>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xd4>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80f9 	bhi.w	8000e02 <__udivmoddi4+0x2c6>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0303 	sbc.w	r3, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	469e      	mov	lr, r3
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d0e0      	beq.n	8000be0 <__udivmoddi4+0xa4>
 8000c1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c22:	e7dd      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000c24:	b902      	cbnz	r2, 8000c28 <__udivmoddi4+0xec>
 8000c26:	deff      	udf	#255	; 0xff
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	f040 8092 	bne.w	8000d56 <__udivmoddi4+0x21a>
 8000c32:	eba1 010c 	sub.w	r1, r1, ip
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f fe8c 	uxth.w	lr, ip
 8000c3e:	2601      	movs	r6, #1
 8000c40:	0c20      	lsrs	r0, r4, #16
 8000c42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c46:	fb07 1113 	mls	r1, r7, r3, r1
 8000c4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c4e:	fb0e f003 	mul.w	r0, lr, r3
 8000c52:	4288      	cmp	r0, r1
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x12c>
 8000c56:	eb1c 0101 	adds.w	r1, ip, r1
 8000c5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x12a>
 8000c60:	4288      	cmp	r0, r1
 8000c62:	f200 80cb 	bhi.w	8000dfc <__udivmoddi4+0x2c0>
 8000c66:	4643      	mov	r3, r8
 8000c68:	1a09      	subs	r1, r1, r0
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c70:	fb07 1110 	mls	r1, r7, r0, r1
 8000c74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c78:	fb0e fe00 	mul.w	lr, lr, r0
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x156>
 8000c80:	eb1c 0404 	adds.w	r4, ip, r4
 8000c84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c88:	d202      	bcs.n	8000c90 <__udivmoddi4+0x154>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f200 80bb 	bhi.w	8000e06 <__udivmoddi4+0x2ca>
 8000c90:	4608      	mov	r0, r1
 8000c92:	eba4 040e 	sub.w	r4, r4, lr
 8000c96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c9a:	e79c      	b.n	8000bd6 <__udivmoddi4+0x9a>
 8000c9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ca0:	40b3      	lsls	r3, r6
 8000ca2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ca6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000caa:	fa20 f407 	lsr.w	r4, r0, r7
 8000cae:	fa01 f306 	lsl.w	r3, r1, r6
 8000cb2:	431c      	orrs	r4, r3
 8000cb4:	40f9      	lsrs	r1, r7
 8000cb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cba:	fa00 f306 	lsl.w	r3, r0, r6
 8000cbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cc2:	0c20      	lsrs	r0, r4, #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000ccc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b8>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ce4:	f080 8088 	bcs.w	8000df8 <__udivmoddi4+0x2bc>
 8000ce8:	4288      	cmp	r0, r1
 8000cea:	f240 8085 	bls.w	8000df8 <__udivmoddi4+0x2bc>
 8000cee:	f1a8 0802 	sub.w	r8, r8, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000d00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d08:	458e      	cmp	lr, r1
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x1e2>
 8000d0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d14:	d26c      	bcs.n	8000df0 <__udivmoddi4+0x2b4>
 8000d16:	458e      	cmp	lr, r1
 8000d18:	d96a      	bls.n	8000df0 <__udivmoddi4+0x2b4>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4461      	add	r1, ip
 8000d1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d22:	fba0 9402 	umull	r9, r4, r0, r2
 8000d26:	eba1 010e 	sub.w	r1, r1, lr
 8000d2a:	42a1      	cmp	r1, r4
 8000d2c:	46c8      	mov	r8, r9
 8000d2e:	46a6      	mov	lr, r4
 8000d30:	d356      	bcc.n	8000de0 <__udivmoddi4+0x2a4>
 8000d32:	d053      	beq.n	8000ddc <__udivmoddi4+0x2a0>
 8000d34:	b15d      	cbz	r5, 8000d4e <__udivmoddi4+0x212>
 8000d36:	ebb3 0208 	subs.w	r2, r3, r8
 8000d3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d42:	fa22 f306 	lsr.w	r3, r2, r6
 8000d46:	40f1      	lsrs	r1, r6
 8000d48:	431f      	orrs	r7, r3
 8000d4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d4e:	2600      	movs	r6, #0
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	f1c2 0320 	rsb	r3, r2, #32
 8000d5a:	40d8      	lsrs	r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	fa21 f303 	lsr.w	r3, r1, r3
 8000d64:	4091      	lsls	r1, r2
 8000d66:	4301      	orrs	r1, r0
 8000d68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6c:	fa1f fe8c 	uxth.w	lr, ip
 8000d70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d74:	fb07 3610 	mls	r6, r7, r0, r3
 8000d78:	0c0b      	lsrs	r3, r1, #16
 8000d7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d82:	429e      	cmp	r6, r3
 8000d84:	fa04 f402 	lsl.w	r4, r4, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x260>
 8000d8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d92:	d22f      	bcs.n	8000df4 <__udivmoddi4+0x2b8>
 8000d94:	429e      	cmp	r6, r3
 8000d96:	d92d      	bls.n	8000df4 <__udivmoddi4+0x2b8>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	b289      	uxth	r1, r1
 8000da0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000da4:	fb07 3316 	mls	r3, r7, r6, r3
 8000da8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dac:	fb06 f30e 	mul.w	r3, r6, lr
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x28a>
 8000db4:	eb1c 0101 	adds.w	r1, ip, r1
 8000db8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dbc:	d216      	bcs.n	8000dec <__udivmoddi4+0x2b0>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d914      	bls.n	8000dec <__udivmoddi4+0x2b0>
 8000dc2:	3e02      	subs	r6, #2
 8000dc4:	4461      	add	r1, ip
 8000dc6:	1ac9      	subs	r1, r1, r3
 8000dc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dcc:	e738      	b.n	8000c40 <__udivmoddi4+0x104>
 8000dce:	462e      	mov	r6, r5
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	e705      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000dd4:	4606      	mov	r6, r0
 8000dd6:	e6e3      	b.n	8000ba0 <__udivmoddi4+0x64>
 8000dd8:	4618      	mov	r0, r3
 8000dda:	e6f8      	b.n	8000bce <__udivmoddi4+0x92>
 8000ddc:	454b      	cmp	r3, r9
 8000dde:	d2a9      	bcs.n	8000d34 <__udivmoddi4+0x1f8>
 8000de0:	ebb9 0802 	subs.w	r8, r9, r2
 8000de4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000de8:	3801      	subs	r0, #1
 8000dea:	e7a3      	b.n	8000d34 <__udivmoddi4+0x1f8>
 8000dec:	4646      	mov	r6, r8
 8000dee:	e7ea      	b.n	8000dc6 <__udivmoddi4+0x28a>
 8000df0:	4620      	mov	r0, r4
 8000df2:	e794      	b.n	8000d1e <__udivmoddi4+0x1e2>
 8000df4:	4640      	mov	r0, r8
 8000df6:	e7d1      	b.n	8000d9c <__udivmoddi4+0x260>
 8000df8:	46d0      	mov	r8, sl
 8000dfa:	e77b      	b.n	8000cf4 <__udivmoddi4+0x1b8>
 8000dfc:	3b02      	subs	r3, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	e732      	b.n	8000c68 <__udivmoddi4+0x12c>
 8000e02:	4630      	mov	r0, r6
 8000e04:	e709      	b.n	8000c1a <__udivmoddi4+0xde>
 8000e06:	4464      	add	r4, ip
 8000e08:	3802      	subs	r0, #2
 8000e0a:	e742      	b.n	8000c92 <__udivmoddi4+0x156>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <vApplicationGetIdleTaskMemory+0x2c>)
 8000e20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	4a06      	ldr	r2, [pc, #24]	; (8000e40 <vApplicationGetIdleTaskMemory+0x30>)
 8000e26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2280      	movs	r2, #128	; 0x80
 8000e2c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e2e:	bf00      	nop
 8000e30:	3714      	adds	r7, #20
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	200000a4 	.word	0x200000a4
 8000e40:	20000158 	.word	0x20000158
 8000e44:	00000000 	.word	0x00000000

08000e48 <Pid_cal>:

/* USER CODE BEGIN PFP */

/*G�?i trong  HAL_TIM_PeriodElapsedCallback*/
double alpha;
void Pid_cal(){
 8000e48:	b5b0      	push	{r4, r5, r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	e2 = goc_target2 - goc_hientai;
 8000e4c:	4b94      	ldr	r3, [pc, #592]	; (80010a0 <Pid_cal+0x258>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b94      	ldr	r3, [pc, #592]	; (80010a4 <Pid_cal+0x25c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	4a94      	ldr	r2, [pc, #592]	; (80010a8 <Pid_cal+0x260>)
 8000e58:	6013      	str	r3, [r2, #0]
	if(goc_target2>=0){
 8000e5a:	4b91      	ldr	r3, [pc, #580]	; (80010a0 <Pid_cal+0x258>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	db1d      	blt.n	8000e9e <Pid_cal+0x56>
		if((e2<goc_target2*(1/3)))
 8000e62:	4b91      	ldr	r3, [pc, #580]	; (80010a8 <Pid_cal+0x260>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	da0c      	bge.n	8000e84 <Pid_cal+0x3c>
			{alpha = 0.09;
 8000e6a:	4990      	ldr	r1, [pc, #576]	; (80010ac <Pid_cal+0x264>)
 8000e6c:	a384      	add	r3, pc, #528	; (adr r3, 8001080 <Pid_cal+0x238>)
 8000e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e72:	e9c1 2300 	strd	r2, r3, [r1]
			kp2 = 0.075;}
 8000e76:	498e      	ldr	r1, [pc, #568]	; (80010b0 <Pid_cal+0x268>)
 8000e78:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000e7c:	4b8d      	ldr	r3, [pc, #564]	; (80010b4 <Pid_cal+0x26c>)
 8000e7e:	e9c1 2300 	strd	r2, r3, [r1]
 8000e82:	e029      	b.n	8000ed8 <Pid_cal+0x90>
		else {
		alpha = 0.8;
 8000e84:	4989      	ldr	r1, [pc, #548]	; (80010ac <Pid_cal+0x264>)
 8000e86:	a380      	add	r3, pc, #512	; (adr r3, 8001088 <Pid_cal+0x240>)
 8000e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8c:	e9c1 2300 	strd	r2, r3, [r1]
		kp2 = 0.5;}
 8000e90:	4987      	ldr	r1, [pc, #540]	; (80010b0 <Pid_cal+0x268>)
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	4b88      	ldr	r3, [pc, #544]	; (80010b8 <Pid_cal+0x270>)
 8000e98:	e9c1 2300 	strd	r2, r3, [r1]
 8000e9c:	e01c      	b.n	8000ed8 <Pid_cal+0x90>
	}else{
		if((e2>goc_target2*(1/3)))
 8000e9e:	4b82      	ldr	r3, [pc, #520]	; (80010a8 <Pid_cal+0x260>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	dd0c      	ble.n	8000ec0 <Pid_cal+0x78>
					{alpha = 0.09;
 8000ea6:	4981      	ldr	r1, [pc, #516]	; (80010ac <Pid_cal+0x264>)
 8000ea8:	a375      	add	r3, pc, #468	; (adr r3, 8001080 <Pid_cal+0x238>)
 8000eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eae:	e9c1 2300 	strd	r2, r3, [r1]
					kp2 = 0.075;}
 8000eb2:	497f      	ldr	r1, [pc, #508]	; (80010b0 <Pid_cal+0x268>)
 8000eb4:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000eb8:	4b7e      	ldr	r3, [pc, #504]	; (80010b4 <Pid_cal+0x26c>)
 8000eba:	e9c1 2300 	strd	r2, r3, [r1]
 8000ebe:	e00b      	b.n	8000ed8 <Pid_cal+0x90>
				else {
				alpha = 0.8;
 8000ec0:	497a      	ldr	r1, [pc, #488]	; (80010ac <Pid_cal+0x264>)
 8000ec2:	a371      	add	r3, pc, #452	; (adr r3, 8001088 <Pid_cal+0x240>)
 8000ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec8:	e9c1 2300 	strd	r2, r3, [r1]
				kp2 = 0.5;}
 8000ecc:	4978      	ldr	r1, [pc, #480]	; (80010b0 <Pid_cal+0x268>)
 8000ece:	f04f 0200 	mov.w	r2, #0
 8000ed2:	4b79      	ldr	r3, [pc, #484]	; (80010b8 <Pid_cal+0x270>)
 8000ed4:	e9c1 2300 	strd	r2, r3, [r1]
	}

	    up2 = kp2*e2;
 8000ed8:	4b73      	ldr	r3, [pc, #460]	; (80010a8 <Pid_cal+0x260>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fac9 	bl	8000474 <__aeabi_i2d>
 8000ee2:	4b73      	ldr	r3, [pc, #460]	; (80010b0 <Pid_cal+0x268>)
 8000ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee8:	f7ff fb2e 	bl	8000548 <__aeabi_dmul>
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	4972      	ldr	r1, [pc, #456]	; (80010bc <Pid_cal+0x274>)
 8000ef2:	e9c1 2300 	strd	r2, r3, [r1]
		ud2 = kd2*(e2 - pre_e2)/0.001;
 8000ef6:	4b6c      	ldr	r3, [pc, #432]	; (80010a8 <Pid_cal+0x260>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff faba 	bl	8000474 <__aeabi_i2d>
 8000f00:	4b6f      	ldr	r3, [pc, #444]	; (80010c0 <Pid_cal+0x278>)
 8000f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f06:	f7ff f967 	bl	80001d8 <__aeabi_dsub>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	4610      	mov	r0, r2
 8000f10:	4619      	mov	r1, r3
 8000f12:	4b6c      	ldr	r3, [pc, #432]	; (80010c4 <Pid_cal+0x27c>)
 8000f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f18:	f7ff fb16 	bl	8000548 <__aeabi_dmul>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
 8000f24:	a35a      	add	r3, pc, #360	; (adr r3, 8001090 <Pid_cal+0x248>)
 8000f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2a:	f7ff fc37 	bl	800079c <__aeabi_ddiv>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	4965      	ldr	r1, [pc, #404]	; (80010c8 <Pid_cal+0x280>)
 8000f34:	e9c1 2300 	strd	r2, r3, [r1]
//		ui2 = ui_p2 + ki2*e2*0.001;
		udf2 = (1-alpha)*uf2_p+alpha*ud2;
 8000f38:	4b5c      	ldr	r3, [pc, #368]	; (80010ac <Pid_cal+0x264>)
 8000f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3e:	f04f 0000 	mov.w	r0, #0
 8000f42:	4962      	ldr	r1, [pc, #392]	; (80010cc <Pid_cal+0x284>)
 8000f44:	f7ff f948 	bl	80001d8 <__aeabi_dsub>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4b5f      	ldr	r3, [pc, #380]	; (80010d0 <Pid_cal+0x288>)
 8000f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f56:	f7ff faf7 	bl	8000548 <__aeabi_dmul>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4614      	mov	r4, r2
 8000f60:	461d      	mov	r5, r3
 8000f62:	4b52      	ldr	r3, [pc, #328]	; (80010ac <Pid_cal+0x264>)
 8000f64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f68:	4b57      	ldr	r3, [pc, #348]	; (80010c8 <Pid_cal+0x280>)
 8000f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6e:	f7ff faeb 	bl	8000548 <__aeabi_dmul>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4620      	mov	r0, r4
 8000f78:	4629      	mov	r1, r5
 8000f7a:	f7ff f92f 	bl	80001dc <__adddf3>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4954      	ldr	r1, [pc, #336]	; (80010d4 <Pid_cal+0x28c>)
 8000f84:	e9c1 2300 	strd	r2, r3, [r1]

//		if(ui2>8)ui2=8;
//		else if(ui2<-8)ui2=-8;


		pre_e2 = e2;
 8000f88:	4b47      	ldr	r3, [pc, #284]	; (80010a8 <Pid_cal+0x260>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fa71 	bl	8000474 <__aeabi_i2d>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	494a      	ldr	r1, [pc, #296]	; (80010c0 <Pid_cal+0x278>)
 8000f98:	e9c1 2300 	strd	r2, r3, [r1]
		uf2_p = udf2;
 8000f9c:	4b4d      	ldr	r3, [pc, #308]	; (80010d4 <Pid_cal+0x28c>)
 8000f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa2:	494b      	ldr	r1, [pc, #300]	; (80010d0 <Pid_cal+0x288>)
 8000fa4:	e9c1 2300 	strd	r2, r3, [r1]
//		ui_p2 = ui2;

		if (u2>0)dir2=1;
 8000fa8:	4b4b      	ldr	r3, [pc, #300]	; (80010d8 <Pid_cal+0x290>)
 8000faa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	f7ff fd57 	bl	8000a68 <__aeabi_dcmpgt>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <Pid_cal+0x180>
 8000fc0:	4b46      	ldr	r3, [pc, #280]	; (80010dc <Pid_cal+0x294>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	e00f      	b.n	8000fe8 <Pid_cal+0x1a0>
		else if (u2<0)dir2 = -1;
 8000fc8:	4b43      	ldr	r3, [pc, #268]	; (80010d8 <Pid_cal+0x290>)
 8000fca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	f04f 0300 	mov.w	r3, #0
 8000fd6:	f7ff fd29 	bl	8000a2c <__aeabi_dcmplt>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <Pid_cal+0x1a0>
 8000fe0:	4b3e      	ldr	r3, [pc, #248]	; (80010dc <Pid_cal+0x294>)
 8000fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe6:	601a      	str	r2, [r3, #0]
		u2 = up2 + udf2;
 8000fe8:	4b34      	ldr	r3, [pc, #208]	; (80010bc <Pid_cal+0x274>)
 8000fea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fee:	4b39      	ldr	r3, [pc, #228]	; (80010d4 <Pid_cal+0x28c>)
 8000ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff4:	f7ff f8f2 	bl	80001dc <__adddf3>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4936      	ldr	r1, [pc, #216]	; (80010d8 <Pid_cal+0x290>)
 8000ffe:	e9c1 2300 	strd	r2, r3, [r1]
		if (u2> 300)u2 =300;//180
 8001002:	4b35      	ldr	r3, [pc, #212]	; (80010d8 <Pid_cal+0x290>)
 8001004:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001008:	a323      	add	r3, pc, #140	; (adr r3, 8001098 <Pid_cal+0x250>)
 800100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100e:	f7ff fd2b 	bl	8000a68 <__aeabi_dcmpgt>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d006      	beq.n	8001026 <Pid_cal+0x1de>
 8001018:	492f      	ldr	r1, [pc, #188]	; (80010d8 <Pid_cal+0x290>)
 800101a:	a31f      	add	r3, pc, #124	; (adr r3, 8001098 <Pid_cal+0x250>)
 800101c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001020:	e9c1 2300 	strd	r2, r3, [r1]
 8001024:	e010      	b.n	8001048 <Pid_cal+0x200>
		else if (u2<-300)u2=-300;//-180
 8001026:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <Pid_cal+0x290>)
 8001028:	e9d3 0100 	ldrd	r0, r1, [r3]
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <Pid_cal+0x298>)
 8001032:	f7ff fcfb 	bl	8000a2c <__aeabi_dcmplt>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <Pid_cal+0x200>
 800103c:	4926      	ldr	r1, [pc, #152]	; (80010d8 <Pid_cal+0x290>)
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <Pid_cal+0x298>)
 8001044:	e9c1 2300 	strd	r2, r3, [r1]
		pwm = abs(u2);
 8001048:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <Pid_cal+0x290>)
 800104a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104e:	4610      	mov	r0, r2
 8001050:	4619      	mov	r1, r3
 8001052:	f7ff fd13 	bl	8000a7c <__aeabi_d2iz>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	bfb8      	it	lt
 800105c:	425b      	neglt	r3, r3
 800105e:	b29a      	uxth	r2, r3
 8001060:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <Pid_cal+0x29c>)
 8001062:	801a      	strh	r2, [r3, #0]
		if((pwm < 10)&&(e2!=0)){//85
 8001064:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <Pid_cal+0x29c>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	2b09      	cmp	r3, #9
 800106a:	d806      	bhi.n	800107a <Pid_cal+0x232>
 800106c:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <Pid_cal+0x260>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <Pid_cal+0x232>
			pwm = 10;
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <Pid_cal+0x29c>)
 8001076:	220a      	movs	r2, #10
 8001078:	801a      	strh	r2, [r3, #0]
		}
}
 800107a:	bf00      	nop
 800107c:	bdb0      	pop	{r4, r5, r7, pc}
 800107e:	bf00      	nop
 8001080:	70a3d70a 	.word	0x70a3d70a
 8001084:	3fb70a3d 	.word	0x3fb70a3d
 8001088:	9999999a 	.word	0x9999999a
 800108c:	3fe99999 	.word	0x3fe99999
 8001090:	d2f1a9fc 	.word	0xd2f1a9fc
 8001094:	3f50624d 	.word	0x3f50624d
 8001098:	00000000 	.word	0x00000000
 800109c:	4072c000 	.word	0x4072c000
 80010a0:	2000053c 	.word	0x2000053c
 80010a4:	20000528 	.word	0x20000528
 80010a8:	20000544 	.word	0x20000544
 80010ac:	20000580 	.word	0x20000580
 80010b0:	20000000 	.word	0x20000000
 80010b4:	3fb33333 	.word	0x3fb33333
 80010b8:	3fe00000 	.word	0x3fe00000
 80010bc:	20000550 	.word	0x20000550
 80010c0:	20000548 	.word	0x20000548
 80010c4:	20000008 	.word	0x20000008
 80010c8:	20000558 	.word	0x20000558
 80010cc:	3ff00000 	.word	0x3ff00000
 80010d0:	20000568 	.word	0x20000568
 80010d4:	20000560 	.word	0x20000560
 80010d8:	20000570 	.word	0x20000570
 80010dc:	20000538 	.word	0x20000538
 80010e0:	c072c000 	.word	0xc072c000
 80010e4:	2000057c 	.word	0x2000057c

080010e8 <GetDataCompass>:


char ds[12];
uint8_t uart1_ds, ds_ind, ds_cnt, ds_flg;

void GetDataCompass(){
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
	GocRobot = ds[1] - 48;
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <GetDataCompass+0x7c>)
 80010f0:	785b      	ldrb	r3, [r3, #1]
 80010f2:	3b30      	subs	r3, #48	; 0x30
 80010f4:	4a1c      	ldr	r2, [pc, #112]	; (8001168 <GetDataCompass+0x80>)
 80010f6:	6013      	str	r3, [r2, #0]
	int x = 2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	607b      	str	r3, [r7, #4]
	while((ds[x] >= 48) && (ds[x] <= 57)){
 80010fc:	e016      	b.n	800112c <GetDataCompass+0x44>
		GocRobot = GocRobot * 10;
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <GetDataCompass+0x80>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	4613      	mov	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	461a      	mov	r2, r3
 800110c:	4b16      	ldr	r3, [pc, #88]	; (8001168 <GetDataCompass+0x80>)
 800110e:	601a      	str	r2, [r3, #0]
		GocRobot += ds[x] -48;
 8001110:	4a14      	ldr	r2, [pc, #80]	; (8001164 <GetDataCompass+0x7c>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <GetDataCompass+0x80>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4413      	add	r3, r2
 8001122:	4a11      	ldr	r2, [pc, #68]	; (8001168 <GetDataCompass+0x80>)
 8001124:	6013      	str	r3, [r2, #0]
		++x;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3301      	adds	r3, #1
 800112a:	607b      	str	r3, [r7, #4]
	while((ds[x] >= 48) && (ds[x] <= 57)){
 800112c:	4a0d      	ldr	r2, [pc, #52]	; (8001164 <GetDataCompass+0x7c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b2f      	cmp	r3, #47	; 0x2f
 8001136:	d905      	bls.n	8001144 <GetDataCompass+0x5c>
 8001138:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <GetDataCompass+0x7c>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b39      	cmp	r3, #57	; 0x39
 8001142:	d9dc      	bls.n	80010fe <GetDataCompass+0x16>
	}

	if(ds[0] == '-'){
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <GetDataCompass+0x7c>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b2d      	cmp	r3, #45	; 0x2d
 800114a:	d104      	bne.n	8001156 <GetDataCompass+0x6e>
		GocRobot = -GocRobot;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <GetDataCompass+0x80>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	425b      	negs	r3, r3
 8001152:	4a05      	ldr	r2, [pc, #20]	; (8001168 <GetDataCompass+0x80>)
 8001154:	6013      	str	r3, [r2, #0]
	}
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	200005b0 	.word	0x200005b0
 8001168:	200005a8 	.word	0x200005a8

0800116c <HAL_UART_RxCpltCallback>:

//char UARTRX1_Buffer[17];
//char DataMain[17];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
//	if(huart->Instance == USART1){
//
//	}

	if(huart->Instance == USART2){
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a34      	ldr	r2, [pc, #208]	; (800124c <HAL_UART_RxCpltCallback+0xe0>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d120      	bne.n	80011c0 <HAL_UART_RxCpltCallback+0x54>
//		HAL_UART_Receive_IT(&huart2, (uint8_t*)UARTRX2_Buffer, 10);

		if(uart1_ds != '\n')
 800117e:	4b34      	ldr	r3, [pc, #208]	; (8001250 <HAL_UART_RxCpltCallback+0xe4>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b0a      	cmp	r3, #10
 8001184:	d00b      	beq.n	800119e <HAL_UART_RxCpltCallback+0x32>
				ds[ds_ind++] = uart1_ds;
 8001186:	4b33      	ldr	r3, [pc, #204]	; (8001254 <HAL_UART_RxCpltCallback+0xe8>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	1c5a      	adds	r2, r3, #1
 800118c:	b2d1      	uxtb	r1, r2
 800118e:	4a31      	ldr	r2, [pc, #196]	; (8001254 <HAL_UART_RxCpltCallback+0xe8>)
 8001190:	7011      	strb	r1, [r2, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <HAL_UART_RxCpltCallback+0xe4>)
 8001196:	7819      	ldrb	r1, [r3, #0]
 8001198:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <HAL_UART_RxCpltCallback+0xec>)
 800119a:	5499      	strb	r1, [r3, r2]
 800119c:	e00b      	b.n	80011b6 <HAL_UART_RxCpltCallback+0x4a>
		else{
				GetDataCompass();
 800119e:	f7ff ffa3 	bl	80010e8 <GetDataCompass>
				ds_cnt = ds_ind;
 80011a2:	4b2c      	ldr	r3, [pc, #176]	; (8001254 <HAL_UART_RxCpltCallback+0xe8>)
 80011a4:	781a      	ldrb	r2, [r3, #0]
 80011a6:	4b2d      	ldr	r3, [pc, #180]	; (800125c <HAL_UART_RxCpltCallback+0xf0>)
 80011a8:	701a      	strb	r2, [r3, #0]
				ds_flg = 1;
 80011aa:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <HAL_UART_RxCpltCallback+0xf4>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
				ds_ind = 0;
 80011b0:	4b28      	ldr	r3, [pc, #160]	; (8001254 <HAL_UART_RxCpltCallback+0xe8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, &uart1_ds, 1);
 80011b6:	2201      	movs	r2, #1
 80011b8:	4925      	ldr	r1, [pc, #148]	; (8001250 <HAL_UART_RxCpltCallback+0xe4>)
 80011ba:	482a      	ldr	r0, [pc, #168]	; (8001264 <HAL_UART_RxCpltCallback+0xf8>)
 80011bc:	f004 f849 	bl	8005252 <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART3){
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a28      	ldr	r2, [pc, #160]	; (8001268 <HAL_UART_RxCpltCallback+0xfc>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d13c      	bne.n	8001244 <HAL_UART_RxCpltCallback+0xd8>
		HAL_UART_Receive_IT(&huart3, (uint8_t*)UARTRX3_Buffer, 9);
 80011ca:	2209      	movs	r2, #9
 80011cc:	4927      	ldr	r1, [pc, #156]	; (800126c <HAL_UART_RxCpltCallback+0x100>)
 80011ce:	4828      	ldr	r0, [pc, #160]	; (8001270 <HAL_UART_RxCpltCallback+0x104>)
 80011d0:	f004 f83f 	bl	8005252 <HAL_UART_Receive_IT>
		int ViTriData = -1;
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
 80011d8:	617b      	str	r3, [r7, #20]
		for(int i = 0; i <= 8; ++i){
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	e010      	b.n	8001202 <HAL_UART_RxCpltCallback+0x96>
			if((UARTRX3_Buffer[i] == (RFAddress << 1 | 0)) || (UARTRX3_Buffer[i] == (RFAddress << 1 | 1))){
 80011e0:	4a22      	ldr	r2, [pc, #136]	; (800126c <HAL_UART_RxCpltCallback+0x100>)
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4413      	add	r3, r2
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b94      	cmp	r3, #148	; 0x94
 80011ea:	d005      	beq.n	80011f8 <HAL_UART_RxCpltCallback+0x8c>
 80011ec:	4a1f      	ldr	r2, [pc, #124]	; (800126c <HAL_UART_RxCpltCallback+0x100>)
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	4413      	add	r3, r2
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b95      	cmp	r3, #149	; 0x95
 80011f6:	d101      	bne.n	80011fc <HAL_UART_RxCpltCallback+0x90>
				ViTriData = i;
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	617b      	str	r3, [r7, #20]
		for(int i = 0; i <= 8; ++i){
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	3301      	adds	r3, #1
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	2b08      	cmp	r3, #8
 8001206:	ddeb      	ble.n	80011e0 <HAL_UART_RxCpltCallback+0x74>
			}
		}
		if(ViTriData != -1){
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800120e:	d019      	beq.n	8001244 <HAL_UART_RxCpltCallback+0xd8>
			int cnt = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
			while(cnt < 9){
 8001214:	e013      	b.n	800123e <HAL_UART_RxCpltCallback+0xd2>
				DataTayGame[cnt] = UARTRX3_Buffer[ViTriData];
 8001216:	4a15      	ldr	r2, [pc, #84]	; (800126c <HAL_UART_RxCpltCallback+0x100>)
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	4413      	add	r3, r2
 800121c:	7819      	ldrb	r1, [r3, #0]
 800121e:	4a15      	ldr	r2, [pc, #84]	; (8001274 <HAL_UART_RxCpltCallback+0x108>)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4413      	add	r3, r2
 8001224:	460a      	mov	r2, r1
 8001226:	701a      	strb	r2, [r3, #0]
				++ViTriData;
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	3301      	adds	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
				if(ViTriData == 9){
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	2b09      	cmp	r3, #9
 8001232:	d101      	bne.n	8001238 <HAL_UART_RxCpltCallback+0xcc>
					ViTriData = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
				}
				++cnt;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3301      	adds	r3, #1
 800123c:	60fb      	str	r3, [r7, #12]
			while(cnt < 9){
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2b08      	cmp	r3, #8
 8001242:	dde8      	ble.n	8001216 <HAL_UART_RxCpltCallback+0xaa>
			}
		}
	}
}
 8001244:	bf00      	nop
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40004400 	.word	0x40004400
 8001250:	200005bc 	.word	0x200005bc
 8001254:	200005bd 	.word	0x200005bd
 8001258:	200005b0 	.word	0x200005b0
 800125c:	200005be 	.word	0x200005be
 8001260:	200005bf 	.word	0x200005bf
 8001264:	2000048c 	.word	0x2000048c
 8001268:	40004800 	.word	0x40004800
 800126c:	20000590 	.word	0x20000590
 8001270:	200004d0 	.word	0x200004d0
 8001274:	2000059c 	.word	0x2000059c

08001278 <ControlDriver>:


uint8_t UART1TxData[17];
/*Hàm truy�?n data xuống cho các board driver*/
int ControlDriver(uint8_t Mode1, int Dir1, uint16_t Speed1, uint16_t Rotate1, uint8_t Mode2, int Dir2, uint16_t Speed2, uint16_t Rotate2, uint8_t Mode3, int Dir3, uint16_t Speed3, uint16_t Rotate3){
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	4611      	mov	r1, r2
 8001282:	461a      	mov	r2, r3
 8001284:	4603      	mov	r3, r0
 8001286:	73fb      	strb	r3, [r7, #15]
 8001288:	460b      	mov	r3, r1
 800128a:	81bb      	strh	r3, [r7, #12]
 800128c:	4613      	mov	r3, r2
 800128e:	80fb      	strh	r3, [r7, #6]
	UART1TxData[0] = 149;
 8001290:	4b57      	ldr	r3, [pc, #348]	; (80013f0 <ControlDriver+0x178>)
 8001292:	2295      	movs	r2, #149	; 0x95
 8001294:	701a      	strb	r2, [r3, #0]

	if(Dir1 == -1){
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800129c:	d108      	bne.n	80012b0 <ControlDriver+0x38>
		UART1TxData[1] = (Mode1 & 3) << 1;
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	f003 0306 	and.w	r3, r3, #6
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b51      	ldr	r3, [pc, #324]	; (80013f0 <ControlDriver+0x178>)
 80012ac:	705a      	strb	r2, [r3, #1]
 80012ae:	e00e      	b.n	80012ce <ControlDriver+0x56>
	}
	else if(Dir1 == 1){
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d10b      	bne.n	80012ce <ControlDriver+0x56>
		UART1TxData[1] = (Mode1 & 3) << 1 | 1;
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	b25b      	sxtb	r3, r3
 80012bc:	f003 0306 	and.w	r3, r3, #6
 80012c0:	b25b      	sxtb	r3, r3
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	b25b      	sxtb	r3, r3
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4b49      	ldr	r3, [pc, #292]	; (80013f0 <ControlDriver+0x178>)
 80012cc:	705a      	strb	r2, [r3, #1]
	}

	UART1TxData[2] = Speed1 >> 8;
 80012ce:	89bb      	ldrh	r3, [r7, #12]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4b46      	ldr	r3, [pc, #280]	; (80013f0 <ControlDriver+0x178>)
 80012d8:	709a      	strb	r2, [r3, #2]
	UART1TxData[3] = Speed1;
 80012da:	89bb      	ldrh	r3, [r7, #12]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4b44      	ldr	r3, [pc, #272]	; (80013f0 <ControlDriver+0x178>)
 80012e0:	70da      	strb	r2, [r3, #3]

	UART1TxData[4] = Rotate1 >> 8;
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4b41      	ldr	r3, [pc, #260]	; (80013f0 <ControlDriver+0x178>)
 80012ec:	711a      	strb	r2, [r3, #4]
	UART1TxData[5] = Rotate1;
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4b3f      	ldr	r3, [pc, #252]	; (80013f0 <ControlDriver+0x178>)
 80012f4:	715a      	strb	r2, [r3, #5]

	if(Dir2 == -1){
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012fc:	d108      	bne.n	8001310 <ControlDriver+0x98>
		UART1TxData[6] = (Mode2 & 3) << 1;
 80012fe:	7e3b      	ldrb	r3, [r7, #24]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	b2db      	uxtb	r3, r3
 8001304:	f003 0306 	and.w	r3, r3, #6
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4b39      	ldr	r3, [pc, #228]	; (80013f0 <ControlDriver+0x178>)
 800130c:	719a      	strb	r2, [r3, #6]
 800130e:	e00e      	b.n	800132e <ControlDriver+0xb6>
	}
	else if(Dir2 == 1){
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d10b      	bne.n	800132e <ControlDriver+0xb6>
		UART1TxData[6] = (Mode2 & 3) << 1 | 1;
 8001316:	7e3b      	ldrb	r3, [r7, #24]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	b25b      	sxtb	r3, r3
 800131c:	f003 0306 	and.w	r3, r3, #6
 8001320:	b25b      	sxtb	r3, r3
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	b25b      	sxtb	r3, r3
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4b31      	ldr	r3, [pc, #196]	; (80013f0 <ControlDriver+0x178>)
 800132c:	719a      	strb	r2, [r3, #6]
	}

	UART1TxData[7] = Speed2 >> 8;
 800132e:	8c3b      	ldrh	r3, [r7, #32]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	b29b      	uxth	r3, r3
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b2e      	ldr	r3, [pc, #184]	; (80013f0 <ControlDriver+0x178>)
 8001338:	71da      	strb	r2, [r3, #7]
	UART1TxData[8] = Speed2;
 800133a:	8c3b      	ldrh	r3, [r7, #32]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4b2c      	ldr	r3, [pc, #176]	; (80013f0 <ControlDriver+0x178>)
 8001340:	721a      	strb	r2, [r3, #8]

	UART1TxData[9] = Rotate2 >> 8;
 8001342:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	b29b      	uxth	r3, r3
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <ControlDriver+0x178>)
 800134c:	725a      	strb	r2, [r3, #9]
	UART1TxData[10] = Rotate2;
 800134e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4b27      	ldr	r3, [pc, #156]	; (80013f0 <ControlDriver+0x178>)
 8001354:	729a      	strb	r2, [r3, #10]

	if(Dir3 == -1){
 8001356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800135c:	d109      	bne.n	8001372 <ControlDriver+0xfa>
		UART1TxData[11] = (Mode3 & 3) << 1;
 800135e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	f003 0306 	and.w	r3, r3, #6
 800136a:	b2da      	uxtb	r2, r3
 800136c:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <ControlDriver+0x178>)
 800136e:	72da      	strb	r2, [r3, #11]
 8001370:	e00f      	b.n	8001392 <ControlDriver+0x11a>
	}
	else if(Dir3 == 1){
 8001372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001374:	2b01      	cmp	r3, #1
 8001376:	d10c      	bne.n	8001392 <ControlDriver+0x11a>
		UART1TxData[11] = (Mode3 & 3) << 1 | 1;
 8001378:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	b25b      	sxtb	r3, r3
 8001380:	f003 0306 	and.w	r3, r3, #6
 8001384:	b25b      	sxtb	r3, r3
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	b25b      	sxtb	r3, r3
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <ControlDriver+0x178>)
 8001390:	72da      	strb	r2, [r3, #11]
	}

	UART1TxData[12] = Speed3 >> 8;
 8001392:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	b29b      	uxth	r3, r3
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <ControlDriver+0x178>)
 800139c:	731a      	strb	r2, [r3, #12]
	UART1TxData[13] = Speed3;
 800139e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <ControlDriver+0x178>)
 80013a4:	735a      	strb	r2, [r3, #13]

	UART1TxData[14] = Rotate3 >> 8;
 80013a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80013a8:	0a1b      	lsrs	r3, r3, #8
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <ControlDriver+0x178>)
 80013b0:	739a      	strb	r2, [r3, #14]
	UART1TxData[15] = Rotate3;
 80013b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <ControlDriver+0x178>)
 80013b8:	73da      	strb	r2, [r3, #15]

	UART1TxData[16] = 10;
 80013ba:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <ControlDriver+0x178>)
 80013bc:	220a      	movs	r2, #10
 80013be:	741a      	strb	r2, [r3, #16]

	if(HAL_UART_Transmit(&huart1, (uint8_t *) UART1TxData, 17, 1000) != HAL_OK){
 80013c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c4:	2211      	movs	r2, #17
 80013c6:	490a      	ldr	r1, [pc, #40]	; (80013f0 <ControlDriver+0x178>)
 80013c8:	480a      	ldr	r0, [pc, #40]	; (80013f4 <ControlDriver+0x17c>)
 80013ca:	f003 feb0 	bl	800512e <HAL_UART_Transmit>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d004      	beq.n	80013de <ControlDriver+0x166>
		osDelay(1);
 80013d4:	2001      	movs	r0, #1
 80013d6:	f004 ff40 	bl	800625a <osDelay>
		return 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	e003      	b.n	80013e6 <ControlDriver+0x16e>
	}
	osDelay(1);
 80013de:	2001      	movs	r0, #1
 80013e0:	f004 ff3b 	bl	800625a <osDelay>
	return 1;
 80013e4:	2301      	movs	r3, #1
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200005c0 	.word	0x200005c0
 80013f4:	20000448 	.word	0x20000448

080013f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	b09c      	sub	sp, #112	; 0x70
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013fe:	f001 f9b9 	bl	8002774 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(5000);
 8001402:	f241 3088 	movw	r0, #5000	; 0x1388
 8001406:	f001 f9f7 	bl	80027f8 <HAL_Delay>
  GocRobot = -999;
 800140a:	4b35      	ldr	r3, [pc, #212]	; (80014e0 <main+0xe8>)
 800140c:	4a35      	ldr	r2, [pc, #212]	; (80014e4 <main+0xec>)
 800140e:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001410:	f000 f882 	bl	8001518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001414:	f000 fa28 	bl	8001868 <MX_GPIO_Init>
  MX_DMA_Init();
 8001418:	f000 fa06 	bl	8001828 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800141c:	f000 f984 	bl	8001728 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001420:	f000 f9ae 	bl	8001780 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001424:	f000 f9d6 	bl	80017d4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001428:	f000 f932 	bl	8001690 <MX_TIM2_Init>
  MX_ADC1_Init();
 800142c:	f000 f8de 	bl	80015ec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Receive_IT(&huart2, &uart1_ds, 1);
 8001430:	2201      	movs	r2, #1
 8001432:	492d      	ldr	r1, [pc, #180]	; (80014e8 <main+0xf0>)
 8001434:	482d      	ldr	r0, [pc, #180]	; (80014ec <main+0xf4>)
 8001436:	f003 ff0c 	bl	8005252 <HAL_UART_Receive_IT>
  //Uart3 Connect to HC-12
  HAL_UART_Receive_IT(&huart3, (uint8_t*)UARTRX3_Buffer, 9);
 800143a:	2209      	movs	r2, #9
 800143c:	492c      	ldr	r1, [pc, #176]	; (80014f0 <main+0xf8>)
 800143e:	482d      	ldr	r0, [pc, #180]	; (80014f4 <main+0xfc>)
 8001440:	f003 ff07 	bl	8005252 <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001444:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <main+0x100>)
 8001446:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800144a:	461d      	mov	r5, r3
 800144c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800144e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001450:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001454:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001458:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f004 feaf 	bl	80061c2 <osThreadCreate>
 8001464:	4603      	mov	r3, r0
 8001466:	4a25      	ldr	r2, [pc, #148]	; (80014fc <main+0x104>)
 8001468:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, TaskBlinkLed, osPriorityIdle, 0, 128);
 800146a:	4b25      	ldr	r3, [pc, #148]	; (8001500 <main+0x108>)
 800146c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001470:	461d      	mov	r5, r3
 8001472:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001474:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001476:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800147a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 800147e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f004 fe9c 	bl	80061c2 <osThreadCreate>
 800148a:	4603      	mov	r3, r0
 800148c:	4a1d      	ldr	r2, [pc, #116]	; (8001504 <main+0x10c>)
 800148e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, TaskUART, osPriorityIdle, 0, 128);
 8001490:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <main+0x110>)
 8001492:	f107 041c 	add.w	r4, r7, #28
 8001496:	461d      	mov	r5, r3
 8001498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800149a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800149c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f004 fe89 	bl	80061c2 <osThreadCreate>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4a16      	ldr	r2, [pc, #88]	; (800150c <main+0x114>)
 80014b4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_setting */
  osThreadDef(Task_setting, TaskXoayLaBan, osPriorityAboveNormal, 0, 128);
 80014b6:	4b16      	ldr	r3, [pc, #88]	; (8001510 <main+0x118>)
 80014b8:	463c      	mov	r4, r7
 80014ba:	461d      	mov	r5, r3
 80014bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_settingHandle = osThreadCreate(osThread(Task_setting), NULL);
 80014c8:	463b      	mov	r3, r7
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f004 fe78 	bl	80061c2 <osThreadCreate>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4a0f      	ldr	r2, [pc, #60]	; (8001514 <main+0x11c>)
 80014d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80014d8:	f004 fe6c 	bl	80061b4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  ControlDriver(0, 0, 0, 0, 0);

  while (1)
 80014dc:	e7fe      	b.n	80014dc <main+0xe4>
 80014de:	bf00      	nop
 80014e0:	200005a8 	.word	0x200005a8
 80014e4:	fffffc19 	.word	0xfffffc19
 80014e8:	200005bc 	.word	0x200005bc
 80014ec:	2000048c 	.word	0x2000048c
 80014f0:	20000590 	.word	0x20000590
 80014f4:	200004d0 	.word	0x200004d0
 80014f8:	080078a8 	.word	0x080078a8
 80014fc:	20000514 	.word	0x20000514
 8001500:	080078c4 	.word	0x080078c4
 8001504:	20000518 	.word	0x20000518
 8001508:	080078e0 	.word	0x080078e0
 800150c:	2000051c 	.word	0x2000051c
 8001510:	080078fc 	.word	0x080078fc
 8001514:	20000520 	.word	0x20000520

08001518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b094      	sub	sp, #80	; 0x50
 800151c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151e:	f107 0320 	add.w	r3, r7, #32
 8001522:	2230      	movs	r2, #48	; 0x30
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f006 f8ce 	bl	80076c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <SystemClock_Config+0xcc>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	4a27      	ldr	r2, [pc, #156]	; (80015e4 <SystemClock_Config+0xcc>)
 8001546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154a:	6413      	str	r3, [r2, #64]	; 0x40
 800154c:	4b25      	ldr	r3, [pc, #148]	; (80015e4 <SystemClock_Config+0xcc>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001558:	2300      	movs	r3, #0
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <SystemClock_Config+0xd0>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a21      	ldr	r2, [pc, #132]	; (80015e8 <SystemClock_Config+0xd0>)
 8001562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <SystemClock_Config+0xd0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001574:	2301      	movs	r3, #1
 8001576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157e:	2302      	movs	r3, #2
 8001580:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001588:	2304      	movs	r3, #4
 800158a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800158c:	23a8      	movs	r3, #168	; 0xa8
 800158e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001590:	2302      	movs	r3, #2
 8001592:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001594:	2304      	movs	r3, #4
 8001596:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001598:	f107 0320 	add.w	r3, r7, #32
 800159c:	4618      	mov	r0, r3
 800159e:	f002 fc2d 	bl	8003dfc <HAL_RCC_OscConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015a8:	f000 fe4e 	bl	8002248 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ac:	230f      	movs	r3, #15
 80015ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b0:	2302      	movs	r3, #2
 80015b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	2105      	movs	r1, #5
 80015ca:	4618      	mov	r0, r3
 80015cc:	f002 fe8e 	bl	80042ec <HAL_RCC_ClockConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015d6:	f000 fe37 	bl	8002248 <Error_Handler>
  }
}
 80015da:	bf00      	nop
 80015dc:	3750      	adds	r7, #80	; 0x50
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40007000 	.word	0x40007000

080015ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015f2:	463b      	mov	r3, r7
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015fe:	4b21      	ldr	r3, [pc, #132]	; (8001684 <MX_ADC1_Init+0x98>)
 8001600:	4a21      	ldr	r2, [pc, #132]	; (8001688 <MX_ADC1_Init+0x9c>)
 8001602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001604:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <MX_ADC1_Init+0x98>)
 8001606:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800160a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800160c:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <MX_ADC1_Init+0x98>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001612:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <MX_ADC1_Init+0x98>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001618:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <MX_ADC1_Init+0x98>)
 800161a:	2200      	movs	r2, #0
 800161c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800161e:	4b19      	ldr	r3, [pc, #100]	; (8001684 <MX_ADC1_Init+0x98>)
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <MX_ADC1_Init+0x98>)
 8001628:	2200      	movs	r2, #0
 800162a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <MX_ADC1_Init+0x98>)
 800162e:	4a17      	ldr	r2, [pc, #92]	; (800168c <MX_ADC1_Init+0xa0>)
 8001630:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001632:	4b14      	ldr	r3, [pc, #80]	; (8001684 <MX_ADC1_Init+0x98>)
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <MX_ADC1_Init+0x98>)
 800163a:	2201      	movs	r2, #1
 800163c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <MX_ADC1_Init+0x98>)
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <MX_ADC1_Init+0x98>)
 8001648:	2201      	movs	r2, #1
 800164a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800164c:	480d      	ldr	r0, [pc, #52]	; (8001684 <MX_ADC1_Init+0x98>)
 800164e:	f001 f8f7 	bl	8002840 <HAL_ADC_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001658:	f000 fdf6 	bl	8002248 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800165c:	2306      	movs	r3, #6
 800165e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001660:	2301      	movs	r3, #1
 8001662:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001664:	2307      	movs	r3, #7
 8001666:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001668:	463b      	mov	r3, r7
 800166a:	4619      	mov	r1, r3
 800166c:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_ADC1_Init+0x98>)
 800166e:	f001 fa59 	bl	8002b24 <HAL_ADC_ConfigChannel>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001678:	f000 fde6 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800167c:	bf00      	nop
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000358 	.word	0x20000358
 8001688:	40012000 	.word	0x40012000
 800168c:	0f000001 	.word	0x0f000001

08001690 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001696:	f107 0308 	add.w	r3, r7, #8
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a4:	463b      	mov	r3, r7
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016ac:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <MX_TIM2_Init+0x94>)
 80016ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <MX_TIM2_Init+0x94>)
 80016b6:	2253      	movs	r2, #83	; 0x53
 80016b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ba:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <MX_TIM2_Init+0x94>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80016c0:	4b18      	ldr	r3, [pc, #96]	; (8001724 <MX_TIM2_Init+0x94>)
 80016c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c8:	4b16      	ldr	r3, [pc, #88]	; (8001724 <MX_TIM2_Init+0x94>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <MX_TIM2_Init+0x94>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016d4:	4813      	ldr	r0, [pc, #76]	; (8001724 <MX_TIM2_Init+0x94>)
 80016d6:	f003 f85b 	bl	8004790 <HAL_TIM_Base_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016e0:	f000 fdb2 	bl	8002248 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016ea:	f107 0308 	add.w	r3, r7, #8
 80016ee:	4619      	mov	r1, r3
 80016f0:	480c      	ldr	r0, [pc, #48]	; (8001724 <MX_TIM2_Init+0x94>)
 80016f2:	f003 fa15 	bl	8004b20 <HAL_TIM_ConfigClockSource>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016fc:	f000 fda4 	bl	8002248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001700:	2300      	movs	r3, #0
 8001702:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001708:	463b      	mov	r3, r7
 800170a:	4619      	mov	r1, r3
 800170c:	4805      	ldr	r0, [pc, #20]	; (8001724 <MX_TIM2_Init+0x94>)
 800170e:	f003 fc31 	bl	8004f74 <HAL_TIMEx_MasterConfigSynchronization>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001718:	f000 fd96 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800171c:	bf00      	nop
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000400 	.word	0x20000400

08001728 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <MX_USART1_UART_Init+0x50>)
 800172e:	4a13      	ldr	r2, [pc, #76]	; (800177c <MX_USART1_UART_Init+0x54>)
 8001730:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_USART1_UART_Init+0x50>)
 8001734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001738:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <MX_USART1_UART_Init+0x50>)
 800173c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001740:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001742:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <MX_USART1_UART_Init+0x50>)
 8001744:	2200      	movs	r2, #0
 8001746:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <MX_USART1_UART_Init+0x50>)
 800174a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800174e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <MX_USART1_UART_Init+0x50>)
 8001752:	220c      	movs	r2, #12
 8001754:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <MX_USART1_UART_Init+0x50>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <MX_USART1_UART_Init+0x50>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_USART1_UART_Init+0x50>)
 8001764:	f003 fc96 	bl	8005094 <HAL_UART_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 800176e:	f000 fd6b 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000448 	.word	0x20000448
 800177c:	40011000 	.word	0x40011000

08001780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 8001786:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <MX_USART2_UART_Init+0x50>)
 8001788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 800178c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 80017a6:	220c      	movs	r2, #12
 80017a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <MX_USART2_UART_Init+0x4c>)
 80017b8:	f003 fc6c 	bl	8005094 <HAL_UART_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017c2:	f000 fd41 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2000048c 	.word	0x2000048c
 80017d0:	40004400 	.word	0x40004400

080017d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_USART3_UART_Init+0x4c>)
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <MX_USART3_UART_Init+0x50>)
 80017dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <MX_USART3_UART_Init+0x4c>)
 80017e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MX_USART3_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_USART3_UART_Init+0x4c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <MX_USART3_UART_Init+0x4c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <MX_USART3_UART_Init+0x4c>)
 80017fa:	220c      	movs	r2, #12
 80017fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <MX_USART3_UART_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <MX_USART3_UART_Init+0x4c>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_USART3_UART_Init+0x4c>)
 800180c:	f003 fc42 	bl	8005094 <HAL_UART_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001816:	f000 fd17 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200004d0 	.word	0x200004d0
 8001824:	40004800 	.word	0x40004800

08001828 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <MX_DMA_Init+0x3c>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a0b      	ldr	r2, [pc, #44]	; (8001864 <MX_DMA_Init+0x3c>)
 8001838:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <MX_DMA_Init+0x3c>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2105      	movs	r1, #5
 800184e:	2038      	movs	r0, #56	; 0x38
 8001850:	f001 fcc0 	bl	80031d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001854:	2038      	movs	r0, #56	; 0x38
 8001856:	f001 fcd9 	bl	800320c <HAL_NVIC_EnableIRQ>

}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800

08001868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	4b30      	ldr	r3, [pc, #192]	; (8001944 <MX_GPIO_Init+0xdc>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a2f      	ldr	r2, [pc, #188]	; (8001944 <MX_GPIO_Init+0xdc>)
 8001888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <MX_GPIO_Init+0xdc>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	4b29      	ldr	r3, [pc, #164]	; (8001944 <MX_GPIO_Init+0xdc>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a28      	ldr	r2, [pc, #160]	; (8001944 <MX_GPIO_Init+0xdc>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b26      	ldr	r3, [pc, #152]	; (8001944 <MX_GPIO_Init+0xdc>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	603b      	str	r3, [r7, #0]
 80018ba:	4b22      	ldr	r3, [pc, #136]	; (8001944 <MX_GPIO_Init+0xdc>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a21      	ldr	r2, [pc, #132]	; (8001944 <MX_GPIO_Init+0xdc>)
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b1f      	ldr	r3, [pc, #124]	; (8001944 <MX_GPIO_Init+0xdc>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|CompassReset_Pin, GPIO_PIN_RESET);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2112      	movs	r1, #18
 80018d6:	481c      	ldr	r0, [pc, #112]	; (8001948 <MX_GPIO_Init+0xe0>)
 80018d8:	f002 fa5c 	bl	8003d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RelayKhanCap_GPIO_Port, RelayKhanCap_Pin, GPIO_PIN_RESET);
 80018dc:	2200      	movs	r2, #0
 80018de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018e2:	481a      	ldr	r0, [pc, #104]	; (800194c <MX_GPIO_Init+0xe4>)
 80018e4:	f002 fa56 	bl	8003d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin CompassReset_Pin */
  GPIO_InitStruct.Pin = LED_Pin|CompassReset_Pin;
 80018e8:	2312      	movs	r3, #18
 80018ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ec:	2301      	movs	r3, #1
 80018ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	4619      	mov	r1, r3
 80018fe:	4812      	ldr	r0, [pc, #72]	; (8001948 <MX_GPIO_Init+0xe0>)
 8001900:	f002 f894 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : CB_thanh_Pin CB_cot_Pin */
  GPIO_InitStruct.Pin = CB_thanh_Pin|CB_cot_Pin;
 8001904:	23a0      	movs	r3, #160	; 0xa0
 8001906:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001908:	2300      	movs	r3, #0
 800190a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	4619      	mov	r1, r3
 8001916:	480c      	ldr	r0, [pc, #48]	; (8001948 <MX_GPIO_Init+0xe0>)
 8001918:	f002 f888 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : RelayKhanCap_Pin */
  GPIO_InitStruct.Pin = RelayKhanCap_Pin;
 800191c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001922:	2301      	movs	r3, #1
 8001924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RelayKhanCap_GPIO_Port, &GPIO_InitStruct);
 800192e:	f107 030c 	add.w	r3, r7, #12
 8001932:	4619      	mov	r1, r3
 8001934:	4805      	ldr	r0, [pc, #20]	; (800194c <MX_GPIO_Init+0xe4>)
 8001936:	f002 f879 	bl	8003a2c <HAL_GPIO_Init>

}
 800193a:	bf00      	nop
 800193c:	3720      	adds	r7, #32
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	40020000 	.word	0x40020000
 800194c:	40020400 	.word	0x40020400

08001950 <batthanh>:

/* USER CODE BEGIN 4 */
void batthanh(void){
 8001950:	b580      	push	{r7, lr}
 8001952:	b088      	sub	sp, #32
 8001954:	af08      	add	r7, sp, #32
	v_t = 20;
 8001956:	4b19      	ldr	r3, [pc, #100]	; (80019bc <batthanh+0x6c>)
 8001958:	2214      	movs	r2, #20
 800195a:	601a      	str	r2, [r3, #0]
	forward = 2;
 800195c:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <batthanh+0x70>)
 800195e:	2202      	movs	r2, #2
 8001960:	601a      	str	r2, [r3, #0]
	while(1){
		if(HAL_GPIO_ReadPin(CB_thanh_GPIO_Port, CB_thanh_Pin)==0){
 8001962:	2120      	movs	r1, #32
 8001964:	4817      	ldr	r0, [pc, #92]	; (80019c4 <batthanh+0x74>)
 8001966:	f002 f9fd 	bl	8003d64 <HAL_GPIO_ReadPin>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1f8      	bne.n	8001962 <batthanh+0x12>
			v_t = 0;
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <batthanh+0x6c>)
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
			osDelay(1000);
 8001976:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800197a:	f004 fc6e 	bl	800625a <osDelay>

			forward = 0;
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <batthanh+0x70>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
			  RotatePid = 0;
 8001984:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <batthanh+0x78>)
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
			  ControlDriver(0, 1, 0, 90, 0, 1, 0, 90, 0, 1, 0, 90);
 800198a:	235a      	movs	r3, #90	; 0x5a
 800198c:	9307      	str	r3, [sp, #28]
 800198e:	2300      	movs	r3, #0
 8001990:	9306      	str	r3, [sp, #24]
 8001992:	2301      	movs	r3, #1
 8001994:	9305      	str	r3, [sp, #20]
 8001996:	2300      	movs	r3, #0
 8001998:	9304      	str	r3, [sp, #16]
 800199a:	235a      	movs	r3, #90	; 0x5a
 800199c:	9303      	str	r3, [sp, #12]
 800199e:	2300      	movs	r3, #0
 80019a0:	9302      	str	r3, [sp, #8]
 80019a2:	2301      	movs	r3, #1
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	2300      	movs	r3, #0
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	235a      	movs	r3, #90	; 0x5a
 80019ac:	2200      	movs	r2, #0
 80019ae:	2101      	movs	r1, #1
 80019b0:	2000      	movs	r0, #0
 80019b2:	f7ff fc61 	bl	8001278 <ControlDriver>
			  return;
 80019b6:	bf00      	nop
		}
	}
}
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000530 	.word	0x20000530
 80019c0:	2000052c 	.word	0x2000052c
 80019c4:	40020000 	.word	0x40020000
 80019c8:	20000578 	.word	0x20000578
 80019cc:	00000000 	.word	0x00000000

080019d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80019d0:	b5b0      	push	{r4, r5, r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af08      	add	r7, sp, #32
 80019d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)a, 1);
 80019d8:	2201      	movs	r2, #1
 80019da:	49b9      	ldr	r1, [pc, #740]	; (8001cc0 <StartDefaultTask+0x2f0>)
 80019dc:	48b9      	ldr	r0, [pc, #740]	; (8001cc4 <StartDefaultTask+0x2f4>)
 80019de:	f000 ff73 	bl	80028c8 <HAL_ADC_Start_DMA>
	  osDelay(5);
 80019e2:	2005      	movs	r0, #5
 80019e4:	f004 fc39 	bl	800625a <osDelay>
	  /*Nhấn nút F1*/
	  if(DataTayGame[7] == 128 && !DangThucThi){
 80019e8:	4bb7      	ldr	r3, [pc, #732]	; (8001cc8 <StartDefaultTask+0x2f8>)
 80019ea:	79db      	ldrb	r3, [r3, #7]
 80019ec:	2b80      	cmp	r3, #128	; 0x80
 80019ee:	f040 80c4 	bne.w	8001b7a <StartDefaultTask+0x1aa>
 80019f2:	4bb6      	ldr	r3, [pc, #728]	; (8001ccc <StartDefaultTask+0x2fc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f040 80bf 	bne.w	8001b7a <StartDefaultTask+0x1aa>

		  ControlDriver(0, 1, 0, 90, 0, 1, 0, 90, 0, 1, 0, 90);
 80019fc:	235a      	movs	r3, #90	; 0x5a
 80019fe:	9307      	str	r3, [sp, #28]
 8001a00:	2300      	movs	r3, #0
 8001a02:	9306      	str	r3, [sp, #24]
 8001a04:	2301      	movs	r3, #1
 8001a06:	9305      	str	r3, [sp, #20]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	9304      	str	r3, [sp, #16]
 8001a0c:	235a      	movs	r3, #90	; 0x5a
 8001a0e:	9303      	str	r3, [sp, #12]
 8001a10:	2300      	movs	r3, #0
 8001a12:	9302      	str	r3, [sp, #8]
 8001a14:	2301      	movs	r3, #1
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	235a      	movs	r3, #90	; 0x5a
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2101      	movs	r1, #1
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7ff fc28 	bl	8001278 <ControlDriver>
		  osDelay(1500);
 8001a28:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001a2c:	f004 fc15 	bl	800625a <osDelay>
		  goc_target = 0;
 8001a30:	4ba7      	ldr	r3, [pc, #668]	; (8001cd0 <StartDefaultTask+0x300>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]


		  forward = 1;
 8001a36:	4ba7      	ldr	r3, [pc, #668]	; (8001cd4 <StartDefaultTask+0x304>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
		  RotatePid = 0;
 8001a3c:	4ba6      	ldr	r3, [pc, #664]	; (8001cd8 <StartDefaultTask+0x308>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
		  v_t = 120;
 8001a42:	4ba6      	ldr	r3, [pc, #664]	; (8001cdc <StartDefaultTask+0x30c>)
 8001a44:	2278      	movs	r2, #120	; 0x78
 8001a46:	601a      	str	r2, [r3, #0]
		  osDelay(3800);
 8001a48:	f640 60d8 	movw	r0, #3800	; 0xed8
 8001a4c:	f004 fc05 	bl	800625a <osDelay>
		  v_t = 0;
 8001a50:	4ba2      	ldr	r3, [pc, #648]	; (8001cdc <StartDefaultTask+0x30c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
		  osDelay(500);
 8001a56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a5a:	f004 fbfe 	bl	800625a <osDelay>
		  forward = 0;
 8001a5e:	4b9d      	ldr	r3, [pc, #628]	; (8001cd4 <StartDefaultTask+0x304>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
		  RotatePid = 0;
 8001a64:	4b9c      	ldr	r3, [pc, #624]	; (8001cd8 <StartDefaultTask+0x308>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
		  ControlDriver(0, 1, 0, (90-0.8*e1), 0, 1, 0, (90-0.8*e1), 0, 1, 0, (90+0.8*e1));
 8001a6a:	4b9d      	ldr	r3, [pc, #628]	; (8001ce0 <StartDefaultTask+0x310>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fd00 	bl	8000474 <__aeabi_i2d>
 8001a74:	a390      	add	r3, pc, #576	; (adr r3, 8001cb8 <StartDefaultTask+0x2e8>)
 8001a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7a:	f7fe fd65 	bl	8000548 <__aeabi_dmul>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	f04f 0000 	mov.w	r0, #0
 8001a86:	4997      	ldr	r1, [pc, #604]	; (8001ce4 <StartDefaultTask+0x314>)
 8001a88:	f7fe fba6 	bl	80001d8 <__aeabi_dsub>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f7ff f81a 	bl	8000acc <__aeabi_d2uiz>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	b29d      	uxth	r5, r3
 8001a9c:	4b90      	ldr	r3, [pc, #576]	; (8001ce0 <StartDefaultTask+0x310>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fce7 	bl	8000474 <__aeabi_i2d>
 8001aa6:	a384      	add	r3, pc, #528	; (adr r3, 8001cb8 <StartDefaultTask+0x2e8>)
 8001aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aac:	f7fe fd4c 	bl	8000548 <__aeabi_dmul>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	f04f 0000 	mov.w	r0, #0
 8001ab8:	498a      	ldr	r1, [pc, #552]	; (8001ce4 <StartDefaultTask+0x314>)
 8001aba:	f7fe fb8d 	bl	80001d8 <__aeabi_dsub>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f7ff f801 	bl	8000acc <__aeabi_d2uiz>
 8001aca:	4603      	mov	r3, r0
 8001acc:	b29c      	uxth	r4, r3
 8001ace:	4b84      	ldr	r3, [pc, #528]	; (8001ce0 <StartDefaultTask+0x310>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fcce 	bl	8000474 <__aeabi_i2d>
 8001ad8:	a377      	add	r3, pc, #476	; (adr r3, 8001cb8 <StartDefaultTask+0x2e8>)
 8001ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ade:	f7fe fd33 	bl	8000548 <__aeabi_dmul>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	4b7d      	ldr	r3, [pc, #500]	; (8001ce4 <StartDefaultTask+0x314>)
 8001af0:	f7fe fb74 	bl	80001dc <__adddf3>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f7fe ffe6 	bl	8000acc <__aeabi_d2uiz>
 8001b00:	4603      	mov	r3, r0
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	9307      	str	r3, [sp, #28]
 8001b06:	2300      	movs	r3, #0
 8001b08:	9306      	str	r3, [sp, #24]
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	9305      	str	r3, [sp, #20]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	9304      	str	r3, [sp, #16]
 8001b12:	9403      	str	r4, [sp, #12]
 8001b14:	2300      	movs	r3, #0
 8001b16:	9302      	str	r3, [sp, #8]
 8001b18:	2301      	movs	r3, #1
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	462b      	mov	r3, r5
 8001b22:	2200      	movs	r2, #0
 8001b24:	2101      	movs	r1, #1
 8001b26:	2000      	movs	r0, #0
 8001b28:	f7ff fba6 	bl	8001278 <ControlDriver>
		  osDelay(1000);
 8001b2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b30:	f004 fb93 	bl	800625a <osDelay>
		  ControlDriver(0, 1, 0, (90), 0, 1, 0, (90), 0, 1, 0, (90));
 8001b34:	235a      	movs	r3, #90	; 0x5a
 8001b36:	9307      	str	r3, [sp, #28]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	9306      	str	r3, [sp, #24]
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	9305      	str	r3, [sp, #20]
 8001b40:	2300      	movs	r3, #0
 8001b42:	9304      	str	r3, [sp, #16]
 8001b44:	235a      	movs	r3, #90	; 0x5a
 8001b46:	9303      	str	r3, [sp, #12]
 8001b48:	2300      	movs	r3, #0
 8001b4a:	9302      	str	r3, [sp, #8]
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	2300      	movs	r3, #0
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	235a      	movs	r3, #90	; 0x5a
 8001b56:	2200      	movs	r2, #0
 8001b58:	2101      	movs	r1, #1
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f7ff fb8c 	bl	8001278 <ControlDriver>
		  osDelay(2000);
 8001b60:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b64:	f004 fb79 	bl	800625a <osDelay>
		  goc_target2 = 0;
 8001b68:	4b5f      	ldr	r3, [pc, #380]	; (8001ce8 <StartDefaultTask+0x318>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
		  RotatePid = 1;
 8001b6e:	4b5a      	ldr	r3, [pc, #360]	; (8001cd8 <StartDefaultTask+0x308>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
		 DangThucThi = 1;
 8001b74:	4b55      	ldr	r3, [pc, #340]	; (8001ccc <StartDefaultTask+0x2fc>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	601a      	str	r2, [r3, #0]
	  }

////
	  /*Nhấn nút F2*/
	  if(DataTayGame[7] == 64 && !DangThucThi){
 8001b7a:	4b53      	ldr	r3, [pc, #332]	; (8001cc8 <StartDefaultTask+0x2f8>)
 8001b7c:	79db      	ldrb	r3, [r3, #7]
 8001b7e:	2b40      	cmp	r3, #64	; 0x40
 8001b80:	d13c      	bne.n	8001bfc <StartDefaultTask+0x22c>
 8001b82:	4b52      	ldr	r3, [pc, #328]	; (8001ccc <StartDefaultTask+0x2fc>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d138      	bne.n	8001bfc <StartDefaultTask+0x22c>
		  forward = 0;
 8001b8a:	4b52      	ldr	r3, [pc, #328]	; (8001cd4 <StartDefaultTask+0x304>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
		  RotatePid = 0;
 8001b90:	4b51      	ldr	r3, [pc, #324]	; (8001cd8 <StartDefaultTask+0x308>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
		  ControlDriver(0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0);
 8001b96:	2300      	movs	r3, #0
 8001b98:	9307      	str	r3, [sp, #28]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	9306      	str	r3, [sp, #24]
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	9305      	str	r3, [sp, #20]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	9304      	str	r3, [sp, #16]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	9303      	str	r3, [sp, #12]
 8001baa:	2300      	movs	r3, #0
 8001bac:	9302      	str	r3, [sp, #8]
 8001bae:	2301      	movs	r3, #1
 8001bb0:	9301      	str	r3, [sp, #4]
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2101      	movs	r1, #1
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	f7ff fb5b 	bl	8001278 <ControlDriver>
		  osDelay(2000);
 8001bc2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bc6:	f004 fb48 	bl	800625a <osDelay>
		  ControlDriver(3, 1, 0, 0, 3, 1, 0, 0, 3, 1, 0, 0);
 8001bca:	2300      	movs	r3, #0
 8001bcc:	9307      	str	r3, [sp, #28]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	9306      	str	r3, [sp, #24]
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	9305      	str	r3, [sp, #20]
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	9304      	str	r3, [sp, #16]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	9303      	str	r3, [sp, #12]
 8001bde:	2300      	movs	r3, #0
 8001be0:	9302      	str	r3, [sp, #8]
 8001be2:	2301      	movs	r3, #1
 8001be4:	9301      	str	r3, [sp, #4]
 8001be6:	2303      	movs	r3, #3
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	2300      	movs	r3, #0
 8001bec:	2200      	movs	r2, #0
 8001bee:	2101      	movs	r1, #1
 8001bf0:	2003      	movs	r0, #3
 8001bf2:	f7ff fb41 	bl	8001278 <ControlDriver>
		  DangThucThi = 1;
 8001bf6:	4b35      	ldr	r3, [pc, #212]	; (8001ccc <StartDefaultTask+0x2fc>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
	  }
////
////	  /*Nhấn nút F3*/
		  if(DataTayGame[7] == 32 && !DangThucThi){
 8001bfc:	4b32      	ldr	r3, [pc, #200]	; (8001cc8 <StartDefaultTask+0x2f8>)
 8001bfe:	79db      	ldrb	r3, [r3, #7]
 8001c00:	2b20      	cmp	r3, #32
 8001c02:	d151      	bne.n	8001ca8 <StartDefaultTask+0x2d8>
 8001c04:	4b31      	ldr	r3, [pc, #196]	; (8001ccc <StartDefaultTask+0x2fc>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d14d      	bne.n	8001ca8 <StartDefaultTask+0x2d8>
			  forward = 0;
 8001c0c:	4b31      	ldr	r3, [pc, #196]	; (8001cd4 <StartDefaultTask+0x304>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
			  RotatePid = 0;
 8001c12:	4b31      	ldr	r3, [pc, #196]	; (8001cd8 <StartDefaultTask+0x308>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
			  ControlDriver(0, 1, 0, 57, 0, -1, 0, 123, 0, 1, 0, 189);
 8001c18:	23bd      	movs	r3, #189	; 0xbd
 8001c1a:	9307      	str	r3, [sp, #28]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9306      	str	r3, [sp, #24]
 8001c20:	2301      	movs	r3, #1
 8001c22:	9305      	str	r3, [sp, #20]
 8001c24:	2300      	movs	r3, #0
 8001c26:	9304      	str	r3, [sp, #16]
 8001c28:	237b      	movs	r3, #123	; 0x7b
 8001c2a:	9303      	str	r3, [sp, #12]
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	9302      	str	r3, [sp, #8]
 8001c30:	f04f 33ff 	mov.w	r3, #4294967295
 8001c34:	9301      	str	r3, [sp, #4]
 8001c36:	2300      	movs	r3, #0
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2339      	movs	r3, #57	; 0x39
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2101      	movs	r1, #1
 8001c40:	2000      	movs	r0, #0
 8001c42:	f7ff fb19 	bl	8001278 <ControlDriver>

			  goc_target2 = -90;
 8001c46:	4b28      	ldr	r3, [pc, #160]	; (8001ce8 <StartDefaultTask+0x318>)
 8001c48:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8001c4c:	601a      	str	r2, [r3, #0]
			  RotatePid = 1;
 8001c4e:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <StartDefaultTask+0x308>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	601a      	str	r2, [r3, #0]
			  osDelay(8000);
 8001c54:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001c58:	f004 faff 	bl	800625a <osDelay>

			  RotatePid = 0;
 8001c5c:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <StartDefaultTask+0x308>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
			  ControlDriver(0, 1, 0, 30, 0, 1, 0, 30, 0, 1, 0, 30);
 8001c62:	231e      	movs	r3, #30
 8001c64:	9307      	str	r3, [sp, #28]
 8001c66:	2300      	movs	r3, #0
 8001c68:	9306      	str	r3, [sp, #24]
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	9305      	str	r3, [sp, #20]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	9304      	str	r3, [sp, #16]
 8001c72:	231e      	movs	r3, #30
 8001c74:	9303      	str	r3, [sp, #12]
 8001c76:	2300      	movs	r3, #0
 8001c78:	9302      	str	r3, [sp, #8]
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	9301      	str	r3, [sp, #4]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	231e      	movs	r3, #30
 8001c84:	2200      	movs	r2, #0
 8001c86:	2101      	movs	r1, #1
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f7ff faf5 	bl	8001278 <ControlDriver>
			  osDelay(2000);
 8001c8e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c92:	f004 fae2 	bl	800625a <osDelay>

			  goc_target = -90;
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <StartDefaultTask+0x300>)
 8001c98:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8001c9c:	601a      	str	r2, [r3, #0]
			  batthanh();
 8001c9e:	f7ff fe57 	bl	8001950 <batthanh>
			  DangThucThi = 1;
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <StartDefaultTask+0x2fc>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
		  }
////
//	  /*Nhấn nút F4*/
	  if(DataTayGame[7] == 16 && !DangThucThi){
 8001ca8:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <StartDefaultTask+0x2f8>)
 8001caa:	79db      	ldrb	r3, [r3, #7]
 8001cac:	2b10      	cmp	r3, #16
 8001cae:	d141      	bne.n	8001d34 <StartDefaultTask+0x364>
 8001cb0:	e01c      	b.n	8001cec <StartDefaultTask+0x31c>
 8001cb2:	bf00      	nop
 8001cb4:	f3af 8000 	nop.w
 8001cb8:	9999999a 	.word	0x9999999a
 8001cbc:	3fe99999 	.word	0x3fe99999
 8001cc0:	200005d4 	.word	0x200005d4
 8001cc4:	20000358 	.word	0x20000358
 8001cc8:	2000059c 	.word	0x2000059c
 8001ccc:	200005ac 	.word	0x200005ac
 8001cd0:	20000524 	.word	0x20000524
 8001cd4:	2000052c 	.word	0x2000052c
 8001cd8:	20000578 	.word	0x20000578
 8001cdc:	20000530 	.word	0x20000530
 8001ce0:	20000540 	.word	0x20000540
 8001ce4:	40568000 	.word	0x40568000
 8001ce8:	2000053c 	.word	0x2000053c
 8001cec:	4b7e      	ldr	r3, [pc, #504]	; (8001ee8 <StartDefaultTask+0x518>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d11f      	bne.n	8001d34 <StartDefaultTask+0x364>
		  forward = 0;
 8001cf4:	4b7d      	ldr	r3, [pc, #500]	; (8001eec <StartDefaultTask+0x51c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
		  RotatePid = 0;
 8001cfa:	4b7d      	ldr	r3, [pc, #500]	; (8001ef0 <StartDefaultTask+0x520>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]

		  ControlDriver(0, 1, 0, 57, 0, -1, 0, 123, 0, 1, 0, 189);
 8001d00:	23bd      	movs	r3, #189	; 0xbd
 8001d02:	9307      	str	r3, [sp, #28]
 8001d04:	2300      	movs	r3, #0
 8001d06:	9306      	str	r3, [sp, #24]
 8001d08:	2301      	movs	r3, #1
 8001d0a:	9305      	str	r3, [sp, #20]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	9304      	str	r3, [sp, #16]
 8001d10:	237b      	movs	r3, #123	; 0x7b
 8001d12:	9303      	str	r3, [sp, #12]
 8001d14:	2300      	movs	r3, #0
 8001d16:	9302      	str	r3, [sp, #8]
 8001d18:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1c:	9301      	str	r3, [sp, #4]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	2339      	movs	r3, #57	; 0x39
 8001d24:	2200      	movs	r2, #0
 8001d26:	2101      	movs	r1, #1
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f7ff faa5 	bl	8001278 <ControlDriver>

	  	  DangThucThi = 1;
 8001d2e:	4b6e      	ldr	r3, [pc, #440]	; (8001ee8 <StartDefaultTask+0x518>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	601a      	str	r2, [r3, #0]




	  /*Nhấn nút F5*/
	  if(DataTayGame[7] == 8 && !DangThucThi){
 8001d34:	4b6f      	ldr	r3, [pc, #444]	; (8001ef4 <StartDefaultTask+0x524>)
 8001d36:	79db      	ldrb	r3, [r3, #7]
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	f040 8081 	bne.w	8001e40 <StartDefaultTask+0x470>
 8001d3e:	4b6a      	ldr	r3, [pc, #424]	; (8001ee8 <StartDefaultTask+0x518>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d17c      	bne.n	8001e40 <StartDefaultTask+0x470>
		  forward = 0;
 8001d46:	4b69      	ldr	r3, [pc, #420]	; (8001eec <StartDefaultTask+0x51c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
		  RotatePid = 0;
 8001d4c:	4b68      	ldr	r3, [pc, #416]	; (8001ef0 <StartDefaultTask+0x520>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
		  ControlDriver(0, 1, 0, 189, 0, 1, 0, 189, 0, 1, 0, 189);
 8001d52:	23bd      	movs	r3, #189	; 0xbd
 8001d54:	9307      	str	r3, [sp, #28]
 8001d56:	2300      	movs	r3, #0
 8001d58:	9306      	str	r3, [sp, #24]
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	9305      	str	r3, [sp, #20]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	9304      	str	r3, [sp, #16]
 8001d62:	23bd      	movs	r3, #189	; 0xbd
 8001d64:	9303      	str	r3, [sp, #12]
 8001d66:	2300      	movs	r3, #0
 8001d68:	9302      	str	r3, [sp, #8]
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	23bd      	movs	r3, #189	; 0xbd
 8001d74:	2200      	movs	r2, #0
 8001d76:	2101      	movs	r1, #1
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f7ff fa7d 	bl	8001278 <ControlDriver>
		  osDelay(2000);
 8001d7e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d82:	f004 fa6a 	bl	800625a <osDelay>
		  goc_target = 0;
 8001d86:	4b5c      	ldr	r3, [pc, #368]	; (8001ef8 <StartDefaultTask+0x528>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
		  v_t = -90;
 8001d8c:	4b5b      	ldr	r3, [pc, #364]	; (8001efc <StartDefaultTask+0x52c>)
 8001d8e:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8001d92:	601a      	str	r2, [r3, #0]
		  forward = 3 ;
 8001d94:	4b55      	ldr	r3, [pc, #340]	; (8001eec <StartDefaultTask+0x51c>)
 8001d96:	2203      	movs	r2, #3
 8001d98:	601a      	str	r2, [r3, #0]
		  while(a[0]>1000){
 8001d9a:	e026      	b.n	8001dea <StartDefaultTask+0x41a>
			  if(DataTayGame[2] == 128 && !DangThucThi){
 8001d9c:	4b55      	ldr	r3, [pc, #340]	; (8001ef4 <StartDefaultTask+0x524>)
 8001d9e:	789b      	ldrb	r3, [r3, #2]
 8001da0:	2b80      	cmp	r3, #128	; 0x80
 8001da2:	d10b      	bne.n	8001dbc <StartDefaultTask+0x3ec>
 8001da4:	4b50      	ldr	r3, [pc, #320]	; (8001ee8 <StartDefaultTask+0x518>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d107      	bne.n	8001dbc <StartDefaultTask+0x3ec>
				  goc_target ++;
 8001dac:	4b52      	ldr	r3, [pc, #328]	; (8001ef8 <StartDefaultTask+0x528>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	3301      	adds	r3, #1
 8001db2:	4a51      	ldr	r2, [pc, #324]	; (8001ef8 <StartDefaultTask+0x528>)
 8001db4:	6013      	str	r3, [r2, #0]
				  DangThucThi =1;
 8001db6:	4b4c      	ldr	r3, [pc, #304]	; (8001ee8 <StartDefaultTask+0x518>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	601a      	str	r2, [r3, #0]
			  }
			  if(DataTayGame[2] == 32 && !DangThucThi){
 8001dbc:	4b4d      	ldr	r3, [pc, #308]	; (8001ef4 <StartDefaultTask+0x524>)
 8001dbe:	789b      	ldrb	r3, [r3, #2]
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d10b      	bne.n	8001ddc <StartDefaultTask+0x40c>
 8001dc4:	4b48      	ldr	r3, [pc, #288]	; (8001ee8 <StartDefaultTask+0x518>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d107      	bne.n	8001ddc <StartDefaultTask+0x40c>
				  goc_target --;
 8001dcc:	4b4a      	ldr	r3, [pc, #296]	; (8001ef8 <StartDefaultTask+0x528>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	4a49      	ldr	r2, [pc, #292]	; (8001ef8 <StartDefaultTask+0x528>)
 8001dd4:	6013      	str	r3, [r2, #0]
				  DangThucThi =1;
 8001dd6:	4b44      	ldr	r3, [pc, #272]	; (8001ee8 <StartDefaultTask+0x518>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
			  }
			  if(DataTayGame[2] == 0){
 8001ddc:	4b45      	ldr	r3, [pc, #276]	; (8001ef4 <StartDefaultTask+0x524>)
 8001dde:	789b      	ldrb	r3, [r3, #2]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d102      	bne.n	8001dea <StartDefaultTask+0x41a>
				  DangThucThi = 0;
 8001de4:	4b40      	ldr	r3, [pc, #256]	; (8001ee8 <StartDefaultTask+0x518>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
		  while(a[0]>1000){
 8001dea:	4b45      	ldr	r3, [pc, #276]	; (8001f00 <StartDefaultTask+0x530>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001df2:	d8d3      	bhi.n	8001d9c <StartDefaultTask+0x3cc>
			  }

		  }
		  v_t = 0;
 8001df4:	4b41      	ldr	r3, [pc, #260]	; (8001efc <StartDefaultTask+0x52c>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
		osDelay(1000);
 8001dfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dfe:	f004 fa2c 	bl	800625a <osDelay>

		forward = 0;
 8001e02:	4b3a      	ldr	r3, [pc, #232]	; (8001eec <StartDefaultTask+0x51c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
		  RotatePid = 0;
 8001e08:	4b39      	ldr	r3, [pc, #228]	; (8001ef0 <StartDefaultTask+0x520>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
		  ControlDriver(0, 1, 0, 189, 0, 1, 0, 189, 0, 1, 0, 189);
 8001e0e:	23bd      	movs	r3, #189	; 0xbd
 8001e10:	9307      	str	r3, [sp, #28]
 8001e12:	2300      	movs	r3, #0
 8001e14:	9306      	str	r3, [sp, #24]
 8001e16:	2301      	movs	r3, #1
 8001e18:	9305      	str	r3, [sp, #20]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	9304      	str	r3, [sp, #16]
 8001e1e:	23bd      	movs	r3, #189	; 0xbd
 8001e20:	9303      	str	r3, [sp, #12]
 8001e22:	2300      	movs	r3, #0
 8001e24:	9302      	str	r3, [sp, #8]
 8001e26:	2301      	movs	r3, #1
 8001e28:	9301      	str	r3, [sp, #4]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	23bd      	movs	r3, #189	; 0xbd
 8001e30:	2200      	movs	r2, #0
 8001e32:	2101      	movs	r1, #1
 8001e34:	2000      	movs	r0, #0
 8001e36:	f7ff fa1f 	bl	8001278 <ControlDriver>
//		  osDelay(4000);
//		  v_t = 0;
//		  osDelay(1000);

	  	  DangThucThi = 1;
 8001e3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ee8 <StartDefaultTask+0x518>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
	  }
//
	  /*Nhấn nút F8*/
	  if(DataTayGame[7] == 4 && !DangThucThi){
 8001e40:	4b2c      	ldr	r3, [pc, #176]	; (8001ef4 <StartDefaultTask+0x524>)
 8001e42:	79db      	ldrb	r3, [r3, #7]
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d144      	bne.n	8001ed2 <StartDefaultTask+0x502>
 8001e48:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <StartDefaultTask+0x518>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d140      	bne.n	8001ed2 <StartDefaultTask+0x502>
		  i1+=1;
 8001e50:	4b2c      	ldr	r3, [pc, #176]	; (8001f04 <StartDefaultTask+0x534>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	3301      	adds	r3, #1
 8001e56:	4a2b      	ldr	r2, [pc, #172]	; (8001f04 <StartDefaultTask+0x534>)
 8001e58:	6013      	str	r3, [r2, #0]
					  if((i1%2 == 0)&&(i1 != 0)){
 8001e5a:	4b2a      	ldr	r3, [pc, #168]	; (8001f04 <StartDefaultTask+0x534>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d107      	bne.n	8001e76 <StartDefaultTask+0x4a6>
 8001e66:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <StartDefaultTask+0x534>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <StartDefaultTask+0x4a6>
						  goc_target2 = 0;
 8001e6e:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <StartDefaultTask+0x538>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	e009      	b.n	8001e8a <StartDefaultTask+0x4ba>
					  }
					  else if(i1%2 != 0 ){
 8001e76:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <StartDefaultTask+0x534>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <StartDefaultTask+0x4ba>
						  goc_target2 = -20;
 8001e82:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <StartDefaultTask+0x538>)
 8001e84:	f06f 0213 	mvn.w	r2, #19
 8001e88:	601a      	str	r2, [r3, #0]
					  }
//	  goc_target2  -= 90;
		  forward = 0;
 8001e8a:	4b18      	ldr	r3, [pc, #96]	; (8001eec <StartDefaultTask+0x51c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
		  ControlDriver(0, 1, 0, 57, 0, -1, 0, 123, 0, 1, 0, 189);
 8001e90:	23bd      	movs	r3, #189	; 0xbd
 8001e92:	9307      	str	r3, [sp, #28]
 8001e94:	2300      	movs	r3, #0
 8001e96:	9306      	str	r3, [sp, #24]
 8001e98:	2301      	movs	r3, #1
 8001e9a:	9305      	str	r3, [sp, #20]
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	9304      	str	r3, [sp, #16]
 8001ea0:	237b      	movs	r3, #123	; 0x7b
 8001ea2:	9303      	str	r3, [sp, #12]
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	9302      	str	r3, [sp, #8]
 8001ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8001eac:	9301      	str	r3, [sp, #4]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	2339      	movs	r3, #57	; 0x39
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f7ff f9dd 	bl	8001278 <ControlDriver>
		  osDelay(1000);
 8001ebe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ec2:	f004 f9ca 	bl	800625a <osDelay>
		  RotatePid = 1;
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <StartDefaultTask+0x520>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
//		  ControlDriver(0, -1, 500, 90, 0, -1, 500, 90, 0, -1, 500, 90);
//		  DangThucThi = 1;

//		  ControlDriver(0, -1, 500, 60, 0, 1, 500, 120, 0, -1, 500, 180);
//
		  DangThucThi = 1;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <StartDefaultTask+0x518>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]
	  }

	  if(DataTayGame[7] == 0){
 8001ed2:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <StartDefaultTask+0x524>)
 8001ed4:	79db      	ldrb	r3, [r3, #7]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d102      	bne.n	8001ee0 <StartDefaultTask+0x510>
		  DangThucThi = 0;
 8001eda:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <StartDefaultTask+0x518>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
	  }


	  osDelay(1);
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	f004 f9ba 	bl	800625a <osDelay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)a, 1);
 8001ee6:	e577      	b.n	80019d8 <StartDefaultTask+0x8>
 8001ee8:	200005ac 	.word	0x200005ac
 8001eec:	2000052c 	.word	0x2000052c
 8001ef0:	20000578 	.word	0x20000578
 8001ef4:	2000059c 	.word	0x2000059c
 8001ef8:	20000524 	.word	0x20000524
 8001efc:	20000530 	.word	0x20000530
 8001f00:	200005d4 	.word	0x200005d4
 8001f04:	20000534 	.word	0x20000534
 8001f08:	2000053c 	.word	0x2000053c

08001f0c <TaskBlinkLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskBlinkLed */
void TaskBlinkLed(void const * argument)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
//	  System.CompassStatus = HAL_GPIO_ReadPin(CompassReady_GPIO_Port, CompassReady_Pin);
	  if(GocRobot != -999){
 8001f14:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <TaskBlinkLed+0x40>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0d      	ldr	r2, [pc, #52]	; (8001f50 <TaskBlinkLed+0x44>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00a      	beq.n	8001f34 <TaskBlinkLed+0x28>
		  System.CompassStatus = 1;
 8001f1e:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <TaskBlinkLed+0x48>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	605a      	str	r2, [r3, #4]
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001f24:	2102      	movs	r1, #2
 8001f26:	480c      	ldr	r0, [pc, #48]	; (8001f58 <TaskBlinkLed+0x4c>)
 8001f28:	f001 ff4d 	bl	8003dc6 <HAL_GPIO_TogglePin>
		  osDelay(50);
 8001f2c:	2032      	movs	r0, #50	; 0x32
 8001f2e:	f004 f994 	bl	800625a <osDelay>
 8001f32:	e7ef      	b.n	8001f14 <TaskBlinkLed+0x8>
	  }
	  else {
		  System.CompassStatus = 0;
 8001f34:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <TaskBlinkLed+0x48>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	605a      	str	r2, [r3, #4]
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001f3a:	2102      	movs	r1, #2
 8001f3c:	4806      	ldr	r0, [pc, #24]	; (8001f58 <TaskBlinkLed+0x4c>)
 8001f3e:	f001 ff42 	bl	8003dc6 <HAL_GPIO_TogglePin>
		  osDelay(500);
 8001f42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f46:	f004 f988 	bl	800625a <osDelay>
	  if(GocRobot != -999){
 8001f4a:	e7e3      	b.n	8001f14 <TaskBlinkLed+0x8>
 8001f4c:	200005a8 	.word	0x200005a8
 8001f50:	fffffc19 	.word	0xfffffc19
 8001f54:	20000588 	.word	0x20000588
 8001f58:	40020000 	.word	0x40020000

08001f5c <TaskUART>:
*/

char DebugStr[200];
/* USER CODE END Header_TaskUART */
void TaskUART(void const * argument)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	  snprintf(DebugStr, "{GocRobot: %d, U: %d, E: %d, EI: %d}", GocRobot, u, e, ei);
//	  HAL_UART_Transmit(&huart3, (uint8_t *) DebugStr, 199, 1000);
	  osDelay(100);
 8001f64:	2064      	movs	r0, #100	; 0x64
 8001f66:	f004 f978 	bl	800625a <osDelay>
 8001f6a:	e7fb      	b.n	8001f64 <TaskUART+0x8>
 8001f6c:	0000      	movs	r0, r0
	...

08001f70 <TaskXoayLaBan>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskXoayLaBan */
void TaskXoayLaBan(void const * argument)
{
 8001f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f74:	b08b      	sub	sp, #44	; 0x2c
 8001f76:	af08      	add	r7, sp, #32
 8001f78:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskXoayLaBan */
  /* Infinite loop */
  for(;;)
  {

	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)a, 1);
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	4996      	ldr	r1, [pc, #600]	; (80021d8 <TaskXoayLaBan+0x268>)
 8001f7e:	4897      	ldr	r0, [pc, #604]	; (80021dc <TaskXoayLaBan+0x26c>)
 8001f80:	f000 fca2 	bl	80028c8 <HAL_ADC_Start_DMA>
	  osDelay(5);
 8001f84:	2005      	movs	r0, #5
 8001f86:	f004 f968 	bl	800625a <osDelay>
	  if(forward == 1){
 8001f8a:	4b95      	ldr	r3, [pc, #596]	; (80021e0 <TaskXoayLaBan+0x270>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d170      	bne.n	8002074 <TaskXoayLaBan+0x104>
	  		  ControlDriver(1, -1, v_t, (90-0.8*e1), 1, -1, v_t, (90-0.8*e1), 1, -1, v_t, (90+0.8*e1));
 8001f92:	4b94      	ldr	r3, [pc, #592]	; (80021e4 <TaskXoayLaBan+0x274>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	fa1f f883 	uxth.w	r8, r3
 8001f9a:	4b93      	ldr	r3, [pc, #588]	; (80021e8 <TaskXoayLaBan+0x278>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fa68 	bl	8000474 <__aeabi_i2d>
 8001fa4:	a388      	add	r3, pc, #544	; (adr r3, 80021c8 <TaskXoayLaBan+0x258>)
 8001fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001faa:	f7fe facd 	bl	8000548 <__aeabi_dmul>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	f04f 0000 	mov.w	r0, #0
 8001fb6:	498d      	ldr	r1, [pc, #564]	; (80021ec <TaskXoayLaBan+0x27c>)
 8001fb8:	f7fe f90e 	bl	80001d8 <__aeabi_dsub>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f7fe fd82 	bl	8000acc <__aeabi_d2uiz>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	fa1f f983 	uxth.w	r9, r3
 8001fce:	4b85      	ldr	r3, [pc, #532]	; (80021e4 <TaskXoayLaBan+0x274>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	b29c      	uxth	r4, r3
 8001fd4:	4b84      	ldr	r3, [pc, #528]	; (80021e8 <TaskXoayLaBan+0x278>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fa4b 	bl	8000474 <__aeabi_i2d>
 8001fde:	a37a      	add	r3, pc, #488	; (adr r3, 80021c8 <TaskXoayLaBan+0x258>)
 8001fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe4:	f7fe fab0 	bl	8000548 <__aeabi_dmul>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	f04f 0000 	mov.w	r0, #0
 8001ff0:	497e      	ldr	r1, [pc, #504]	; (80021ec <TaskXoayLaBan+0x27c>)
 8001ff2:	f7fe f8f1 	bl	80001d8 <__aeabi_dsub>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f7fe fd65 	bl	8000acc <__aeabi_d2uiz>
 8002002:	4603      	mov	r3, r0
 8002004:	b29d      	uxth	r5, r3
 8002006:	4b77      	ldr	r3, [pc, #476]	; (80021e4 <TaskXoayLaBan+0x274>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	b29e      	uxth	r6, r3
 800200c:	4b76      	ldr	r3, [pc, #472]	; (80021e8 <TaskXoayLaBan+0x278>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fa2f 	bl	8000474 <__aeabi_i2d>
 8002016:	a36c      	add	r3, pc, #432	; (adr r3, 80021c8 <TaskXoayLaBan+0x258>)
 8002018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201c:	f7fe fa94 	bl	8000548 <__aeabi_dmul>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	4b6f      	ldr	r3, [pc, #444]	; (80021ec <TaskXoayLaBan+0x27c>)
 800202e:	f7fe f8d5 	bl	80001dc <__adddf3>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	f7fe fd47 	bl	8000acc <__aeabi_d2uiz>
 800203e:	4603      	mov	r3, r0
 8002040:	b29b      	uxth	r3, r3
 8002042:	9307      	str	r3, [sp, #28]
 8002044:	9606      	str	r6, [sp, #24]
 8002046:	f04f 33ff 	mov.w	r3, #4294967295
 800204a:	9305      	str	r3, [sp, #20]
 800204c:	2301      	movs	r3, #1
 800204e:	9304      	str	r3, [sp, #16]
 8002050:	9503      	str	r5, [sp, #12]
 8002052:	9402      	str	r4, [sp, #8]
 8002054:	f04f 33ff 	mov.w	r3, #4294967295
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	2301      	movs	r3, #1
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	464b      	mov	r3, r9
 8002060:	4642      	mov	r2, r8
 8002062:	f04f 31ff 	mov.w	r1, #4294967295
 8002066:	2001      	movs	r0, #1
 8002068:	f7ff f906 	bl	8001278 <ControlDriver>
	  		  osDelay(1);
 800206c:	2001      	movs	r0, #1
 800206e:	f004 f8f4 	bl	800625a <osDelay>
 8002072:	e002      	b.n	800207a <TaskXoayLaBan+0x10a>
	  	  }
	  else{
		  osDelay(1);
 8002074:	2001      	movs	r0, #1
 8002076:	f004 f8f0 	bl	800625a <osDelay>
	  }
	  if(RotatePid == 1){
 800207a:	4b5d      	ldr	r3, [pc, #372]	; (80021f0 <TaskXoayLaBan+0x280>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d11f      	bne.n	80020c2 <TaskXoayLaBan+0x152>
		  ControlDriver(2, -dir2, pwm, 57,2 , dir2, pwm, 123, 2, -dir2, pwm, 189);
 8002082:	4b5c      	ldr	r3, [pc, #368]	; (80021f4 <TaskXoayLaBan+0x284>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	425c      	negs	r4, r3
 8002088:	4b5b      	ldr	r3, [pc, #364]	; (80021f8 <TaskXoayLaBan+0x288>)
 800208a:	881d      	ldrh	r5, [r3, #0]
 800208c:	4b59      	ldr	r3, [pc, #356]	; (80021f4 <TaskXoayLaBan+0x284>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a59      	ldr	r2, [pc, #356]	; (80021f8 <TaskXoayLaBan+0x288>)
 8002092:	8812      	ldrh	r2, [r2, #0]
 8002094:	4957      	ldr	r1, [pc, #348]	; (80021f4 <TaskXoayLaBan+0x284>)
 8002096:	6809      	ldr	r1, [r1, #0]
 8002098:	4249      	negs	r1, r1
 800209a:	4857      	ldr	r0, [pc, #348]	; (80021f8 <TaskXoayLaBan+0x288>)
 800209c:	8800      	ldrh	r0, [r0, #0]
 800209e:	26bd      	movs	r6, #189	; 0xbd
 80020a0:	9607      	str	r6, [sp, #28]
 80020a2:	9006      	str	r0, [sp, #24]
 80020a4:	9105      	str	r1, [sp, #20]
 80020a6:	2102      	movs	r1, #2
 80020a8:	9104      	str	r1, [sp, #16]
 80020aa:	217b      	movs	r1, #123	; 0x7b
 80020ac:	9103      	str	r1, [sp, #12]
 80020ae:	9202      	str	r2, [sp, #8]
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	2302      	movs	r3, #2
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	2339      	movs	r3, #57	; 0x39
 80020b8:	462a      	mov	r2, r5
 80020ba:	4621      	mov	r1, r4
 80020bc:	2002      	movs	r0, #2
 80020be:	f7ff f8db 	bl	8001278 <ControlDriver>
	  }
	  if((forward == 2)){
 80020c2:	4b47      	ldr	r3, [pc, #284]	; (80021e0 <TaskXoayLaBan+0x270>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d12d      	bne.n	8002126 <TaskXoayLaBan+0x1b6>
		  ControlDriver(1, 1, v_t, (30+1*e1), 1, 1, v_t, (30+1*e1), 1, 1, v_t, (30-1*e1));
 80020ca:	4b46      	ldr	r3, [pc, #280]	; (80021e4 <TaskXoayLaBan+0x274>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	b29c      	uxth	r4, r3
 80020d0:	4b45      	ldr	r3, [pc, #276]	; (80021e8 <TaskXoayLaBan+0x278>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	331e      	adds	r3, #30
 80020d8:	b29d      	uxth	r5, r3
 80020da:	4b42      	ldr	r3, [pc, #264]	; (80021e4 <TaskXoayLaBan+0x274>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	4a41      	ldr	r2, [pc, #260]	; (80021e8 <TaskXoayLaBan+0x278>)
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	b292      	uxth	r2, r2
 80020e6:	321e      	adds	r2, #30
 80020e8:	b292      	uxth	r2, r2
 80020ea:	493e      	ldr	r1, [pc, #248]	; (80021e4 <TaskXoayLaBan+0x274>)
 80020ec:	6809      	ldr	r1, [r1, #0]
 80020ee:	b289      	uxth	r1, r1
 80020f0:	483d      	ldr	r0, [pc, #244]	; (80021e8 <TaskXoayLaBan+0x278>)
 80020f2:	6800      	ldr	r0, [r0, #0]
 80020f4:	b280      	uxth	r0, r0
 80020f6:	f1c0 001e 	rsb	r0, r0, #30
 80020fa:	b280      	uxth	r0, r0
 80020fc:	9007      	str	r0, [sp, #28]
 80020fe:	9106      	str	r1, [sp, #24]
 8002100:	2101      	movs	r1, #1
 8002102:	9105      	str	r1, [sp, #20]
 8002104:	2101      	movs	r1, #1
 8002106:	9104      	str	r1, [sp, #16]
 8002108:	9203      	str	r2, [sp, #12]
 800210a:	9302      	str	r3, [sp, #8]
 800210c:	2301      	movs	r3, #1
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	2301      	movs	r3, #1
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	462b      	mov	r3, r5
 8002116:	4622      	mov	r2, r4
 8002118:	2101      	movs	r1, #1
 800211a:	2001      	movs	r0, #1
 800211c:	f7ff f8ac 	bl	8001278 <ControlDriver>
		  osDelay(1);
 8002120:	2001      	movs	r0, #1
 8002122:	f004 f89a 	bl	800625a <osDelay>
	  }
	  if((forward == 3)){
 8002126:	4b2e      	ldr	r3, [pc, #184]	; (80021e0 <TaskXoayLaBan+0x270>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b03      	cmp	r3, #3
 800212c:	f47f af25 	bne.w	8001f7a <TaskXoayLaBan+0xa>
	  		  ControlDriver(1, -1, v_t, (189-1*e1), 1, -1, v_t, (189+1*e1), 1, -1, v_t, (189+0.8*e1));
 8002130:	4b2c      	ldr	r3, [pc, #176]	; (80021e4 <TaskXoayLaBan+0x274>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	fa1f f883 	uxth.w	r8, r3
 8002138:	4b2b      	ldr	r3, [pc, #172]	; (80021e8 <TaskXoayLaBan+0x278>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	b29b      	uxth	r3, r3
 800213e:	f1c3 03bd 	rsb	r3, r3, #189	; 0xbd
 8002142:	fa1f f983 	uxth.w	r9, r3
 8002146:	4b27      	ldr	r3, [pc, #156]	; (80021e4 <TaskXoayLaBan+0x274>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	b29c      	uxth	r4, r3
 800214c:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <TaskXoayLaBan+0x278>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	b29b      	uxth	r3, r3
 8002152:	33bd      	adds	r3, #189	; 0xbd
 8002154:	b29d      	uxth	r5, r3
 8002156:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <TaskXoayLaBan+0x274>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	b29e      	uxth	r6, r3
 800215c:	4b22      	ldr	r3, [pc, #136]	; (80021e8 <TaskXoayLaBan+0x278>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe f987 	bl	8000474 <__aeabi_i2d>
 8002166:	a318      	add	r3, pc, #96	; (adr r3, 80021c8 <TaskXoayLaBan+0x258>)
 8002168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216c:	f7fe f9ec 	bl	8000548 <__aeabi_dmul>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	a315      	add	r3, pc, #84	; (adr r3, 80021d0 <TaskXoayLaBan+0x260>)
 800217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217e:	f7fe f82d 	bl	80001dc <__adddf3>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	f7fe fc9f 	bl	8000acc <__aeabi_d2uiz>
 800218e:	4603      	mov	r3, r0
 8002190:	b29b      	uxth	r3, r3
 8002192:	9307      	str	r3, [sp, #28]
 8002194:	9606      	str	r6, [sp, #24]
 8002196:	f04f 33ff 	mov.w	r3, #4294967295
 800219a:	9305      	str	r3, [sp, #20]
 800219c:	2301      	movs	r3, #1
 800219e:	9304      	str	r3, [sp, #16]
 80021a0:	9503      	str	r5, [sp, #12]
 80021a2:	9402      	str	r4, [sp, #8]
 80021a4:	f04f 33ff 	mov.w	r3, #4294967295
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	2301      	movs	r3, #1
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	464b      	mov	r3, r9
 80021b0:	4642      	mov	r2, r8
 80021b2:	f04f 31ff 	mov.w	r1, #4294967295
 80021b6:	2001      	movs	r0, #1
 80021b8:	f7ff f85e 	bl	8001278 <ControlDriver>
	  		  osDelay(1);
 80021bc:	2001      	movs	r0, #1
 80021be:	f004 f84c 	bl	800625a <osDelay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)a, 1);
 80021c2:	e6da      	b.n	8001f7a <TaskXoayLaBan+0xa>
 80021c4:	f3af 8000 	nop.w
 80021c8:	9999999a 	.word	0x9999999a
 80021cc:	3fe99999 	.word	0x3fe99999
 80021d0:	00000000 	.word	0x00000000
 80021d4:	4067a000 	.word	0x4067a000
 80021d8:	200005d4 	.word	0x200005d4
 80021dc:	20000358 	.word	0x20000358
 80021e0:	2000052c 	.word	0x2000052c
 80021e4:	20000530 	.word	0x20000530
 80021e8:	20000540 	.word	0x20000540
 80021ec:	40568000 	.word	0x40568000
 80021f0:	20000578 	.word	0x20000578
 80021f4:	20000538 	.word	0x20000538
 80021f8:	2000057c 	.word	0x2000057c

080021fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d101      	bne.n	8002212 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800220e:	f000 fad3 	bl	80027b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  goc_hientai = GocRobot;
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a09      	ldr	r2, [pc, #36]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002218:	6013      	str	r3, [r2, #0]
  e1 = goc_target - goc_hientai;
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	4b07      	ldr	r3, [pc, #28]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	4a07      	ldr	r2, [pc, #28]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002226:	6013      	str	r3, [r2, #0]
  Pid_cal();
 8002228:	f7fe fe0e 	bl	8000e48 <Pid_cal>
  /* USER CODE END Callback 1 */
}
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40000800 	.word	0x40000800
 8002238:	200005a8 	.word	0x200005a8
 800223c:	20000528 	.word	0x20000528
 8002240:	20000524 	.word	0x20000524
 8002244:	20000540 	.word	0x20000540

08002248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800224c:	b672      	cpsid	i
}
 800224e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002250:	e7fe      	b.n	8002250 <Error_Handler+0x8>
	...

08002254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	607b      	str	r3, [r7, #4]
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_MspInit+0x54>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	4a11      	ldr	r2, [pc, #68]	; (80022a8 <HAL_MspInit+0x54>)
 8002264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002268:	6453      	str	r3, [r2, #68]	; 0x44
 800226a:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <HAL_MspInit+0x54>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002272:	607b      	str	r3, [r7, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	603b      	str	r3, [r7, #0]
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_MspInit+0x54>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <HAL_MspInit+0x54>)
 8002280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002284:	6413      	str	r3, [r2, #64]	; 0x40
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <HAL_MspInit+0x54>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002292:	2200      	movs	r2, #0
 8002294:	210f      	movs	r1, #15
 8002296:	f06f 0001 	mvn.w	r0, #1
 800229a:	f000 ff9b 	bl	80031d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800

080022ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08a      	sub	sp, #40	; 0x28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a2f      	ldr	r2, [pc, #188]	; (8002388 <HAL_ADC_MspInit+0xdc>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d157      	bne.n	800237e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	4b2e      	ldr	r3, [pc, #184]	; (800238c <HAL_ADC_MspInit+0xe0>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	4a2d      	ldr	r2, [pc, #180]	; (800238c <HAL_ADC_MspInit+0xe0>)
 80022d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022dc:	6453      	str	r3, [r2, #68]	; 0x44
 80022de:	4b2b      	ldr	r3, [pc, #172]	; (800238c <HAL_ADC_MspInit+0xe0>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b27      	ldr	r3, [pc, #156]	; (800238c <HAL_ADC_MspInit+0xe0>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	4a26      	ldr	r2, [pc, #152]	; (800238c <HAL_ADC_MspInit+0xe0>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
 80022fa:	4b24      	ldr	r3, [pc, #144]	; (800238c <HAL_ADC_MspInit+0xe0>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002306:	2340      	movs	r3, #64	; 0x40
 8002308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800230a:	2303      	movs	r3, #3
 800230c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002312:	f107 0314 	add.w	r3, r7, #20
 8002316:	4619      	mov	r1, r3
 8002318:	481d      	ldr	r0, [pc, #116]	; (8002390 <HAL_ADC_MspInit+0xe4>)
 800231a:	f001 fb87 	bl	8003a2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800231e:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <HAL_ADC_MspInit+0xe8>)
 8002320:	4a1d      	ldr	r2, [pc, #116]	; (8002398 <HAL_ADC_MspInit+0xec>)
 8002322:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002324:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <HAL_ADC_MspInit+0xe8>)
 8002326:	2200      	movs	r2, #0
 8002328:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800232a:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <HAL_ADC_MspInit+0xe8>)
 800232c:	2200      	movs	r2, #0
 800232e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002330:	4b18      	ldr	r3, [pc, #96]	; (8002394 <HAL_ADC_MspInit+0xe8>)
 8002332:	2200      	movs	r2, #0
 8002334:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002336:	4b17      	ldr	r3, [pc, #92]	; (8002394 <HAL_ADC_MspInit+0xe8>)
 8002338:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800233c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <HAL_ADC_MspInit+0xe8>)
 8002340:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002344:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002346:	4b13      	ldr	r3, [pc, #76]	; (8002394 <HAL_ADC_MspInit+0xe8>)
 8002348:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800234c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <HAL_ADC_MspInit+0xe8>)
 8002350:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002354:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002356:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <HAL_ADC_MspInit+0xe8>)
 8002358:	2200      	movs	r2, #0
 800235a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800235c:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <HAL_ADC_MspInit+0xe8>)
 800235e:	2200      	movs	r2, #0
 8002360:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <HAL_ADC_MspInit+0xe8>)
 8002364:	f000 ff60 	bl	8003228 <HAL_DMA_Init>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800236e:	f7ff ff6b 	bl	8002248 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a07      	ldr	r2, [pc, #28]	; (8002394 <HAL_ADC_MspInit+0xe8>)
 8002376:	639a      	str	r2, [r3, #56]	; 0x38
 8002378:	4a06      	ldr	r2, [pc, #24]	; (8002394 <HAL_ADC_MspInit+0xe8>)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800237e:	bf00      	nop
 8002380:	3728      	adds	r7, #40	; 0x28
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40012000 	.word	0x40012000
 800238c:	40023800 	.word	0x40023800
 8002390:	40020000 	.word	0x40020000
 8002394:	200003a0 	.word	0x200003a0
 8002398:	40026410 	.word	0x40026410

0800239c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ac:	d10d      	bne.n	80023ca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <HAL_TIM_Base_MspInit+0x3c>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	4a08      	ldr	r2, [pc, #32]	; (80023d8 <HAL_TIM_Base_MspInit+0x3c>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6413      	str	r3, [r2, #64]	; 0x40
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_TIM_Base_MspInit+0x3c>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800

080023dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08e      	sub	sp, #56	; 0x38
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a58      	ldr	r2, [pc, #352]	; (800255c <HAL_UART_MspInit+0x180>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d135      	bne.n	800246a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	623b      	str	r3, [r7, #32]
 8002402:	4b57      	ldr	r3, [pc, #348]	; (8002560 <HAL_UART_MspInit+0x184>)
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	4a56      	ldr	r2, [pc, #344]	; (8002560 <HAL_UART_MspInit+0x184>)
 8002408:	f043 0310 	orr.w	r3, r3, #16
 800240c:	6453      	str	r3, [r2, #68]	; 0x44
 800240e:	4b54      	ldr	r3, [pc, #336]	; (8002560 <HAL_UART_MspInit+0x184>)
 8002410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002412:	f003 0310 	and.w	r3, r3, #16
 8002416:	623b      	str	r3, [r7, #32]
 8002418:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	4b50      	ldr	r3, [pc, #320]	; (8002560 <HAL_UART_MspInit+0x184>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4a4f      	ldr	r2, [pc, #316]	; (8002560 <HAL_UART_MspInit+0x184>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6313      	str	r3, [r2, #48]	; 0x30
 800242a:	4b4d      	ldr	r3, [pc, #308]	; (8002560 <HAL_UART_MspInit+0x184>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002436:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243c:	2302      	movs	r3, #2
 800243e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002444:	2303      	movs	r3, #3
 8002446:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002448:	2307      	movs	r3, #7
 800244a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002450:	4619      	mov	r1, r3
 8002452:	4844      	ldr	r0, [pc, #272]	; (8002564 <HAL_UART_MspInit+0x188>)
 8002454:	f001 faea 	bl	8003a2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002458:	2200      	movs	r2, #0
 800245a:	2105      	movs	r1, #5
 800245c:	2025      	movs	r0, #37	; 0x25
 800245e:	f000 feb9 	bl	80031d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002462:	2025      	movs	r0, #37	; 0x25
 8002464:	f000 fed2 	bl	800320c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002468:	e073      	b.n	8002552 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a3e      	ldr	r2, [pc, #248]	; (8002568 <HAL_UART_MspInit+0x18c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d134      	bne.n	80024de <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002474:	2300      	movs	r3, #0
 8002476:	61bb      	str	r3, [r7, #24]
 8002478:	4b39      	ldr	r3, [pc, #228]	; (8002560 <HAL_UART_MspInit+0x184>)
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	4a38      	ldr	r2, [pc, #224]	; (8002560 <HAL_UART_MspInit+0x184>)
 800247e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002482:	6413      	str	r3, [r2, #64]	; 0x40
 8002484:	4b36      	ldr	r3, [pc, #216]	; (8002560 <HAL_UART_MspInit+0x184>)
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	4b32      	ldr	r3, [pc, #200]	; (8002560 <HAL_UART_MspInit+0x184>)
 8002496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002498:	4a31      	ldr	r2, [pc, #196]	; (8002560 <HAL_UART_MspInit+0x184>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	6313      	str	r3, [r2, #48]	; 0x30
 80024a0:	4b2f      	ldr	r3, [pc, #188]	; (8002560 <HAL_UART_MspInit+0x184>)
 80024a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	617b      	str	r3, [r7, #20]
 80024aa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024ac:	230c      	movs	r3, #12
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b0:	2302      	movs	r3, #2
 80024b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b8:	2303      	movs	r3, #3
 80024ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024bc:	2307      	movs	r3, #7
 80024be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c4:	4619      	mov	r1, r3
 80024c6:	4827      	ldr	r0, [pc, #156]	; (8002564 <HAL_UART_MspInit+0x188>)
 80024c8:	f001 fab0 	bl	8003a2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80024cc:	2200      	movs	r2, #0
 80024ce:	2105      	movs	r1, #5
 80024d0:	2026      	movs	r0, #38	; 0x26
 80024d2:	f000 fe7f 	bl	80031d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024d6:	2026      	movs	r0, #38	; 0x26
 80024d8:	f000 fe98 	bl	800320c <HAL_NVIC_EnableIRQ>
}
 80024dc:	e039      	b.n	8002552 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART3)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a22      	ldr	r2, [pc, #136]	; (800256c <HAL_UART_MspInit+0x190>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d134      	bne.n	8002552 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024e8:	2300      	movs	r3, #0
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	4b1c      	ldr	r3, [pc, #112]	; (8002560 <HAL_UART_MspInit+0x184>)
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	4a1b      	ldr	r2, [pc, #108]	; (8002560 <HAL_UART_MspInit+0x184>)
 80024f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f6:	6413      	str	r3, [r2, #64]	; 0x40
 80024f8:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_UART_MspInit+0x184>)
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	4b15      	ldr	r3, [pc, #84]	; (8002560 <HAL_UART_MspInit+0x184>)
 800250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250c:	4a14      	ldr	r2, [pc, #80]	; (8002560 <HAL_UART_MspInit+0x184>)
 800250e:	f043 0302 	orr.w	r3, r3, #2
 8002512:	6313      	str	r3, [r2, #48]	; 0x30
 8002514:	4b12      	ldr	r3, [pc, #72]	; (8002560 <HAL_UART_MspInit+0x184>)
 8002516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002520:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252e:	2303      	movs	r3, #3
 8002530:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002532:	2307      	movs	r3, #7
 8002534:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800253a:	4619      	mov	r1, r3
 800253c:	480c      	ldr	r0, [pc, #48]	; (8002570 <HAL_UART_MspInit+0x194>)
 800253e:	f001 fa75 	bl	8003a2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002542:	2200      	movs	r2, #0
 8002544:	2105      	movs	r1, #5
 8002546:	2027      	movs	r0, #39	; 0x27
 8002548:	f000 fe44 	bl	80031d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800254c:	2027      	movs	r0, #39	; 0x27
 800254e:	f000 fe5d 	bl	800320c <HAL_NVIC_EnableIRQ>
}
 8002552:	bf00      	nop
 8002554:	3738      	adds	r7, #56	; 0x38
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40011000 	.word	0x40011000
 8002560:	40023800 	.word	0x40023800
 8002564:	40020000 	.word	0x40020000
 8002568:	40004400 	.word	0x40004400
 800256c:	40004800 	.word	0x40004800
 8002570:	40020400 	.word	0x40020400

08002574 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08e      	sub	sp, #56	; 0x38
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	4b33      	ldr	r3, [pc, #204]	; (8002658 <HAL_InitTick+0xe4>)
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	4a32      	ldr	r2, [pc, #200]	; (8002658 <HAL_InitTick+0xe4>)
 800258e:	f043 0304 	orr.w	r3, r3, #4
 8002592:	6413      	str	r3, [r2, #64]	; 0x40
 8002594:	4b30      	ldr	r3, [pc, #192]	; (8002658 <HAL_InitTick+0xe4>)
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025a0:	f107 0210 	add.w	r2, r7, #16
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f002 f8be 	bl	800472c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80025b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d103      	bne.n	80025c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80025ba:	f002 f88f 	bl	80046dc <HAL_RCC_GetPCLK1Freq>
 80025be:	6378      	str	r0, [r7, #52]	; 0x34
 80025c0:	e004      	b.n	80025cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80025c2:	f002 f88b 	bl	80046dc <HAL_RCC_GetPCLK1Freq>
 80025c6:	4603      	mov	r3, r0
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ce:	4a23      	ldr	r2, [pc, #140]	; (800265c <HAL_InitTick+0xe8>)
 80025d0:	fba2 2303 	umull	r2, r3, r2, r3
 80025d4:	0c9b      	lsrs	r3, r3, #18
 80025d6:	3b01      	subs	r3, #1
 80025d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <HAL_InitTick+0xec>)
 80025dc:	4a21      	ldr	r2, [pc, #132]	; (8002664 <HAL_InitTick+0xf0>)
 80025de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80025e0:	4b1f      	ldr	r3, [pc, #124]	; (8002660 <HAL_InitTick+0xec>)
 80025e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025e6:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80025e8:	4a1d      	ldr	r2, [pc, #116]	; (8002660 <HAL_InitTick+0xec>)
 80025ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ec:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80025ee:	4b1c      	ldr	r3, [pc, #112]	; (8002660 <HAL_InitTick+0xec>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f4:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <HAL_InitTick+0xec>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025fa:	4b19      	ldr	r3, [pc, #100]	; (8002660 <HAL_InitTick+0xec>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002600:	4817      	ldr	r0, [pc, #92]	; (8002660 <HAL_InitTick+0xec>)
 8002602:	f002 f8c5 	bl	8004790 <HAL_TIM_Base_Init>
 8002606:	4603      	mov	r3, r0
 8002608:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800260c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002610:	2b00      	cmp	r3, #0
 8002612:	d11b      	bne.n	800264c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002614:	4812      	ldr	r0, [pc, #72]	; (8002660 <HAL_InitTick+0xec>)
 8002616:	f002 f90b 	bl	8004830 <HAL_TIM_Base_Start_IT>
 800261a:	4603      	mov	r3, r0
 800261c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002620:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002624:	2b00      	cmp	r3, #0
 8002626:	d111      	bne.n	800264c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002628:	201e      	movs	r0, #30
 800262a:	f000 fdef 	bl	800320c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b0f      	cmp	r3, #15
 8002632:	d808      	bhi.n	8002646 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002634:	2200      	movs	r2, #0
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	201e      	movs	r0, #30
 800263a:	f000 fdcb 	bl	80031d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800263e:	4a0a      	ldr	r2, [pc, #40]	; (8002668 <HAL_InitTick+0xf4>)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	e002      	b.n	800264c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800264c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002650:	4618      	mov	r0, r3
 8002652:	3738      	adds	r7, #56	; 0x38
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40023800 	.word	0x40023800
 800265c:	431bde83 	.word	0x431bde83
 8002660:	200005e8 	.word	0x200005e8
 8002664:	40000800 	.word	0x40000800
 8002668:	20000014 	.word	0x20000014

0800266c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002670:	e7fe      	b.n	8002670 <NMI_Handler+0x4>

08002672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002676:	e7fe      	b.n	8002676 <HardFault_Handler+0x4>

08002678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800267c:	e7fe      	b.n	800267c <MemManage_Handler+0x4>

0800267e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002682:	e7fe      	b.n	8002682 <BusFault_Handler+0x4>

08002684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002688:	e7fe      	b.n	8002688 <UsageFault_Handler+0x4>

0800268a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800269c:	4802      	ldr	r0, [pc, #8]	; (80026a8 <TIM4_IRQHandler+0x10>)
 800269e:	f002 f937 	bl	8004910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	200005e8 	.word	0x200005e8

080026ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026b0:	4802      	ldr	r0, [pc, #8]	; (80026bc <USART1_IRQHandler+0x10>)
 80026b2:	f002 fdff 	bl	80052b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000448 	.word	0x20000448

080026c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026c4:	4802      	ldr	r0, [pc, #8]	; (80026d0 <USART2_IRQHandler+0x10>)
 80026c6:	f002 fdf5 	bl	80052b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	2000048c 	.word	0x2000048c

080026d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80026d8:	4802      	ldr	r0, [pc, #8]	; (80026e4 <USART3_IRQHandler+0x10>)
 80026da:	f002 fdeb 	bl	80052b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	200004d0 	.word	0x200004d0

080026e8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026ec:	4802      	ldr	r0, [pc, #8]	; (80026f8 <DMA2_Stream0_IRQHandler+0x10>)
 80026ee:	f000 ff33 	bl	8003558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	200003a0 	.word	0x200003a0

080026fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <SystemInit+0x20>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002706:	4a05      	ldr	r2, [pc, #20]	; (800271c <SystemInit+0x20>)
 8002708:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800270c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}/**
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002720:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002758 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002724:	480d      	ldr	r0, [pc, #52]	; (800275c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002726:	490e      	ldr	r1, [pc, #56]	; (8002760 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002728:	4a0e      	ldr	r2, [pc, #56]	; (8002764 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800272a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800272c:	e002      	b.n	8002734 <LoopCopyDataInit>

0800272e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800272e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002732:	3304      	adds	r3, #4

08002734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002738:	d3f9      	bcc.n	800272e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800273a:	4a0b      	ldr	r2, [pc, #44]	; (8002768 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800273c:	4c0b      	ldr	r4, [pc, #44]	; (800276c <LoopFillZerobss+0x26>)
  movs r3, #0
 800273e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002740:	e001      	b.n	8002746 <LoopFillZerobss>

08002742 <FillZerobss>:
FillZerobss:
  str  r3, [r2]
 8002742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002744:	3204      	adds	r2, #4

08002746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002748:	d3fb      	bcc.n	8002742 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800274a:	f7ff ffd7 	bl	80026fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800274e:	f004 ff95 	bl	800767c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002752:	f7fe fe51 	bl	80013f8 <main>
  bx  lr    
 8002756:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002758:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800275c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002760:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002764:	080079b0 	.word	0x080079b0
  ldr r2, =_sbss
 8002768:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800276c:	20004390 	.word	0x20004390

08002770 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002770:	e7fe      	b.n	8002770 <ADC_IRQHandler>
	...

08002774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002778:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <HAL_Init+0x40>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a0d      	ldr	r2, [pc, #52]	; (80027b4 <HAL_Init+0x40>)
 800277e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002782:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_Init+0x40>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_Init+0x40>)
 800278a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800278e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_Init+0x40>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a07      	ldr	r2, [pc, #28]	; (80027b4 <HAL_Init+0x40>)
 8002796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800279c:	2003      	movs	r0, #3
 800279e:	f000 fd0e 	bl	80031be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027a2:	200f      	movs	r0, #15
 80027a4:	f7ff fee6 	bl	8002574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027a8:	f7ff fd54 	bl	8002254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40023c00 	.word	0x40023c00

080027b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_IncTick+0x20>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_IncTick+0x24>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4413      	add	r3, r2
 80027c8:	4a04      	ldr	r2, [pc, #16]	; (80027dc <HAL_IncTick+0x24>)
 80027ca:	6013      	str	r3, [r2, #0]
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20000018 	.word	0x20000018
 80027dc:	20000630 	.word	0x20000630

080027e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return uwTick;
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <HAL_GetTick+0x14>)
 80027e6:	681b      	ldr	r3, [r3, #0]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20000630 	.word	0x20000630

080027f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002800:	f7ff ffee 	bl	80027e0 <HAL_GetTick>
 8002804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002810:	d005      	beq.n	800281e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <HAL_Delay+0x44>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4413      	add	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800281e:	bf00      	nop
 8002820:	f7ff ffde 	bl	80027e0 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	429a      	cmp	r2, r3
 800282e:	d8f7      	bhi.n	8002820 <HAL_Delay+0x28>
  {
  }
}
 8002830:	bf00      	nop
 8002832:	bf00      	nop
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000018 	.word	0x20000018

08002840 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002848:	2300      	movs	r3, #0
 800284a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e033      	b.n	80028be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d109      	bne.n	8002872 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff fd24 	bl	80022ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	2b00      	cmp	r3, #0
 800287c:	d118      	bne.n	80028b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002886:	f023 0302 	bic.w	r3, r3, #2
 800288a:	f043 0202 	orr.w	r2, r3, #2
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 fa68 	bl	8002d68 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f023 0303 	bic.w	r3, r3, #3
 80028a6:	f043 0201 	orr.w	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40
 80028ae:	e001      	b.n	80028b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_ADC_Start_DMA+0x1e>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e0e9      	b.n	8002aba <HAL_ADC_Start_DMA+0x1f2>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d018      	beq.n	800292e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0201 	orr.w	r2, r2, #1
 800290a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800290c:	4b6d      	ldr	r3, [pc, #436]	; (8002ac4 <HAL_ADC_Start_DMA+0x1fc>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a6d      	ldr	r2, [pc, #436]	; (8002ac8 <HAL_ADC_Start_DMA+0x200>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	0c9a      	lsrs	r2, r3, #18
 8002918:	4613      	mov	r3, r2
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	4413      	add	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002920:	e002      	b.n	8002928 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	3b01      	subs	r3, #1
 8002926:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f9      	bne.n	8002922 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800293c:	d107      	bne.n	800294e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800294c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b01      	cmp	r3, #1
 800295a:	f040 80a1 	bne.w	8002aa0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002966:	f023 0301 	bic.w	r3, r3, #1
 800296a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297c:	2b00      	cmp	r3, #0
 800297e:	d007      	beq.n	8002990 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002988:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800299c:	d106      	bne.n	80029ac <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	f023 0206 	bic.w	r2, r3, #6
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	645a      	str	r2, [r3, #68]	; 0x44
 80029aa:	e002      	b.n	80029b2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029ba:	4b44      	ldr	r3, [pc, #272]	; (8002acc <HAL_ADC_Start_DMA+0x204>)
 80029bc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c2:	4a43      	ldr	r2, [pc, #268]	; (8002ad0 <HAL_ADC_Start_DMA+0x208>)
 80029c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ca:	4a42      	ldr	r2, [pc, #264]	; (8002ad4 <HAL_ADC_Start_DMA+0x20c>)
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d2:	4a41      	ldr	r2, [pc, #260]	; (8002ad8 <HAL_ADC_Start_DMA+0x210>)
 80029d4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80029de:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80029ee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029fe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	334c      	adds	r3, #76	; 0x4c
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f000 fcb8 	bl	8003384 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d12a      	bne.n	8002a76 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a2d      	ldr	r2, [pc, #180]	; (8002adc <HAL_ADC_Start_DMA+0x214>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d015      	beq.n	8002a56 <HAL_ADC_Start_DMA+0x18e>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a2c      	ldr	r2, [pc, #176]	; (8002ae0 <HAL_ADC_Start_DMA+0x218>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d105      	bne.n	8002a40 <HAL_ADC_Start_DMA+0x178>
 8002a34:	4b25      	ldr	r3, [pc, #148]	; (8002acc <HAL_ADC_Start_DMA+0x204>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a27      	ldr	r2, [pc, #156]	; (8002ae4 <HAL_ADC_Start_DMA+0x21c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d136      	bne.n	8002ab8 <HAL_ADC_Start_DMA+0x1f0>
 8002a4a:	4b20      	ldr	r3, [pc, #128]	; (8002acc <HAL_ADC_Start_DMA+0x204>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d130      	bne.n	8002ab8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d129      	bne.n	8002ab8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	e020      	b.n	8002ab8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a18      	ldr	r2, [pc, #96]	; (8002adc <HAL_ADC_Start_DMA+0x214>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d11b      	bne.n	8002ab8 <HAL_ADC_Start_DMA+0x1f0>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d114      	bne.n	8002ab8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a9c:	609a      	str	r2, [r3, #8]
 8002a9e:	e00b      	b.n	8002ab8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	f043 0210 	orr.w	r2, r3, #16
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab0:	f043 0201 	orr.w	r2, r3, #1
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000010 	.word	0x20000010
 8002ac8:	431bde83 	.word	0x431bde83
 8002acc:	40012300 	.word	0x40012300
 8002ad0:	08002f61 	.word	0x08002f61
 8002ad4:	0800301b 	.word	0x0800301b
 8002ad8:	08003037 	.word	0x08003037
 8002adc:	40012000 	.word	0x40012000
 8002ae0:	40012100 	.word	0x40012100
 8002ae4:	40012200 	.word	0x40012200

08002ae8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x1c>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e105      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x228>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b09      	cmp	r3, #9
 8002b4e:	d925      	bls.n	8002b9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68d9      	ldr	r1, [r3, #12]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4613      	mov	r3, r2
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	4413      	add	r3, r2
 8002b64:	3b1e      	subs	r3, #30
 8002b66:	2207      	movs	r2, #7
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43da      	mvns	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	400a      	ands	r2, r1
 8002b74:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68d9      	ldr	r1, [r3, #12]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	4618      	mov	r0, r3
 8002b88:	4603      	mov	r3, r0
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	4403      	add	r3, r0
 8002b8e:	3b1e      	subs	r3, #30
 8002b90:	409a      	lsls	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	e022      	b.n	8002be2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6919      	ldr	r1, [r3, #16]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4613      	mov	r3, r2
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	4413      	add	r3, r2
 8002bb0:	2207      	movs	r2, #7
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	400a      	ands	r2, r1
 8002bbe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6919      	ldr	r1, [r3, #16]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	4403      	add	r3, r0
 8002bd8:	409a      	lsls	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b06      	cmp	r3, #6
 8002be8:	d824      	bhi.n	8002c34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3b05      	subs	r3, #5
 8002bfc:	221f      	movs	r2, #31
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43da      	mvns	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	400a      	ands	r2, r1
 8002c0a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	4618      	mov	r0, r3
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	3b05      	subs	r3, #5
 8002c26:	fa00 f203 	lsl.w	r2, r0, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	635a      	str	r2, [r3, #52]	; 0x34
 8002c32:	e04c      	b.n	8002cce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b0c      	cmp	r3, #12
 8002c3a:	d824      	bhi.n	8002c86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3b23      	subs	r3, #35	; 0x23
 8002c4e:	221f      	movs	r2, #31
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43da      	mvns	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	400a      	ands	r2, r1
 8002c5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	3b23      	subs	r3, #35	; 0x23
 8002c78:	fa00 f203 	lsl.w	r2, r0, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	631a      	str	r2, [r3, #48]	; 0x30
 8002c84:	e023      	b.n	8002cce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	3b41      	subs	r3, #65	; 0x41
 8002c98:	221f      	movs	r2, #31
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43da      	mvns	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	400a      	ands	r2, r1
 8002ca6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3b41      	subs	r3, #65	; 0x41
 8002cc2:	fa00 f203 	lsl.w	r2, r0, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cce:	4b22      	ldr	r3, [pc, #136]	; (8002d58 <HAL_ADC_ConfigChannel+0x234>)
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a21      	ldr	r2, [pc, #132]	; (8002d5c <HAL_ADC_ConfigChannel+0x238>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d109      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x1cc>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b12      	cmp	r3, #18
 8002ce2:	d105      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a19      	ldr	r2, [pc, #100]	; (8002d5c <HAL_ADC_ConfigChannel+0x238>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d123      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x21e>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2b10      	cmp	r3, #16
 8002d00:	d003      	beq.n	8002d0a <HAL_ADC_ConfigChannel+0x1e6>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b11      	cmp	r3, #17
 8002d08:	d11b      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b10      	cmp	r3, #16
 8002d1c:	d111      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d1e:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <HAL_ADC_ConfigChannel+0x23c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a10      	ldr	r2, [pc, #64]	; (8002d64 <HAL_ADC_ConfigChannel+0x240>)
 8002d24:	fba2 2303 	umull	r2, r3, r2, r3
 8002d28:	0c9a      	lsrs	r2, r3, #18
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d34:	e002      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f9      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	40012300 	.word	0x40012300
 8002d5c:	40012000 	.word	0x40012000
 8002d60:	20000010 	.word	0x20000010
 8002d64:	431bde83 	.word	0x431bde83

08002d68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d70:	4b79      	ldr	r3, [pc, #484]	; (8002f58 <ADC_Init+0x1f0>)
 8002d72:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6859      	ldr	r1, [r3, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	021a      	lsls	r2, r3, #8
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002dc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6859      	ldr	r1, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002de2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6899      	ldr	r1, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfa:	4a58      	ldr	r2, [pc, #352]	; (8002f5c <ADC_Init+0x1f4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d022      	beq.n	8002e46 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6899      	ldr	r1, [r3, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6899      	ldr	r1, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	e00f      	b.n	8002e66 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0202 	bic.w	r2, r2, #2
 8002e74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6899      	ldr	r1, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	7e1b      	ldrb	r3, [r3, #24]
 8002e80:	005a      	lsls	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d01b      	beq.n	8002ecc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ea2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002eb2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6859      	ldr	r1, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	035a      	lsls	r2, r3, #13
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	e007      	b.n	8002edc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eda:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002eea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	051a      	lsls	r2, r3, #20
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6899      	ldr	r1, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f1e:	025a      	lsls	r2, r3, #9
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6899      	ldr	r1, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	029a      	lsls	r2, r3, #10
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	609a      	str	r2, [r3, #8]
}
 8002f4c:	bf00      	nop
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	40012300 	.word	0x40012300
 8002f5c:	0f000001 	.word	0x0f000001

08002f60 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d13c      	bne.n	8002ff4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d12b      	bne.n	8002fec <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d127      	bne.n	8002fec <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d006      	beq.n	8002fb8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d119      	bne.n	8002fec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0220 	bic.w	r2, r2, #32
 8002fc6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d105      	bne.n	8002fec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	f043 0201 	orr.w	r2, r3, #1
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f7ff fd7b 	bl	8002ae8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ff2:	e00e      	b.n	8003012 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f7ff fd85 	bl	8002b10 <HAL_ADC_ErrorCallback>
}
 8003006:	e004      	b.n	8003012 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	4798      	blx	r3
}
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003026:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f7ff fd67 	bl	8002afc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800302e:	bf00      	nop
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b084      	sub	sp, #16
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003042:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2240      	movs	r2, #64	; 0x40
 8003048:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	f043 0204 	orr.w	r2, r3, #4
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f7ff fd5a 	bl	8002b10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003080:	4013      	ands	r3, r2
 8003082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800308c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003096:	4a04      	ldr	r2, [pc, #16]	; (80030a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	60d3      	str	r3, [r2, #12]
}
 800309c:	bf00      	nop
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	e000ed00 	.word	0xe000ed00

080030ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030b0:	4b04      	ldr	r3, [pc, #16]	; (80030c4 <__NVIC_GetPriorityGrouping+0x18>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	0a1b      	lsrs	r3, r3, #8
 80030b6:	f003 0307 	and.w	r3, r3, #7
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	e000ed00 	.word	0xe000ed00

080030c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	db0b      	blt.n	80030f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	f003 021f 	and.w	r2, r3, #31
 80030e0:	4907      	ldr	r1, [pc, #28]	; (8003100 <__NVIC_EnableIRQ+0x38>)
 80030e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	2001      	movs	r0, #1
 80030ea:	fa00 f202 	lsl.w	r2, r0, r2
 80030ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	e000e100 	.word	0xe000e100

08003104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	6039      	str	r1, [r7, #0]
 800310e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003114:	2b00      	cmp	r3, #0
 8003116:	db0a      	blt.n	800312e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	b2da      	uxtb	r2, r3
 800311c:	490c      	ldr	r1, [pc, #48]	; (8003150 <__NVIC_SetPriority+0x4c>)
 800311e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003122:	0112      	lsls	r2, r2, #4
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	440b      	add	r3, r1
 8003128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800312c:	e00a      	b.n	8003144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	b2da      	uxtb	r2, r3
 8003132:	4908      	ldr	r1, [pc, #32]	; (8003154 <__NVIC_SetPriority+0x50>)
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	3b04      	subs	r3, #4
 800313c:	0112      	lsls	r2, r2, #4
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	440b      	add	r3, r1
 8003142:	761a      	strb	r2, [r3, #24]
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	e000e100 	.word	0xe000e100
 8003154:	e000ed00 	.word	0xe000ed00

08003158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003158:	b480      	push	{r7}
 800315a:	b089      	sub	sp, #36	; 0x24
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f1c3 0307 	rsb	r3, r3, #7
 8003172:	2b04      	cmp	r3, #4
 8003174:	bf28      	it	cs
 8003176:	2304      	movcs	r3, #4
 8003178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	3304      	adds	r3, #4
 800317e:	2b06      	cmp	r3, #6
 8003180:	d902      	bls.n	8003188 <NVIC_EncodePriority+0x30>
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	3b03      	subs	r3, #3
 8003186:	e000      	b.n	800318a <NVIC_EncodePriority+0x32>
 8003188:	2300      	movs	r3, #0
 800318a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800318c:	f04f 32ff 	mov.w	r2, #4294967295
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	43da      	mvns	r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	401a      	ands	r2, r3
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031a0:	f04f 31ff 	mov.w	r1, #4294967295
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	fa01 f303 	lsl.w	r3, r1, r3
 80031aa:	43d9      	mvns	r1, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b0:	4313      	orrs	r3, r2
         );
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3724      	adds	r7, #36	; 0x24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff ff4c 	bl	8003064 <__NVIC_SetPriorityGrouping>
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
 80031e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031e6:	f7ff ff61 	bl	80030ac <__NVIC_GetPriorityGrouping>
 80031ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	68b9      	ldr	r1, [r7, #8]
 80031f0:	6978      	ldr	r0, [r7, #20]
 80031f2:	f7ff ffb1 	bl	8003158 <NVIC_EncodePriority>
 80031f6:	4602      	mov	r2, r0
 80031f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031fc:	4611      	mov	r1, r2
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff ff80 	bl	8003104 <__NVIC_SetPriority>
}
 8003204:	bf00      	nop
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff ff54 	bl	80030c8 <__NVIC_EnableIRQ>
}
 8003220:	bf00      	nop
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003234:	f7ff fad4 	bl	80027e0 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e099      	b.n	8003378 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0201 	bic.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003264:	e00f      	b.n	8003286 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003266:	f7ff fabb 	bl	80027e0 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b05      	cmp	r3, #5
 8003272:	d908      	bls.n	8003286 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2220      	movs	r2, #32
 8003278:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2203      	movs	r2, #3
 800327e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e078      	b.n	8003378 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1e8      	bne.n	8003266 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	4b38      	ldr	r3, [pc, #224]	; (8003380 <HAL_DMA_Init+0x158>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d107      	bne.n	80032f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	4313      	orrs	r3, r2
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f023 0307 	bic.w	r3, r3, #7
 8003306:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	2b04      	cmp	r3, #4
 8003318:	d117      	bne.n	800334a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00e      	beq.n	800334a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fb01 	bl	8003934 <DMA_CheckFifoParam>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2240      	movs	r2, #64	; 0x40
 800333c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003346:	2301      	movs	r3, #1
 8003348:	e016      	b.n	8003378 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fab8 	bl	80038c8 <DMA_CalcBaseAndBitshift>
 8003358:	4603      	mov	r3, r0
 800335a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003360:	223f      	movs	r2, #63	; 0x3f
 8003362:	409a      	lsls	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	f010803f 	.word	0xf010803f

08003384 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_DMA_Start_IT+0x26>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e040      	b.n	800342c <HAL_DMA_Start_IT+0xa8>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d12f      	bne.n	800341e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2202      	movs	r2, #2
 80033c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 fa4a 	bl	800386c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033dc:	223f      	movs	r2, #63	; 0x3f
 80033de:	409a      	lsls	r2, r3
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0216 	orr.w	r2, r2, #22
 80033f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d007      	beq.n	800340c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0208 	orr.w	r2, r2, #8
 800340a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	e005      	b.n	800342a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003426:	2302      	movs	r3, #2
 8003428:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800342a:	7dfb      	ldrb	r3, [r7, #23]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003440:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003442:	f7ff f9cd 	bl	80027e0 <HAL_GetTick>
 8003446:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d008      	beq.n	8003466 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2280      	movs	r2, #128	; 0x80
 8003458:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e052      	b.n	800350c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0216 	bic.w	r2, r2, #22
 8003474:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695a      	ldr	r2, [r3, #20]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003484:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d103      	bne.n	8003496 <HAL_DMA_Abort+0x62>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003492:	2b00      	cmp	r3, #0
 8003494:	d007      	beq.n	80034a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0208 	bic.w	r2, r2, #8
 80034a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0201 	bic.w	r2, r2, #1
 80034b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034b6:	e013      	b.n	80034e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034b8:	f7ff f992 	bl	80027e0 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b05      	cmp	r3, #5
 80034c4:	d90c      	bls.n	80034e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2220      	movs	r2, #32
 80034ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2203      	movs	r2, #3
 80034d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e015      	b.n	800350c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1e4      	bne.n	80034b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f2:	223f      	movs	r2, #63	; 0x3f
 80034f4:	409a      	lsls	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d004      	beq.n	8003532 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2280      	movs	r2, #128	; 0x80
 800352c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e00c      	b.n	800354c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2205      	movs	r2, #5
 8003536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0201 	bic.w	r2, r2, #1
 8003548:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003564:	4b8e      	ldr	r3, [pc, #568]	; (80037a0 <HAL_DMA_IRQHandler+0x248>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a8e      	ldr	r2, [pc, #568]	; (80037a4 <HAL_DMA_IRQHandler+0x24c>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	0a9b      	lsrs	r3, r3, #10
 8003570:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003576:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003582:	2208      	movs	r2, #8
 8003584:	409a      	lsls	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4013      	ands	r3, r2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d01a      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d013      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0204 	bic.w	r2, r2, #4
 80035aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b0:	2208      	movs	r2, #8
 80035b2:	409a      	lsls	r2, r3
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035bc:	f043 0201 	orr.w	r2, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c8:	2201      	movs	r2, #1
 80035ca:	409a      	lsls	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d012      	beq.n	80035fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00b      	beq.n	80035fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e6:	2201      	movs	r2, #1
 80035e8:	409a      	lsls	r2, r3
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f2:	f043 0202 	orr.w	r2, r3, #2
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fe:	2204      	movs	r2, #4
 8003600:	409a      	lsls	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4013      	ands	r3, r2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d012      	beq.n	8003630 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00b      	beq.n	8003630 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361c:	2204      	movs	r2, #4
 800361e:	409a      	lsls	r2, r3
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003628:	f043 0204 	orr.w	r2, r3, #4
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003634:	2210      	movs	r2, #16
 8003636:	409a      	lsls	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4013      	ands	r3, r2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d043      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b00      	cmp	r3, #0
 800364c:	d03c      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003652:	2210      	movs	r2, #16
 8003654:	409a      	lsls	r2, r3
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d018      	beq.n	800369a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d108      	bne.n	8003688 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	d024      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	4798      	blx	r3
 8003686:	e01f      	b.n	80036c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800368c:	2b00      	cmp	r3, #0
 800368e:	d01b      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	4798      	blx	r3
 8003698:	e016      	b.n	80036c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d107      	bne.n	80036b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0208 	bic.w	r2, r2, #8
 80036b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036cc:	2220      	movs	r2, #32
 80036ce:	409a      	lsls	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 808f 	beq.w	80037f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0310 	and.w	r3, r3, #16
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 8087 	beq.w	80037f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ee:	2220      	movs	r2, #32
 80036f0:	409a      	lsls	r2, r3
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b05      	cmp	r3, #5
 8003700:	d136      	bne.n	8003770 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0216 	bic.w	r2, r2, #22
 8003710:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695a      	ldr	r2, [r3, #20]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003720:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d103      	bne.n	8003732 <HAL_DMA_IRQHandler+0x1da>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0208 	bic.w	r2, r2, #8
 8003740:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003746:	223f      	movs	r2, #63	; 0x3f
 8003748:	409a      	lsls	r2, r3
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003762:	2b00      	cmp	r3, #0
 8003764:	d07e      	beq.n	8003864 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	4798      	blx	r3
        }
        return;
 800376e:	e079      	b.n	8003864 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d01d      	beq.n	80037ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10d      	bne.n	80037a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003790:	2b00      	cmp	r3, #0
 8003792:	d031      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	4798      	blx	r3
 800379c:	e02c      	b.n	80037f8 <HAL_DMA_IRQHandler+0x2a0>
 800379e:	bf00      	nop
 80037a0:	20000010 	.word	0x20000010
 80037a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d023      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	4798      	blx	r3
 80037b8:	e01e      	b.n	80037f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10f      	bne.n	80037e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0210 	bic.w	r2, r2, #16
 80037d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d032      	beq.n	8003866 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d022      	beq.n	8003852 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2205      	movs	r2, #5
 8003810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0201 	bic.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	3301      	adds	r3, #1
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	429a      	cmp	r2, r3
 800382e:	d307      	bcc.n	8003840 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f2      	bne.n	8003824 <HAL_DMA_IRQHandler+0x2cc>
 800383e:	e000      	b.n	8003842 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003840:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d005      	beq.n	8003866 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	4798      	blx	r3
 8003862:	e000      	b.n	8003866 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003864:	bf00      	nop
    }
  }
}
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003888:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b40      	cmp	r3, #64	; 0x40
 8003898:	d108      	bne.n	80038ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80038aa:	e007      	b.n	80038bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	60da      	str	r2, [r3, #12]
}
 80038bc:	bf00      	nop
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	3b10      	subs	r3, #16
 80038d8:	4a14      	ldr	r2, [pc, #80]	; (800392c <DMA_CalcBaseAndBitshift+0x64>)
 80038da:	fba2 2303 	umull	r2, r3, r2, r3
 80038de:	091b      	lsrs	r3, r3, #4
 80038e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038e2:	4a13      	ldr	r2, [pc, #76]	; (8003930 <DMA_CalcBaseAndBitshift+0x68>)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4413      	add	r3, r2
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2b03      	cmp	r3, #3
 80038f4:	d909      	bls.n	800390a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038fe:	f023 0303 	bic.w	r3, r3, #3
 8003902:	1d1a      	adds	r2, r3, #4
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	659a      	str	r2, [r3, #88]	; 0x58
 8003908:	e007      	b.n	800391a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003912:	f023 0303 	bic.w	r3, r3, #3
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	aaaaaaab 	.word	0xaaaaaaab
 8003930:	08007938 	.word	0x08007938

08003934 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003944:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d11f      	bne.n	800398e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b03      	cmp	r3, #3
 8003952:	d856      	bhi.n	8003a02 <DMA_CheckFifoParam+0xce>
 8003954:	a201      	add	r2, pc, #4	; (adr r2, 800395c <DMA_CheckFifoParam+0x28>)
 8003956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395a:	bf00      	nop
 800395c:	0800396d 	.word	0x0800396d
 8003960:	0800397f 	.word	0x0800397f
 8003964:	0800396d 	.word	0x0800396d
 8003968:	08003a03 	.word	0x08003a03
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d046      	beq.n	8003a06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800397c:	e043      	b.n	8003a06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003986:	d140      	bne.n	8003a0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800398c:	e03d      	b.n	8003a0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003996:	d121      	bne.n	80039dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b03      	cmp	r3, #3
 800399c:	d837      	bhi.n	8003a0e <DMA_CheckFifoParam+0xda>
 800399e:	a201      	add	r2, pc, #4	; (adr r2, 80039a4 <DMA_CheckFifoParam+0x70>)
 80039a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a4:	080039b5 	.word	0x080039b5
 80039a8:	080039bb 	.word	0x080039bb
 80039ac:	080039b5 	.word	0x080039b5
 80039b0:	080039cd 	.word	0x080039cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	73fb      	strb	r3, [r7, #15]
      break;
 80039b8:	e030      	b.n	8003a1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d025      	beq.n	8003a12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ca:	e022      	b.n	8003a12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039d4:	d11f      	bne.n	8003a16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039da:	e01c      	b.n	8003a16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d903      	bls.n	80039ea <DMA_CheckFifoParam+0xb6>
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b03      	cmp	r3, #3
 80039e6:	d003      	beq.n	80039f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039e8:	e018      	b.n	8003a1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	73fb      	strb	r3, [r7, #15]
      break;
 80039ee:	e015      	b.n	8003a1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00e      	beq.n	8003a1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003a00:	e00b      	b.n	8003a1a <DMA_CheckFifoParam+0xe6>
      break;
 8003a02:	bf00      	nop
 8003a04:	e00a      	b.n	8003a1c <DMA_CheckFifoParam+0xe8>
      break;
 8003a06:	bf00      	nop
 8003a08:	e008      	b.n	8003a1c <DMA_CheckFifoParam+0xe8>
      break;
 8003a0a:	bf00      	nop
 8003a0c:	e006      	b.n	8003a1c <DMA_CheckFifoParam+0xe8>
      break;
 8003a0e:	bf00      	nop
 8003a10:	e004      	b.n	8003a1c <DMA_CheckFifoParam+0xe8>
      break;
 8003a12:	bf00      	nop
 8003a14:	e002      	b.n	8003a1c <DMA_CheckFifoParam+0xe8>
      break;   
 8003a16:	bf00      	nop
 8003a18:	e000      	b.n	8003a1c <DMA_CheckFifoParam+0xe8>
      break;
 8003a1a:	bf00      	nop
    }
  } 
  
  return status; 
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop

08003a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b089      	sub	sp, #36	; 0x24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	e16b      	b.n	8003d20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a48:	2201      	movs	r2, #1
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	f040 815a 	bne.w	8003d1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d005      	beq.n	8003a7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d130      	bne.n	8003ae0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	2203      	movs	r2, #3
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4013      	ands	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	091b      	lsrs	r3, r3, #4
 8003aca:	f003 0201 	and.w	r2, r3, #1
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	d017      	beq.n	8003b1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	2203      	movs	r2, #3
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	43db      	mvns	r3, r3
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4013      	ands	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 0303 	and.w	r3, r3, #3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d123      	bne.n	8003b70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	08da      	lsrs	r2, r3, #3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3208      	adds	r2, #8
 8003b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	220f      	movs	r2, #15
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	08da      	lsrs	r2, r3, #3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3208      	adds	r2, #8
 8003b6a:	69b9      	ldr	r1, [r7, #24]
 8003b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	2203      	movs	r2, #3
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 0203 	and.w	r2, r3, #3
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 80b4 	beq.w	8003d1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	4b60      	ldr	r3, [pc, #384]	; (8003d38 <HAL_GPIO_Init+0x30c>)
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	4a5f      	ldr	r2, [pc, #380]	; (8003d38 <HAL_GPIO_Init+0x30c>)
 8003bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bc2:	4b5d      	ldr	r3, [pc, #372]	; (8003d38 <HAL_GPIO_Init+0x30c>)
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bce:	4a5b      	ldr	r2, [pc, #364]	; (8003d3c <HAL_GPIO_Init+0x310>)
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	089b      	lsrs	r3, r3, #2
 8003bd4:	3302      	adds	r3, #2
 8003bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	220f      	movs	r2, #15
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	43db      	mvns	r3, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a52      	ldr	r2, [pc, #328]	; (8003d40 <HAL_GPIO_Init+0x314>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d02b      	beq.n	8003c52 <HAL_GPIO_Init+0x226>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a51      	ldr	r2, [pc, #324]	; (8003d44 <HAL_GPIO_Init+0x318>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d025      	beq.n	8003c4e <HAL_GPIO_Init+0x222>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a50      	ldr	r2, [pc, #320]	; (8003d48 <HAL_GPIO_Init+0x31c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d01f      	beq.n	8003c4a <HAL_GPIO_Init+0x21e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a4f      	ldr	r2, [pc, #316]	; (8003d4c <HAL_GPIO_Init+0x320>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d019      	beq.n	8003c46 <HAL_GPIO_Init+0x21a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a4e      	ldr	r2, [pc, #312]	; (8003d50 <HAL_GPIO_Init+0x324>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d013      	beq.n	8003c42 <HAL_GPIO_Init+0x216>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a4d      	ldr	r2, [pc, #308]	; (8003d54 <HAL_GPIO_Init+0x328>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00d      	beq.n	8003c3e <HAL_GPIO_Init+0x212>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a4c      	ldr	r2, [pc, #304]	; (8003d58 <HAL_GPIO_Init+0x32c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d007      	beq.n	8003c3a <HAL_GPIO_Init+0x20e>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a4b      	ldr	r2, [pc, #300]	; (8003d5c <HAL_GPIO_Init+0x330>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d101      	bne.n	8003c36 <HAL_GPIO_Init+0x20a>
 8003c32:	2307      	movs	r3, #7
 8003c34:	e00e      	b.n	8003c54 <HAL_GPIO_Init+0x228>
 8003c36:	2308      	movs	r3, #8
 8003c38:	e00c      	b.n	8003c54 <HAL_GPIO_Init+0x228>
 8003c3a:	2306      	movs	r3, #6
 8003c3c:	e00a      	b.n	8003c54 <HAL_GPIO_Init+0x228>
 8003c3e:	2305      	movs	r3, #5
 8003c40:	e008      	b.n	8003c54 <HAL_GPIO_Init+0x228>
 8003c42:	2304      	movs	r3, #4
 8003c44:	e006      	b.n	8003c54 <HAL_GPIO_Init+0x228>
 8003c46:	2303      	movs	r3, #3
 8003c48:	e004      	b.n	8003c54 <HAL_GPIO_Init+0x228>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e002      	b.n	8003c54 <HAL_GPIO_Init+0x228>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <HAL_GPIO_Init+0x228>
 8003c52:	2300      	movs	r3, #0
 8003c54:	69fa      	ldr	r2, [r7, #28]
 8003c56:	f002 0203 	and.w	r2, r2, #3
 8003c5a:	0092      	lsls	r2, r2, #2
 8003c5c:	4093      	lsls	r3, r2
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c64:	4935      	ldr	r1, [pc, #212]	; (8003d3c <HAL_GPIO_Init+0x310>)
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	089b      	lsrs	r3, r3, #2
 8003c6a:	3302      	adds	r3, #2
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c72:	4b3b      	ldr	r3, [pc, #236]	; (8003d60 <HAL_GPIO_Init+0x334>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c96:	4a32      	ldr	r2, [pc, #200]	; (8003d60 <HAL_GPIO_Init+0x334>)
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c9c:	4b30      	ldr	r3, [pc, #192]	; (8003d60 <HAL_GPIO_Init+0x334>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cc0:	4a27      	ldr	r2, [pc, #156]	; (8003d60 <HAL_GPIO_Init+0x334>)
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cc6:	4b26      	ldr	r3, [pc, #152]	; (8003d60 <HAL_GPIO_Init+0x334>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cea:	4a1d      	ldr	r2, [pc, #116]	; (8003d60 <HAL_GPIO_Init+0x334>)
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cf0:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <HAL_GPIO_Init+0x334>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d14:	4a12      	ldr	r2, [pc, #72]	; (8003d60 <HAL_GPIO_Init+0x334>)
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	61fb      	str	r3, [r7, #28]
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	2b0f      	cmp	r3, #15
 8003d24:	f67f ae90 	bls.w	8003a48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
 8003d2c:	3724      	adds	r7, #36	; 0x24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	40013800 	.word	0x40013800
 8003d40:	40020000 	.word	0x40020000
 8003d44:	40020400 	.word	0x40020400
 8003d48:	40020800 	.word	0x40020800
 8003d4c:	40020c00 	.word	0x40020c00
 8003d50:	40021000 	.word	0x40021000
 8003d54:	40021400 	.word	0x40021400
 8003d58:	40021800 	.word	0x40021800
 8003d5c:	40021c00 	.word	0x40021c00
 8003d60:	40013c00 	.word	0x40013c00

08003d64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	887b      	ldrh	r3, [r7, #2]
 8003d76:	4013      	ands	r3, r2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	73fb      	strb	r3, [r7, #15]
 8003d80:	e001      	b.n	8003d86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d82:	2300      	movs	r3, #0
 8003d84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	807b      	strh	r3, [r7, #2]
 8003da0:	4613      	mov	r3, r2
 8003da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003da4:	787b      	ldrb	r3, [r7, #1]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003daa:	887a      	ldrh	r2, [r7, #2]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003db0:	e003      	b.n	8003dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003db2:	887b      	ldrh	r3, [r7, #2]
 8003db4:	041a      	lsls	r2, r3, #16
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	619a      	str	r2, [r3, #24]
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b085      	sub	sp, #20
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
 8003dce:	460b      	mov	r3, r1
 8003dd0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003dd8:	887a      	ldrh	r2, [r7, #2]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	041a      	lsls	r2, r3, #16
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	43d9      	mvns	r1, r3
 8003de4:	887b      	ldrh	r3, [r7, #2]
 8003de6:	400b      	ands	r3, r1
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	619a      	str	r2, [r3, #24]
}
 8003dee:	bf00      	nop
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
	...

08003dfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e267      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d075      	beq.n	8003f06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e1a:	4b88      	ldr	r3, [pc, #544]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d00c      	beq.n	8003e40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e26:	4b85      	ldr	r3, [pc, #532]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d112      	bne.n	8003e58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e32:	4b82      	ldr	r3, [pc, #520]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e3e:	d10b      	bne.n	8003e58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e40:	4b7e      	ldr	r3, [pc, #504]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d05b      	beq.n	8003f04 <HAL_RCC_OscConfig+0x108>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d157      	bne.n	8003f04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e242      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e60:	d106      	bne.n	8003e70 <HAL_RCC_OscConfig+0x74>
 8003e62:	4b76      	ldr	r3, [pc, #472]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a75      	ldr	r2, [pc, #468]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	e01d      	b.n	8003eac <HAL_RCC_OscConfig+0xb0>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e78:	d10c      	bne.n	8003e94 <HAL_RCC_OscConfig+0x98>
 8003e7a:	4b70      	ldr	r3, [pc, #448]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a6f      	ldr	r2, [pc, #444]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	4b6d      	ldr	r3, [pc, #436]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a6c      	ldr	r2, [pc, #432]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	e00b      	b.n	8003eac <HAL_RCC_OscConfig+0xb0>
 8003e94:	4b69      	ldr	r3, [pc, #420]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a68      	ldr	r2, [pc, #416]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	4b66      	ldr	r3, [pc, #408]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a65      	ldr	r2, [pc, #404]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d013      	beq.n	8003edc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb4:	f7fe fc94 	bl	80027e0 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ebc:	f7fe fc90 	bl	80027e0 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b64      	cmp	r3, #100	; 0x64
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e207      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ece:	4b5b      	ldr	r3, [pc, #364]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0xc0>
 8003eda:	e014      	b.n	8003f06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003edc:	f7fe fc80 	bl	80027e0 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ee4:	f7fe fc7c 	bl	80027e0 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b64      	cmp	r3, #100	; 0x64
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e1f3      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ef6:	4b51      	ldr	r3, [pc, #324]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0xe8>
 8003f02:	e000      	b.n	8003f06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d063      	beq.n	8003fda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f12:	4b4a      	ldr	r3, [pc, #296]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 030c 	and.w	r3, r3, #12
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00b      	beq.n	8003f36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f1e:	4b47      	ldr	r3, [pc, #284]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d11c      	bne.n	8003f64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f2a:	4b44      	ldr	r3, [pc, #272]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d116      	bne.n	8003f64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f36:	4b41      	ldr	r3, [pc, #260]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d005      	beq.n	8003f4e <HAL_RCC_OscConfig+0x152>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d001      	beq.n	8003f4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e1c7      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4e:	4b3b      	ldr	r3, [pc, #236]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	4937      	ldr	r1, [pc, #220]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f62:	e03a      	b.n	8003fda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d020      	beq.n	8003fae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f6c:	4b34      	ldr	r3, [pc, #208]	; (8004040 <HAL_RCC_OscConfig+0x244>)
 8003f6e:	2201      	movs	r2, #1
 8003f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f72:	f7fe fc35 	bl	80027e0 <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f7a:	f7fe fc31 	bl	80027e0 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e1a8      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f8c:	4b2b      	ldr	r3, [pc, #172]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0f0      	beq.n	8003f7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f98:	4b28      	ldr	r3, [pc, #160]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4925      	ldr	r1, [pc, #148]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	600b      	str	r3, [r1, #0]
 8003fac:	e015      	b.n	8003fda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fae:	4b24      	ldr	r3, [pc, #144]	; (8004040 <HAL_RCC_OscConfig+0x244>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb4:	f7fe fc14 	bl	80027e0 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fbc:	f7fe fc10 	bl	80027e0 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e187      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fce:	4b1b      	ldr	r3, [pc, #108]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f0      	bne.n	8003fbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d036      	beq.n	8004054 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d016      	beq.n	800401c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fee:	4b15      	ldr	r3, [pc, #84]	; (8004044 <HAL_RCC_OscConfig+0x248>)
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff4:	f7fe fbf4 	bl	80027e0 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ffc:	f7fe fbf0 	bl	80027e0 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e167      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800400e:	4b0b      	ldr	r3, [pc, #44]	; (800403c <HAL_RCC_OscConfig+0x240>)
 8004010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f0      	beq.n	8003ffc <HAL_RCC_OscConfig+0x200>
 800401a:	e01b      	b.n	8004054 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800401c:	4b09      	ldr	r3, [pc, #36]	; (8004044 <HAL_RCC_OscConfig+0x248>)
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004022:	f7fe fbdd 	bl	80027e0 <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004028:	e00e      	b.n	8004048 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800402a:	f7fe fbd9 	bl	80027e0 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d907      	bls.n	8004048 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e150      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
 800403c:	40023800 	.word	0x40023800
 8004040:	42470000 	.word	0x42470000
 8004044:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004048:	4b88      	ldr	r3, [pc, #544]	; (800426c <HAL_RCC_OscConfig+0x470>)
 800404a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1ea      	bne.n	800402a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 8097 	beq.w	8004190 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004062:	2300      	movs	r3, #0
 8004064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004066:	4b81      	ldr	r3, [pc, #516]	; (800426c <HAL_RCC_OscConfig+0x470>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10f      	bne.n	8004092 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004072:	2300      	movs	r3, #0
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	4b7d      	ldr	r3, [pc, #500]	; (800426c <HAL_RCC_OscConfig+0x470>)
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	4a7c      	ldr	r2, [pc, #496]	; (800426c <HAL_RCC_OscConfig+0x470>)
 800407c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004080:	6413      	str	r3, [r2, #64]	; 0x40
 8004082:	4b7a      	ldr	r3, [pc, #488]	; (800426c <HAL_RCC_OscConfig+0x470>)
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408a:	60bb      	str	r3, [r7, #8]
 800408c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800408e:	2301      	movs	r3, #1
 8004090:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004092:	4b77      	ldr	r3, [pc, #476]	; (8004270 <HAL_RCC_OscConfig+0x474>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409a:	2b00      	cmp	r3, #0
 800409c:	d118      	bne.n	80040d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800409e:	4b74      	ldr	r3, [pc, #464]	; (8004270 <HAL_RCC_OscConfig+0x474>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a73      	ldr	r2, [pc, #460]	; (8004270 <HAL_RCC_OscConfig+0x474>)
 80040a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040aa:	f7fe fb99 	bl	80027e0 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b2:	f7fe fb95 	bl	80027e0 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e10c      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c4:	4b6a      	ldr	r3, [pc, #424]	; (8004270 <HAL_RCC_OscConfig+0x474>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0f0      	beq.n	80040b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d106      	bne.n	80040e6 <HAL_RCC_OscConfig+0x2ea>
 80040d8:	4b64      	ldr	r3, [pc, #400]	; (800426c <HAL_RCC_OscConfig+0x470>)
 80040da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040dc:	4a63      	ldr	r2, [pc, #396]	; (800426c <HAL_RCC_OscConfig+0x470>)
 80040de:	f043 0301 	orr.w	r3, r3, #1
 80040e2:	6713      	str	r3, [r2, #112]	; 0x70
 80040e4:	e01c      	b.n	8004120 <HAL_RCC_OscConfig+0x324>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	2b05      	cmp	r3, #5
 80040ec:	d10c      	bne.n	8004108 <HAL_RCC_OscConfig+0x30c>
 80040ee:	4b5f      	ldr	r3, [pc, #380]	; (800426c <HAL_RCC_OscConfig+0x470>)
 80040f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f2:	4a5e      	ldr	r2, [pc, #376]	; (800426c <HAL_RCC_OscConfig+0x470>)
 80040f4:	f043 0304 	orr.w	r3, r3, #4
 80040f8:	6713      	str	r3, [r2, #112]	; 0x70
 80040fa:	4b5c      	ldr	r3, [pc, #368]	; (800426c <HAL_RCC_OscConfig+0x470>)
 80040fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fe:	4a5b      	ldr	r2, [pc, #364]	; (800426c <HAL_RCC_OscConfig+0x470>)
 8004100:	f043 0301 	orr.w	r3, r3, #1
 8004104:	6713      	str	r3, [r2, #112]	; 0x70
 8004106:	e00b      	b.n	8004120 <HAL_RCC_OscConfig+0x324>
 8004108:	4b58      	ldr	r3, [pc, #352]	; (800426c <HAL_RCC_OscConfig+0x470>)
 800410a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410c:	4a57      	ldr	r2, [pc, #348]	; (800426c <HAL_RCC_OscConfig+0x470>)
 800410e:	f023 0301 	bic.w	r3, r3, #1
 8004112:	6713      	str	r3, [r2, #112]	; 0x70
 8004114:	4b55      	ldr	r3, [pc, #340]	; (800426c <HAL_RCC_OscConfig+0x470>)
 8004116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004118:	4a54      	ldr	r2, [pc, #336]	; (800426c <HAL_RCC_OscConfig+0x470>)
 800411a:	f023 0304 	bic.w	r3, r3, #4
 800411e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d015      	beq.n	8004154 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004128:	f7fe fb5a 	bl	80027e0 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800412e:	e00a      	b.n	8004146 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004130:	f7fe fb56 	bl	80027e0 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	f241 3288 	movw	r2, #5000	; 0x1388
 800413e:	4293      	cmp	r3, r2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e0cb      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004146:	4b49      	ldr	r3, [pc, #292]	; (800426c <HAL_RCC_OscConfig+0x470>)
 8004148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0ee      	beq.n	8004130 <HAL_RCC_OscConfig+0x334>
 8004152:	e014      	b.n	800417e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004154:	f7fe fb44 	bl	80027e0 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800415a:	e00a      	b.n	8004172 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800415c:	f7fe fb40 	bl	80027e0 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	f241 3288 	movw	r2, #5000	; 0x1388
 800416a:	4293      	cmp	r3, r2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e0b5      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004172:	4b3e      	ldr	r3, [pc, #248]	; (800426c <HAL_RCC_OscConfig+0x470>)
 8004174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1ee      	bne.n	800415c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800417e:	7dfb      	ldrb	r3, [r7, #23]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d105      	bne.n	8004190 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004184:	4b39      	ldr	r3, [pc, #228]	; (800426c <HAL_RCC_OscConfig+0x470>)
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	4a38      	ldr	r2, [pc, #224]	; (800426c <HAL_RCC_OscConfig+0x470>)
 800418a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800418e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 80a1 	beq.w	80042dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800419a:	4b34      	ldr	r3, [pc, #208]	; (800426c <HAL_RCC_OscConfig+0x470>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 030c 	and.w	r3, r3, #12
 80041a2:	2b08      	cmp	r3, #8
 80041a4:	d05c      	beq.n	8004260 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d141      	bne.n	8004232 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ae:	4b31      	ldr	r3, [pc, #196]	; (8004274 <HAL_RCC_OscConfig+0x478>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b4:	f7fe fb14 	bl	80027e0 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041bc:	f7fe fb10 	bl	80027e0 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e087      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ce:	4b27      	ldr	r3, [pc, #156]	; (800426c <HAL_RCC_OscConfig+0x470>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f0      	bne.n	80041bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69da      	ldr	r2, [r3, #28]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	019b      	lsls	r3, r3, #6
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f0:	085b      	lsrs	r3, r3, #1
 80041f2:	3b01      	subs	r3, #1
 80041f4:	041b      	lsls	r3, r3, #16
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	061b      	lsls	r3, r3, #24
 80041fe:	491b      	ldr	r1, [pc, #108]	; (800426c <HAL_RCC_OscConfig+0x470>)
 8004200:	4313      	orrs	r3, r2
 8004202:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004204:	4b1b      	ldr	r3, [pc, #108]	; (8004274 <HAL_RCC_OscConfig+0x478>)
 8004206:	2201      	movs	r2, #1
 8004208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420a:	f7fe fae9 	bl	80027e0 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004212:	f7fe fae5 	bl	80027e0 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e05c      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004224:	4b11      	ldr	r3, [pc, #68]	; (800426c <HAL_RCC_OscConfig+0x470>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0f0      	beq.n	8004212 <HAL_RCC_OscConfig+0x416>
 8004230:	e054      	b.n	80042dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004232:	4b10      	ldr	r3, [pc, #64]	; (8004274 <HAL_RCC_OscConfig+0x478>)
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004238:	f7fe fad2 	bl	80027e0 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004240:	f7fe face 	bl	80027e0 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e045      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004252:	4b06      	ldr	r3, [pc, #24]	; (800426c <HAL_RCC_OscConfig+0x470>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f0      	bne.n	8004240 <HAL_RCC_OscConfig+0x444>
 800425e:	e03d      	b.n	80042dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d107      	bne.n	8004278 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e038      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
 800426c:	40023800 	.word	0x40023800
 8004270:	40007000 	.word	0x40007000
 8004274:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004278:	4b1b      	ldr	r3, [pc, #108]	; (80042e8 <HAL_RCC_OscConfig+0x4ec>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d028      	beq.n	80042d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004290:	429a      	cmp	r2, r3
 8004292:	d121      	bne.n	80042d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800429e:	429a      	cmp	r2, r3
 80042a0:	d11a      	bne.n	80042d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042a8:	4013      	ands	r3, r2
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d111      	bne.n	80042d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042be:	085b      	lsrs	r3, r3, #1
 80042c0:	3b01      	subs	r3, #1
 80042c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d107      	bne.n	80042d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d001      	beq.n	80042dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e000      	b.n	80042de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40023800 	.word	0x40023800

080042ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0cc      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004300:	4b68      	ldr	r3, [pc, #416]	; (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d90c      	bls.n	8004328 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430e:	4b65      	ldr	r3, [pc, #404]	; (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004316:	4b63      	ldr	r3, [pc, #396]	; (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d001      	beq.n	8004328 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e0b8      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d020      	beq.n	8004376 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004340:	4b59      	ldr	r3, [pc, #356]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	4a58      	ldr	r2, [pc, #352]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800434a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b00      	cmp	r3, #0
 8004356:	d005      	beq.n	8004364 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004358:	4b53      	ldr	r3, [pc, #332]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	4a52      	ldr	r2, [pc, #328]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004362:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004364:	4b50      	ldr	r3, [pc, #320]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	494d      	ldr	r1, [pc, #308]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004372:	4313      	orrs	r3, r2
 8004374:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d044      	beq.n	800440c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d107      	bne.n	800439a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438a:	4b47      	ldr	r3, [pc, #284]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d119      	bne.n	80043ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e07f      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d003      	beq.n	80043aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d107      	bne.n	80043ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043aa:	4b3f      	ldr	r3, [pc, #252]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d109      	bne.n	80043ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e06f      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ba:	4b3b      	ldr	r3, [pc, #236]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e067      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ca:	4b37      	ldr	r3, [pc, #220]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f023 0203 	bic.w	r2, r3, #3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4934      	ldr	r1, [pc, #208]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043dc:	f7fe fa00 	bl	80027e0 <HAL_GetTick>
 80043e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e2:	e00a      	b.n	80043fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e4:	f7fe f9fc 	bl	80027e0 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e04f      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fa:	4b2b      	ldr	r3, [pc, #172]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 020c 	and.w	r2, r3, #12
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	429a      	cmp	r2, r3
 800440a:	d1eb      	bne.n	80043e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800440c:	4b25      	ldr	r3, [pc, #148]	; (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d20c      	bcs.n	8004434 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441a:	4b22      	ldr	r3, [pc, #136]	; (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004422:	4b20      	ldr	r3, [pc, #128]	; (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d001      	beq.n	8004434 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e032      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	d008      	beq.n	8004452 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004440:	4b19      	ldr	r3, [pc, #100]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	4916      	ldr	r1, [pc, #88]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	4313      	orrs	r3, r2
 8004450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d009      	beq.n	8004472 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800445e:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	490e      	ldr	r1, [pc, #56]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800446e:	4313      	orrs	r3, r2
 8004470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004472:	f000 f821 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 8004476:	4602      	mov	r2, r0
 8004478:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	091b      	lsrs	r3, r3, #4
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	490a      	ldr	r1, [pc, #40]	; (80044ac <HAL_RCC_ClockConfig+0x1c0>)
 8004484:	5ccb      	ldrb	r3, [r1, r3]
 8004486:	fa22 f303 	lsr.w	r3, r2, r3
 800448a:	4a09      	ldr	r2, [pc, #36]	; (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 800448c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800448e:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f7fe f86e 	bl	8002574 <HAL_InitTick>

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40023c00 	.word	0x40023c00
 80044a8:	40023800 	.word	0x40023800
 80044ac:	08007920 	.word	0x08007920
 80044b0:	20000010 	.word	0x20000010
 80044b4:	20000014 	.word	0x20000014

080044b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044bc:	b094      	sub	sp, #80	; 0x50
 80044be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	647b      	str	r3, [r7, #68]	; 0x44
 80044c4:	2300      	movs	r3, #0
 80044c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044c8:	2300      	movs	r3, #0
 80044ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044d0:	4b79      	ldr	r3, [pc, #484]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 030c 	and.w	r3, r3, #12
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d00d      	beq.n	80044f8 <HAL_RCC_GetSysClockFreq+0x40>
 80044dc:	2b08      	cmp	r3, #8
 80044de:	f200 80e1 	bhi.w	80046a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_RCC_GetSysClockFreq+0x34>
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d003      	beq.n	80044f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ea:	e0db      	b.n	80046a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044ec:	4b73      	ldr	r3, [pc, #460]	; (80046bc <HAL_RCC_GetSysClockFreq+0x204>)
 80044ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80044f0:	e0db      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044f2:	4b73      	ldr	r3, [pc, #460]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80044f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044f6:	e0d8      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044f8:	4b6f      	ldr	r3, [pc, #444]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004500:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004502:	4b6d      	ldr	r3, [pc, #436]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d063      	beq.n	80045d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800450e:	4b6a      	ldr	r3, [pc, #424]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	099b      	lsrs	r3, r3, #6
 8004514:	2200      	movs	r2, #0
 8004516:	63bb      	str	r3, [r7, #56]	; 0x38
 8004518:	63fa      	str	r2, [r7, #60]	; 0x3c
 800451a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004520:	633b      	str	r3, [r7, #48]	; 0x30
 8004522:	2300      	movs	r3, #0
 8004524:	637b      	str	r3, [r7, #52]	; 0x34
 8004526:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800452a:	4622      	mov	r2, r4
 800452c:	462b      	mov	r3, r5
 800452e:	f04f 0000 	mov.w	r0, #0
 8004532:	f04f 0100 	mov.w	r1, #0
 8004536:	0159      	lsls	r1, r3, #5
 8004538:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800453c:	0150      	lsls	r0, r2, #5
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	4621      	mov	r1, r4
 8004544:	1a51      	subs	r1, r2, r1
 8004546:	6139      	str	r1, [r7, #16]
 8004548:	4629      	mov	r1, r5
 800454a:	eb63 0301 	sbc.w	r3, r3, r1
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800455c:	4659      	mov	r1, fp
 800455e:	018b      	lsls	r3, r1, #6
 8004560:	4651      	mov	r1, sl
 8004562:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004566:	4651      	mov	r1, sl
 8004568:	018a      	lsls	r2, r1, #6
 800456a:	4651      	mov	r1, sl
 800456c:	ebb2 0801 	subs.w	r8, r2, r1
 8004570:	4659      	mov	r1, fp
 8004572:	eb63 0901 	sbc.w	r9, r3, r1
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	f04f 0300 	mov.w	r3, #0
 800457e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004582:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004586:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800458a:	4690      	mov	r8, r2
 800458c:	4699      	mov	r9, r3
 800458e:	4623      	mov	r3, r4
 8004590:	eb18 0303 	adds.w	r3, r8, r3
 8004594:	60bb      	str	r3, [r7, #8]
 8004596:	462b      	mov	r3, r5
 8004598:	eb49 0303 	adc.w	r3, r9, r3
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045aa:	4629      	mov	r1, r5
 80045ac:	024b      	lsls	r3, r1, #9
 80045ae:	4621      	mov	r1, r4
 80045b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045b4:	4621      	mov	r1, r4
 80045b6:	024a      	lsls	r2, r1, #9
 80045b8:	4610      	mov	r0, r2
 80045ba:	4619      	mov	r1, r3
 80045bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045be:	2200      	movs	r2, #0
 80045c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80045c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045c8:	f7fc faa0 	bl	8000b0c <__aeabi_uldivmod>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4613      	mov	r3, r2
 80045d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045d4:	e058      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045d6:	4b38      	ldr	r3, [pc, #224]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	099b      	lsrs	r3, r3, #6
 80045dc:	2200      	movs	r2, #0
 80045de:	4618      	mov	r0, r3
 80045e0:	4611      	mov	r1, r2
 80045e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045e6:	623b      	str	r3, [r7, #32]
 80045e8:	2300      	movs	r3, #0
 80045ea:	627b      	str	r3, [r7, #36]	; 0x24
 80045ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045f0:	4642      	mov	r2, r8
 80045f2:	464b      	mov	r3, r9
 80045f4:	f04f 0000 	mov.w	r0, #0
 80045f8:	f04f 0100 	mov.w	r1, #0
 80045fc:	0159      	lsls	r1, r3, #5
 80045fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004602:	0150      	lsls	r0, r2, #5
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4641      	mov	r1, r8
 800460a:	ebb2 0a01 	subs.w	sl, r2, r1
 800460e:	4649      	mov	r1, r9
 8004610:	eb63 0b01 	sbc.w	fp, r3, r1
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004620:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004624:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004628:	ebb2 040a 	subs.w	r4, r2, sl
 800462c:	eb63 050b 	sbc.w	r5, r3, fp
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	f04f 0300 	mov.w	r3, #0
 8004638:	00eb      	lsls	r3, r5, #3
 800463a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800463e:	00e2      	lsls	r2, r4, #3
 8004640:	4614      	mov	r4, r2
 8004642:	461d      	mov	r5, r3
 8004644:	4643      	mov	r3, r8
 8004646:	18e3      	adds	r3, r4, r3
 8004648:	603b      	str	r3, [r7, #0]
 800464a:	464b      	mov	r3, r9
 800464c:	eb45 0303 	adc.w	r3, r5, r3
 8004650:	607b      	str	r3, [r7, #4]
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800465e:	4629      	mov	r1, r5
 8004660:	028b      	lsls	r3, r1, #10
 8004662:	4621      	mov	r1, r4
 8004664:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004668:	4621      	mov	r1, r4
 800466a:	028a      	lsls	r2, r1, #10
 800466c:	4610      	mov	r0, r2
 800466e:	4619      	mov	r1, r3
 8004670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004672:	2200      	movs	r2, #0
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	61fa      	str	r2, [r7, #28]
 8004678:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800467c:	f7fc fa46 	bl	8000b0c <__aeabi_uldivmod>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4613      	mov	r3, r2
 8004686:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004688:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	0c1b      	lsrs	r3, r3, #16
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	3301      	adds	r3, #1
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004698:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800469a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800469c:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046a2:	e002      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046a4:	4b05      	ldr	r3, [pc, #20]	; (80046bc <HAL_RCC_GetSysClockFreq+0x204>)
 80046a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3750      	adds	r7, #80	; 0x50
 80046b0:	46bd      	mov	sp, r7
 80046b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046b6:	bf00      	nop
 80046b8:	40023800 	.word	0x40023800
 80046bc:	00f42400 	.word	0x00f42400
 80046c0:	007a1200 	.word	0x007a1200

080046c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046c8:	4b03      	ldr	r3, [pc, #12]	; (80046d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80046ca:	681b      	ldr	r3, [r3, #0]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	20000010 	.word	0x20000010

080046dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046e0:	f7ff fff0 	bl	80046c4 <HAL_RCC_GetHCLKFreq>
 80046e4:	4602      	mov	r2, r0
 80046e6:	4b05      	ldr	r3, [pc, #20]	; (80046fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	0a9b      	lsrs	r3, r3, #10
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	4903      	ldr	r1, [pc, #12]	; (8004700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046f2:	5ccb      	ldrb	r3, [r1, r3]
 80046f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40023800 	.word	0x40023800
 8004700:	08007930 	.word	0x08007930

08004704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004708:	f7ff ffdc 	bl	80046c4 <HAL_RCC_GetHCLKFreq>
 800470c:	4602      	mov	r2, r0
 800470e:	4b05      	ldr	r3, [pc, #20]	; (8004724 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	0b5b      	lsrs	r3, r3, #13
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	4903      	ldr	r1, [pc, #12]	; (8004728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800471a:	5ccb      	ldrb	r3, [r1, r3]
 800471c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004720:	4618      	mov	r0, r3
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40023800 	.word	0x40023800
 8004728:	08007930 	.word	0x08007930

0800472c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	220f      	movs	r2, #15
 800473a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800473c:	4b12      	ldr	r3, [pc, #72]	; (8004788 <HAL_RCC_GetClockConfig+0x5c>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f003 0203 	and.w	r2, r3, #3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004748:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <HAL_RCC_GetClockConfig+0x5c>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004754:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <HAL_RCC_GetClockConfig+0x5c>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004760:	4b09      	ldr	r3, [pc, #36]	; (8004788 <HAL_RCC_GetClockConfig+0x5c>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	08db      	lsrs	r3, r3, #3
 8004766:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800476e:	4b07      	ldr	r3, [pc, #28]	; (800478c <HAL_RCC_GetClockConfig+0x60>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0207 	and.w	r2, r3, #7
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	601a      	str	r2, [r3, #0]
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40023800 	.word	0x40023800
 800478c:	40023c00 	.word	0x40023c00

08004790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e041      	b.n	8004826 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7fd fdf0 	bl	800239c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3304      	adds	r3, #4
 80047cc:	4619      	mov	r1, r3
 80047ce:	4610      	mov	r0, r2
 80047d0:	f000 fa96 	bl	8004d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
	...

08004830 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b01      	cmp	r3, #1
 8004842:	d001      	beq.n	8004848 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e04e      	b.n	80048e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0201 	orr.w	r2, r2, #1
 800485e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a23      	ldr	r2, [pc, #140]	; (80048f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d022      	beq.n	80048b0 <HAL_TIM_Base_Start_IT+0x80>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004872:	d01d      	beq.n	80048b0 <HAL_TIM_Base_Start_IT+0x80>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a1f      	ldr	r2, [pc, #124]	; (80048f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d018      	beq.n	80048b0 <HAL_TIM_Base_Start_IT+0x80>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a1e      	ldr	r2, [pc, #120]	; (80048fc <HAL_TIM_Base_Start_IT+0xcc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d013      	beq.n	80048b0 <HAL_TIM_Base_Start_IT+0x80>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a1c      	ldr	r2, [pc, #112]	; (8004900 <HAL_TIM_Base_Start_IT+0xd0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00e      	beq.n	80048b0 <HAL_TIM_Base_Start_IT+0x80>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a1b      	ldr	r2, [pc, #108]	; (8004904 <HAL_TIM_Base_Start_IT+0xd4>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d009      	beq.n	80048b0 <HAL_TIM_Base_Start_IT+0x80>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a19      	ldr	r2, [pc, #100]	; (8004908 <HAL_TIM_Base_Start_IT+0xd8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d004      	beq.n	80048b0 <HAL_TIM_Base_Start_IT+0x80>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a18      	ldr	r2, [pc, #96]	; (800490c <HAL_TIM_Base_Start_IT+0xdc>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d111      	bne.n	80048d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b06      	cmp	r3, #6
 80048c0:	d010      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0201 	orr.w	r2, r2, #1
 80048d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d2:	e007      	b.n	80048e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	40010000 	.word	0x40010000
 80048f8:	40000400 	.word	0x40000400
 80048fc:	40000800 	.word	0x40000800
 8004900:	40000c00 	.word	0x40000c00
 8004904:	40010400 	.word	0x40010400
 8004908:	40014000 	.word	0x40014000
 800490c:	40001800 	.word	0x40001800

08004910 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b02      	cmp	r3, #2
 8004924:	d122      	bne.n	800496c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b02      	cmp	r3, #2
 8004932:	d11b      	bne.n	800496c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f06f 0202 	mvn.w	r2, #2
 800493c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f9b5 	bl	8004cc2 <HAL_TIM_IC_CaptureCallback>
 8004958:	e005      	b.n	8004966 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f9a7 	bl	8004cae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f9b8 	bl	8004cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	2b04      	cmp	r3, #4
 8004978:	d122      	bne.n	80049c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b04      	cmp	r3, #4
 8004986:	d11b      	bne.n	80049c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f06f 0204 	mvn.w	r2, #4
 8004990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2202      	movs	r2, #2
 8004996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f98b 	bl	8004cc2 <HAL_TIM_IC_CaptureCallback>
 80049ac:	e005      	b.n	80049ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f97d 	bl	8004cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f98e 	bl	8004cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d122      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d11b      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f06f 0208 	mvn.w	r2, #8
 80049e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2204      	movs	r2, #4
 80049ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f961 	bl	8004cc2 <HAL_TIM_IC_CaptureCallback>
 8004a00:	e005      	b.n	8004a0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f953 	bl	8004cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f964 	bl	8004cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f003 0310 	and.w	r3, r3, #16
 8004a1e:	2b10      	cmp	r3, #16
 8004a20:	d122      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f003 0310 	and.w	r3, r3, #16
 8004a2c:	2b10      	cmp	r3, #16
 8004a2e:	d11b      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0210 	mvn.w	r2, #16
 8004a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2208      	movs	r2, #8
 8004a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f937 	bl	8004cc2 <HAL_TIM_IC_CaptureCallback>
 8004a54:	e005      	b.n	8004a62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f929 	bl	8004cae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f93a 	bl	8004cd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d10e      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d107      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f06f 0201 	mvn.w	r2, #1
 8004a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7fd fbb4 	bl	80021fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9e:	2b80      	cmp	r3, #128	; 0x80
 8004aa0:	d10e      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aac:	2b80      	cmp	r3, #128	; 0x80
 8004aae:	d107      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fae0 	bl	8005080 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aca:	2b40      	cmp	r3, #64	; 0x40
 8004acc:	d10e      	bne.n	8004aec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad8:	2b40      	cmp	r3, #64	; 0x40
 8004ada:	d107      	bne.n	8004aec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f8ff 	bl	8004cea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	f003 0320 	and.w	r3, r3, #32
 8004af6:	2b20      	cmp	r3, #32
 8004af8:	d10e      	bne.n	8004b18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f003 0320 	and.w	r3, r3, #32
 8004b04:	2b20      	cmp	r3, #32
 8004b06:	d107      	bne.n	8004b18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f06f 0220 	mvn.w	r2, #32
 8004b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 faaa 	bl	800506c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b18:	bf00      	nop
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_TIM_ConfigClockSource+0x1c>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e0b4      	b.n	8004ca6 <HAL_TIM_ConfigClockSource+0x186>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b74:	d03e      	beq.n	8004bf4 <HAL_TIM_ConfigClockSource+0xd4>
 8004b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b7a:	f200 8087 	bhi.w	8004c8c <HAL_TIM_ConfigClockSource+0x16c>
 8004b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b82:	f000 8086 	beq.w	8004c92 <HAL_TIM_ConfigClockSource+0x172>
 8004b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b8a:	d87f      	bhi.n	8004c8c <HAL_TIM_ConfigClockSource+0x16c>
 8004b8c:	2b70      	cmp	r3, #112	; 0x70
 8004b8e:	d01a      	beq.n	8004bc6 <HAL_TIM_ConfigClockSource+0xa6>
 8004b90:	2b70      	cmp	r3, #112	; 0x70
 8004b92:	d87b      	bhi.n	8004c8c <HAL_TIM_ConfigClockSource+0x16c>
 8004b94:	2b60      	cmp	r3, #96	; 0x60
 8004b96:	d050      	beq.n	8004c3a <HAL_TIM_ConfigClockSource+0x11a>
 8004b98:	2b60      	cmp	r3, #96	; 0x60
 8004b9a:	d877      	bhi.n	8004c8c <HAL_TIM_ConfigClockSource+0x16c>
 8004b9c:	2b50      	cmp	r3, #80	; 0x50
 8004b9e:	d03c      	beq.n	8004c1a <HAL_TIM_ConfigClockSource+0xfa>
 8004ba0:	2b50      	cmp	r3, #80	; 0x50
 8004ba2:	d873      	bhi.n	8004c8c <HAL_TIM_ConfigClockSource+0x16c>
 8004ba4:	2b40      	cmp	r3, #64	; 0x40
 8004ba6:	d058      	beq.n	8004c5a <HAL_TIM_ConfigClockSource+0x13a>
 8004ba8:	2b40      	cmp	r3, #64	; 0x40
 8004baa:	d86f      	bhi.n	8004c8c <HAL_TIM_ConfigClockSource+0x16c>
 8004bac:	2b30      	cmp	r3, #48	; 0x30
 8004bae:	d064      	beq.n	8004c7a <HAL_TIM_ConfigClockSource+0x15a>
 8004bb0:	2b30      	cmp	r3, #48	; 0x30
 8004bb2:	d86b      	bhi.n	8004c8c <HAL_TIM_ConfigClockSource+0x16c>
 8004bb4:	2b20      	cmp	r3, #32
 8004bb6:	d060      	beq.n	8004c7a <HAL_TIM_ConfigClockSource+0x15a>
 8004bb8:	2b20      	cmp	r3, #32
 8004bba:	d867      	bhi.n	8004c8c <HAL_TIM_ConfigClockSource+0x16c>
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d05c      	beq.n	8004c7a <HAL_TIM_ConfigClockSource+0x15a>
 8004bc0:	2b10      	cmp	r3, #16
 8004bc2:	d05a      	beq.n	8004c7a <HAL_TIM_ConfigClockSource+0x15a>
 8004bc4:	e062      	b.n	8004c8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6818      	ldr	r0, [r3, #0]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	6899      	ldr	r1, [r3, #8]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f000 f9ad 	bl	8004f34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004be8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	609a      	str	r2, [r3, #8]
      break;
 8004bf2:	e04f      	b.n	8004c94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6818      	ldr	r0, [r3, #0]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	6899      	ldr	r1, [r3, #8]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f000 f996 	bl	8004f34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c16:	609a      	str	r2, [r3, #8]
      break;
 8004c18:	e03c      	b.n	8004c94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6818      	ldr	r0, [r3, #0]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	6859      	ldr	r1, [r3, #4]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	461a      	mov	r2, r3
 8004c28:	f000 f90a 	bl	8004e40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2150      	movs	r1, #80	; 0x50
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 f963 	bl	8004efe <TIM_ITRx_SetConfig>
      break;
 8004c38:	e02c      	b.n	8004c94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	6859      	ldr	r1, [r3, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	461a      	mov	r2, r3
 8004c48:	f000 f929 	bl	8004e9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2160      	movs	r1, #96	; 0x60
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 f953 	bl	8004efe <TIM_ITRx_SetConfig>
      break;
 8004c58:	e01c      	b.n	8004c94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6818      	ldr	r0, [r3, #0]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	6859      	ldr	r1, [r3, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	461a      	mov	r2, r3
 8004c68:	f000 f8ea 	bl	8004e40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2140      	movs	r1, #64	; 0x40
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 f943 	bl	8004efe <TIM_ITRx_SetConfig>
      break;
 8004c78:	e00c      	b.n	8004c94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4619      	mov	r1, r3
 8004c84:	4610      	mov	r0, r2
 8004c86:	f000 f93a 	bl	8004efe <TIM_ITRx_SetConfig>
      break;
 8004c8a:	e003      	b.n	8004c94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c90:	e000      	b.n	8004c94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cf2:	bf00      	nop
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
	...

08004d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a40      	ldr	r2, [pc, #256]	; (8004e14 <TIM_Base_SetConfig+0x114>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d013      	beq.n	8004d40 <TIM_Base_SetConfig+0x40>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d1e:	d00f      	beq.n	8004d40 <TIM_Base_SetConfig+0x40>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a3d      	ldr	r2, [pc, #244]	; (8004e18 <TIM_Base_SetConfig+0x118>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d00b      	beq.n	8004d40 <TIM_Base_SetConfig+0x40>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a3c      	ldr	r2, [pc, #240]	; (8004e1c <TIM_Base_SetConfig+0x11c>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d007      	beq.n	8004d40 <TIM_Base_SetConfig+0x40>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a3b      	ldr	r2, [pc, #236]	; (8004e20 <TIM_Base_SetConfig+0x120>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d003      	beq.n	8004d40 <TIM_Base_SetConfig+0x40>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a3a      	ldr	r2, [pc, #232]	; (8004e24 <TIM_Base_SetConfig+0x124>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d108      	bne.n	8004d52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a2f      	ldr	r2, [pc, #188]	; (8004e14 <TIM_Base_SetConfig+0x114>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d02b      	beq.n	8004db2 <TIM_Base_SetConfig+0xb2>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d60:	d027      	beq.n	8004db2 <TIM_Base_SetConfig+0xb2>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a2c      	ldr	r2, [pc, #176]	; (8004e18 <TIM_Base_SetConfig+0x118>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d023      	beq.n	8004db2 <TIM_Base_SetConfig+0xb2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a2b      	ldr	r2, [pc, #172]	; (8004e1c <TIM_Base_SetConfig+0x11c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d01f      	beq.n	8004db2 <TIM_Base_SetConfig+0xb2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a2a      	ldr	r2, [pc, #168]	; (8004e20 <TIM_Base_SetConfig+0x120>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d01b      	beq.n	8004db2 <TIM_Base_SetConfig+0xb2>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a29      	ldr	r2, [pc, #164]	; (8004e24 <TIM_Base_SetConfig+0x124>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d017      	beq.n	8004db2 <TIM_Base_SetConfig+0xb2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a28      	ldr	r2, [pc, #160]	; (8004e28 <TIM_Base_SetConfig+0x128>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d013      	beq.n	8004db2 <TIM_Base_SetConfig+0xb2>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a27      	ldr	r2, [pc, #156]	; (8004e2c <TIM_Base_SetConfig+0x12c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d00f      	beq.n	8004db2 <TIM_Base_SetConfig+0xb2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a26      	ldr	r2, [pc, #152]	; (8004e30 <TIM_Base_SetConfig+0x130>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00b      	beq.n	8004db2 <TIM_Base_SetConfig+0xb2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a25      	ldr	r2, [pc, #148]	; (8004e34 <TIM_Base_SetConfig+0x134>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d007      	beq.n	8004db2 <TIM_Base_SetConfig+0xb2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a24      	ldr	r2, [pc, #144]	; (8004e38 <TIM_Base_SetConfig+0x138>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d003      	beq.n	8004db2 <TIM_Base_SetConfig+0xb2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a23      	ldr	r2, [pc, #140]	; (8004e3c <TIM_Base_SetConfig+0x13c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d108      	bne.n	8004dc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a0a      	ldr	r2, [pc, #40]	; (8004e14 <TIM_Base_SetConfig+0x114>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d003      	beq.n	8004df8 <TIM_Base_SetConfig+0xf8>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a0c      	ldr	r2, [pc, #48]	; (8004e24 <TIM_Base_SetConfig+0x124>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d103      	bne.n	8004e00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	691a      	ldr	r2, [r3, #16]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	615a      	str	r2, [r3, #20]
}
 8004e06:	bf00      	nop
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40010000 	.word	0x40010000
 8004e18:	40000400 	.word	0x40000400
 8004e1c:	40000800 	.word	0x40000800
 8004e20:	40000c00 	.word	0x40000c00
 8004e24:	40010400 	.word	0x40010400
 8004e28:	40014000 	.word	0x40014000
 8004e2c:	40014400 	.word	0x40014400
 8004e30:	40014800 	.word	0x40014800
 8004e34:	40001800 	.word	0x40001800
 8004e38:	40001c00 	.word	0x40001c00
 8004e3c:	40002000 	.word	0x40002000

08004e40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	f023 0201 	bic.w	r2, r3, #1
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	011b      	lsls	r3, r3, #4
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f023 030a 	bic.w	r3, r3, #10
 8004e7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	621a      	str	r2, [r3, #32]
}
 8004e92:	bf00      	nop
 8004e94:	371c      	adds	r7, #28
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b087      	sub	sp, #28
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	60f8      	str	r0, [r7, #12]
 8004ea6:	60b9      	str	r1, [r7, #8]
 8004ea8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	f023 0210 	bic.w	r2, r3, #16
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ec8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	031b      	lsls	r3, r3, #12
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004eda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	011b      	lsls	r3, r3, #4
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	621a      	str	r2, [r3, #32]
}
 8004ef2:	bf00      	nop
 8004ef4:	371c      	adds	r7, #28
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b085      	sub	sp, #20
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	f043 0307 	orr.w	r3, r3, #7
 8004f20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	609a      	str	r2, [r3, #8]
}
 8004f28:	bf00      	nop
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b087      	sub	sp, #28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
 8004f40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	021a      	lsls	r2, r3, #8
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	431a      	orrs	r2, r3
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	609a      	str	r2, [r3, #8]
}
 8004f68:	bf00      	nop
 8004f6a:	371c      	adds	r7, #28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e05a      	b.n	8005042 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a21      	ldr	r2, [pc, #132]	; (8005050 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d022      	beq.n	8005016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd8:	d01d      	beq.n	8005016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a1d      	ldr	r2, [pc, #116]	; (8005054 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d018      	beq.n	8005016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a1b      	ldr	r2, [pc, #108]	; (8005058 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d013      	beq.n	8005016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a1a      	ldr	r2, [pc, #104]	; (800505c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00e      	beq.n	8005016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a18      	ldr	r2, [pc, #96]	; (8005060 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d009      	beq.n	8005016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a17      	ldr	r2, [pc, #92]	; (8005064 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d004      	beq.n	8005016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a15      	ldr	r2, [pc, #84]	; (8005068 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d10c      	bne.n	8005030 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800501c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	4313      	orrs	r3, r2
 8005026:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	40010000 	.word	0x40010000
 8005054:	40000400 	.word	0x40000400
 8005058:	40000800 	.word	0x40000800
 800505c:	40000c00 	.word	0x40000c00
 8005060:	40010400 	.word	0x40010400
 8005064:	40014000 	.word	0x40014000
 8005068:	40001800 	.word	0x40001800

0800506c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e03f      	b.n	8005126 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d106      	bne.n	80050c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7fd f98e 	bl	80023dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2224      	movs	r2, #36	; 0x24
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68da      	ldr	r2, [r3, #12]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 fddf 	bl	8005c9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	691a      	ldr	r2, [r3, #16]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	695a      	ldr	r2, [r3, #20]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800510c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2220      	movs	r2, #32
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2220      	movs	r2, #32
 8005120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b08a      	sub	sp, #40	; 0x28
 8005132:	af02      	add	r7, sp, #8
 8005134:	60f8      	str	r0, [r7, #12]
 8005136:	60b9      	str	r1, [r7, #8]
 8005138:	603b      	str	r3, [r7, #0]
 800513a:	4613      	mov	r3, r2
 800513c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b20      	cmp	r3, #32
 800514c:	d17c      	bne.n	8005248 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <HAL_UART_Transmit+0x2c>
 8005154:	88fb      	ldrh	r3, [r7, #6]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e075      	b.n	800524a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005164:	2b01      	cmp	r3, #1
 8005166:	d101      	bne.n	800516c <HAL_UART_Transmit+0x3e>
 8005168:	2302      	movs	r3, #2
 800516a:	e06e      	b.n	800524a <HAL_UART_Transmit+0x11c>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2221      	movs	r2, #33	; 0x21
 800517e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005182:	f7fd fb2d 	bl	80027e0 <HAL_GetTick>
 8005186:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	88fa      	ldrh	r2, [r7, #6]
 800518c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	88fa      	ldrh	r2, [r7, #6]
 8005192:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800519c:	d108      	bne.n	80051b0 <HAL_UART_Transmit+0x82>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d104      	bne.n	80051b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80051a6:	2300      	movs	r3, #0
 80051a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	61bb      	str	r3, [r7, #24]
 80051ae:	e003      	b.n	80051b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051b4:	2300      	movs	r3, #0
 80051b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80051c0:	e02a      	b.n	8005218 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2200      	movs	r2, #0
 80051ca:	2180      	movs	r1, #128	; 0x80
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 fb1f 	bl	8005810 <UART_WaitOnFlagUntilTimeout>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e036      	b.n	800524a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10b      	bne.n	80051fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	3302      	adds	r3, #2
 80051f6:	61bb      	str	r3, [r7, #24]
 80051f8:	e007      	b.n	800520a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	781a      	ldrb	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	3301      	adds	r3, #1
 8005208:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800520e:	b29b      	uxth	r3, r3
 8005210:	3b01      	subs	r3, #1
 8005212:	b29a      	uxth	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800521c:	b29b      	uxth	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1cf      	bne.n	80051c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2200      	movs	r2, #0
 800522a:	2140      	movs	r1, #64	; 0x40
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 faef 	bl	8005810 <UART_WaitOnFlagUntilTimeout>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e006      	b.n	800524a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2220      	movs	r2, #32
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005244:	2300      	movs	r3, #0
 8005246:	e000      	b.n	800524a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005248:	2302      	movs	r3, #2
  }
}
 800524a:	4618      	mov	r0, r3
 800524c:	3720      	adds	r7, #32
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b084      	sub	sp, #16
 8005256:	af00      	add	r7, sp, #0
 8005258:	60f8      	str	r0, [r7, #12]
 800525a:	60b9      	str	r1, [r7, #8]
 800525c:	4613      	mov	r3, r2
 800525e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b20      	cmp	r3, #32
 800526a:	d11d      	bne.n	80052a8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <HAL_UART_Receive_IT+0x26>
 8005272:	88fb      	ldrh	r3, [r7, #6]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e016      	b.n	80052aa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005282:	2b01      	cmp	r3, #1
 8005284:	d101      	bne.n	800528a <HAL_UART_Receive_IT+0x38>
 8005286:	2302      	movs	r3, #2
 8005288:	e00f      	b.n	80052aa <HAL_UART_Receive_IT+0x58>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005298:	88fb      	ldrh	r3, [r7, #6]
 800529a:	461a      	mov	r2, r3
 800529c:	68b9      	ldr	r1, [r7, #8]
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 fb24 	bl	80058ec <UART_Start_Receive_IT>
 80052a4:	4603      	mov	r3, r0
 80052a6:	e000      	b.n	80052aa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80052a8:	2302      	movs	r3, #2
  }
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b0ba      	sub	sp, #232	; 0xe8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80052da:	2300      	movs	r3, #0
 80052dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80052f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10f      	bne.n	800531a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052fe:	f003 0320 	and.w	r3, r3, #32
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <HAL_UART_IRQHandler+0x66>
 8005306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800530a:	f003 0320 	and.w	r3, r3, #32
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fc07 	bl	8005b26 <UART_Receive_IT>
      return;
 8005318:	e256      	b.n	80057c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800531a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 80de 	beq.w	80054e0 <HAL_UART_IRQHandler+0x22c>
 8005324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	d106      	bne.n	800533e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005334:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 80d1 	beq.w	80054e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800533e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00b      	beq.n	8005362 <HAL_UART_IRQHandler+0xae>
 800534a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800534e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005352:	2b00      	cmp	r3, #0
 8005354:	d005      	beq.n	8005362 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	f043 0201 	orr.w	r2, r3, #1
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005366:	f003 0304 	and.w	r3, r3, #4
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00b      	beq.n	8005386 <HAL_UART_IRQHandler+0xd2>
 800536e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	d005      	beq.n	8005386 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	f043 0202 	orr.w	r2, r3, #2
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00b      	beq.n	80053aa <HAL_UART_IRQHandler+0xf6>
 8005392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d005      	beq.n	80053aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	f043 0204 	orr.w	r2, r3, #4
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80053aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ae:	f003 0308 	and.w	r3, r3, #8
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d011      	beq.n	80053da <HAL_UART_IRQHandler+0x126>
 80053b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ba:	f003 0320 	and.w	r3, r3, #32
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d105      	bne.n	80053ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80053c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d005      	beq.n	80053da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	f043 0208 	orr.w	r2, r3, #8
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 81ed 	beq.w	80057be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e8:	f003 0320 	and.w	r3, r3, #32
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d008      	beq.n	8005402 <HAL_UART_IRQHandler+0x14e>
 80053f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053f4:	f003 0320 	and.w	r3, r3, #32
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 fb92 	bl	8005b26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540c:	2b40      	cmp	r3, #64	; 0x40
 800540e:	bf0c      	ite	eq
 8005410:	2301      	moveq	r3, #1
 8005412:	2300      	movne	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	2b00      	cmp	r3, #0
 8005424:	d103      	bne.n	800542e <HAL_UART_IRQHandler+0x17a>
 8005426:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800542a:	2b00      	cmp	r3, #0
 800542c:	d04f      	beq.n	80054ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fa9a 	bl	8005968 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543e:	2b40      	cmp	r3, #64	; 0x40
 8005440:	d141      	bne.n	80054c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3314      	adds	r3, #20
 8005448:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005450:	e853 3f00 	ldrex	r3, [r3]
 8005454:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005458:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800545c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005460:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3314      	adds	r3, #20
 800546a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800546e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005472:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005476:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800547a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005486:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1d9      	bne.n	8005442 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005492:	2b00      	cmp	r3, #0
 8005494:	d013      	beq.n	80054be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549a:	4a7d      	ldr	r2, [pc, #500]	; (8005690 <HAL_UART_IRQHandler+0x3dc>)
 800549c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fe f836 	bl	8003514 <HAL_DMA_Abort_IT>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d016      	beq.n	80054dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054b8:	4610      	mov	r0, r2
 80054ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054bc:	e00e      	b.n	80054dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f990 	bl	80057e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c4:	e00a      	b.n	80054dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f98c 	bl	80057e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054cc:	e006      	b.n	80054dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f988 	bl	80057e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80054da:	e170      	b.n	80057be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054dc:	bf00      	nop
    return;
 80054de:	e16e      	b.n	80057be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	f040 814a 	bne.w	800577e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ee:	f003 0310 	and.w	r3, r3, #16
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 8143 	beq.w	800577e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054fc:	f003 0310 	and.w	r3, r3, #16
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 813c 	beq.w	800577e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005506:	2300      	movs	r3, #0
 8005508:	60bb      	str	r3, [r7, #8]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	60bb      	str	r3, [r7, #8]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	60bb      	str	r3, [r7, #8]
 800551a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005526:	2b40      	cmp	r3, #64	; 0x40
 8005528:	f040 80b4 	bne.w	8005694 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005538:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 8140 	beq.w	80057c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005546:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800554a:	429a      	cmp	r2, r3
 800554c:	f080 8139 	bcs.w	80057c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005556:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005562:	f000 8088 	beq.w	8005676 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	330c      	adds	r3, #12
 800556c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005570:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005574:	e853 3f00 	ldrex	r3, [r3]
 8005578:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800557c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005584:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	330c      	adds	r3, #12
 800558e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005592:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005596:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800559e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055a2:	e841 2300 	strex	r3, r2, [r1]
 80055a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80055aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1d9      	bne.n	8005566 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3314      	adds	r3, #20
 80055b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055bc:	e853 3f00 	ldrex	r3, [r3]
 80055c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055c4:	f023 0301 	bic.w	r3, r3, #1
 80055c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3314      	adds	r3, #20
 80055d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80055da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80055de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055e2:	e841 2300 	strex	r3, r2, [r1]
 80055e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1e1      	bne.n	80055b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3314      	adds	r3, #20
 80055f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055f8:	e853 3f00 	ldrex	r3, [r3]
 80055fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005604:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3314      	adds	r3, #20
 800560e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005612:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005614:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005616:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005618:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800561a:	e841 2300 	strex	r3, r2, [r1]
 800561e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1e3      	bne.n	80055ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2220      	movs	r2, #32
 800562a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	330c      	adds	r3, #12
 800563a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800563e:	e853 3f00 	ldrex	r3, [r3]
 8005642:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005646:	f023 0310 	bic.w	r3, r3, #16
 800564a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	330c      	adds	r3, #12
 8005654:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005658:	65ba      	str	r2, [r7, #88]	; 0x58
 800565a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800565e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005660:	e841 2300 	strex	r3, r2, [r1]
 8005664:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1e3      	bne.n	8005634 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005670:	4618      	mov	r0, r3
 8005672:	f7fd fedf 	bl	8003434 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800567e:	b29b      	uxth	r3, r3
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	b29b      	uxth	r3, r3
 8005684:	4619      	mov	r1, r3
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f8b6 	bl	80057f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800568c:	e099      	b.n	80057c2 <HAL_UART_IRQHandler+0x50e>
 800568e:	bf00      	nop
 8005690:	08005a2f 	.word	0x08005a2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800569c:	b29b      	uxth	r3, r3
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f000 808b 	beq.w	80057c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80056b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 8086 	beq.w	80057c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	330c      	adds	r3, #12
 80056c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	330c      	adds	r3, #12
 80056da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80056de:	647a      	str	r2, [r7, #68]	; 0x44
 80056e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056e6:	e841 2300 	strex	r3, r2, [r1]
 80056ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1e3      	bne.n	80056ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	3314      	adds	r3, #20
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	e853 3f00 	ldrex	r3, [r3]
 8005700:	623b      	str	r3, [r7, #32]
   return(result);
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	f023 0301 	bic.w	r3, r3, #1
 8005708:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3314      	adds	r3, #20
 8005712:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005716:	633a      	str	r2, [r7, #48]	; 0x30
 8005718:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800571c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800571e:	e841 2300 	strex	r3, r2, [r1]
 8005722:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1e3      	bne.n	80056f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2220      	movs	r2, #32
 800572e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	330c      	adds	r3, #12
 800573e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	e853 3f00 	ldrex	r3, [r3]
 8005746:	60fb      	str	r3, [r7, #12]
   return(result);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0310 	bic.w	r3, r3, #16
 800574e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	330c      	adds	r3, #12
 8005758:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800575c:	61fa      	str	r2, [r7, #28]
 800575e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005760:	69b9      	ldr	r1, [r7, #24]
 8005762:	69fa      	ldr	r2, [r7, #28]
 8005764:	e841 2300 	strex	r3, r2, [r1]
 8005768:	617b      	str	r3, [r7, #20]
   return(result);
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1e3      	bne.n	8005738 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005770:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005774:	4619      	mov	r1, r3
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f83e 	bl	80057f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800577c:	e023      	b.n	80057c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800577e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005786:	2b00      	cmp	r3, #0
 8005788:	d009      	beq.n	800579e <HAL_UART_IRQHandler+0x4ea>
 800578a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800578e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f95d 	bl	8005a56 <UART_Transmit_IT>
    return;
 800579c:	e014      	b.n	80057c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800579e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00e      	beq.n	80057c8 <HAL_UART_IRQHandler+0x514>
 80057aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d008      	beq.n	80057c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f99d 	bl	8005af6 <UART_EndTransmit_IT>
    return;
 80057bc:	e004      	b.n	80057c8 <HAL_UART_IRQHandler+0x514>
    return;
 80057be:	bf00      	nop
 80057c0:	e002      	b.n	80057c8 <HAL_UART_IRQHandler+0x514>
      return;
 80057c2:	bf00      	nop
 80057c4:	e000      	b.n	80057c8 <HAL_UART_IRQHandler+0x514>
      return;
 80057c6:	bf00      	nop
  }
}
 80057c8:	37e8      	adds	r7, #232	; 0xe8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop

080057d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	460b      	mov	r3, r1
 8005802:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b090      	sub	sp, #64	; 0x40
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	603b      	str	r3, [r7, #0]
 800581c:	4613      	mov	r3, r2
 800581e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005820:	e050      	b.n	80058c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005828:	d04c      	beq.n	80058c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800582a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800582c:	2b00      	cmp	r3, #0
 800582e:	d007      	beq.n	8005840 <UART_WaitOnFlagUntilTimeout+0x30>
 8005830:	f7fc ffd6 	bl	80027e0 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800583c:	429a      	cmp	r2, r3
 800583e:	d241      	bcs.n	80058c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	330c      	adds	r3, #12
 8005846:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584a:	e853 3f00 	ldrex	r3, [r3]
 800584e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	330c      	adds	r3, #12
 800585e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005860:	637a      	str	r2, [r7, #52]	; 0x34
 8005862:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005864:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005868:	e841 2300 	strex	r3, r2, [r1]
 800586c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800586e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1e5      	bne.n	8005840 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	3314      	adds	r3, #20
 800587a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	e853 3f00 	ldrex	r3, [r3]
 8005882:	613b      	str	r3, [r7, #16]
   return(result);
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	f023 0301 	bic.w	r3, r3, #1
 800588a:	63bb      	str	r3, [r7, #56]	; 0x38
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3314      	adds	r3, #20
 8005892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005894:	623a      	str	r2, [r7, #32]
 8005896:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005898:	69f9      	ldr	r1, [r7, #28]
 800589a:	6a3a      	ldr	r2, [r7, #32]
 800589c:	e841 2300 	strex	r3, r2, [r1]
 80058a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1e5      	bne.n	8005874 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2220      	movs	r2, #32
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2220      	movs	r2, #32
 80058b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e00f      	b.n	80058e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	4013      	ands	r3, r2
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	bf0c      	ite	eq
 80058d4:	2301      	moveq	r3, #1
 80058d6:	2300      	movne	r3, #0
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	461a      	mov	r2, r3
 80058dc:	79fb      	ldrb	r3, [r7, #7]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d09f      	beq.n	8005822 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3740      	adds	r7, #64	; 0x40
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	4613      	mov	r3, r2
 80058f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	88fa      	ldrh	r2, [r7, #6]
 8005904:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	88fa      	ldrh	r2, [r7, #6]
 800590a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2222      	movs	r2, #34	; 0x22
 8005916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d007      	beq.n	800593a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68da      	ldr	r2, [r3, #12]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005938:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	695a      	ldr	r2, [r3, #20]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f042 0201 	orr.w	r2, r2, #1
 8005948:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0220 	orr.w	r2, r2, #32
 8005958:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005968:	b480      	push	{r7}
 800596a:	b095      	sub	sp, #84	; 0x54
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	330c      	adds	r3, #12
 8005976:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597a:	e853 3f00 	ldrex	r3, [r3]
 800597e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005982:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	330c      	adds	r3, #12
 800598e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005990:	643a      	str	r2, [r7, #64]	; 0x40
 8005992:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005994:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005996:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005998:	e841 2300 	strex	r3, r2, [r1]
 800599c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800599e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1e5      	bne.n	8005970 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3314      	adds	r3, #20
 80059aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	e853 3f00 	ldrex	r3, [r3]
 80059b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	f023 0301 	bic.w	r3, r3, #1
 80059ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	3314      	adds	r3, #20
 80059c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059cc:	e841 2300 	strex	r3, r2, [r1]
 80059d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1e5      	bne.n	80059a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d119      	bne.n	8005a14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	330c      	adds	r3, #12
 80059e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	e853 3f00 	ldrex	r3, [r3]
 80059ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f023 0310 	bic.w	r3, r3, #16
 80059f6:	647b      	str	r3, [r7, #68]	; 0x44
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	330c      	adds	r3, #12
 80059fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a00:	61ba      	str	r2, [r7, #24]
 8005a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a04:	6979      	ldr	r1, [r7, #20]
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	e841 2300 	strex	r3, r2, [r1]
 8005a0c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1e5      	bne.n	80059e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a22:	bf00      	nop
 8005a24:	3754      	adds	r7, #84	; 0x54
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b084      	sub	sp, #16
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f7ff fecb 	bl	80057e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a4e:	bf00      	nop
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b085      	sub	sp, #20
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b21      	cmp	r3, #33	; 0x21
 8005a68:	d13e      	bne.n	8005ae8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a72:	d114      	bne.n	8005a9e <UART_Transmit_IT+0x48>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d110      	bne.n	8005a9e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	461a      	mov	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	1c9a      	adds	r2, r3, #2
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	621a      	str	r2, [r3, #32]
 8005a9c:	e008      	b.n	8005ab0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	1c59      	adds	r1, r3, #1
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	6211      	str	r1, [r2, #32]
 8005aa8:	781a      	ldrb	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	4619      	mov	r1, r3
 8005abe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10f      	bne.n	8005ae4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ad2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ae2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	e000      	b.n	8005aea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ae8:	2302      	movs	r3, #2
  }
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b082      	sub	sp, #8
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68da      	ldr	r2, [r3, #12]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2220      	movs	r2, #32
 8005b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7ff fe5a 	bl	80057d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b08c      	sub	sp, #48	; 0x30
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b22      	cmp	r3, #34	; 0x22
 8005b38:	f040 80ab 	bne.w	8005c92 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b44:	d117      	bne.n	8005b76 <UART_Receive_IT+0x50>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d113      	bne.n	8005b76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b56:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6e:	1c9a      	adds	r2, r3, #2
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	629a      	str	r2, [r3, #40]	; 0x28
 8005b74:	e026      	b.n	8005bc4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b88:	d007      	beq.n	8005b9a <UART_Receive_IT+0x74>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10a      	bne.n	8005ba8 <UART_Receive_IT+0x82>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d106      	bne.n	8005ba8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba4:	701a      	strb	r2, [r3, #0]
 8005ba6:	e008      	b.n	8005bba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbe:	1c5a      	adds	r2, r3, #1
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d15a      	bne.n	8005c8e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68da      	ldr	r2, [r3, #12]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 0220 	bic.w	r2, r2, #32
 8005be6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bf6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695a      	ldr	r2, [r3, #20]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0201 	bic.w	r2, r2, #1
 8005c06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d135      	bne.n	8005c84 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	330c      	adds	r3, #12
 8005c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f023 0310 	bic.w	r3, r3, #16
 8005c34:	627b      	str	r3, [r7, #36]	; 0x24
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	330c      	adds	r3, #12
 8005c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c3e:	623a      	str	r2, [r7, #32]
 8005c40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	69f9      	ldr	r1, [r7, #28]
 8005c44:	6a3a      	ldr	r2, [r7, #32]
 8005c46:	e841 2300 	strex	r3, r2, [r1]
 8005c4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1e5      	bne.n	8005c1e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0310 	and.w	r3, r3, #16
 8005c5c:	2b10      	cmp	r3, #16
 8005c5e:	d10a      	bne.n	8005c76 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c60:	2300      	movs	r3, #0
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7ff fdbb 	bl	80057f8 <HAL_UARTEx_RxEventCallback>
 8005c82:	e002      	b.n	8005c8a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7fb fa71 	bl	800116c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	e002      	b.n	8005c94 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	e000      	b.n	8005c94 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005c92:	2302      	movs	r3, #2
  }
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3730      	adds	r7, #48	; 0x30
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ca0:	b0c0      	sub	sp, #256	; 0x100
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb8:	68d9      	ldr	r1, [r3, #12]
 8005cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	ea40 0301 	orr.w	r3, r0, r1
 8005cc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005cf4:	f021 010c 	bic.w	r1, r1, #12
 8005cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d02:	430b      	orrs	r3, r1
 8005d04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d16:	6999      	ldr	r1, [r3, #24]
 8005d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	ea40 0301 	orr.w	r3, r0, r1
 8005d22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	4b8f      	ldr	r3, [pc, #572]	; (8005f68 <UART_SetConfig+0x2cc>)
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d005      	beq.n	8005d3c <UART_SetConfig+0xa0>
 8005d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	4b8d      	ldr	r3, [pc, #564]	; (8005f6c <UART_SetConfig+0x2d0>)
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d104      	bne.n	8005d46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d3c:	f7fe fce2 	bl	8004704 <HAL_RCC_GetPCLK2Freq>
 8005d40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005d44:	e003      	b.n	8005d4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d46:	f7fe fcc9 	bl	80046dc <HAL_RCC_GetPCLK1Freq>
 8005d4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d58:	f040 810c 	bne.w	8005f74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d60:	2200      	movs	r2, #0
 8005d62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005d6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005d6e:	4622      	mov	r2, r4
 8005d70:	462b      	mov	r3, r5
 8005d72:	1891      	adds	r1, r2, r2
 8005d74:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d76:	415b      	adcs	r3, r3
 8005d78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005d7e:	4621      	mov	r1, r4
 8005d80:	eb12 0801 	adds.w	r8, r2, r1
 8005d84:	4629      	mov	r1, r5
 8005d86:	eb43 0901 	adc.w	r9, r3, r1
 8005d8a:	f04f 0200 	mov.w	r2, #0
 8005d8e:	f04f 0300 	mov.w	r3, #0
 8005d92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d9e:	4690      	mov	r8, r2
 8005da0:	4699      	mov	r9, r3
 8005da2:	4623      	mov	r3, r4
 8005da4:	eb18 0303 	adds.w	r3, r8, r3
 8005da8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005dac:	462b      	mov	r3, r5
 8005dae:	eb49 0303 	adc.w	r3, r9, r3
 8005db2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005dc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005dc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005dca:	460b      	mov	r3, r1
 8005dcc:	18db      	adds	r3, r3, r3
 8005dce:	653b      	str	r3, [r7, #80]	; 0x50
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	eb42 0303 	adc.w	r3, r2, r3
 8005dd6:	657b      	str	r3, [r7, #84]	; 0x54
 8005dd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ddc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005de0:	f7fa fe94 	bl	8000b0c <__aeabi_uldivmod>
 8005de4:	4602      	mov	r2, r0
 8005de6:	460b      	mov	r3, r1
 8005de8:	4b61      	ldr	r3, [pc, #388]	; (8005f70 <UART_SetConfig+0x2d4>)
 8005dea:	fba3 2302 	umull	r2, r3, r3, r2
 8005dee:	095b      	lsrs	r3, r3, #5
 8005df0:	011c      	lsls	r4, r3, #4
 8005df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005df6:	2200      	movs	r2, #0
 8005df8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005dfc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e04:	4642      	mov	r2, r8
 8005e06:	464b      	mov	r3, r9
 8005e08:	1891      	adds	r1, r2, r2
 8005e0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e0c:	415b      	adcs	r3, r3
 8005e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e14:	4641      	mov	r1, r8
 8005e16:	eb12 0a01 	adds.w	sl, r2, r1
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	eb43 0b01 	adc.w	fp, r3, r1
 8005e20:	f04f 0200 	mov.w	r2, #0
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e34:	4692      	mov	sl, r2
 8005e36:	469b      	mov	fp, r3
 8005e38:	4643      	mov	r3, r8
 8005e3a:	eb1a 0303 	adds.w	r3, sl, r3
 8005e3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e42:	464b      	mov	r3, r9
 8005e44:	eb4b 0303 	adc.w	r3, fp, r3
 8005e48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005e5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e60:	460b      	mov	r3, r1
 8005e62:	18db      	adds	r3, r3, r3
 8005e64:	643b      	str	r3, [r7, #64]	; 0x40
 8005e66:	4613      	mov	r3, r2
 8005e68:	eb42 0303 	adc.w	r3, r2, r3
 8005e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005e76:	f7fa fe49 	bl	8000b0c <__aeabi_uldivmod>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	4611      	mov	r1, r2
 8005e80:	4b3b      	ldr	r3, [pc, #236]	; (8005f70 <UART_SetConfig+0x2d4>)
 8005e82:	fba3 2301 	umull	r2, r3, r3, r1
 8005e86:	095b      	lsrs	r3, r3, #5
 8005e88:	2264      	movs	r2, #100	; 0x64
 8005e8a:	fb02 f303 	mul.w	r3, r2, r3
 8005e8e:	1acb      	subs	r3, r1, r3
 8005e90:	00db      	lsls	r3, r3, #3
 8005e92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005e96:	4b36      	ldr	r3, [pc, #216]	; (8005f70 <UART_SetConfig+0x2d4>)
 8005e98:	fba3 2302 	umull	r2, r3, r3, r2
 8005e9c:	095b      	lsrs	r3, r3, #5
 8005e9e:	005b      	lsls	r3, r3, #1
 8005ea0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ea4:	441c      	add	r4, r3
 8005ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005eb0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005eb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005eb8:	4642      	mov	r2, r8
 8005eba:	464b      	mov	r3, r9
 8005ebc:	1891      	adds	r1, r2, r2
 8005ebe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ec0:	415b      	adcs	r3, r3
 8005ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ec4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ec8:	4641      	mov	r1, r8
 8005eca:	1851      	adds	r1, r2, r1
 8005ecc:	6339      	str	r1, [r7, #48]	; 0x30
 8005ece:	4649      	mov	r1, r9
 8005ed0:	414b      	adcs	r3, r1
 8005ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	f04f 0300 	mov.w	r3, #0
 8005edc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ee0:	4659      	mov	r1, fp
 8005ee2:	00cb      	lsls	r3, r1, #3
 8005ee4:	4651      	mov	r1, sl
 8005ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eea:	4651      	mov	r1, sl
 8005eec:	00ca      	lsls	r2, r1, #3
 8005eee:	4610      	mov	r0, r2
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	4642      	mov	r2, r8
 8005ef6:	189b      	adds	r3, r3, r2
 8005ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005efc:	464b      	mov	r3, r9
 8005efe:	460a      	mov	r2, r1
 8005f00:	eb42 0303 	adc.w	r3, r2, r3
 8005f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005f18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	18db      	adds	r3, r3, r3
 8005f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f22:	4613      	mov	r3, r2
 8005f24:	eb42 0303 	adc.w	r3, r2, r3
 8005f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005f32:	f7fa fdeb 	bl	8000b0c <__aeabi_uldivmod>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	4b0d      	ldr	r3, [pc, #52]	; (8005f70 <UART_SetConfig+0x2d4>)
 8005f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f40:	095b      	lsrs	r3, r3, #5
 8005f42:	2164      	movs	r1, #100	; 0x64
 8005f44:	fb01 f303 	mul.w	r3, r1, r3
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	3332      	adds	r3, #50	; 0x32
 8005f4e:	4a08      	ldr	r2, [pc, #32]	; (8005f70 <UART_SetConfig+0x2d4>)
 8005f50:	fba2 2303 	umull	r2, r3, r2, r3
 8005f54:	095b      	lsrs	r3, r3, #5
 8005f56:	f003 0207 	and.w	r2, r3, #7
 8005f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4422      	add	r2, r4
 8005f62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f64:	e105      	b.n	8006172 <UART_SetConfig+0x4d6>
 8005f66:	bf00      	nop
 8005f68:	40011000 	.word	0x40011000
 8005f6c:	40011400 	.word	0x40011400
 8005f70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005f82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005f86:	4642      	mov	r2, r8
 8005f88:	464b      	mov	r3, r9
 8005f8a:	1891      	adds	r1, r2, r2
 8005f8c:	6239      	str	r1, [r7, #32]
 8005f8e:	415b      	adcs	r3, r3
 8005f90:	627b      	str	r3, [r7, #36]	; 0x24
 8005f92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f96:	4641      	mov	r1, r8
 8005f98:	1854      	adds	r4, r2, r1
 8005f9a:	4649      	mov	r1, r9
 8005f9c:	eb43 0501 	adc.w	r5, r3, r1
 8005fa0:	f04f 0200 	mov.w	r2, #0
 8005fa4:	f04f 0300 	mov.w	r3, #0
 8005fa8:	00eb      	lsls	r3, r5, #3
 8005faa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fae:	00e2      	lsls	r2, r4, #3
 8005fb0:	4614      	mov	r4, r2
 8005fb2:	461d      	mov	r5, r3
 8005fb4:	4643      	mov	r3, r8
 8005fb6:	18e3      	adds	r3, r4, r3
 8005fb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005fbc:	464b      	mov	r3, r9
 8005fbe:	eb45 0303 	adc.w	r3, r5, r3
 8005fc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005fd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005fd6:	f04f 0200 	mov.w	r2, #0
 8005fda:	f04f 0300 	mov.w	r3, #0
 8005fde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005fe2:	4629      	mov	r1, r5
 8005fe4:	008b      	lsls	r3, r1, #2
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fec:	4621      	mov	r1, r4
 8005fee:	008a      	lsls	r2, r1, #2
 8005ff0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ff4:	f7fa fd8a 	bl	8000b0c <__aeabi_uldivmod>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4b60      	ldr	r3, [pc, #384]	; (8006180 <UART_SetConfig+0x4e4>)
 8005ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8006002:	095b      	lsrs	r3, r3, #5
 8006004:	011c      	lsls	r4, r3, #4
 8006006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800600a:	2200      	movs	r2, #0
 800600c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006010:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006014:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006018:	4642      	mov	r2, r8
 800601a:	464b      	mov	r3, r9
 800601c:	1891      	adds	r1, r2, r2
 800601e:	61b9      	str	r1, [r7, #24]
 8006020:	415b      	adcs	r3, r3
 8006022:	61fb      	str	r3, [r7, #28]
 8006024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006028:	4641      	mov	r1, r8
 800602a:	1851      	adds	r1, r2, r1
 800602c:	6139      	str	r1, [r7, #16]
 800602e:	4649      	mov	r1, r9
 8006030:	414b      	adcs	r3, r1
 8006032:	617b      	str	r3, [r7, #20]
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	f04f 0300 	mov.w	r3, #0
 800603c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006040:	4659      	mov	r1, fp
 8006042:	00cb      	lsls	r3, r1, #3
 8006044:	4651      	mov	r1, sl
 8006046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800604a:	4651      	mov	r1, sl
 800604c:	00ca      	lsls	r2, r1, #3
 800604e:	4610      	mov	r0, r2
 8006050:	4619      	mov	r1, r3
 8006052:	4603      	mov	r3, r0
 8006054:	4642      	mov	r2, r8
 8006056:	189b      	adds	r3, r3, r2
 8006058:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800605c:	464b      	mov	r3, r9
 800605e:	460a      	mov	r2, r1
 8006060:	eb42 0303 	adc.w	r3, r2, r3
 8006064:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	67bb      	str	r3, [r7, #120]	; 0x78
 8006072:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006074:	f04f 0200 	mov.w	r2, #0
 8006078:	f04f 0300 	mov.w	r3, #0
 800607c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006080:	4649      	mov	r1, r9
 8006082:	008b      	lsls	r3, r1, #2
 8006084:	4641      	mov	r1, r8
 8006086:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800608a:	4641      	mov	r1, r8
 800608c:	008a      	lsls	r2, r1, #2
 800608e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006092:	f7fa fd3b 	bl	8000b0c <__aeabi_uldivmod>
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	4b39      	ldr	r3, [pc, #228]	; (8006180 <UART_SetConfig+0x4e4>)
 800609c:	fba3 1302 	umull	r1, r3, r3, r2
 80060a0:	095b      	lsrs	r3, r3, #5
 80060a2:	2164      	movs	r1, #100	; 0x64
 80060a4:	fb01 f303 	mul.w	r3, r1, r3
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	011b      	lsls	r3, r3, #4
 80060ac:	3332      	adds	r3, #50	; 0x32
 80060ae:	4a34      	ldr	r2, [pc, #208]	; (8006180 <UART_SetConfig+0x4e4>)
 80060b0:	fba2 2303 	umull	r2, r3, r2, r3
 80060b4:	095b      	lsrs	r3, r3, #5
 80060b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060ba:	441c      	add	r4, r3
 80060bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060c0:	2200      	movs	r2, #0
 80060c2:	673b      	str	r3, [r7, #112]	; 0x70
 80060c4:	677a      	str	r2, [r7, #116]	; 0x74
 80060c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80060ca:	4642      	mov	r2, r8
 80060cc:	464b      	mov	r3, r9
 80060ce:	1891      	adds	r1, r2, r2
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	415b      	adcs	r3, r3
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060da:	4641      	mov	r1, r8
 80060dc:	1851      	adds	r1, r2, r1
 80060de:	6039      	str	r1, [r7, #0]
 80060e0:	4649      	mov	r1, r9
 80060e2:	414b      	adcs	r3, r1
 80060e4:	607b      	str	r3, [r7, #4]
 80060e6:	f04f 0200 	mov.w	r2, #0
 80060ea:	f04f 0300 	mov.w	r3, #0
 80060ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80060f2:	4659      	mov	r1, fp
 80060f4:	00cb      	lsls	r3, r1, #3
 80060f6:	4651      	mov	r1, sl
 80060f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060fc:	4651      	mov	r1, sl
 80060fe:	00ca      	lsls	r2, r1, #3
 8006100:	4610      	mov	r0, r2
 8006102:	4619      	mov	r1, r3
 8006104:	4603      	mov	r3, r0
 8006106:	4642      	mov	r2, r8
 8006108:	189b      	adds	r3, r3, r2
 800610a:	66bb      	str	r3, [r7, #104]	; 0x68
 800610c:	464b      	mov	r3, r9
 800610e:	460a      	mov	r2, r1
 8006110:	eb42 0303 	adc.w	r3, r2, r3
 8006114:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	663b      	str	r3, [r7, #96]	; 0x60
 8006120:	667a      	str	r2, [r7, #100]	; 0x64
 8006122:	f04f 0200 	mov.w	r2, #0
 8006126:	f04f 0300 	mov.w	r3, #0
 800612a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800612e:	4649      	mov	r1, r9
 8006130:	008b      	lsls	r3, r1, #2
 8006132:	4641      	mov	r1, r8
 8006134:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006138:	4641      	mov	r1, r8
 800613a:	008a      	lsls	r2, r1, #2
 800613c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006140:	f7fa fce4 	bl	8000b0c <__aeabi_uldivmod>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4b0d      	ldr	r3, [pc, #52]	; (8006180 <UART_SetConfig+0x4e4>)
 800614a:	fba3 1302 	umull	r1, r3, r3, r2
 800614e:	095b      	lsrs	r3, r3, #5
 8006150:	2164      	movs	r1, #100	; 0x64
 8006152:	fb01 f303 	mul.w	r3, r1, r3
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	011b      	lsls	r3, r3, #4
 800615a:	3332      	adds	r3, #50	; 0x32
 800615c:	4a08      	ldr	r2, [pc, #32]	; (8006180 <UART_SetConfig+0x4e4>)
 800615e:	fba2 2303 	umull	r2, r3, r2, r3
 8006162:	095b      	lsrs	r3, r3, #5
 8006164:	f003 020f 	and.w	r2, r3, #15
 8006168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4422      	add	r2, r4
 8006170:	609a      	str	r2, [r3, #8]
}
 8006172:	bf00      	nop
 8006174:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006178:	46bd      	mov	sp, r7
 800617a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800617e:	bf00      	nop
 8006180:	51eb851f 	.word	0x51eb851f

08006184 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	4603      	mov	r3, r0
 800618c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800618e:	2300      	movs	r3, #0
 8006190:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006196:	2b84      	cmp	r3, #132	; 0x84
 8006198:	d005      	beq.n	80061a6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800619a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4413      	add	r3, r2
 80061a2:	3303      	adds	r3, #3
 80061a4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80061a6:	68fb      	ldr	r3, [r7, #12]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80061b8:	f000 faf6 	bl	80067a8 <vTaskStartScheduler>
  
  return osOK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80061c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061c4:	b089      	sub	sp, #36	; 0x24
 80061c6:	af04      	add	r7, sp, #16
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d020      	beq.n	8006216 <osThreadCreate+0x54>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d01c      	beq.n	8006216 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685c      	ldr	r4, [r3, #4]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681d      	ldr	r5, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	691e      	ldr	r6, [r3, #16]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7ff ffc8 	bl	8006184 <makeFreeRtosPriority>
 80061f4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061fe:	9202      	str	r2, [sp, #8]
 8006200:	9301      	str	r3, [sp, #4]
 8006202:	9100      	str	r1, [sp, #0]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	4632      	mov	r2, r6
 8006208:	4629      	mov	r1, r5
 800620a:	4620      	mov	r0, r4
 800620c:	f000 f8ed 	bl	80063ea <xTaskCreateStatic>
 8006210:	4603      	mov	r3, r0
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	e01c      	b.n	8006250 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685c      	ldr	r4, [r3, #4]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006222:	b29e      	uxth	r6, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800622a:	4618      	mov	r0, r3
 800622c:	f7ff ffaa 	bl	8006184 <makeFreeRtosPriority>
 8006230:	4602      	mov	r2, r0
 8006232:	f107 030c 	add.w	r3, r7, #12
 8006236:	9301      	str	r3, [sp, #4]
 8006238:	9200      	str	r2, [sp, #0]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	4632      	mov	r2, r6
 800623e:	4629      	mov	r1, r5
 8006240:	4620      	mov	r0, r4
 8006242:	f000 f92f 	bl	80064a4 <xTaskCreate>
 8006246:	4603      	mov	r3, r0
 8006248:	2b01      	cmp	r3, #1
 800624a:	d001      	beq.n	8006250 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800624c:	2300      	movs	r3, #0
 800624e:	e000      	b.n	8006252 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006250:	68fb      	ldr	r3, [r7, #12]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800625a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b084      	sub	sp, #16
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d001      	beq.n	8006270 <osDelay+0x16>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	e000      	b.n	8006272 <osDelay+0x18>
 8006270:	2301      	movs	r3, #1
 8006272:	4618      	mov	r0, r3
 8006274:	f000 fa64 	bl	8006740 <vTaskDelay>
  
  return osOK;
 8006278:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f103 0208 	add.w	r2, r3, #8
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f04f 32ff 	mov.w	r2, #4294967295
 800629a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f103 0208 	add.w	r2, r3, #8
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f103 0208 	add.w	r2, r3, #8
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80062b6:	bf00      	nop
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	689a      	ldr	r2, [r3, #8]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	601a      	str	r2, [r3, #0]
}
 8006318:	bf00      	nop
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633a:	d103      	bne.n	8006344 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	60fb      	str	r3, [r7, #12]
 8006342:	e00c      	b.n	800635e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3308      	adds	r3, #8
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	e002      	b.n	8006352 <vListInsert+0x2e>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	429a      	cmp	r2, r3
 800635c:	d2f6      	bcs.n	800634c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	1c5a      	adds	r2, r3, #1
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	601a      	str	r2, [r3, #0]
}
 800638a:	bf00      	nop
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006396:	b480      	push	{r7}
 8006398:	b085      	sub	sp, #20
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	6892      	ldr	r2, [r2, #8]
 80063ac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6852      	ldr	r2, [r2, #4]
 80063b6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d103      	bne.n	80063ca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689a      	ldr	r2, [r3, #8]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	1e5a      	subs	r2, r3, #1
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b08e      	sub	sp, #56	; 0x38
 80063ee:	af04      	add	r7, sp, #16
 80063f0:	60f8      	str	r0, [r7, #12]
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	607a      	str	r2, [r7, #4]
 80063f6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80063f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10a      	bne.n	8006414 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006410:	bf00      	nop
 8006412:	e7fe      	b.n	8006412 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10a      	bne.n	8006430 <xTaskCreateStatic+0x46>
	__asm volatile
 800641a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	61fb      	str	r3, [r7, #28]
}
 800642c:	bf00      	nop
 800642e:	e7fe      	b.n	800642e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006430:	23b4      	movs	r3, #180	; 0xb4
 8006432:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	2bb4      	cmp	r3, #180	; 0xb4
 8006438:	d00a      	beq.n	8006450 <xTaskCreateStatic+0x66>
	__asm volatile
 800643a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	61bb      	str	r3, [r7, #24]
}
 800644c:	bf00      	nop
 800644e:	e7fe      	b.n	800644e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006450:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006454:	2b00      	cmp	r3, #0
 8006456:	d01e      	beq.n	8006496 <xTaskCreateStatic+0xac>
 8006458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645a:	2b00      	cmp	r3, #0
 800645c:	d01b      	beq.n	8006496 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800645e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006460:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006466:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	2202      	movs	r2, #2
 800646c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006470:	2300      	movs	r3, #0
 8006472:	9303      	str	r3, [sp, #12]
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	9302      	str	r3, [sp, #8]
 8006478:	f107 0314 	add.w	r3, r7, #20
 800647c:	9301      	str	r3, [sp, #4]
 800647e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	68b9      	ldr	r1, [r7, #8]
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 f851 	bl	8006530 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800648e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006490:	f000 f8ec 	bl	800666c <prvAddNewTaskToReadyList>
 8006494:	e001      	b.n	800649a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006496:	2300      	movs	r3, #0
 8006498:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800649a:	697b      	ldr	r3, [r7, #20]
	}
 800649c:	4618      	mov	r0, r3
 800649e:	3728      	adds	r7, #40	; 0x28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b08c      	sub	sp, #48	; 0x30
 80064a8:	af04      	add	r7, sp, #16
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	603b      	str	r3, [r7, #0]
 80064b0:	4613      	mov	r3, r2
 80064b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80064b4:	88fb      	ldrh	r3, [r7, #6]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4618      	mov	r0, r3
 80064ba:	f000 fef5 	bl	80072a8 <pvPortMalloc>
 80064be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00e      	beq.n	80064e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80064c6:	20b4      	movs	r0, #180	; 0xb4
 80064c8:	f000 feee 	bl	80072a8 <pvPortMalloc>
 80064cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d003      	beq.n	80064dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	631a      	str	r2, [r3, #48]	; 0x30
 80064da:	e005      	b.n	80064e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80064dc:	6978      	ldr	r0, [r7, #20]
 80064de:	f000 ffaf 	bl	8007440 <vPortFree>
 80064e2:	e001      	b.n	80064e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80064e4:	2300      	movs	r3, #0
 80064e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d017      	beq.n	800651e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80064f6:	88fa      	ldrh	r2, [r7, #6]
 80064f8:	2300      	movs	r3, #0
 80064fa:	9303      	str	r3, [sp, #12]
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	9302      	str	r3, [sp, #8]
 8006500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006502:	9301      	str	r3, [sp, #4]
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 f80f 	bl	8006530 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006512:	69f8      	ldr	r0, [r7, #28]
 8006514:	f000 f8aa 	bl	800666c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006518:	2301      	movs	r3, #1
 800651a:	61bb      	str	r3, [r7, #24]
 800651c:	e002      	b.n	8006524 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800651e:	f04f 33ff 	mov.w	r3, #4294967295
 8006522:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006524:	69bb      	ldr	r3, [r7, #24]
	}
 8006526:	4618      	mov	r0, r3
 8006528:	3720      	adds	r7, #32
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
	...

08006530 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
 800653c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800653e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006548:	3b01      	subs	r3, #1
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	f023 0307 	bic.w	r3, r3, #7
 8006556:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	f003 0307 	and.w	r3, r3, #7
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00a      	beq.n	8006578 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	617b      	str	r3, [r7, #20]
}
 8006574:	bf00      	nop
 8006576:	e7fe      	b.n	8006576 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d01f      	beq.n	80065be <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800657e:	2300      	movs	r3, #0
 8006580:	61fb      	str	r3, [r7, #28]
 8006582:	e012      	b.n	80065aa <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	4413      	add	r3, r2
 800658a:	7819      	ldrb	r1, [r3, #0]
 800658c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	4413      	add	r3, r2
 8006592:	3334      	adds	r3, #52	; 0x34
 8006594:	460a      	mov	r2, r1
 8006596:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	4413      	add	r3, r2
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d006      	beq.n	80065b2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	3301      	adds	r3, #1
 80065a8:	61fb      	str	r3, [r7, #28]
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	2b0f      	cmp	r3, #15
 80065ae:	d9e9      	bls.n	8006584 <prvInitialiseNewTask+0x54>
 80065b0:	e000      	b.n	80065b4 <prvInitialiseNewTask+0x84>
			{
				break;
 80065b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065bc:	e003      	b.n	80065c6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80065be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80065c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c8:	2b06      	cmp	r3, #6
 80065ca:	d901      	bls.n	80065d0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80065cc:	2306      	movs	r3, #6
 80065ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80065d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065da:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80065dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065de:	2200      	movs	r2, #0
 80065e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e4:	3304      	adds	r3, #4
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7ff fe6b 	bl	80062c2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ee:	3318      	adds	r3, #24
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7ff fe66 	bl	80062c2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80065f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	f1c3 0207 	rsb	r2, r3, #7
 8006602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006604:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800660a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800660c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660e:	2200      	movs	r2, #0
 8006610:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006616:	2200      	movs	r2, #0
 8006618:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800661c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661e:	334c      	adds	r3, #76	; 0x4c
 8006620:	2260      	movs	r2, #96	; 0x60
 8006622:	2100      	movs	r1, #0
 8006624:	4618      	mov	r0, r3
 8006626:	f001 f84f 	bl	80076c8 <memset>
 800662a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662c:	4a0c      	ldr	r2, [pc, #48]	; (8006660 <prvInitialiseNewTask+0x130>)
 800662e:	651a      	str	r2, [r3, #80]	; 0x50
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	4a0c      	ldr	r2, [pc, #48]	; (8006664 <prvInitialiseNewTask+0x134>)
 8006634:	655a      	str	r2, [r3, #84]	; 0x54
 8006636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006638:	4a0b      	ldr	r2, [pc, #44]	; (8006668 <prvInitialiseNewTask+0x138>)
 800663a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	68f9      	ldr	r1, [r7, #12]
 8006640:	69b8      	ldr	r0, [r7, #24]
 8006642:	f000 fc1f 	bl	8006e84 <pxPortInitialiseStack>
 8006646:	4602      	mov	r2, r0
 8006648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800664c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006656:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006658:	bf00      	nop
 800665a:	3720      	adds	r7, #32
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	08007960 	.word	0x08007960
 8006664:	08007980 	.word	0x08007980
 8006668:	08007940 	.word	0x08007940

0800666c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006674:	f000 fd36 	bl	80070e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006678:	4b2a      	ldr	r3, [pc, #168]	; (8006724 <prvAddNewTaskToReadyList+0xb8>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3301      	adds	r3, #1
 800667e:	4a29      	ldr	r2, [pc, #164]	; (8006724 <prvAddNewTaskToReadyList+0xb8>)
 8006680:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006682:	4b29      	ldr	r3, [pc, #164]	; (8006728 <prvAddNewTaskToReadyList+0xbc>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d109      	bne.n	800669e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800668a:	4a27      	ldr	r2, [pc, #156]	; (8006728 <prvAddNewTaskToReadyList+0xbc>)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006690:	4b24      	ldr	r3, [pc, #144]	; (8006724 <prvAddNewTaskToReadyList+0xb8>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d110      	bne.n	80066ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006698:	f000 facc 	bl	8006c34 <prvInitialiseTaskLists>
 800669c:	e00d      	b.n	80066ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800669e:	4b23      	ldr	r3, [pc, #140]	; (800672c <prvAddNewTaskToReadyList+0xc0>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d109      	bne.n	80066ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066a6:	4b20      	ldr	r3, [pc, #128]	; (8006728 <prvAddNewTaskToReadyList+0xbc>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d802      	bhi.n	80066ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066b4:	4a1c      	ldr	r2, [pc, #112]	; (8006728 <prvAddNewTaskToReadyList+0xbc>)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80066ba:	4b1d      	ldr	r3, [pc, #116]	; (8006730 <prvAddNewTaskToReadyList+0xc4>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3301      	adds	r3, #1
 80066c0:	4a1b      	ldr	r2, [pc, #108]	; (8006730 <prvAddNewTaskToReadyList+0xc4>)
 80066c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c8:	2201      	movs	r2, #1
 80066ca:	409a      	lsls	r2, r3
 80066cc:	4b19      	ldr	r3, [pc, #100]	; (8006734 <prvAddNewTaskToReadyList+0xc8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	4a18      	ldr	r2, [pc, #96]	; (8006734 <prvAddNewTaskToReadyList+0xc8>)
 80066d4:	6013      	str	r3, [r2, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066da:	4613      	mov	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4a15      	ldr	r2, [pc, #84]	; (8006738 <prvAddNewTaskToReadyList+0xcc>)
 80066e4:	441a      	add	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	3304      	adds	r3, #4
 80066ea:	4619      	mov	r1, r3
 80066ec:	4610      	mov	r0, r2
 80066ee:	f7ff fdf5 	bl	80062dc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80066f2:	f000 fd27 	bl	8007144 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80066f6:	4b0d      	ldr	r3, [pc, #52]	; (800672c <prvAddNewTaskToReadyList+0xc0>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00e      	beq.n	800671c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80066fe:	4b0a      	ldr	r3, [pc, #40]	; (8006728 <prvAddNewTaskToReadyList+0xbc>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	429a      	cmp	r2, r3
 800670a:	d207      	bcs.n	800671c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800670c:	4b0b      	ldr	r3, [pc, #44]	; (800673c <prvAddNewTaskToReadyList+0xd0>)
 800670e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800671c:	bf00      	nop
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	20000734 	.word	0x20000734
 8006728:	20000634 	.word	0x20000634
 800672c:	20000740 	.word	0x20000740
 8006730:	20000750 	.word	0x20000750
 8006734:	2000073c 	.word	0x2000073c
 8006738:	20000638 	.word	0x20000638
 800673c:	e000ed04 	.word	0xe000ed04

08006740 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006748:	2300      	movs	r3, #0
 800674a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d017      	beq.n	8006782 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006752:	4b13      	ldr	r3, [pc, #76]	; (80067a0 <vTaskDelay+0x60>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00a      	beq.n	8006770 <vTaskDelay+0x30>
	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	60bb      	str	r3, [r7, #8]
}
 800676c:	bf00      	nop
 800676e:	e7fe      	b.n	800676e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006770:	f000 f884 	bl	800687c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006774:	2100      	movs	r1, #0
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fb1e 	bl	8006db8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800677c:	f000 f88c 	bl	8006898 <xTaskResumeAll>
 8006780:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d107      	bne.n	8006798 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006788:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <vTaskDelay+0x64>)
 800678a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800678e:	601a      	str	r2, [r3, #0]
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006798:	bf00      	nop
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	2000075c 	.word	0x2000075c
 80067a4:	e000ed04 	.word	0xe000ed04

080067a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08a      	sub	sp, #40	; 0x28
 80067ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80067ae:	2300      	movs	r3, #0
 80067b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80067b2:	2300      	movs	r3, #0
 80067b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80067b6:	463a      	mov	r2, r7
 80067b8:	1d39      	adds	r1, r7, #4
 80067ba:	f107 0308 	add.w	r3, r7, #8
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fa fb26 	bl	8000e10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80067c4:	6839      	ldr	r1, [r7, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	9202      	str	r2, [sp, #8]
 80067cc:	9301      	str	r3, [sp, #4]
 80067ce:	2300      	movs	r3, #0
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	2300      	movs	r3, #0
 80067d4:	460a      	mov	r2, r1
 80067d6:	4921      	ldr	r1, [pc, #132]	; (800685c <vTaskStartScheduler+0xb4>)
 80067d8:	4821      	ldr	r0, [pc, #132]	; (8006860 <vTaskStartScheduler+0xb8>)
 80067da:	f7ff fe06 	bl	80063ea <xTaskCreateStatic>
 80067de:	4603      	mov	r3, r0
 80067e0:	4a20      	ldr	r2, [pc, #128]	; (8006864 <vTaskStartScheduler+0xbc>)
 80067e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80067e4:	4b1f      	ldr	r3, [pc, #124]	; (8006864 <vTaskStartScheduler+0xbc>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d002      	beq.n	80067f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80067ec:	2301      	movs	r3, #1
 80067ee:	617b      	str	r3, [r7, #20]
 80067f0:	e001      	b.n	80067f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80067f2:	2300      	movs	r3, #0
 80067f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d11b      	bne.n	8006834 <vTaskStartScheduler+0x8c>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	613b      	str	r3, [r7, #16]
}
 800680e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006810:	4b15      	ldr	r3, [pc, #84]	; (8006868 <vTaskStartScheduler+0xc0>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	334c      	adds	r3, #76	; 0x4c
 8006816:	4a15      	ldr	r2, [pc, #84]	; (800686c <vTaskStartScheduler+0xc4>)
 8006818:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800681a:	4b15      	ldr	r3, [pc, #84]	; (8006870 <vTaskStartScheduler+0xc8>)
 800681c:	f04f 32ff 	mov.w	r2, #4294967295
 8006820:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006822:	4b14      	ldr	r3, [pc, #80]	; (8006874 <vTaskStartScheduler+0xcc>)
 8006824:	2201      	movs	r2, #1
 8006826:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006828:	4b13      	ldr	r3, [pc, #76]	; (8006878 <vTaskStartScheduler+0xd0>)
 800682a:	2200      	movs	r2, #0
 800682c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800682e:	f000 fbb7 	bl	8006fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006832:	e00e      	b.n	8006852 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683a:	d10a      	bne.n	8006852 <vTaskStartScheduler+0xaa>
	__asm volatile
 800683c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	60fb      	str	r3, [r7, #12]
}
 800684e:	bf00      	nop
 8006850:	e7fe      	b.n	8006850 <vTaskStartScheduler+0xa8>
}
 8006852:	bf00      	nop
 8006854:	3718      	adds	r7, #24
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	08007918 	.word	0x08007918
 8006860:	08006c05 	.word	0x08006c05
 8006864:	20000758 	.word	0x20000758
 8006868:	20000634 	.word	0x20000634
 800686c:	20000020 	.word	0x20000020
 8006870:	20000754 	.word	0x20000754
 8006874:	20000740 	.word	0x20000740
 8006878:	20000738 	.word	0x20000738

0800687c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800687c:	b480      	push	{r7}
 800687e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006880:	4b04      	ldr	r3, [pc, #16]	; (8006894 <vTaskSuspendAll+0x18>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3301      	adds	r3, #1
 8006886:	4a03      	ldr	r2, [pc, #12]	; (8006894 <vTaskSuspendAll+0x18>)
 8006888:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800688a:	bf00      	nop
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	2000075c 	.word	0x2000075c

08006898 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800689e:	2300      	movs	r3, #0
 80068a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80068a2:	2300      	movs	r3, #0
 80068a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80068a6:	4b41      	ldr	r3, [pc, #260]	; (80069ac <xTaskResumeAll+0x114>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10a      	bne.n	80068c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80068ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	603b      	str	r3, [r7, #0]
}
 80068c0:	bf00      	nop
 80068c2:	e7fe      	b.n	80068c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80068c4:	f000 fc0e 	bl	80070e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80068c8:	4b38      	ldr	r3, [pc, #224]	; (80069ac <xTaskResumeAll+0x114>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	4a37      	ldr	r2, [pc, #220]	; (80069ac <xTaskResumeAll+0x114>)
 80068d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068d2:	4b36      	ldr	r3, [pc, #216]	; (80069ac <xTaskResumeAll+0x114>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d161      	bne.n	800699e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80068da:	4b35      	ldr	r3, [pc, #212]	; (80069b0 <xTaskResumeAll+0x118>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d05d      	beq.n	800699e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068e2:	e02e      	b.n	8006942 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068e4:	4b33      	ldr	r3, [pc, #204]	; (80069b4 <xTaskResumeAll+0x11c>)
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3318      	adds	r3, #24
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7ff fd50 	bl	8006396 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	3304      	adds	r3, #4
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7ff fd4b 	bl	8006396 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006904:	2201      	movs	r2, #1
 8006906:	409a      	lsls	r2, r3
 8006908:	4b2b      	ldr	r3, [pc, #172]	; (80069b8 <xTaskResumeAll+0x120>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4313      	orrs	r3, r2
 800690e:	4a2a      	ldr	r2, [pc, #168]	; (80069b8 <xTaskResumeAll+0x120>)
 8006910:	6013      	str	r3, [r2, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006916:	4613      	mov	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4a27      	ldr	r2, [pc, #156]	; (80069bc <xTaskResumeAll+0x124>)
 8006920:	441a      	add	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	3304      	adds	r3, #4
 8006926:	4619      	mov	r1, r3
 8006928:	4610      	mov	r0, r2
 800692a:	f7ff fcd7 	bl	80062dc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006932:	4b23      	ldr	r3, [pc, #140]	; (80069c0 <xTaskResumeAll+0x128>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006938:	429a      	cmp	r2, r3
 800693a:	d302      	bcc.n	8006942 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800693c:	4b21      	ldr	r3, [pc, #132]	; (80069c4 <xTaskResumeAll+0x12c>)
 800693e:	2201      	movs	r2, #1
 8006940:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006942:	4b1c      	ldr	r3, [pc, #112]	; (80069b4 <xTaskResumeAll+0x11c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1cc      	bne.n	80068e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006950:	f000 fa12 	bl	8006d78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006954:	4b1c      	ldr	r3, [pc, #112]	; (80069c8 <xTaskResumeAll+0x130>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d010      	beq.n	8006982 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006960:	f000 f836 	bl	80069d0 <xTaskIncrementTick>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800696a:	4b16      	ldr	r3, [pc, #88]	; (80069c4 <xTaskResumeAll+0x12c>)
 800696c:	2201      	movs	r2, #1
 800696e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	3b01      	subs	r3, #1
 8006974:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1f1      	bne.n	8006960 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800697c:	4b12      	ldr	r3, [pc, #72]	; (80069c8 <xTaskResumeAll+0x130>)
 800697e:	2200      	movs	r2, #0
 8006980:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006982:	4b10      	ldr	r3, [pc, #64]	; (80069c4 <xTaskResumeAll+0x12c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d009      	beq.n	800699e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800698a:	2301      	movs	r3, #1
 800698c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800698e:	4b0f      	ldr	r3, [pc, #60]	; (80069cc <xTaskResumeAll+0x134>)
 8006990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800699e:	f000 fbd1 	bl	8007144 <vPortExitCritical>

	return xAlreadyYielded;
 80069a2:	68bb      	ldr	r3, [r7, #8]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	2000075c 	.word	0x2000075c
 80069b0:	20000734 	.word	0x20000734
 80069b4:	200006f4 	.word	0x200006f4
 80069b8:	2000073c 	.word	0x2000073c
 80069bc:	20000638 	.word	0x20000638
 80069c0:	20000634 	.word	0x20000634
 80069c4:	20000748 	.word	0x20000748
 80069c8:	20000744 	.word	0x20000744
 80069cc:	e000ed04 	.word	0xe000ed04

080069d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80069d6:	2300      	movs	r3, #0
 80069d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069da:	4b4e      	ldr	r3, [pc, #312]	; (8006b14 <xTaskIncrementTick+0x144>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f040 808e 	bne.w	8006b00 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80069e4:	4b4c      	ldr	r3, [pc, #304]	; (8006b18 <xTaskIncrementTick+0x148>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3301      	adds	r3, #1
 80069ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80069ec:	4a4a      	ldr	r2, [pc, #296]	; (8006b18 <xTaskIncrementTick+0x148>)
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d120      	bne.n	8006a3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80069f8:	4b48      	ldr	r3, [pc, #288]	; (8006b1c <xTaskIncrementTick+0x14c>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00a      	beq.n	8006a18 <xTaskIncrementTick+0x48>
	__asm volatile
 8006a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	603b      	str	r3, [r7, #0]
}
 8006a14:	bf00      	nop
 8006a16:	e7fe      	b.n	8006a16 <xTaskIncrementTick+0x46>
 8006a18:	4b40      	ldr	r3, [pc, #256]	; (8006b1c <xTaskIncrementTick+0x14c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	4b40      	ldr	r3, [pc, #256]	; (8006b20 <xTaskIncrementTick+0x150>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a3e      	ldr	r2, [pc, #248]	; (8006b1c <xTaskIncrementTick+0x14c>)
 8006a24:	6013      	str	r3, [r2, #0]
 8006a26:	4a3e      	ldr	r2, [pc, #248]	; (8006b20 <xTaskIncrementTick+0x150>)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6013      	str	r3, [r2, #0]
 8006a2c:	4b3d      	ldr	r3, [pc, #244]	; (8006b24 <xTaskIncrementTick+0x154>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3301      	adds	r3, #1
 8006a32:	4a3c      	ldr	r2, [pc, #240]	; (8006b24 <xTaskIncrementTick+0x154>)
 8006a34:	6013      	str	r3, [r2, #0]
 8006a36:	f000 f99f 	bl	8006d78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a3a:	4b3b      	ldr	r3, [pc, #236]	; (8006b28 <xTaskIncrementTick+0x158>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d348      	bcc.n	8006ad6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a44:	4b35      	ldr	r3, [pc, #212]	; (8006b1c <xTaskIncrementTick+0x14c>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d104      	bne.n	8006a58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a4e:	4b36      	ldr	r3, [pc, #216]	; (8006b28 <xTaskIncrementTick+0x158>)
 8006a50:	f04f 32ff 	mov.w	r2, #4294967295
 8006a54:	601a      	str	r2, [r3, #0]
					break;
 8006a56:	e03e      	b.n	8006ad6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a58:	4b30      	ldr	r3, [pc, #192]	; (8006b1c <xTaskIncrementTick+0x14c>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d203      	bcs.n	8006a78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a70:	4a2d      	ldr	r2, [pc, #180]	; (8006b28 <xTaskIncrementTick+0x158>)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006a76:	e02e      	b.n	8006ad6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7ff fc8a 	bl	8006396 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d004      	beq.n	8006a94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	3318      	adds	r3, #24
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7ff fc81 	bl	8006396 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	2201      	movs	r2, #1
 8006a9a:	409a      	lsls	r2, r3
 8006a9c:	4b23      	ldr	r3, [pc, #140]	; (8006b2c <xTaskIncrementTick+0x15c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	4a22      	ldr	r2, [pc, #136]	; (8006b2c <xTaskIncrementTick+0x15c>)
 8006aa4:	6013      	str	r3, [r2, #0]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aaa:	4613      	mov	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4a1f      	ldr	r2, [pc, #124]	; (8006b30 <xTaskIncrementTick+0x160>)
 8006ab4:	441a      	add	r2, r3
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	3304      	adds	r3, #4
 8006aba:	4619      	mov	r1, r3
 8006abc:	4610      	mov	r0, r2
 8006abe:	f7ff fc0d 	bl	80062dc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac6:	4b1b      	ldr	r3, [pc, #108]	; (8006b34 <xTaskIncrementTick+0x164>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d3b9      	bcc.n	8006a44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ad4:	e7b6      	b.n	8006a44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ad6:	4b17      	ldr	r3, [pc, #92]	; (8006b34 <xTaskIncrementTick+0x164>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006adc:	4914      	ldr	r1, [pc, #80]	; (8006b30 <xTaskIncrementTick+0x160>)
 8006ade:	4613      	mov	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	440b      	add	r3, r1
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d901      	bls.n	8006af2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006aee:	2301      	movs	r3, #1
 8006af0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006af2:	4b11      	ldr	r3, [pc, #68]	; (8006b38 <xTaskIncrementTick+0x168>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d007      	beq.n	8006b0a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006afa:	2301      	movs	r3, #1
 8006afc:	617b      	str	r3, [r7, #20]
 8006afe:	e004      	b.n	8006b0a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b00:	4b0e      	ldr	r3, [pc, #56]	; (8006b3c <xTaskIncrementTick+0x16c>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	3301      	adds	r3, #1
 8006b06:	4a0d      	ldr	r2, [pc, #52]	; (8006b3c <xTaskIncrementTick+0x16c>)
 8006b08:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006b0a:	697b      	ldr	r3, [r7, #20]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3718      	adds	r7, #24
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	2000075c 	.word	0x2000075c
 8006b18:	20000738 	.word	0x20000738
 8006b1c:	200006ec 	.word	0x200006ec
 8006b20:	200006f0 	.word	0x200006f0
 8006b24:	2000074c 	.word	0x2000074c
 8006b28:	20000754 	.word	0x20000754
 8006b2c:	2000073c 	.word	0x2000073c
 8006b30:	20000638 	.word	0x20000638
 8006b34:	20000634 	.word	0x20000634
 8006b38:	20000748 	.word	0x20000748
 8006b3c:	20000744 	.word	0x20000744

08006b40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b40:	b480      	push	{r7}
 8006b42:	b087      	sub	sp, #28
 8006b44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b46:	4b29      	ldr	r3, [pc, #164]	; (8006bec <vTaskSwitchContext+0xac>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b4e:	4b28      	ldr	r3, [pc, #160]	; (8006bf0 <vTaskSwitchContext+0xb0>)
 8006b50:	2201      	movs	r2, #1
 8006b52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b54:	e044      	b.n	8006be0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006b56:	4b26      	ldr	r3, [pc, #152]	; (8006bf0 <vTaskSwitchContext+0xb0>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b5c:	4b25      	ldr	r3, [pc, #148]	; (8006bf4 <vTaskSwitchContext+0xb4>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	fab3 f383 	clz	r3, r3
 8006b68:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006b6a:	7afb      	ldrb	r3, [r7, #11]
 8006b6c:	f1c3 031f 	rsb	r3, r3, #31
 8006b70:	617b      	str	r3, [r7, #20]
 8006b72:	4921      	ldr	r1, [pc, #132]	; (8006bf8 <vTaskSwitchContext+0xb8>)
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	4613      	mov	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	440b      	add	r3, r1
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10a      	bne.n	8006b9c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	607b      	str	r3, [r7, #4]
}
 8006b98:	bf00      	nop
 8006b9a:	e7fe      	b.n	8006b9a <vTaskSwitchContext+0x5a>
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4a14      	ldr	r2, [pc, #80]	; (8006bf8 <vTaskSwitchContext+0xb8>)
 8006ba8:	4413      	add	r3, r2
 8006baa:	613b      	str	r3, [r7, #16]
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	685a      	ldr	r2, [r3, #4]
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	605a      	str	r2, [r3, #4]
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	685a      	ldr	r2, [r3, #4]
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	3308      	adds	r3, #8
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d104      	bne.n	8006bcc <vTaskSwitchContext+0x8c>
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	685a      	ldr	r2, [r3, #4]
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	605a      	str	r2, [r3, #4]
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	4a0a      	ldr	r2, [pc, #40]	; (8006bfc <vTaskSwitchContext+0xbc>)
 8006bd4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006bd6:	4b09      	ldr	r3, [pc, #36]	; (8006bfc <vTaskSwitchContext+0xbc>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	334c      	adds	r3, #76	; 0x4c
 8006bdc:	4a08      	ldr	r2, [pc, #32]	; (8006c00 <vTaskSwitchContext+0xc0>)
 8006bde:	6013      	str	r3, [r2, #0]
}
 8006be0:	bf00      	nop
 8006be2:	371c      	adds	r7, #28
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	2000075c 	.word	0x2000075c
 8006bf0:	20000748 	.word	0x20000748
 8006bf4:	2000073c 	.word	0x2000073c
 8006bf8:	20000638 	.word	0x20000638
 8006bfc:	20000634 	.word	0x20000634
 8006c00:	20000020 	.word	0x20000020

08006c04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c0c:	f000 f852 	bl	8006cb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c10:	4b06      	ldr	r3, [pc, #24]	; (8006c2c <prvIdleTask+0x28>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d9f9      	bls.n	8006c0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c18:	4b05      	ldr	r3, [pc, #20]	; (8006c30 <prvIdleTask+0x2c>)
 8006c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c28:	e7f0      	b.n	8006c0c <prvIdleTask+0x8>
 8006c2a:	bf00      	nop
 8006c2c:	20000638 	.word	0x20000638
 8006c30:	e000ed04 	.word	0xe000ed04

08006c34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	607b      	str	r3, [r7, #4]
 8006c3e:	e00c      	b.n	8006c5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	4613      	mov	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4a12      	ldr	r2, [pc, #72]	; (8006c94 <prvInitialiseTaskLists+0x60>)
 8006c4c:	4413      	add	r3, r2
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7ff fb17 	bl	8006282 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	3301      	adds	r3, #1
 8006c58:	607b      	str	r3, [r7, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b06      	cmp	r3, #6
 8006c5e:	d9ef      	bls.n	8006c40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c60:	480d      	ldr	r0, [pc, #52]	; (8006c98 <prvInitialiseTaskLists+0x64>)
 8006c62:	f7ff fb0e 	bl	8006282 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c66:	480d      	ldr	r0, [pc, #52]	; (8006c9c <prvInitialiseTaskLists+0x68>)
 8006c68:	f7ff fb0b 	bl	8006282 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c6c:	480c      	ldr	r0, [pc, #48]	; (8006ca0 <prvInitialiseTaskLists+0x6c>)
 8006c6e:	f7ff fb08 	bl	8006282 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c72:	480c      	ldr	r0, [pc, #48]	; (8006ca4 <prvInitialiseTaskLists+0x70>)
 8006c74:	f7ff fb05 	bl	8006282 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c78:	480b      	ldr	r0, [pc, #44]	; (8006ca8 <prvInitialiseTaskLists+0x74>)
 8006c7a:	f7ff fb02 	bl	8006282 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c7e:	4b0b      	ldr	r3, [pc, #44]	; (8006cac <prvInitialiseTaskLists+0x78>)
 8006c80:	4a05      	ldr	r2, [pc, #20]	; (8006c98 <prvInitialiseTaskLists+0x64>)
 8006c82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c84:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <prvInitialiseTaskLists+0x7c>)
 8006c86:	4a05      	ldr	r2, [pc, #20]	; (8006c9c <prvInitialiseTaskLists+0x68>)
 8006c88:	601a      	str	r2, [r3, #0]
}
 8006c8a:	bf00      	nop
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	20000638 	.word	0x20000638
 8006c98:	200006c4 	.word	0x200006c4
 8006c9c:	200006d8 	.word	0x200006d8
 8006ca0:	200006f4 	.word	0x200006f4
 8006ca4:	20000708 	.word	0x20000708
 8006ca8:	20000720 	.word	0x20000720
 8006cac:	200006ec 	.word	0x200006ec
 8006cb0:	200006f0 	.word	0x200006f0

08006cb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cba:	e019      	b.n	8006cf0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006cbc:	f000 fa12 	bl	80070e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cc0:	4b10      	ldr	r3, [pc, #64]	; (8006d04 <prvCheckTasksWaitingTermination+0x50>)
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	3304      	adds	r3, #4
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7ff fb62 	bl	8006396 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006cd2:	4b0d      	ldr	r3, [pc, #52]	; (8006d08 <prvCheckTasksWaitingTermination+0x54>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	4a0b      	ldr	r2, [pc, #44]	; (8006d08 <prvCheckTasksWaitingTermination+0x54>)
 8006cda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006cdc:	4b0b      	ldr	r3, [pc, #44]	; (8006d0c <prvCheckTasksWaitingTermination+0x58>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	4a0a      	ldr	r2, [pc, #40]	; (8006d0c <prvCheckTasksWaitingTermination+0x58>)
 8006ce4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ce6:	f000 fa2d 	bl	8007144 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f810 	bl	8006d10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cf0:	4b06      	ldr	r3, [pc, #24]	; (8006d0c <prvCheckTasksWaitingTermination+0x58>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e1      	bne.n	8006cbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006cf8:	bf00      	nop
 8006cfa:	bf00      	nop
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	20000708 	.word	0x20000708
 8006d08:	20000734 	.word	0x20000734
 8006d0c:	2000071c 	.word	0x2000071c

08006d10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	334c      	adds	r3, #76	; 0x4c
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f000 fce9 	bl	80076f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d108      	bne.n	8006d3e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fb85 	bl	8007440 <vPortFree>
				vPortFree( pxTCB );
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fb82 	bl	8007440 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d3c:	e018      	b.n	8006d70 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d103      	bne.n	8006d50 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fb79 	bl	8007440 <vPortFree>
	}
 8006d4e:	e00f      	b.n	8006d70 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d00a      	beq.n	8006d70 <prvDeleteTCB+0x60>
	__asm volatile
 8006d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5e:	f383 8811 	msr	BASEPRI, r3
 8006d62:	f3bf 8f6f 	isb	sy
 8006d66:	f3bf 8f4f 	dsb	sy
 8006d6a:	60fb      	str	r3, [r7, #12]
}
 8006d6c:	bf00      	nop
 8006d6e:	e7fe      	b.n	8006d6e <prvDeleteTCB+0x5e>
	}
 8006d70:	bf00      	nop
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d7e:	4b0c      	ldr	r3, [pc, #48]	; (8006db0 <prvResetNextTaskUnblockTime+0x38>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d104      	bne.n	8006d92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d88:	4b0a      	ldr	r3, [pc, #40]	; (8006db4 <prvResetNextTaskUnblockTime+0x3c>)
 8006d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d90:	e008      	b.n	8006da4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d92:	4b07      	ldr	r3, [pc, #28]	; (8006db0 <prvResetNextTaskUnblockTime+0x38>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	4a04      	ldr	r2, [pc, #16]	; (8006db4 <prvResetNextTaskUnblockTime+0x3c>)
 8006da2:	6013      	str	r3, [r2, #0]
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	200006ec 	.word	0x200006ec
 8006db4:	20000754 	.word	0x20000754

08006db8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006dc2:	4b29      	ldr	r3, [pc, #164]	; (8006e68 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dc8:	4b28      	ldr	r3, [pc, #160]	; (8006e6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	3304      	adds	r3, #4
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7ff fae1 	bl	8006396 <uxListRemove>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10b      	bne.n	8006df2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006dda:	4b24      	ldr	r3, [pc, #144]	; (8006e6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de0:	2201      	movs	r2, #1
 8006de2:	fa02 f303 	lsl.w	r3, r2, r3
 8006de6:	43da      	mvns	r2, r3
 8006de8:	4b21      	ldr	r3, [pc, #132]	; (8006e70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4013      	ands	r3, r2
 8006dee:	4a20      	ldr	r2, [pc, #128]	; (8006e70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006df0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df8:	d10a      	bne.n	8006e10 <prvAddCurrentTaskToDelayedList+0x58>
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d007      	beq.n	8006e10 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e00:	4b1a      	ldr	r3, [pc, #104]	; (8006e6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3304      	adds	r3, #4
 8006e06:	4619      	mov	r1, r3
 8006e08:	481a      	ldr	r0, [pc, #104]	; (8006e74 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006e0a:	f7ff fa67 	bl	80062dc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e0e:	e026      	b.n	8006e5e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4413      	add	r3, r2
 8006e16:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e18:	4b14      	ldr	r3, [pc, #80]	; (8006e6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d209      	bcs.n	8006e3c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e28:	4b13      	ldr	r3, [pc, #76]	; (8006e78 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	4b0f      	ldr	r3, [pc, #60]	; (8006e6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	3304      	adds	r3, #4
 8006e32:	4619      	mov	r1, r3
 8006e34:	4610      	mov	r0, r2
 8006e36:	f7ff fa75 	bl	8006324 <vListInsert>
}
 8006e3a:	e010      	b.n	8006e5e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e3c:	4b0f      	ldr	r3, [pc, #60]	; (8006e7c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	4b0a      	ldr	r3, [pc, #40]	; (8006e6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3304      	adds	r3, #4
 8006e46:	4619      	mov	r1, r3
 8006e48:	4610      	mov	r0, r2
 8006e4a:	f7ff fa6b 	bl	8006324 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e4e:	4b0c      	ldr	r3, [pc, #48]	; (8006e80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d202      	bcs.n	8006e5e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006e58:	4a09      	ldr	r2, [pc, #36]	; (8006e80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	6013      	str	r3, [r2, #0]
}
 8006e5e:	bf00      	nop
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	20000738 	.word	0x20000738
 8006e6c:	20000634 	.word	0x20000634
 8006e70:	2000073c 	.word	0x2000073c
 8006e74:	20000720 	.word	0x20000720
 8006e78:	200006f0 	.word	0x200006f0
 8006e7c:	200006ec 	.word	0x200006ec
 8006e80:	20000754 	.word	0x20000754

08006e84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	3b04      	subs	r3, #4
 8006e94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3b04      	subs	r3, #4
 8006ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f023 0201 	bic.w	r2, r3, #1
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	3b04      	subs	r3, #4
 8006eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006eb4:	4a0c      	ldr	r2, [pc, #48]	; (8006ee8 <pxPortInitialiseStack+0x64>)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	3b14      	subs	r3, #20
 8006ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3b04      	subs	r3, #4
 8006eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f06f 0202 	mvn.w	r2, #2
 8006ed2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	3b20      	subs	r3, #32
 8006ed8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006eda:	68fb      	ldr	r3, [r7, #12]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	08006eed 	.word	0x08006eed

08006eec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ef6:	4b12      	ldr	r3, [pc, #72]	; (8006f40 <prvTaskExitError+0x54>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efe:	d00a      	beq.n	8006f16 <prvTaskExitError+0x2a>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	60fb      	str	r3, [r7, #12]
}
 8006f12:	bf00      	nop
 8006f14:	e7fe      	b.n	8006f14 <prvTaskExitError+0x28>
	__asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	60bb      	str	r3, [r7, #8]
}
 8006f28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f2a:	bf00      	nop
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0fc      	beq.n	8006f2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f32:	bf00      	nop
 8006f34:	bf00      	nop
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	2000001c 	.word	0x2000001c
	...

08006f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f50:	4b07      	ldr	r3, [pc, #28]	; (8006f70 <pxCurrentTCBConst2>)
 8006f52:	6819      	ldr	r1, [r3, #0]
 8006f54:	6808      	ldr	r0, [r1, #0]
 8006f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5a:	f380 8809 	msr	PSP, r0
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f04f 0000 	mov.w	r0, #0
 8006f66:	f380 8811 	msr	BASEPRI, r0
 8006f6a:	4770      	bx	lr
 8006f6c:	f3af 8000 	nop.w

08006f70 <pxCurrentTCBConst2>:
 8006f70:	20000634 	.word	0x20000634
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f74:	bf00      	nop
 8006f76:	bf00      	nop

08006f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f78:	4808      	ldr	r0, [pc, #32]	; (8006f9c <prvPortStartFirstTask+0x24>)
 8006f7a:	6800      	ldr	r0, [r0, #0]
 8006f7c:	6800      	ldr	r0, [r0, #0]
 8006f7e:	f380 8808 	msr	MSP, r0
 8006f82:	f04f 0000 	mov.w	r0, #0
 8006f86:	f380 8814 	msr	CONTROL, r0
 8006f8a:	b662      	cpsie	i
 8006f8c:	b661      	cpsie	f
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	df00      	svc	0
 8006f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f9a:	bf00      	nop
 8006f9c:	e000ed08 	.word	0xe000ed08

08006fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fa6:	4b46      	ldr	r3, [pc, #280]	; (80070c0 <xPortStartScheduler+0x120>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a46      	ldr	r2, [pc, #280]	; (80070c4 <xPortStartScheduler+0x124>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d10a      	bne.n	8006fc6 <xPortStartScheduler+0x26>
	__asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	613b      	str	r3, [r7, #16]
}
 8006fc2:	bf00      	nop
 8006fc4:	e7fe      	b.n	8006fc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006fc6:	4b3e      	ldr	r3, [pc, #248]	; (80070c0 <xPortStartScheduler+0x120>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a3f      	ldr	r2, [pc, #252]	; (80070c8 <xPortStartScheduler+0x128>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d10a      	bne.n	8006fe6 <xPortStartScheduler+0x46>
	__asm volatile
 8006fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	60fb      	str	r3, [r7, #12]
}
 8006fe2:	bf00      	nop
 8006fe4:	e7fe      	b.n	8006fe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006fe6:	4b39      	ldr	r3, [pc, #228]	; (80070cc <xPortStartScheduler+0x12c>)
 8006fe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	22ff      	movs	r2, #255	; 0xff
 8006ff6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007000:	78fb      	ldrb	r3, [r7, #3]
 8007002:	b2db      	uxtb	r3, r3
 8007004:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007008:	b2da      	uxtb	r2, r3
 800700a:	4b31      	ldr	r3, [pc, #196]	; (80070d0 <xPortStartScheduler+0x130>)
 800700c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800700e:	4b31      	ldr	r3, [pc, #196]	; (80070d4 <xPortStartScheduler+0x134>)
 8007010:	2207      	movs	r2, #7
 8007012:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007014:	e009      	b.n	800702a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007016:	4b2f      	ldr	r3, [pc, #188]	; (80070d4 <xPortStartScheduler+0x134>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3b01      	subs	r3, #1
 800701c:	4a2d      	ldr	r2, [pc, #180]	; (80070d4 <xPortStartScheduler+0x134>)
 800701e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007020:	78fb      	ldrb	r3, [r7, #3]
 8007022:	b2db      	uxtb	r3, r3
 8007024:	005b      	lsls	r3, r3, #1
 8007026:	b2db      	uxtb	r3, r3
 8007028:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800702a:	78fb      	ldrb	r3, [r7, #3]
 800702c:	b2db      	uxtb	r3, r3
 800702e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007032:	2b80      	cmp	r3, #128	; 0x80
 8007034:	d0ef      	beq.n	8007016 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007036:	4b27      	ldr	r3, [pc, #156]	; (80070d4 <xPortStartScheduler+0x134>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f1c3 0307 	rsb	r3, r3, #7
 800703e:	2b04      	cmp	r3, #4
 8007040:	d00a      	beq.n	8007058 <xPortStartScheduler+0xb8>
	__asm volatile
 8007042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007046:	f383 8811 	msr	BASEPRI, r3
 800704a:	f3bf 8f6f 	isb	sy
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	60bb      	str	r3, [r7, #8]
}
 8007054:	bf00      	nop
 8007056:	e7fe      	b.n	8007056 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007058:	4b1e      	ldr	r3, [pc, #120]	; (80070d4 <xPortStartScheduler+0x134>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	021b      	lsls	r3, r3, #8
 800705e:	4a1d      	ldr	r2, [pc, #116]	; (80070d4 <xPortStartScheduler+0x134>)
 8007060:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007062:	4b1c      	ldr	r3, [pc, #112]	; (80070d4 <xPortStartScheduler+0x134>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800706a:	4a1a      	ldr	r2, [pc, #104]	; (80070d4 <xPortStartScheduler+0x134>)
 800706c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	b2da      	uxtb	r2, r3
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007076:	4b18      	ldr	r3, [pc, #96]	; (80070d8 <xPortStartScheduler+0x138>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a17      	ldr	r2, [pc, #92]	; (80070d8 <xPortStartScheduler+0x138>)
 800707c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007080:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007082:	4b15      	ldr	r3, [pc, #84]	; (80070d8 <xPortStartScheduler+0x138>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a14      	ldr	r2, [pc, #80]	; (80070d8 <xPortStartScheduler+0x138>)
 8007088:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800708c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800708e:	f000 f8dd 	bl	800724c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007092:	4b12      	ldr	r3, [pc, #72]	; (80070dc <xPortStartScheduler+0x13c>)
 8007094:	2200      	movs	r2, #0
 8007096:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007098:	f000 f8fc 	bl	8007294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800709c:	4b10      	ldr	r3, [pc, #64]	; (80070e0 <xPortStartScheduler+0x140>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a0f      	ldr	r2, [pc, #60]	; (80070e0 <xPortStartScheduler+0x140>)
 80070a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80070a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070a8:	f7ff ff66 	bl	8006f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070ac:	f7ff fd48 	bl	8006b40 <vTaskSwitchContext>
	prvTaskExitError();
 80070b0:	f7ff ff1c 	bl	8006eec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3718      	adds	r7, #24
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	e000ed00 	.word	0xe000ed00
 80070c4:	410fc271 	.word	0x410fc271
 80070c8:	410fc270 	.word	0x410fc270
 80070cc:	e000e400 	.word	0xe000e400
 80070d0:	20000760 	.word	0x20000760
 80070d4:	20000764 	.word	0x20000764
 80070d8:	e000ed20 	.word	0xe000ed20
 80070dc:	2000001c 	.word	0x2000001c
 80070e0:	e000ef34 	.word	0xe000ef34

080070e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
	__asm volatile
 80070ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ee:	f383 8811 	msr	BASEPRI, r3
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	f3bf 8f4f 	dsb	sy
 80070fa:	607b      	str	r3, [r7, #4]
}
 80070fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80070fe:	4b0f      	ldr	r3, [pc, #60]	; (800713c <vPortEnterCritical+0x58>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3301      	adds	r3, #1
 8007104:	4a0d      	ldr	r2, [pc, #52]	; (800713c <vPortEnterCritical+0x58>)
 8007106:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007108:	4b0c      	ldr	r3, [pc, #48]	; (800713c <vPortEnterCritical+0x58>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d10f      	bne.n	8007130 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007110:	4b0b      	ldr	r3, [pc, #44]	; (8007140 <vPortEnterCritical+0x5c>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00a      	beq.n	8007130 <vPortEnterCritical+0x4c>
	__asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	603b      	str	r3, [r7, #0]
}
 800712c:	bf00      	nop
 800712e:	e7fe      	b.n	800712e <vPortEnterCritical+0x4a>
	}
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	2000001c 	.word	0x2000001c
 8007140:	e000ed04 	.word	0xe000ed04

08007144 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800714a:	4b12      	ldr	r3, [pc, #72]	; (8007194 <vPortExitCritical+0x50>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10a      	bne.n	8007168 <vPortExitCritical+0x24>
	__asm volatile
 8007152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	607b      	str	r3, [r7, #4]
}
 8007164:	bf00      	nop
 8007166:	e7fe      	b.n	8007166 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007168:	4b0a      	ldr	r3, [pc, #40]	; (8007194 <vPortExitCritical+0x50>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3b01      	subs	r3, #1
 800716e:	4a09      	ldr	r2, [pc, #36]	; (8007194 <vPortExitCritical+0x50>)
 8007170:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007172:	4b08      	ldr	r3, [pc, #32]	; (8007194 <vPortExitCritical+0x50>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d105      	bne.n	8007186 <vPortExitCritical+0x42>
 800717a:	2300      	movs	r3, #0
 800717c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007184:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	2000001c 	.word	0x2000001c
	...

080071a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071a0:	f3ef 8009 	mrs	r0, PSP
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	4b15      	ldr	r3, [pc, #84]	; (8007200 <pxCurrentTCBConst>)
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	f01e 0f10 	tst.w	lr, #16
 80071b0:	bf08      	it	eq
 80071b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ba:	6010      	str	r0, [r2, #0]
 80071bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80071c4:	f380 8811 	msr	BASEPRI, r0
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f7ff fcb6 	bl	8006b40 <vTaskSwitchContext>
 80071d4:	f04f 0000 	mov.w	r0, #0
 80071d8:	f380 8811 	msr	BASEPRI, r0
 80071dc:	bc09      	pop	{r0, r3}
 80071de:	6819      	ldr	r1, [r3, #0]
 80071e0:	6808      	ldr	r0, [r1, #0]
 80071e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e6:	f01e 0f10 	tst.w	lr, #16
 80071ea:	bf08      	it	eq
 80071ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071f0:	f380 8809 	msr	PSP, r0
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	f3af 8000 	nop.w

08007200 <pxCurrentTCBConst>:
 8007200:	20000634 	.word	0x20000634
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop

08007208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	607b      	str	r3, [r7, #4]
}
 8007220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007222:	f7ff fbd5 	bl	80069d0 <xTaskIncrementTick>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d003      	beq.n	8007234 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800722c:	4b06      	ldr	r3, [pc, #24]	; (8007248 <SysTick_Handler+0x40>)
 800722e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	2300      	movs	r3, #0
 8007236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	f383 8811 	msr	BASEPRI, r3
}
 800723e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007240:	bf00      	nop
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	e000ed04 	.word	0xe000ed04

0800724c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800724c:	b480      	push	{r7}
 800724e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007250:	4b0b      	ldr	r3, [pc, #44]	; (8007280 <vPortSetupTimerInterrupt+0x34>)
 8007252:	2200      	movs	r2, #0
 8007254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007256:	4b0b      	ldr	r3, [pc, #44]	; (8007284 <vPortSetupTimerInterrupt+0x38>)
 8007258:	2200      	movs	r2, #0
 800725a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800725c:	4b0a      	ldr	r3, [pc, #40]	; (8007288 <vPortSetupTimerInterrupt+0x3c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a0a      	ldr	r2, [pc, #40]	; (800728c <vPortSetupTimerInterrupt+0x40>)
 8007262:	fba2 2303 	umull	r2, r3, r2, r3
 8007266:	099b      	lsrs	r3, r3, #6
 8007268:	4a09      	ldr	r2, [pc, #36]	; (8007290 <vPortSetupTimerInterrupt+0x44>)
 800726a:	3b01      	subs	r3, #1
 800726c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800726e:	4b04      	ldr	r3, [pc, #16]	; (8007280 <vPortSetupTimerInterrupt+0x34>)
 8007270:	2207      	movs	r2, #7
 8007272:	601a      	str	r2, [r3, #0]
}
 8007274:	bf00      	nop
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	e000e010 	.word	0xe000e010
 8007284:	e000e018 	.word	0xe000e018
 8007288:	20000010 	.word	0x20000010
 800728c:	10624dd3 	.word	0x10624dd3
 8007290:	e000e014 	.word	0xe000e014

08007294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007294:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80072a4 <vPortEnableVFP+0x10>
 8007298:	6801      	ldr	r1, [r0, #0]
 800729a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800729e:	6001      	str	r1, [r0, #0]
 80072a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072a2:	bf00      	nop
 80072a4:	e000ed88 	.word	0xe000ed88

080072a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b08a      	sub	sp, #40	; 0x28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072b0:	2300      	movs	r3, #0
 80072b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80072b4:	f7ff fae2 	bl	800687c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072b8:	4b5b      	ldr	r3, [pc, #364]	; (8007428 <pvPortMalloc+0x180>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80072c0:	f000 f920 	bl	8007504 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80072c4:	4b59      	ldr	r3, [pc, #356]	; (800742c <pvPortMalloc+0x184>)
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4013      	ands	r3, r2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f040 8093 	bne.w	80073f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d01d      	beq.n	8007314 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80072d8:	2208      	movs	r2, #8
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4413      	add	r3, r2
 80072de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f003 0307 	and.w	r3, r3, #7
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d014      	beq.n	8007314 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f023 0307 	bic.w	r3, r3, #7
 80072f0:	3308      	adds	r3, #8
 80072f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f003 0307 	and.w	r3, r3, #7
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00a      	beq.n	8007314 <pvPortMalloc+0x6c>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	617b      	str	r3, [r7, #20]
}
 8007310:	bf00      	nop
 8007312:	e7fe      	b.n	8007312 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d06e      	beq.n	80073f8 <pvPortMalloc+0x150>
 800731a:	4b45      	ldr	r3, [pc, #276]	; (8007430 <pvPortMalloc+0x188>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	429a      	cmp	r2, r3
 8007322:	d869      	bhi.n	80073f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007324:	4b43      	ldr	r3, [pc, #268]	; (8007434 <pvPortMalloc+0x18c>)
 8007326:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007328:	4b42      	ldr	r3, [pc, #264]	; (8007434 <pvPortMalloc+0x18c>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800732e:	e004      	b.n	800733a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	429a      	cmp	r2, r3
 8007342:	d903      	bls.n	800734c <pvPortMalloc+0xa4>
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1f1      	bne.n	8007330 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800734c:	4b36      	ldr	r3, [pc, #216]	; (8007428 <pvPortMalloc+0x180>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007352:	429a      	cmp	r2, r3
 8007354:	d050      	beq.n	80073f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2208      	movs	r2, #8
 800735c:	4413      	add	r3, r2
 800735e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	6a3b      	ldr	r3, [r7, #32]
 8007366:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	1ad2      	subs	r2, r2, r3
 8007370:	2308      	movs	r3, #8
 8007372:	005b      	lsls	r3, r3, #1
 8007374:	429a      	cmp	r2, r3
 8007376:	d91f      	bls.n	80073b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4413      	add	r3, r2
 800737e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	f003 0307 	and.w	r3, r3, #7
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <pvPortMalloc+0xf8>
	__asm volatile
 800738a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738e:	f383 8811 	msr	BASEPRI, r3
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	613b      	str	r3, [r7, #16]
}
 800739c:	bf00      	nop
 800739e:	e7fe      	b.n	800739e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	1ad2      	subs	r2, r2, r3
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073b2:	69b8      	ldr	r0, [r7, #24]
 80073b4:	f000 f908 	bl	80075c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073b8:	4b1d      	ldr	r3, [pc, #116]	; (8007430 <pvPortMalloc+0x188>)
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	4a1b      	ldr	r2, [pc, #108]	; (8007430 <pvPortMalloc+0x188>)
 80073c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073c6:	4b1a      	ldr	r3, [pc, #104]	; (8007430 <pvPortMalloc+0x188>)
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	4b1b      	ldr	r3, [pc, #108]	; (8007438 <pvPortMalloc+0x190>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d203      	bcs.n	80073da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80073d2:	4b17      	ldr	r3, [pc, #92]	; (8007430 <pvPortMalloc+0x188>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a18      	ldr	r2, [pc, #96]	; (8007438 <pvPortMalloc+0x190>)
 80073d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	4b13      	ldr	r3, [pc, #76]	; (800742c <pvPortMalloc+0x184>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	431a      	orrs	r2, r3
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80073e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ea:	2200      	movs	r2, #0
 80073ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80073ee:	4b13      	ldr	r3, [pc, #76]	; (800743c <pvPortMalloc+0x194>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	3301      	adds	r3, #1
 80073f4:	4a11      	ldr	r2, [pc, #68]	; (800743c <pvPortMalloc+0x194>)
 80073f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80073f8:	f7ff fa4e 	bl	8006898 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	f003 0307 	and.w	r3, r3, #7
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00a      	beq.n	800741c <pvPortMalloc+0x174>
	__asm volatile
 8007406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	60fb      	str	r3, [r7, #12]
}
 8007418:	bf00      	nop
 800741a:	e7fe      	b.n	800741a <pvPortMalloc+0x172>
	return pvReturn;
 800741c:	69fb      	ldr	r3, [r7, #28]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3728      	adds	r7, #40	; 0x28
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	20004370 	.word	0x20004370
 800742c:	20004384 	.word	0x20004384
 8007430:	20004374 	.word	0x20004374
 8007434:	20004368 	.word	0x20004368
 8007438:	20004378 	.word	0x20004378
 800743c:	2000437c 	.word	0x2000437c

08007440 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d04d      	beq.n	80074ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007452:	2308      	movs	r3, #8
 8007454:	425b      	negs	r3, r3
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	4413      	add	r3, r2
 800745a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	4b24      	ldr	r3, [pc, #144]	; (80074f8 <vPortFree+0xb8>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4013      	ands	r3, r2
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10a      	bne.n	8007484 <vPortFree+0x44>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	60fb      	str	r3, [r7, #12]
}
 8007480:	bf00      	nop
 8007482:	e7fe      	b.n	8007482 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00a      	beq.n	80074a2 <vPortFree+0x62>
	__asm volatile
 800748c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007490:	f383 8811 	msr	BASEPRI, r3
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	60bb      	str	r3, [r7, #8]
}
 800749e:	bf00      	nop
 80074a0:	e7fe      	b.n	80074a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	4b14      	ldr	r3, [pc, #80]	; (80074f8 <vPortFree+0xb8>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4013      	ands	r3, r2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d01e      	beq.n	80074ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d11a      	bne.n	80074ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	685a      	ldr	r2, [r3, #4]
 80074bc:	4b0e      	ldr	r3, [pc, #56]	; (80074f8 <vPortFree+0xb8>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	43db      	mvns	r3, r3
 80074c2:	401a      	ands	r2, r3
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80074c8:	f7ff f9d8 	bl	800687c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	4b0a      	ldr	r3, [pc, #40]	; (80074fc <vPortFree+0xbc>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4413      	add	r3, r2
 80074d6:	4a09      	ldr	r2, [pc, #36]	; (80074fc <vPortFree+0xbc>)
 80074d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074da:	6938      	ldr	r0, [r7, #16]
 80074dc:	f000 f874 	bl	80075c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80074e0:	4b07      	ldr	r3, [pc, #28]	; (8007500 <vPortFree+0xc0>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3301      	adds	r3, #1
 80074e6:	4a06      	ldr	r2, [pc, #24]	; (8007500 <vPortFree+0xc0>)
 80074e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80074ea:	f7ff f9d5 	bl	8006898 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80074ee:	bf00      	nop
 80074f0:	3718      	adds	r7, #24
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20004384 	.word	0x20004384
 80074fc:	20004374 	.word	0x20004374
 8007500:	20004380 	.word	0x20004380

08007504 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800750a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800750e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007510:	4b27      	ldr	r3, [pc, #156]	; (80075b0 <prvHeapInit+0xac>)
 8007512:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f003 0307 	and.w	r3, r3, #7
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00c      	beq.n	8007538 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3307      	adds	r3, #7
 8007522:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f023 0307 	bic.w	r3, r3, #7
 800752a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	4a1f      	ldr	r2, [pc, #124]	; (80075b0 <prvHeapInit+0xac>)
 8007534:	4413      	add	r3, r2
 8007536:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800753c:	4a1d      	ldr	r2, [pc, #116]	; (80075b4 <prvHeapInit+0xb0>)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007542:	4b1c      	ldr	r3, [pc, #112]	; (80075b4 <prvHeapInit+0xb0>)
 8007544:	2200      	movs	r2, #0
 8007546:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	4413      	add	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007550:	2208      	movs	r2, #8
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	1a9b      	subs	r3, r3, r2
 8007556:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 0307 	bic.w	r3, r3, #7
 800755e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	4a15      	ldr	r2, [pc, #84]	; (80075b8 <prvHeapInit+0xb4>)
 8007564:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007566:	4b14      	ldr	r3, [pc, #80]	; (80075b8 <prvHeapInit+0xb4>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2200      	movs	r2, #0
 800756c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800756e:	4b12      	ldr	r3, [pc, #72]	; (80075b8 <prvHeapInit+0xb4>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	1ad2      	subs	r2, r2, r3
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007584:	4b0c      	ldr	r3, [pc, #48]	; (80075b8 <prvHeapInit+0xb4>)
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	4a0a      	ldr	r2, [pc, #40]	; (80075bc <prvHeapInit+0xb8>)
 8007592:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	4a09      	ldr	r2, [pc, #36]	; (80075c0 <prvHeapInit+0xbc>)
 800759a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800759c:	4b09      	ldr	r3, [pc, #36]	; (80075c4 <prvHeapInit+0xc0>)
 800759e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80075a2:	601a      	str	r2, [r3, #0]
}
 80075a4:	bf00      	nop
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	20000768 	.word	0x20000768
 80075b4:	20004368 	.word	0x20004368
 80075b8:	20004370 	.word	0x20004370
 80075bc:	20004378 	.word	0x20004378
 80075c0:	20004374 	.word	0x20004374
 80075c4:	20004384 	.word	0x20004384

080075c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80075d0:	4b28      	ldr	r3, [pc, #160]	; (8007674 <prvInsertBlockIntoFreeList+0xac>)
 80075d2:	60fb      	str	r3, [r7, #12]
 80075d4:	e002      	b.n	80075dc <prvInsertBlockIntoFreeList+0x14>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	60fb      	str	r3, [r7, #12]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d8f7      	bhi.n	80075d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	4413      	add	r3, r2
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d108      	bne.n	800760a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	685a      	ldr	r2, [r3, #4]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	441a      	add	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	441a      	add	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	d118      	bne.n	8007650 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	4b15      	ldr	r3, [pc, #84]	; (8007678 <prvInsertBlockIntoFreeList+0xb0>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	429a      	cmp	r2, r3
 8007628:	d00d      	beq.n	8007646 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	441a      	add	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	e008      	b.n	8007658 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007646:	4b0c      	ldr	r3, [pc, #48]	; (8007678 <prvInsertBlockIntoFreeList+0xb0>)
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	e003      	b.n	8007658 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	429a      	cmp	r2, r3
 800765e:	d002      	beq.n	8007666 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007666:	bf00      	nop
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	20004368 	.word	0x20004368
 8007678:	20004370 	.word	0x20004370

0800767c <__libc_init_array>:
 800767c:	b570      	push	{r4, r5, r6, lr}
 800767e:	4d0d      	ldr	r5, [pc, #52]	; (80076b4 <__libc_init_array+0x38>)
 8007680:	4c0d      	ldr	r4, [pc, #52]	; (80076b8 <__libc_init_array+0x3c>)
 8007682:	1b64      	subs	r4, r4, r5
 8007684:	10a4      	asrs	r4, r4, #2
 8007686:	2600      	movs	r6, #0
 8007688:	42a6      	cmp	r6, r4
 800768a:	d109      	bne.n	80076a0 <__libc_init_array+0x24>
 800768c:	4d0b      	ldr	r5, [pc, #44]	; (80076bc <__libc_init_array+0x40>)
 800768e:	4c0c      	ldr	r4, [pc, #48]	; (80076c0 <__libc_init_array+0x44>)
 8007690:	f000 f8e4 	bl	800785c <_init>
 8007694:	1b64      	subs	r4, r4, r5
 8007696:	10a4      	asrs	r4, r4, #2
 8007698:	2600      	movs	r6, #0
 800769a:	42a6      	cmp	r6, r4
 800769c:	d105      	bne.n	80076aa <__libc_init_array+0x2e>
 800769e:	bd70      	pop	{r4, r5, r6, pc}
 80076a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80076a4:	4798      	blx	r3
 80076a6:	3601      	adds	r6, #1
 80076a8:	e7ee      	b.n	8007688 <__libc_init_array+0xc>
 80076aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80076ae:	4798      	blx	r3
 80076b0:	3601      	adds	r6, #1
 80076b2:	e7f2      	b.n	800769a <__libc_init_array+0x1e>
 80076b4:	080079a8 	.word	0x080079a8
 80076b8:	080079a8 	.word	0x080079a8
 80076bc:	080079a8 	.word	0x080079a8
 80076c0:	080079ac 	.word	0x080079ac

080076c4 <__retarget_lock_acquire_recursive>:
 80076c4:	4770      	bx	lr

080076c6 <__retarget_lock_release_recursive>:
 80076c6:	4770      	bx	lr

080076c8 <memset>:
 80076c8:	4402      	add	r2, r0
 80076ca:	4603      	mov	r3, r0
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d100      	bne.n	80076d2 <memset+0xa>
 80076d0:	4770      	bx	lr
 80076d2:	f803 1b01 	strb.w	r1, [r3], #1
 80076d6:	e7f9      	b.n	80076cc <memset+0x4>

080076d8 <cleanup_glue>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	460c      	mov	r4, r1
 80076dc:	6809      	ldr	r1, [r1, #0]
 80076de:	4605      	mov	r5, r0
 80076e0:	b109      	cbz	r1, 80076e6 <cleanup_glue+0xe>
 80076e2:	f7ff fff9 	bl	80076d8 <cleanup_glue>
 80076e6:	4621      	mov	r1, r4
 80076e8:	4628      	mov	r0, r5
 80076ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076ee:	f000 b869 	b.w	80077c4 <_free_r>
	...

080076f4 <_reclaim_reent>:
 80076f4:	4b2c      	ldr	r3, [pc, #176]	; (80077a8 <_reclaim_reent+0xb4>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4283      	cmp	r3, r0
 80076fa:	b570      	push	{r4, r5, r6, lr}
 80076fc:	4604      	mov	r4, r0
 80076fe:	d051      	beq.n	80077a4 <_reclaim_reent+0xb0>
 8007700:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007702:	b143      	cbz	r3, 8007716 <_reclaim_reent+0x22>
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d14a      	bne.n	80077a0 <_reclaim_reent+0xac>
 800770a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800770c:	6819      	ldr	r1, [r3, #0]
 800770e:	b111      	cbz	r1, 8007716 <_reclaim_reent+0x22>
 8007710:	4620      	mov	r0, r4
 8007712:	f000 f857 	bl	80077c4 <_free_r>
 8007716:	6961      	ldr	r1, [r4, #20]
 8007718:	b111      	cbz	r1, 8007720 <_reclaim_reent+0x2c>
 800771a:	4620      	mov	r0, r4
 800771c:	f000 f852 	bl	80077c4 <_free_r>
 8007720:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007722:	b111      	cbz	r1, 800772a <_reclaim_reent+0x36>
 8007724:	4620      	mov	r0, r4
 8007726:	f000 f84d 	bl	80077c4 <_free_r>
 800772a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800772c:	b111      	cbz	r1, 8007734 <_reclaim_reent+0x40>
 800772e:	4620      	mov	r0, r4
 8007730:	f000 f848 	bl	80077c4 <_free_r>
 8007734:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007736:	b111      	cbz	r1, 800773e <_reclaim_reent+0x4a>
 8007738:	4620      	mov	r0, r4
 800773a:	f000 f843 	bl	80077c4 <_free_r>
 800773e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007740:	b111      	cbz	r1, 8007748 <_reclaim_reent+0x54>
 8007742:	4620      	mov	r0, r4
 8007744:	f000 f83e 	bl	80077c4 <_free_r>
 8007748:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800774a:	b111      	cbz	r1, 8007752 <_reclaim_reent+0x5e>
 800774c:	4620      	mov	r0, r4
 800774e:	f000 f839 	bl	80077c4 <_free_r>
 8007752:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007754:	b111      	cbz	r1, 800775c <_reclaim_reent+0x68>
 8007756:	4620      	mov	r0, r4
 8007758:	f000 f834 	bl	80077c4 <_free_r>
 800775c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800775e:	b111      	cbz	r1, 8007766 <_reclaim_reent+0x72>
 8007760:	4620      	mov	r0, r4
 8007762:	f000 f82f 	bl	80077c4 <_free_r>
 8007766:	69a3      	ldr	r3, [r4, #24]
 8007768:	b1e3      	cbz	r3, 80077a4 <_reclaim_reent+0xb0>
 800776a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800776c:	4620      	mov	r0, r4
 800776e:	4798      	blx	r3
 8007770:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007772:	b1b9      	cbz	r1, 80077a4 <_reclaim_reent+0xb0>
 8007774:	4620      	mov	r0, r4
 8007776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800777a:	f7ff bfad 	b.w	80076d8 <cleanup_glue>
 800777e:	5949      	ldr	r1, [r1, r5]
 8007780:	b941      	cbnz	r1, 8007794 <_reclaim_reent+0xa0>
 8007782:	3504      	adds	r5, #4
 8007784:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007786:	2d80      	cmp	r5, #128	; 0x80
 8007788:	68d9      	ldr	r1, [r3, #12]
 800778a:	d1f8      	bne.n	800777e <_reclaim_reent+0x8a>
 800778c:	4620      	mov	r0, r4
 800778e:	f000 f819 	bl	80077c4 <_free_r>
 8007792:	e7ba      	b.n	800770a <_reclaim_reent+0x16>
 8007794:	680e      	ldr	r6, [r1, #0]
 8007796:	4620      	mov	r0, r4
 8007798:	f000 f814 	bl	80077c4 <_free_r>
 800779c:	4631      	mov	r1, r6
 800779e:	e7ef      	b.n	8007780 <_reclaim_reent+0x8c>
 80077a0:	2500      	movs	r5, #0
 80077a2:	e7ef      	b.n	8007784 <_reclaim_reent+0x90>
 80077a4:	bd70      	pop	{r4, r5, r6, pc}
 80077a6:	bf00      	nop
 80077a8:	20000020 	.word	0x20000020

080077ac <__malloc_lock>:
 80077ac:	4801      	ldr	r0, [pc, #4]	; (80077b4 <__malloc_lock+0x8>)
 80077ae:	f7ff bf89 	b.w	80076c4 <__retarget_lock_acquire_recursive>
 80077b2:	bf00      	nop
 80077b4:	20004388 	.word	0x20004388

080077b8 <__malloc_unlock>:
 80077b8:	4801      	ldr	r0, [pc, #4]	; (80077c0 <__malloc_unlock+0x8>)
 80077ba:	f7ff bf84 	b.w	80076c6 <__retarget_lock_release_recursive>
 80077be:	bf00      	nop
 80077c0:	20004388 	.word	0x20004388

080077c4 <_free_r>:
 80077c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077c6:	2900      	cmp	r1, #0
 80077c8:	d044      	beq.n	8007854 <_free_r+0x90>
 80077ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077ce:	9001      	str	r0, [sp, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f1a1 0404 	sub.w	r4, r1, #4
 80077d6:	bfb8      	it	lt
 80077d8:	18e4      	addlt	r4, r4, r3
 80077da:	f7ff ffe7 	bl	80077ac <__malloc_lock>
 80077de:	4a1e      	ldr	r2, [pc, #120]	; (8007858 <_free_r+0x94>)
 80077e0:	9801      	ldr	r0, [sp, #4]
 80077e2:	6813      	ldr	r3, [r2, #0]
 80077e4:	b933      	cbnz	r3, 80077f4 <_free_r+0x30>
 80077e6:	6063      	str	r3, [r4, #4]
 80077e8:	6014      	str	r4, [r2, #0]
 80077ea:	b003      	add	sp, #12
 80077ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077f0:	f7ff bfe2 	b.w	80077b8 <__malloc_unlock>
 80077f4:	42a3      	cmp	r3, r4
 80077f6:	d908      	bls.n	800780a <_free_r+0x46>
 80077f8:	6825      	ldr	r5, [r4, #0]
 80077fa:	1961      	adds	r1, r4, r5
 80077fc:	428b      	cmp	r3, r1
 80077fe:	bf01      	itttt	eq
 8007800:	6819      	ldreq	r1, [r3, #0]
 8007802:	685b      	ldreq	r3, [r3, #4]
 8007804:	1949      	addeq	r1, r1, r5
 8007806:	6021      	streq	r1, [r4, #0]
 8007808:	e7ed      	b.n	80077e6 <_free_r+0x22>
 800780a:	461a      	mov	r2, r3
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	b10b      	cbz	r3, 8007814 <_free_r+0x50>
 8007810:	42a3      	cmp	r3, r4
 8007812:	d9fa      	bls.n	800780a <_free_r+0x46>
 8007814:	6811      	ldr	r1, [r2, #0]
 8007816:	1855      	adds	r5, r2, r1
 8007818:	42a5      	cmp	r5, r4
 800781a:	d10b      	bne.n	8007834 <_free_r+0x70>
 800781c:	6824      	ldr	r4, [r4, #0]
 800781e:	4421      	add	r1, r4
 8007820:	1854      	adds	r4, r2, r1
 8007822:	42a3      	cmp	r3, r4
 8007824:	6011      	str	r1, [r2, #0]
 8007826:	d1e0      	bne.n	80077ea <_free_r+0x26>
 8007828:	681c      	ldr	r4, [r3, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	6053      	str	r3, [r2, #4]
 800782e:	4421      	add	r1, r4
 8007830:	6011      	str	r1, [r2, #0]
 8007832:	e7da      	b.n	80077ea <_free_r+0x26>
 8007834:	d902      	bls.n	800783c <_free_r+0x78>
 8007836:	230c      	movs	r3, #12
 8007838:	6003      	str	r3, [r0, #0]
 800783a:	e7d6      	b.n	80077ea <_free_r+0x26>
 800783c:	6825      	ldr	r5, [r4, #0]
 800783e:	1961      	adds	r1, r4, r5
 8007840:	428b      	cmp	r3, r1
 8007842:	bf04      	itt	eq
 8007844:	6819      	ldreq	r1, [r3, #0]
 8007846:	685b      	ldreq	r3, [r3, #4]
 8007848:	6063      	str	r3, [r4, #4]
 800784a:	bf04      	itt	eq
 800784c:	1949      	addeq	r1, r1, r5
 800784e:	6021      	streq	r1, [r4, #0]
 8007850:	6054      	str	r4, [r2, #4]
 8007852:	e7ca      	b.n	80077ea <_free_r+0x26>
 8007854:	b003      	add	sp, #12
 8007856:	bd30      	pop	{r4, r5, pc}
 8007858:	2000438c 	.word	0x2000438c

0800785c <_init>:
 800785c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785e:	bf00      	nop
 8007860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007862:	bc08      	pop	{r3}
 8007864:	469e      	mov	lr, r3
 8007866:	4770      	bx	lr

08007868 <_fini>:
 8007868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786a:	bf00      	nop
 800786c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800786e:	bc08      	pop	{r3}
 8007870:	469e      	mov	lr, r3
 8007872:	4770      	bx	lr
