
CodeMainRobocon2023_V1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08009334  08009334  00019334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009460  08009460  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  08009460  08009460  00019460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009468  08009468  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009468  08009468  00019468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800946c  0800946c  0001946c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08009470  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c4  2**0
                  CONTENTS
 10 .bss          00004460  200000c8  200000c8  000200c8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20004528  20004528  000200c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017297  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fad  00000000  00000000  0003738b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f0  00000000  00000000  0003a338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011d8  00000000  00000000  0003b628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d86  00000000  00000000  0003c800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015361  00000000  00000000  00060586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfc35  00000000  00000000  000758e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015551c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053f0  00000000  00000000  0015556c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c8 	.word	0x200000c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800931c 	.word	0x0800931c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	0800931c 	.word	0x0800931c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b974 	b.w	8000dcc <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	4604      	mov	r4, r0
 8000b04:	468e      	mov	lr, r1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d14d      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b0a:	428a      	cmp	r2, r1
 8000b0c:	4694      	mov	ip, r2
 8000b0e:	d969      	bls.n	8000be4 <__udivmoddi4+0xe8>
 8000b10:	fab2 f282 	clz	r2, r2
 8000b14:	b152      	cbz	r2, 8000b2c <__udivmoddi4+0x30>
 8000b16:	fa01 f302 	lsl.w	r3, r1, r2
 8000b1a:	f1c2 0120 	rsb	r1, r2, #32
 8000b1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b26:	ea41 0e03 	orr.w	lr, r1, r3
 8000b2a:	4094      	lsls	r4, r2
 8000b2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b30:	0c21      	lsrs	r1, r4, #16
 8000b32:	fbbe f6f8 	udiv	r6, lr, r8
 8000b36:	fa1f f78c 	uxth.w	r7, ip
 8000b3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b42:	fb06 f107 	mul.w	r1, r6, r7
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b52:	f080 811f 	bcs.w	8000d94 <__udivmoddi4+0x298>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 811c 	bls.w	8000d94 <__udivmoddi4+0x298>
 8000b5c:	3e02      	subs	r6, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a5b      	subs	r3, r3, r1
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b68:	fb08 3310 	mls	r3, r8, r0, r3
 8000b6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b70:	fb00 f707 	mul.w	r7, r0, r7
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	d90a      	bls.n	8000b8e <__udivmoddi4+0x92>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b80:	f080 810a 	bcs.w	8000d98 <__udivmoddi4+0x29c>
 8000b84:	42a7      	cmp	r7, r4
 8000b86:	f240 8107 	bls.w	8000d98 <__udivmoddi4+0x29c>
 8000b8a:	4464      	add	r4, ip
 8000b8c:	3802      	subs	r0, #2
 8000b8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b92:	1be4      	subs	r4, r4, r7
 8000b94:	2600      	movs	r6, #0
 8000b96:	b11d      	cbz	r5, 8000ba0 <__udivmoddi4+0xa4>
 8000b98:	40d4      	lsrs	r4, r2
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000ba0:	4631      	mov	r1, r6
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d909      	bls.n	8000bbe <__udivmoddi4+0xc2>
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	f000 80ef 	beq.w	8000d8e <__udivmoddi4+0x292>
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb6:	4630      	mov	r0, r6
 8000bb8:	4631      	mov	r1, r6
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	fab3 f683 	clz	r6, r3
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	d14a      	bne.n	8000c5c <__udivmoddi4+0x160>
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d302      	bcc.n	8000bd0 <__udivmoddi4+0xd4>
 8000bca:	4282      	cmp	r2, r0
 8000bcc:	f200 80f9 	bhi.w	8000dc2 <__udivmoddi4+0x2c6>
 8000bd0:	1a84      	subs	r4, r0, r2
 8000bd2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	469e      	mov	lr, r3
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	d0e0      	beq.n	8000ba0 <__udivmoddi4+0xa4>
 8000bde:	e9c5 4e00 	strd	r4, lr, [r5]
 8000be2:	e7dd      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000be4:	b902      	cbnz	r2, 8000be8 <__udivmoddi4+0xec>
 8000be6:	deff      	udf	#255	; 0xff
 8000be8:	fab2 f282 	clz	r2, r2
 8000bec:	2a00      	cmp	r2, #0
 8000bee:	f040 8092 	bne.w	8000d16 <__udivmoddi4+0x21a>
 8000bf2:	eba1 010c 	sub.w	r1, r1, ip
 8000bf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfa:	fa1f fe8c 	uxth.w	lr, ip
 8000bfe:	2601      	movs	r6, #1
 8000c00:	0c20      	lsrs	r0, r4, #16
 8000c02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c06:	fb07 1113 	mls	r1, r7, r3, r1
 8000c0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c0e:	fb0e f003 	mul.w	r0, lr, r3
 8000c12:	4288      	cmp	r0, r1
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0x12c>
 8000c16:	eb1c 0101 	adds.w	r1, ip, r1
 8000c1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x12a>
 8000c20:	4288      	cmp	r0, r1
 8000c22:	f200 80cb 	bhi.w	8000dbc <__udivmoddi4+0x2c0>
 8000c26:	4643      	mov	r3, r8
 8000c28:	1a09      	subs	r1, r1, r0
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c30:	fb07 1110 	mls	r1, r7, r0, r1
 8000c34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c38:	fb0e fe00 	mul.w	lr, lr, r0
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x156>
 8000c40:	eb1c 0404 	adds.w	r4, ip, r4
 8000c44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c48:	d202      	bcs.n	8000c50 <__udivmoddi4+0x154>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f200 80bb 	bhi.w	8000dc6 <__udivmoddi4+0x2ca>
 8000c50:	4608      	mov	r0, r1
 8000c52:	eba4 040e 	sub.w	r4, r4, lr
 8000c56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c5a:	e79c      	b.n	8000b96 <__udivmoddi4+0x9a>
 8000c5c:	f1c6 0720 	rsb	r7, r6, #32
 8000c60:	40b3      	lsls	r3, r6
 8000c62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c72:	431c      	orrs	r4, r3
 8000c74:	40f9      	lsrs	r1, r7
 8000c76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c82:	0c20      	lsrs	r0, r4, #16
 8000c84:	fa1f fe8c 	uxth.w	lr, ip
 8000c88:	fb09 1118 	mls	r1, r9, r8, r1
 8000c8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c90:	fb08 f00e 	mul.w	r0, r8, lr
 8000c94:	4288      	cmp	r0, r1
 8000c96:	fa02 f206 	lsl.w	r2, r2, r6
 8000c9a:	d90b      	bls.n	8000cb4 <__udivmoddi4+0x1b8>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ca4:	f080 8088 	bcs.w	8000db8 <__udivmoddi4+0x2bc>
 8000ca8:	4288      	cmp	r0, r1
 8000caa:	f240 8085 	bls.w	8000db8 <__udivmoddi4+0x2bc>
 8000cae:	f1a8 0802 	sub.w	r8, r8, #2
 8000cb2:	4461      	add	r1, ip
 8000cb4:	1a09      	subs	r1, r1, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000cc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc8:	458e      	cmp	lr, r1
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x1e2>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd4:	d26c      	bcs.n	8000db0 <__udivmoddi4+0x2b4>
 8000cd6:	458e      	cmp	lr, r1
 8000cd8:	d96a      	bls.n	8000db0 <__udivmoddi4+0x2b4>
 8000cda:	3802      	subs	r0, #2
 8000cdc:	4461      	add	r1, ip
 8000cde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ce2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ce6:	eba1 010e 	sub.w	r1, r1, lr
 8000cea:	42a1      	cmp	r1, r4
 8000cec:	46c8      	mov	r8, r9
 8000cee:	46a6      	mov	lr, r4
 8000cf0:	d356      	bcc.n	8000da0 <__udivmoddi4+0x2a4>
 8000cf2:	d053      	beq.n	8000d9c <__udivmoddi4+0x2a0>
 8000cf4:	b15d      	cbz	r5, 8000d0e <__udivmoddi4+0x212>
 8000cf6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000d02:	fa22 f306 	lsr.w	r3, r2, r6
 8000d06:	40f1      	lsrs	r1, r6
 8000d08:	431f      	orrs	r7, r3
 8000d0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d0e:	2600      	movs	r6, #0
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	f1c2 0320 	rsb	r3, r2, #32
 8000d1a:	40d8      	lsrs	r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	fa21 f303 	lsr.w	r3, r1, r3
 8000d24:	4091      	lsls	r1, r2
 8000d26:	4301      	orrs	r1, r0
 8000d28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d34:	fb07 3610 	mls	r6, r7, r0, r3
 8000d38:	0c0b      	lsrs	r3, r1, #16
 8000d3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d42:	429e      	cmp	r6, r3
 8000d44:	fa04 f402 	lsl.w	r4, r4, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x260>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d52:	d22f      	bcs.n	8000db4 <__udivmoddi4+0x2b8>
 8000d54:	429e      	cmp	r6, r3
 8000d56:	d92d      	bls.n	8000db4 <__udivmoddi4+0x2b8>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	b289      	uxth	r1, r1
 8000d60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d64:	fb07 3316 	mls	r3, r7, r6, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x28a>
 8000d74:	eb1c 0101 	adds.w	r1, ip, r1
 8000d78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d7c:	d216      	bcs.n	8000dac <__udivmoddi4+0x2b0>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d914      	bls.n	8000dac <__udivmoddi4+0x2b0>
 8000d82:	3e02      	subs	r6, #2
 8000d84:	4461      	add	r1, ip
 8000d86:	1ac9      	subs	r1, r1, r3
 8000d88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d8c:	e738      	b.n	8000c00 <__udivmoddi4+0x104>
 8000d8e:	462e      	mov	r6, r5
 8000d90:	4628      	mov	r0, r5
 8000d92:	e705      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000d94:	4606      	mov	r6, r0
 8000d96:	e6e3      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d98:	4618      	mov	r0, r3
 8000d9a:	e6f8      	b.n	8000b8e <__udivmoddi4+0x92>
 8000d9c:	454b      	cmp	r3, r9
 8000d9e:	d2a9      	bcs.n	8000cf4 <__udivmoddi4+0x1f8>
 8000da0:	ebb9 0802 	subs.w	r8, r9, r2
 8000da4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000da8:	3801      	subs	r0, #1
 8000daa:	e7a3      	b.n	8000cf4 <__udivmoddi4+0x1f8>
 8000dac:	4646      	mov	r6, r8
 8000dae:	e7ea      	b.n	8000d86 <__udivmoddi4+0x28a>
 8000db0:	4620      	mov	r0, r4
 8000db2:	e794      	b.n	8000cde <__udivmoddi4+0x1e2>
 8000db4:	4640      	mov	r0, r8
 8000db6:	e7d1      	b.n	8000d5c <__udivmoddi4+0x260>
 8000db8:	46d0      	mov	r8, sl
 8000dba:	e77b      	b.n	8000cb4 <__udivmoddi4+0x1b8>
 8000dbc:	3b02      	subs	r3, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	e732      	b.n	8000c28 <__udivmoddi4+0x12c>
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	e709      	b.n	8000bda <__udivmoddi4+0xde>
 8000dc6:	4464      	add	r4, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	e742      	b.n	8000c52 <__udivmoddi4+0x156>

08000dcc <__aeabi_idiv0>:
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <vApplicationGetIdleTaskMemory+0x2c>)
 8000de0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <vApplicationGetIdleTaskMemory+0x30>)
 8000de6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2280      	movs	r2, #128	; 0x80
 8000dec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000dee:	bf00      	nop
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	200000e4 	.word	0x200000e4
 8000e00:	20000198 	.word	0x20000198
 8000e04:	00000000 	.word	0x00000000

08000e08 <Pid_cal>:
/* USER CODE BEGIN PFP */

/*G�?i trong  HAL_TIM_PeriodElapsedCallback*/
uint8_t fuzzy;
double alpha;
void Pid_cal(){
 8000e08:	b5b0      	push	{r4, r5, r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	e2 = goc_target2 - goc_hientai;
 8000e0c:	4ba0      	ldr	r3, [pc, #640]	; (8001090 <Pid_cal+0x288>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4ba0      	ldr	r3, [pc, #640]	; (8001094 <Pid_cal+0x28c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	4aa0      	ldr	r2, [pc, #640]	; (8001098 <Pid_cal+0x290>)
 8000e18:	6013      	str	r3, [r2, #0]
	if (fuzzy == 0){
 8000e1a:	4ba0      	ldr	r3, [pc, #640]	; (800109c <Pid_cal+0x294>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d13f      	bne.n	8000ea2 <Pid_cal+0x9a>
		if(goc_target2>=0){
 8000e22:	4b9b      	ldr	r3, [pc, #620]	; (8001090 <Pid_cal+0x288>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	db1d      	blt.n	8000e66 <Pid_cal+0x5e>
				if((e2<goc_target2*(1/5)))
 8000e2a:	4b9b      	ldr	r3, [pc, #620]	; (8001098 <Pid_cal+0x290>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	da0c      	bge.n	8000e4c <Pid_cal+0x44>
					{alpha = 0.08;
 8000e32:	499b      	ldr	r1, [pc, #620]	; (80010a0 <Pid_cal+0x298>)
 8000e34:	a38c      	add	r3, pc, #560	; (adr r3, 8001068 <Pid_cal+0x260>)
 8000e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3a:	e9c1 2300 	strd	r2, r3, [r1]
					kp2 = 0.08;}
 8000e3e:	4999      	ldr	r1, [pc, #612]	; (80010a4 <Pid_cal+0x29c>)
 8000e40:	a389      	add	r3, pc, #548	; (adr r3, 8001068 <Pid_cal+0x260>)
 8000e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e46:	e9c1 2300 	strd	r2, r3, [r1]
 8000e4a:	e03a      	b.n	8000ec2 <Pid_cal+0xba>
				else {
				alpha = 0.9;
 8000e4c:	4994      	ldr	r1, [pc, #592]	; (80010a0 <Pid_cal+0x298>)
 8000e4e:	a388      	add	r3, pc, #544	; (adr r3, 8001070 <Pid_cal+0x268>)
 8000e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e54:	e9c1 2300 	strd	r2, r3, [r1]
				kp2 = 0.9;}
 8000e58:	4992      	ldr	r1, [pc, #584]	; (80010a4 <Pid_cal+0x29c>)
 8000e5a:	a385      	add	r3, pc, #532	; (adr r3, 8001070 <Pid_cal+0x268>)
 8000e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e60:	e9c1 2300 	strd	r2, r3, [r1]
 8000e64:	e02d      	b.n	8000ec2 <Pid_cal+0xba>
			}else{
				if((e2>goc_target2*(1/5)))
 8000e66:	4b8c      	ldr	r3, [pc, #560]	; (8001098 <Pid_cal+0x290>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	dd0c      	ble.n	8000e88 <Pid_cal+0x80>
							{alpha = 0.08;
 8000e6e:	498c      	ldr	r1, [pc, #560]	; (80010a0 <Pid_cal+0x298>)
 8000e70:	a37d      	add	r3, pc, #500	; (adr r3, 8001068 <Pid_cal+0x260>)
 8000e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e76:	e9c1 2300 	strd	r2, r3, [r1]
						kp2 = 0.08;}
 8000e7a:	498a      	ldr	r1, [pc, #552]	; (80010a4 <Pid_cal+0x29c>)
 8000e7c:	a37a      	add	r3, pc, #488	; (adr r3, 8001068 <Pid_cal+0x260>)
 8000e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e82:	e9c1 2300 	strd	r2, r3, [r1]
 8000e86:	e01c      	b.n	8000ec2 <Pid_cal+0xba>
						else {
						alpha = 0.9;
 8000e88:	4985      	ldr	r1, [pc, #532]	; (80010a0 <Pid_cal+0x298>)
 8000e8a:	a379      	add	r3, pc, #484	; (adr r3, 8001070 <Pid_cal+0x268>)
 8000e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e90:	e9c1 2300 	strd	r2, r3, [r1]
						kp2 = 0.9;}
 8000e94:	4983      	ldr	r1, [pc, #524]	; (80010a4 <Pid_cal+0x29c>)
 8000e96:	a376      	add	r3, pc, #472	; (adr r3, 8001070 <Pid_cal+0x268>)
 8000e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9c:	e9c1 2300 	strd	r2, r3, [r1]
 8000ea0:	e00f      	b.n	8000ec2 <Pid_cal+0xba>
			}
	}else if (fuzzy == 1){
 8000ea2:	4b7e      	ldr	r3, [pc, #504]	; (800109c <Pid_cal+0x294>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d10b      	bne.n	8000ec2 <Pid_cal+0xba>
		alpha = 0.08;
 8000eaa:	497d      	ldr	r1, [pc, #500]	; (80010a0 <Pid_cal+0x298>)
 8000eac:	a36e      	add	r3, pc, #440	; (adr r3, 8001068 <Pid_cal+0x260>)
 8000eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb2:	e9c1 2300 	strd	r2, r3, [r1]
		kp2 = 0.05;
 8000eb6:	497b      	ldr	r1, [pc, #492]	; (80010a4 <Pid_cal+0x29c>)
 8000eb8:	a36f      	add	r3, pc, #444	; (adr r3, 8001078 <Pid_cal+0x270>)
 8000eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ebe:	e9c1 2300 	strd	r2, r3, [r1]
	}


	    up2 = kp2*e2;
 8000ec2:	4b75      	ldr	r3, [pc, #468]	; (8001098 <Pid_cal+0x290>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fad4 	bl	8000474 <__aeabi_i2d>
 8000ecc:	4b75      	ldr	r3, [pc, #468]	; (80010a4 <Pid_cal+0x29c>)
 8000ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed2:	f7ff fb39 	bl	8000548 <__aeabi_dmul>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4973      	ldr	r1, [pc, #460]	; (80010a8 <Pid_cal+0x2a0>)
 8000edc:	e9c1 2300 	strd	r2, r3, [r1]
		ud2 = kd2*(e2 - pre_e2)/0.001;
 8000ee0:	4b6d      	ldr	r3, [pc, #436]	; (8001098 <Pid_cal+0x290>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fac5 	bl	8000474 <__aeabi_i2d>
 8000eea:	4b70      	ldr	r3, [pc, #448]	; (80010ac <Pid_cal+0x2a4>)
 8000eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef0:	f7ff f972 	bl	80001d8 <__aeabi_dsub>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4610      	mov	r0, r2
 8000efa:	4619      	mov	r1, r3
 8000efc:	4b6c      	ldr	r3, [pc, #432]	; (80010b0 <Pid_cal+0x2a8>)
 8000efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f02:	f7ff fb21 	bl	8000548 <__aeabi_dmul>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	a35c      	add	r3, pc, #368	; (adr r3, 8001080 <Pid_cal+0x278>)
 8000f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f14:	f7ff fc42 	bl	800079c <__aeabi_ddiv>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4965      	ldr	r1, [pc, #404]	; (80010b4 <Pid_cal+0x2ac>)
 8000f1e:	e9c1 2300 	strd	r2, r3, [r1]
//		ui2 = ui_p2 + ki2*e2*0.001;
		udf2 = (1-alpha)*uf2_p+alpha*ud2;
 8000f22:	4b5f      	ldr	r3, [pc, #380]	; (80010a0 <Pid_cal+0x298>)
 8000f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f28:	f04f 0000 	mov.w	r0, #0
 8000f2c:	4962      	ldr	r1, [pc, #392]	; (80010b8 <Pid_cal+0x2b0>)
 8000f2e:	f7ff f953 	bl	80001d8 <__aeabi_dsub>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4610      	mov	r0, r2
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4b60      	ldr	r3, [pc, #384]	; (80010bc <Pid_cal+0x2b4>)
 8000f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f40:	f7ff fb02 	bl	8000548 <__aeabi_dmul>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4614      	mov	r4, r2
 8000f4a:	461d      	mov	r5, r3
 8000f4c:	4b54      	ldr	r3, [pc, #336]	; (80010a0 <Pid_cal+0x298>)
 8000f4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f52:	4b58      	ldr	r3, [pc, #352]	; (80010b4 <Pid_cal+0x2ac>)
 8000f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f58:	f7ff faf6 	bl	8000548 <__aeabi_dmul>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4620      	mov	r0, r4
 8000f62:	4629      	mov	r1, r5
 8000f64:	f7ff f93a 	bl	80001dc <__adddf3>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4954      	ldr	r1, [pc, #336]	; (80010c0 <Pid_cal+0x2b8>)
 8000f6e:	e9c1 2300 	strd	r2, r3, [r1]

//		if(ui2>8)ui2=8;
//		else if(ui2<-8)ui2=-8;


		pre_e2 = e2;
 8000f72:	4b49      	ldr	r3, [pc, #292]	; (8001098 <Pid_cal+0x290>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fa7c 	bl	8000474 <__aeabi_i2d>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	494a      	ldr	r1, [pc, #296]	; (80010ac <Pid_cal+0x2a4>)
 8000f82:	e9c1 2300 	strd	r2, r3, [r1]
		uf2_p = udf2;
 8000f86:	4b4e      	ldr	r3, [pc, #312]	; (80010c0 <Pid_cal+0x2b8>)
 8000f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8c:	494b      	ldr	r1, [pc, #300]	; (80010bc <Pid_cal+0x2b4>)
 8000f8e:	e9c1 2300 	strd	r2, r3, [r1]
//		ui_p2 = ui2;

		if (u2>0)dir2=1;
 8000f92:	4b4c      	ldr	r3, [pc, #304]	; (80010c4 <Pid_cal+0x2bc>)
 8000f94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f98:	f04f 0200 	mov.w	r2, #0
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	f7ff fd62 	bl	8000a68 <__aeabi_dcmpgt>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <Pid_cal+0x1aa>
 8000faa:	4b47      	ldr	r3, [pc, #284]	; (80010c8 <Pid_cal+0x2c0>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	e00f      	b.n	8000fd2 <Pid_cal+0x1ca>
		else if (u2<0)dir2 = -1;
 8000fb2:	4b44      	ldr	r3, [pc, #272]	; (80010c4 <Pid_cal+0x2bc>)
 8000fb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	f04f 0300 	mov.w	r3, #0
 8000fc0:	f7ff fd34 	bl	8000a2c <__aeabi_dcmplt>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <Pid_cal+0x1ca>
 8000fca:	4b3f      	ldr	r3, [pc, #252]	; (80010c8 <Pid_cal+0x2c0>)
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd0:	601a      	str	r2, [r3, #0]
		u2 = up2 + udf2;
 8000fd2:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <Pid_cal+0x2a0>)
 8000fd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fd8:	4b39      	ldr	r3, [pc, #228]	; (80010c0 <Pid_cal+0x2b8>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	f7ff f8fd 	bl	80001dc <__adddf3>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4937      	ldr	r1, [pc, #220]	; (80010c4 <Pid_cal+0x2bc>)
 8000fe8:	e9c1 2300 	strd	r2, r3, [r1]
		if (u2> 300)u2 =300;//180
 8000fec:	4b35      	ldr	r3, [pc, #212]	; (80010c4 <Pid_cal+0x2bc>)
 8000fee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ff2:	a325      	add	r3, pc, #148	; (adr r3, 8001088 <Pid_cal+0x280>)
 8000ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff8:	f7ff fd36 	bl	8000a68 <__aeabi_dcmpgt>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d006      	beq.n	8001010 <Pid_cal+0x208>
 8001002:	4930      	ldr	r1, [pc, #192]	; (80010c4 <Pid_cal+0x2bc>)
 8001004:	a320      	add	r3, pc, #128	; (adr r3, 8001088 <Pid_cal+0x280>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	e9c1 2300 	strd	r2, r3, [r1]
 800100e:	e010      	b.n	8001032 <Pid_cal+0x22a>
		else if (u2<-300)u2=-300;//-180
 8001010:	4b2c      	ldr	r3, [pc, #176]	; (80010c4 <Pid_cal+0x2bc>)
 8001012:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <Pid_cal+0x2c4>)
 800101c:	f7ff fd06 	bl	8000a2c <__aeabi_dcmplt>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d005      	beq.n	8001032 <Pid_cal+0x22a>
 8001026:	4927      	ldr	r1, [pc, #156]	; (80010c4 <Pid_cal+0x2bc>)
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	4b27      	ldr	r3, [pc, #156]	; (80010cc <Pid_cal+0x2c4>)
 800102e:	e9c1 2300 	strd	r2, r3, [r1]
		pwm = abs(u2);
 8001032:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <Pid_cal+0x2bc>)
 8001034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f7ff fd1e 	bl	8000a7c <__aeabi_d2iz>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	bfb8      	it	lt
 8001046:	425b      	neglt	r3, r3
 8001048:	b29a      	uxth	r2, r3
 800104a:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <Pid_cal+0x2c8>)
 800104c:	801a      	strh	r2, [r3, #0]
		if((pwm < 28)&&(e2!=0)){//85
 800104e:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <Pid_cal+0x2c8>)
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	2b1b      	cmp	r3, #27
 8001054:	d806      	bhi.n	8001064 <Pid_cal+0x25c>
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <Pid_cal+0x290>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d002      	beq.n	8001064 <Pid_cal+0x25c>
			pwm = 28;
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <Pid_cal+0x2c8>)
 8001060:	221c      	movs	r2, #28
 8001062:	801a      	strh	r2, [r3, #0]
		}
}
 8001064:	bf00      	nop
 8001066:	bdb0      	pop	{r4, r5, r7, pc}
 8001068:	47ae147b 	.word	0x47ae147b
 800106c:	3fb47ae1 	.word	0x3fb47ae1
 8001070:	cccccccd 	.word	0xcccccccd
 8001074:	3feccccc 	.word	0x3feccccc
 8001078:	9999999a 	.word	0x9999999a
 800107c:	3fa99999 	.word	0x3fa99999
 8001080:	d2f1a9fc 	.word	0xd2f1a9fc
 8001084:	3f50624d 	.word	0x3f50624d
 8001088:	00000000 	.word	0x00000000
 800108c:	4072c000 	.word	0x4072c000
 8001090:	2000064c 	.word	0x2000064c
 8001094:	2000063c 	.word	0x2000063c
 8001098:	20000654 	.word	0x20000654
 800109c:	2000068e 	.word	0x2000068e
 80010a0:	20000690 	.word	0x20000690
 80010a4:	20000000 	.word	0x20000000
 80010a8:	20000660 	.word	0x20000660
 80010ac:	20000658 	.word	0x20000658
 80010b0:	20000008 	.word	0x20000008
 80010b4:	20000668 	.word	0x20000668
 80010b8:	3ff00000 	.word	0x3ff00000
 80010bc:	20000678 	.word	0x20000678
 80010c0:	20000670 	.word	0x20000670
 80010c4:	20000680 	.word	0x20000680
 80010c8:	20000648 	.word	0x20000648
 80010cc:	c072c000 	.word	0xc072c000
 80010d0:	2000068c 	.word	0x2000068c

080010d4 <GetDataCompass>:


char ds[12];
uint8_t uart1_ds, ds_ind, ds_cnt, ds_flg;

void GetDataCompass(){
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
	GocRobot = ds[1] - 48;
 80010da:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <GetDataCompass+0x7c>)
 80010dc:	785b      	ldrb	r3, [r3, #1]
 80010de:	3b30      	subs	r3, #48	; 0x30
 80010e0:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <GetDataCompass+0x80>)
 80010e2:	6013      	str	r3, [r2, #0]
	int x = 2;
 80010e4:	2302      	movs	r3, #2
 80010e6:	607b      	str	r3, [r7, #4]
	while((ds[x] >= 48) && (ds[x] <= 57)){
 80010e8:	e016      	b.n	8001118 <GetDataCompass+0x44>
		GocRobot = GocRobot * 10;
 80010ea:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <GetDataCompass+0x80>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <GetDataCompass+0x80>)
 80010fa:	601a      	str	r2, [r3, #0]
		GocRobot += ds[x] -48;
 80010fc:	4a14      	ldr	r2, [pc, #80]	; (8001150 <GetDataCompass+0x7c>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <GetDataCompass+0x80>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4413      	add	r3, r2
 800110e:	4a11      	ldr	r2, [pc, #68]	; (8001154 <GetDataCompass+0x80>)
 8001110:	6013      	str	r3, [r2, #0]
		++x;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3301      	adds	r3, #1
 8001116:	607b      	str	r3, [r7, #4]
	while((ds[x] >= 48) && (ds[x] <= 57)){
 8001118:	4a0d      	ldr	r2, [pc, #52]	; (8001150 <GetDataCompass+0x7c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b2f      	cmp	r3, #47	; 0x2f
 8001122:	d905      	bls.n	8001130 <GetDataCompass+0x5c>
 8001124:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <GetDataCompass+0x7c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b39      	cmp	r3, #57	; 0x39
 800112e:	d9dc      	bls.n	80010ea <GetDataCompass+0x16>
	}

	if(ds[0] == '-'){
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <GetDataCompass+0x7c>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b2d      	cmp	r3, #45	; 0x2d
 8001136:	d104      	bne.n	8001142 <GetDataCompass+0x6e>
		GocRobot = -GocRobot;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <GetDataCompass+0x80>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	425b      	negs	r3, r3
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <GetDataCompass+0x80>)
 8001140:	6013      	str	r3, [r2, #0]
	}
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	200006c0 	.word	0x200006c0
 8001154:	200006b8 	.word	0x200006b8

08001158 <HAL_UART_RxCpltCallback>:

//char UARTRX1_Buffer[17];
//char DataMain[17];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
//	if(huart->Instance == USART1){
//
//	}

	if(huart->Instance == USART2){
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a34      	ldr	r2, [pc, #208]	; (8001238 <HAL_UART_RxCpltCallback+0xe0>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d120      	bne.n	80011ac <HAL_UART_RxCpltCallback+0x54>
//		HAL_UART_Receive_IT(&huart2, (uint8_t*)UARTRX2_Buffer, 10);

		if(uart1_ds != '\n')
 800116a:	4b34      	ldr	r3, [pc, #208]	; (800123c <HAL_UART_RxCpltCallback+0xe4>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b0a      	cmp	r3, #10
 8001170:	d00b      	beq.n	800118a <HAL_UART_RxCpltCallback+0x32>
				ds[ds_ind++] = uart1_ds;
 8001172:	4b33      	ldr	r3, [pc, #204]	; (8001240 <HAL_UART_RxCpltCallback+0xe8>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	1c5a      	adds	r2, r3, #1
 8001178:	b2d1      	uxtb	r1, r2
 800117a:	4a31      	ldr	r2, [pc, #196]	; (8001240 <HAL_UART_RxCpltCallback+0xe8>)
 800117c:	7011      	strb	r1, [r2, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	4b2e      	ldr	r3, [pc, #184]	; (800123c <HAL_UART_RxCpltCallback+0xe4>)
 8001182:	7819      	ldrb	r1, [r3, #0]
 8001184:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <HAL_UART_RxCpltCallback+0xec>)
 8001186:	5499      	strb	r1, [r3, r2]
 8001188:	e00b      	b.n	80011a2 <HAL_UART_RxCpltCallback+0x4a>
		else{
				GetDataCompass();
 800118a:	f7ff ffa3 	bl	80010d4 <GetDataCompass>
				ds_cnt = ds_ind;
 800118e:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <HAL_UART_RxCpltCallback+0xe8>)
 8001190:	781a      	ldrb	r2, [r3, #0]
 8001192:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <HAL_UART_RxCpltCallback+0xf0>)
 8001194:	701a      	strb	r2, [r3, #0]
				ds_flg = 1;
 8001196:	4b2d      	ldr	r3, [pc, #180]	; (800124c <HAL_UART_RxCpltCallback+0xf4>)
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
				ds_ind = 0;
 800119c:	4b28      	ldr	r3, [pc, #160]	; (8001240 <HAL_UART_RxCpltCallback+0xe8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, &uart1_ds, 1);
 80011a2:	2201      	movs	r2, #1
 80011a4:	4925      	ldr	r1, [pc, #148]	; (800123c <HAL_UART_RxCpltCallback+0xe4>)
 80011a6:	482a      	ldr	r0, [pc, #168]	; (8001250 <HAL_UART_RxCpltCallback+0xf8>)
 80011a8:	f005 fdb3 	bl	8006d12 <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART3){
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a28      	ldr	r2, [pc, #160]	; (8001254 <HAL_UART_RxCpltCallback+0xfc>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d13c      	bne.n	8001230 <HAL_UART_RxCpltCallback+0xd8>
		HAL_UART_Receive_IT(&huart3, (uint8_t*)UARTRX3_Buffer, 9);
 80011b6:	2209      	movs	r2, #9
 80011b8:	4927      	ldr	r1, [pc, #156]	; (8001258 <HAL_UART_RxCpltCallback+0x100>)
 80011ba:	4828      	ldr	r0, [pc, #160]	; (800125c <HAL_UART_RxCpltCallback+0x104>)
 80011bc:	f005 fda9 	bl	8006d12 <HAL_UART_Receive_IT>
		int ViTriData = -1;
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
 80011c4:	617b      	str	r3, [r7, #20]
		for(int i = 0; i <= 8; ++i){
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	e010      	b.n	80011ee <HAL_UART_RxCpltCallback+0x96>
			if((UARTRX3_Buffer[i] == (RFAddress << 1 | 0)) || (UARTRX3_Buffer[i] == (RFAddress << 1 | 1))){
 80011cc:	4a22      	ldr	r2, [pc, #136]	; (8001258 <HAL_UART_RxCpltCallback+0x100>)
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4413      	add	r3, r2
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b94      	cmp	r3, #148	; 0x94
 80011d6:	d005      	beq.n	80011e4 <HAL_UART_RxCpltCallback+0x8c>
 80011d8:	4a1f      	ldr	r2, [pc, #124]	; (8001258 <HAL_UART_RxCpltCallback+0x100>)
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4413      	add	r3, r2
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b95      	cmp	r3, #149	; 0x95
 80011e2:	d101      	bne.n	80011e8 <HAL_UART_RxCpltCallback+0x90>
				ViTriData = i;
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	617b      	str	r3, [r7, #20]
		for(int i = 0; i <= 8; ++i){
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	3301      	adds	r3, #1
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	ddeb      	ble.n	80011cc <HAL_UART_RxCpltCallback+0x74>
			}
		}
		if(ViTriData != -1){
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011fa:	d019      	beq.n	8001230 <HAL_UART_RxCpltCallback+0xd8>
			int cnt = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
			while(cnt < 9){
 8001200:	e013      	b.n	800122a <HAL_UART_RxCpltCallback+0xd2>
				DataTayGame[cnt] = UARTRX3_Buffer[ViTriData];
 8001202:	4a15      	ldr	r2, [pc, #84]	; (8001258 <HAL_UART_RxCpltCallback+0x100>)
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	4413      	add	r3, r2
 8001208:	7819      	ldrb	r1, [r3, #0]
 800120a:	4a15      	ldr	r2, [pc, #84]	; (8001260 <HAL_UART_RxCpltCallback+0x108>)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	460a      	mov	r2, r1
 8001212:	701a      	strb	r2, [r3, #0]
				++ViTriData;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	3301      	adds	r3, #1
 8001218:	617b      	str	r3, [r7, #20]
				if(ViTriData == 9){
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2b09      	cmp	r3, #9
 800121e:	d101      	bne.n	8001224 <HAL_UART_RxCpltCallback+0xcc>
					ViTriData = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
				}
				++cnt;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	3301      	adds	r3, #1
 8001228:	60fb      	str	r3, [r7, #12]
			while(cnt < 9){
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2b08      	cmp	r3, #8
 800122e:	dde8      	ble.n	8001202 <HAL_UART_RxCpltCallback+0xaa>
			}
		}
	}
}
 8001230:	bf00      	nop
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40004400 	.word	0x40004400
 800123c:	200006cc 	.word	0x200006cc
 8001240:	200006cd 	.word	0x200006cd
 8001244:	200006c0 	.word	0x200006c0
 8001248:	200006ce 	.word	0x200006ce
 800124c:	200006cf 	.word	0x200006cf
 8001250:	200005a0 	.word	0x200005a0
 8001254:	40004800 	.word	0x40004800
 8001258:	200006a0 	.word	0x200006a0
 800125c:	200005e4 	.word	0x200005e4
 8001260:	200006ac 	.word	0x200006ac

08001264 <ControlDriver>:


uint8_t UART1TxData[17];
/*Hàm truy�?n data xuống cho các board driver*/
int ControlDriver(uint8_t Mode1, int Dir1, uint16_t Speed1, uint16_t Rotate1, uint8_t Mode2, int Dir2, uint16_t Speed2, uint16_t Rotate2, uint8_t Mode3, int Dir3, uint16_t Speed3, uint16_t Rotate3){
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	4611      	mov	r1, r2
 800126e:	461a      	mov	r2, r3
 8001270:	4603      	mov	r3, r0
 8001272:	73fb      	strb	r3, [r7, #15]
 8001274:	460b      	mov	r3, r1
 8001276:	81bb      	strh	r3, [r7, #12]
 8001278:	4613      	mov	r3, r2
 800127a:	80fb      	strh	r3, [r7, #6]
	UART1TxData[0] = 149;
 800127c:	4b57      	ldr	r3, [pc, #348]	; (80013dc <ControlDriver+0x178>)
 800127e:	2295      	movs	r2, #149	; 0x95
 8001280:	701a      	strb	r2, [r3, #0]

	if(Dir1 == -1){
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001288:	d108      	bne.n	800129c <ControlDriver+0x38>
		UART1TxData[1] = (Mode1 & 3) << 1;
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	b2db      	uxtb	r3, r3
 8001290:	f003 0306 	and.w	r3, r3, #6
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4b51      	ldr	r3, [pc, #324]	; (80013dc <ControlDriver+0x178>)
 8001298:	705a      	strb	r2, [r3, #1]
 800129a:	e00e      	b.n	80012ba <ControlDriver+0x56>
	}
	else if(Dir1 == 1){
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d10b      	bne.n	80012ba <ControlDriver+0x56>
		UART1TxData[1] = (Mode1 & 3) << 1 | 1;
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	b25b      	sxtb	r3, r3
 80012a8:	f003 0306 	and.w	r3, r3, #6
 80012ac:	b25b      	sxtb	r3, r3
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	b25b      	sxtb	r3, r3
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4b49      	ldr	r3, [pc, #292]	; (80013dc <ControlDriver+0x178>)
 80012b8:	705a      	strb	r2, [r3, #1]
	}

	UART1TxData[2] = Speed1 >> 8;
 80012ba:	89bb      	ldrh	r3, [r7, #12]
 80012bc:	0a1b      	lsrs	r3, r3, #8
 80012be:	b29b      	uxth	r3, r3
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4b46      	ldr	r3, [pc, #280]	; (80013dc <ControlDriver+0x178>)
 80012c4:	709a      	strb	r2, [r3, #2]
	UART1TxData[3] = Speed1;
 80012c6:	89bb      	ldrh	r3, [r7, #12]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4b44      	ldr	r3, [pc, #272]	; (80013dc <ControlDriver+0x178>)
 80012cc:	70da      	strb	r2, [r3, #3]

	UART1TxData[4] = Rotate1 >> 8;
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4b41      	ldr	r3, [pc, #260]	; (80013dc <ControlDriver+0x178>)
 80012d8:	711a      	strb	r2, [r3, #4]
	UART1TxData[5] = Rotate1;
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4b3f      	ldr	r3, [pc, #252]	; (80013dc <ControlDriver+0x178>)
 80012e0:	715a      	strb	r2, [r3, #5]

	if(Dir2 == -1){
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e8:	d108      	bne.n	80012fc <ControlDriver+0x98>
		UART1TxData[6] = (Mode2 & 3) << 1;
 80012ea:	7e3b      	ldrb	r3, [r7, #24]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	f003 0306 	and.w	r3, r3, #6
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b39      	ldr	r3, [pc, #228]	; (80013dc <ControlDriver+0x178>)
 80012f8:	719a      	strb	r2, [r3, #6]
 80012fa:	e00e      	b.n	800131a <ControlDriver+0xb6>
	}
	else if(Dir2 == 1){
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d10b      	bne.n	800131a <ControlDriver+0xb6>
		UART1TxData[6] = (Mode2 & 3) << 1 | 1;
 8001302:	7e3b      	ldrb	r3, [r7, #24]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	b25b      	sxtb	r3, r3
 8001308:	f003 0306 	and.w	r3, r3, #6
 800130c:	b25b      	sxtb	r3, r3
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	b25b      	sxtb	r3, r3
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4b31      	ldr	r3, [pc, #196]	; (80013dc <ControlDriver+0x178>)
 8001318:	719a      	strb	r2, [r3, #6]
	}

	UART1TxData[7] = Speed2 >> 8;
 800131a:	8c3b      	ldrh	r3, [r7, #32]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	b29b      	uxth	r3, r3
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <ControlDriver+0x178>)
 8001324:	71da      	strb	r2, [r3, #7]
	UART1TxData[8] = Speed2;
 8001326:	8c3b      	ldrh	r3, [r7, #32]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <ControlDriver+0x178>)
 800132c:	721a      	strb	r2, [r3, #8]

	UART1TxData[9] = Rotate2 >> 8;
 800132e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	b29b      	uxth	r3, r3
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b29      	ldr	r3, [pc, #164]	; (80013dc <ControlDriver+0x178>)
 8001338:	725a      	strb	r2, [r3, #9]
	UART1TxData[10] = Rotate2;
 800133a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4b27      	ldr	r3, [pc, #156]	; (80013dc <ControlDriver+0x178>)
 8001340:	729a      	strb	r2, [r3, #10]

	if(Dir3 == -1){
 8001342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001348:	d109      	bne.n	800135e <ControlDriver+0xfa>
		UART1TxData[11] = (Mode3 & 3) << 1;
 800134a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	b2db      	uxtb	r3, r3
 8001352:	f003 0306 	and.w	r3, r3, #6
 8001356:	b2da      	uxtb	r2, r3
 8001358:	4b20      	ldr	r3, [pc, #128]	; (80013dc <ControlDriver+0x178>)
 800135a:	72da      	strb	r2, [r3, #11]
 800135c:	e00f      	b.n	800137e <ControlDriver+0x11a>
	}
	else if(Dir3 == 1){
 800135e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001360:	2b01      	cmp	r3, #1
 8001362:	d10c      	bne.n	800137e <ControlDriver+0x11a>
		UART1TxData[11] = (Mode3 & 3) << 1 | 1;
 8001364:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	b25b      	sxtb	r3, r3
 800136c:	f003 0306 	and.w	r3, r3, #6
 8001370:	b25b      	sxtb	r3, r3
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	b25b      	sxtb	r3, r3
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <ControlDriver+0x178>)
 800137c:	72da      	strb	r2, [r3, #11]
	}

	UART1TxData[12] = Speed3 >> 8;
 800137e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	b29b      	uxth	r3, r3
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <ControlDriver+0x178>)
 8001388:	731a      	strb	r2, [r3, #12]
	UART1TxData[13] = Speed3;
 800138a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <ControlDriver+0x178>)
 8001390:	735a      	strb	r2, [r3, #13]

	UART1TxData[14] = Rotate3 >> 8;
 8001392:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	b29b      	uxth	r3, r3
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <ControlDriver+0x178>)
 800139c:	739a      	strb	r2, [r3, #14]
	UART1TxData[15] = Rotate3;
 800139e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <ControlDriver+0x178>)
 80013a4:	73da      	strb	r2, [r3, #15]

	UART1TxData[16] = 10;
 80013a6:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <ControlDriver+0x178>)
 80013a8:	220a      	movs	r2, #10
 80013aa:	741a      	strb	r2, [r3, #16]

	if(HAL_UART_Transmit(&huart1, (uint8_t *) UART1TxData, 17, 1000) != HAL_OK){
 80013ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b0:	2211      	movs	r2, #17
 80013b2:	490a      	ldr	r1, [pc, #40]	; (80013dc <ControlDriver+0x178>)
 80013b4:	480a      	ldr	r0, [pc, #40]	; (80013e0 <ControlDriver+0x17c>)
 80013b6:	f005 fc1a 	bl	8006bee <HAL_UART_Transmit>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d004      	beq.n	80013ca <ControlDriver+0x166>
		osDelay(1);
 80013c0:	2001      	movs	r0, #1
 80013c2:	f006 fcaa 	bl	8007d1a <osDelay>
		return 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	e003      	b.n	80013d2 <ControlDriver+0x16e>
	}
	osDelay(1);
 80013ca:	2001      	movs	r0, #1
 80013cc:	f006 fca5 	bl	8007d1a <osDelay>
	return 1;
 80013d0:	2301      	movs	r3, #1
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200006d0 	.word	0x200006d0
 80013e0:	2000055c 	.word	0x2000055c

080013e4 <ControlGun>:
//#define YeuCauBanCotS1 24
//
//int ChoPhepBan, ModeBan;

uint8_t DataGun[3];
int ControlGun(uint8_t Mode){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
	DataGun[0] = 149;
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <ControlGun+0x4c>)
 80013f0:	2295      	movs	r2, #149	; 0x95
 80013f2:	701a      	strb	r2, [r3, #0]
	DataGun[1] = Mode;
 80013f4:	4a0e      	ldr	r2, [pc, #56]	; (8001430 <ControlGun+0x4c>)
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	7053      	strb	r3, [r2, #1]
	DataGun[2] = 10;
 80013fa:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <ControlGun+0x4c>)
 80013fc:	220a      	movs	r2, #10
 80013fe:	709a      	strb	r2, [r3, #2]

	if(HAL_UART_Transmit(&huart4, (uint8_t *) DataGun, 3, 1000) != HAL_OK){
 8001400:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001404:	2203      	movs	r2, #3
 8001406:	490a      	ldr	r1, [pc, #40]	; (8001430 <ControlGun+0x4c>)
 8001408:	480a      	ldr	r0, [pc, #40]	; (8001434 <ControlGun+0x50>)
 800140a:	f005 fbf0 	bl	8006bee <HAL_UART_Transmit>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d004      	beq.n	800141e <ControlGun+0x3a>
		osDelay(1);
 8001414:	2001      	movs	r0, #1
 8001416:	f006 fc80 	bl	8007d1a <osDelay>
		return 0;
 800141a:	2300      	movs	r3, #0
 800141c:	e003      	b.n	8001426 <ControlGun+0x42>
	}
	osDelay(1);
 800141e:	2001      	movs	r0, #1
 8001420:	f006 fc7b 	bl	8007d1a <osDelay>
	return 1;
 8001424:	2301      	movs	r3, #1
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200006f8 	.word	0x200006f8
 8001434:	20000518 	.word	0x20000518

08001438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001438:	b5b0      	push	{r4, r5, r7, lr}
 800143a:	b09c      	sub	sp, #112	; 0x70
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800143e:	f002 fb27 	bl	8003a90 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(5000);
 8001442:	f241 3088 	movw	r0, #5000	; 0x1388
 8001446:	f002 fb65 	bl	8003b14 <HAL_Delay>
  GocRobot = -999;
 800144a:	4b41      	ldr	r3, [pc, #260]	; (8001550 <main+0x118>)
 800144c:	4a41      	ldr	r2, [pc, #260]	; (8001554 <main+0x11c>)
 800144e:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001450:	f000 f8a0 	bl	8001594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001454:	f000 fb76 	bl	8001b44 <MX_GPIO_Init>
  MX_DMA_Init();
 8001458:	f000 fb54 	bl	8001b04 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800145c:	f000 fad2 	bl	8001a04 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001460:	f000 fafc 	bl	8001a5c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001464:	f000 fb24 	bl	8001ab0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001468:	f000 f950 	bl	800170c <MX_TIM2_Init>
  MX_ADC1_Init();
 800146c:	f000 f8fc 	bl	8001668 <MX_ADC1_Init>
  MX_UART4_Init();
 8001470:	f000 fa9c 	bl	80019ac <MX_UART4_Init>
  MX_TIM3_Init();
 8001474:	f000 f996 	bl	80017a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001478:	f000 fa16 	bl	80018a8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800147c:	4836      	ldr	r0, [pc, #216]	; (8001558 <main+0x120>)
 800147e:	f004 fb7d 	bl	8005b7c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001482:	2104      	movs	r1, #4
 8001484:	4835      	ldr	r0, [pc, #212]	; (800155c <main+0x124>)
 8001486:	f004 fc43 	bl	8005d10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 800148a:	2108      	movs	r1, #8
 800148c:	4833      	ldr	r0, [pc, #204]	; (800155c <main+0x124>)
 800148e:	f004 fc3f 	bl	8005d10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8001492:	2104      	movs	r1, #4
 8001494:	4832      	ldr	r0, [pc, #200]	; (8001560 <main+0x128>)
 8001496:	f004 fc3b 	bl	8005d10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 800149a:	2108      	movs	r1, #8
 800149c:	4830      	ldr	r0, [pc, #192]	; (8001560 <main+0x128>)
 800149e:	f004 fc37 	bl	8005d10 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, &uart1_ds, 1);
 80014a2:	2201      	movs	r2, #1
 80014a4:	492f      	ldr	r1, [pc, #188]	; (8001564 <main+0x12c>)
 80014a6:	4830      	ldr	r0, [pc, #192]	; (8001568 <main+0x130>)
 80014a8:	f005 fc33 	bl	8006d12 <HAL_UART_Receive_IT>
  //Uart3 Connect to HC-12
  HAL_UART_Receive_IT(&huart3, (uint8_t*)UARTRX3_Buffer, 9);
 80014ac:	2209      	movs	r2, #9
 80014ae:	492f      	ldr	r1, [pc, #188]	; (800156c <main+0x134>)
 80014b0:	482f      	ldr	r0, [pc, #188]	; (8001570 <main+0x138>)
 80014b2:	f005 fc2e 	bl	8006d12 <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80014b6:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <main+0x13c>)
 80014b8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80014bc:	461d      	mov	r5, r3
 80014be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80014ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f006 fbd6 	bl	8007c82 <osThreadCreate>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4a27      	ldr	r2, [pc, #156]	; (8001578 <main+0x140>)
 80014da:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, TaskBlinkLed, osPriorityIdle, 0, 128);
 80014dc:	4b27      	ldr	r3, [pc, #156]	; (800157c <main+0x144>)
 80014de:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80014e2:	461d      	mov	r5, r3
 80014e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80014f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f006 fbc3 	bl	8007c82 <osThreadCreate>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4a20      	ldr	r2, [pc, #128]	; (8001580 <main+0x148>)
 8001500:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, TaskUART, osPriorityNormal, 0, 128);
 8001502:	4b20      	ldr	r3, [pc, #128]	; (8001584 <main+0x14c>)
 8001504:	f107 041c 	add.w	r4, r7, #28
 8001508:	461d      	mov	r5, r3
 800150a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800150c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800150e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001512:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f006 fbb0 	bl	8007c82 <osThreadCreate>
 8001522:	4603      	mov	r3, r0
 8001524:	4a18      	ldr	r2, [pc, #96]	; (8001588 <main+0x150>)
 8001526:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_setting */
  osThreadDef(Task_setting, TaskXoayLaBan, osPriorityAboveNormal, 0, 128);
 8001528:	4b18      	ldr	r3, [pc, #96]	; (800158c <main+0x154>)
 800152a:	463c      	mov	r4, r7
 800152c:	461d      	mov	r5, r3
 800152e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001532:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001536:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_settingHandle = osThreadCreate(osThread(Task_setting), NULL);
 800153a:	463b      	mov	r3, r7
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f006 fb9f 	bl	8007c82 <osThreadCreate>
 8001544:	4603      	mov	r3, r0
 8001546:	4a12      	ldr	r2, [pc, #72]	; (8001590 <main+0x158>)
 8001548:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800154a:	f006 fb93 	bl	8007c74 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  ControlDriver(0, 0, 0, 0, 0);

  while (1)
 800154e:	e7fe      	b.n	800154e <main+0x116>
 8001550:	200006b8 	.word	0x200006b8
 8001554:	fffffc19 	.word	0xfffffc19
 8001558:	20000440 	.word	0x20000440
 800155c:	20000488 	.word	0x20000488
 8001560:	200004d0 	.word	0x200004d0
 8001564:	200006cc 	.word	0x200006cc
 8001568:	200005a0 	.word	0x200005a0
 800156c:	200006a0 	.word	0x200006a0
 8001570:	200005e4 	.word	0x200005e4
 8001574:	08009368 	.word	0x08009368
 8001578:	20000628 	.word	0x20000628
 800157c:	08009384 	.word	0x08009384
 8001580:	2000062c 	.word	0x2000062c
 8001584:	080093a0 	.word	0x080093a0
 8001588:	20000630 	.word	0x20000630
 800158c:	080093bc 	.word	0x080093bc
 8001590:	20000634 	.word	0x20000634

08001594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b094      	sub	sp, #80	; 0x50
 8001598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159a:	f107 0320 	add.w	r3, r7, #32
 800159e:	2230      	movs	r2, #48	; 0x30
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f007 fdf0 	bl	8009188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	4b28      	ldr	r3, [pc, #160]	; (8001660 <SystemClock_Config+0xcc>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	4a27      	ldr	r2, [pc, #156]	; (8001660 <SystemClock_Config+0xcc>)
 80015c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c6:	6413      	str	r3, [r2, #64]	; 0x40
 80015c8:	4b25      	ldr	r3, [pc, #148]	; (8001660 <SystemClock_Config+0xcc>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015d4:	2300      	movs	r3, #0
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	4b22      	ldr	r3, [pc, #136]	; (8001664 <SystemClock_Config+0xd0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a21      	ldr	r2, [pc, #132]	; (8001664 <SystemClock_Config+0xd0>)
 80015de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <SystemClock_Config+0xd0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015f0:	2301      	movs	r3, #1
 80015f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015fa:	2302      	movs	r3, #2
 80015fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001604:	2304      	movs	r3, #4
 8001606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001608:	23a8      	movs	r3, #168	; 0xa8
 800160a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800160c:	2302      	movs	r3, #2
 800160e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001610:	2304      	movs	r3, #4
 8001612:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001614:	f107 0320 	add.w	r3, r7, #32
 8001618:	4618      	mov	r0, r3
 800161a:	f003 fd95 	bl	8005148 <HAL_RCC_OscConfig>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001624:	f001 fea2 	bl	800336c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001628:	230f      	movs	r3, #15
 800162a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800162c:	2302      	movs	r3, #2
 800162e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001634:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001638:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800163a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	2105      	movs	r1, #5
 8001646:	4618      	mov	r0, r3
 8001648:	f003 fff6 	bl	8005638 <HAL_RCC_ClockConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001652:	f001 fe8b 	bl	800336c <Error_Handler>
  }
}
 8001656:	bf00      	nop
 8001658:	3750      	adds	r7, #80	; 0x50
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800
 8001664:	40007000 	.word	0x40007000

08001668 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800166e:	463b      	mov	r3, r7
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800167a:	4b21      	ldr	r3, [pc, #132]	; (8001700 <MX_ADC1_Init+0x98>)
 800167c:	4a21      	ldr	r2, [pc, #132]	; (8001704 <MX_ADC1_Init+0x9c>)
 800167e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <MX_ADC1_Init+0x98>)
 8001682:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001686:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001688:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <MX_ADC1_Init+0x98>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800168e:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <MX_ADC1_Init+0x98>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001694:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <MX_ADC1_Init+0x98>)
 8001696:	2200      	movs	r2, #0
 8001698:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <MX_ADC1_Init+0x98>)
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <MX_ADC1_Init+0x98>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <MX_ADC1_Init+0x98>)
 80016aa:	4a17      	ldr	r2, [pc, #92]	; (8001708 <MX_ADC1_Init+0xa0>)
 80016ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <MX_ADC1_Init+0x98>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_ADC1_Init+0x98>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_ADC1_Init+0x98>)
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_ADC1_Init+0x98>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <MX_ADC1_Init+0x98>)
 80016ca:	f002 fa47 	bl	8003b5c <HAL_ADC_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80016d4:	f001 fe4a 	bl	800336c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80016d8:	2306      	movs	r3, #6
 80016da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016dc:	2301      	movs	r3, #1
 80016de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80016e0:	2307      	movs	r3, #7
 80016e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016e4:	463b      	mov	r3, r7
 80016e6:	4619      	mov	r1, r3
 80016e8:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_ADC1_Init+0x98>)
 80016ea:	f002 fba9 	bl	8003e40 <HAL_ADC_ConfigChannel>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016f4:	f001 fe3a 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000398 	.word	0x20000398
 8001704:	40012000 	.word	0x40012000
 8001708:	0f000001 	.word	0x0f000001

0800170c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001712:	f107 0308 	add.w	r3, r7, #8
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001720:	463b      	mov	r3, r7
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001728:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <MX_TIM2_Init+0x94>)
 800172a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800172e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001730:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <MX_TIM2_Init+0x94>)
 8001732:	2253      	movs	r2, #83	; 0x53
 8001734:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001736:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <MX_TIM2_Init+0x94>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800173c:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <MX_TIM2_Init+0x94>)
 800173e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001742:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001744:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <MX_TIM2_Init+0x94>)
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <MX_TIM2_Init+0x94>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001750:	4813      	ldr	r0, [pc, #76]	; (80017a0 <MX_TIM2_Init+0x94>)
 8001752:	f004 f9c3 	bl	8005adc <HAL_TIM_Base_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800175c:	f001 fe06 	bl	800336c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001764:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001766:	f107 0308 	add.w	r3, r7, #8
 800176a:	4619      	mov	r1, r3
 800176c:	480c      	ldr	r0, [pc, #48]	; (80017a0 <MX_TIM2_Init+0x94>)
 800176e:	f004 fd61 	bl	8006234 <HAL_TIM_ConfigClockSource>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001778:	f001 fdf8 	bl	800336c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177c:	2300      	movs	r3, #0
 800177e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001784:	463b      	mov	r3, r7
 8001786:	4619      	mov	r1, r3
 8001788:	4805      	ldr	r0, [pc, #20]	; (80017a0 <MX_TIM2_Init+0x94>)
 800178a:	f005 f953 	bl	8006a34 <HAL_TIMEx_MasterConfigSynchronization>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001794:	f001 fdea 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001798:	bf00      	nop
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000440 	.word	0x20000440

080017a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08e      	sub	sp, #56	; 0x38
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b8:	f107 0320 	add.w	r3, r7, #32
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
 80017d0:	615a      	str	r2, [r3, #20]
 80017d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017d4:	4b32      	ldr	r3, [pc, #200]	; (80018a0 <MX_TIM3_Init+0xfc>)
 80017d6:	4a33      	ldr	r2, [pc, #204]	; (80018a4 <MX_TIM3_Init+0x100>)
 80017d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80017da:	4b31      	ldr	r3, [pc, #196]	; (80018a0 <MX_TIM3_Init+0xfc>)
 80017dc:	2253      	movs	r2, #83	; 0x53
 80017de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e0:	4b2f      	ldr	r3, [pc, #188]	; (80018a0 <MX_TIM3_Init+0xfc>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80017e6:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <MX_TIM3_Init+0xfc>)
 80017e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ee:	4b2c      	ldr	r3, [pc, #176]	; (80018a0 <MX_TIM3_Init+0xfc>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f4:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <MX_TIM3_Init+0xfc>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017fa:	4829      	ldr	r0, [pc, #164]	; (80018a0 <MX_TIM3_Init+0xfc>)
 80017fc:	f004 f96e 	bl	8005adc <HAL_TIM_Base_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001806:	f001 fdb1 	bl	800336c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800180a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001810:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001814:	4619      	mov	r1, r3
 8001816:	4822      	ldr	r0, [pc, #136]	; (80018a0 <MX_TIM3_Init+0xfc>)
 8001818:	f004 fd0c 	bl	8006234 <HAL_TIM_ConfigClockSource>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001822:	f001 fda3 	bl	800336c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001826:	481e      	ldr	r0, [pc, #120]	; (80018a0 <MX_TIM3_Init+0xfc>)
 8001828:	f004 fa18 	bl	8005c5c <HAL_TIM_PWM_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001832:	f001 fd9b 	bl	800336c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001836:	2300      	movs	r3, #0
 8001838:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800183e:	f107 0320 	add.w	r3, r7, #32
 8001842:	4619      	mov	r1, r3
 8001844:	4816      	ldr	r0, [pc, #88]	; (80018a0 <MX_TIM3_Init+0xfc>)
 8001846:	f005 f8f5 	bl	8006a34 <HAL_TIMEx_MasterConfigSynchronization>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001850:	f001 fd8c 	bl	800336c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001854:	2360      	movs	r3, #96	; 0x60
 8001856:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	2204      	movs	r2, #4
 8001868:	4619      	mov	r1, r3
 800186a:	480d      	ldr	r0, [pc, #52]	; (80018a0 <MX_TIM3_Init+0xfc>)
 800186c:	f004 fc20 	bl	80060b0 <HAL_TIM_PWM_ConfigChannel>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001876:	f001 fd79 	bl	800336c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	2208      	movs	r2, #8
 800187e:	4619      	mov	r1, r3
 8001880:	4807      	ldr	r0, [pc, #28]	; (80018a0 <MX_TIM3_Init+0xfc>)
 8001882:	f004 fc15 	bl	80060b0 <HAL_TIM_PWM_ConfigChannel>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800188c:	f001 fd6e 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001890:	4803      	ldr	r0, [pc, #12]	; (80018a0 <MX_TIM3_Init+0xfc>)
 8001892:	f001 fe67 	bl	8003564 <HAL_TIM_MspPostInit>

}
 8001896:	bf00      	nop
 8001898:	3738      	adds	r7, #56	; 0x38
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000488 	.word	0x20000488
 80018a4:	40000400 	.word	0x40000400

080018a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08e      	sub	sp, #56	; 0x38
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018bc:	f107 0320 	add.w	r3, r7, #32
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
 80018d4:	615a      	str	r2, [r3, #20]
 80018d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018d8:	4b32      	ldr	r3, [pc, #200]	; (80019a4 <MX_TIM4_Init+0xfc>)
 80018da:	4a33      	ldr	r2, [pc, #204]	; (80019a8 <MX_TIM4_Init+0x100>)
 80018dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80018de:	4b31      	ldr	r3, [pc, #196]	; (80019a4 <MX_TIM4_Init+0xfc>)
 80018e0:	2253      	movs	r2, #83	; 0x53
 80018e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e4:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <MX_TIM4_Init+0xfc>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80018ea:	4b2e      	ldr	r3, [pc, #184]	; (80019a4 <MX_TIM4_Init+0xfc>)
 80018ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f2:	4b2c      	ldr	r3, [pc, #176]	; (80019a4 <MX_TIM4_Init+0xfc>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f8:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <MX_TIM4_Init+0xfc>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80018fe:	4829      	ldr	r0, [pc, #164]	; (80019a4 <MX_TIM4_Init+0xfc>)
 8001900:	f004 f8ec 	bl	8005adc <HAL_TIM_Base_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800190a:	f001 fd2f 	bl	800336c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800190e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001912:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001914:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001918:	4619      	mov	r1, r3
 800191a:	4822      	ldr	r0, [pc, #136]	; (80019a4 <MX_TIM4_Init+0xfc>)
 800191c:	f004 fc8a 	bl	8006234 <HAL_TIM_ConfigClockSource>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001926:	f001 fd21 	bl	800336c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800192a:	481e      	ldr	r0, [pc, #120]	; (80019a4 <MX_TIM4_Init+0xfc>)
 800192c:	f004 f996 	bl	8005c5c <HAL_TIM_PWM_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001936:	f001 fd19 	bl	800336c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193a:	2300      	movs	r3, #0
 800193c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193e:	2300      	movs	r3, #0
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001942:	f107 0320 	add.w	r3, r7, #32
 8001946:	4619      	mov	r1, r3
 8001948:	4816      	ldr	r0, [pc, #88]	; (80019a4 <MX_TIM4_Init+0xfc>)
 800194a:	f005 f873 	bl	8006a34 <HAL_TIMEx_MasterConfigSynchronization>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001954:	f001 fd0a 	bl	800336c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001958:	2360      	movs	r3, #96	; 0x60
 800195a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	2204      	movs	r2, #4
 800196c:	4619      	mov	r1, r3
 800196e:	480d      	ldr	r0, [pc, #52]	; (80019a4 <MX_TIM4_Init+0xfc>)
 8001970:	f004 fb9e 	bl	80060b0 <HAL_TIM_PWM_ConfigChannel>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800197a:	f001 fcf7 	bl	800336c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	2208      	movs	r2, #8
 8001982:	4619      	mov	r1, r3
 8001984:	4807      	ldr	r0, [pc, #28]	; (80019a4 <MX_TIM4_Init+0xfc>)
 8001986:	f004 fb93 	bl	80060b0 <HAL_TIM_PWM_ConfigChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001990:	f001 fcec 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001994:	4803      	ldr	r0, [pc, #12]	; (80019a4 <MX_TIM4_Init+0xfc>)
 8001996:	f001 fde5 	bl	8003564 <HAL_TIM_MspPostInit>

}
 800199a:	bf00      	nop
 800199c:	3738      	adds	r7, #56	; 0x38
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200004d0 	.word	0x200004d0
 80019a8:	40000800 	.word	0x40000800

080019ac <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <MX_UART4_Init+0x50>)
 80019b2:	4a13      	ldr	r2, [pc, #76]	; (8001a00 <MX_UART4_Init+0x54>)
 80019b4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <MX_UART4_Init+0x50>)
 80019b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019bc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 80019be:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <MX_UART4_Init+0x50>)
 80019c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019c4:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <MX_UART4_Init+0x50>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_ODD;
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <MX_UART4_Init+0x50>)
 80019ce:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80019d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <MX_UART4_Init+0x50>)
 80019d6:	220c      	movs	r2, #12
 80019d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <MX_UART4_Init+0x50>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <MX_UART4_Init+0x50>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019e6:	4805      	ldr	r0, [pc, #20]	; (80019fc <MX_UART4_Init+0x50>)
 80019e8:	f005 f8b4 	bl	8006b54 <HAL_UART_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_UART4_Init+0x4a>
  {
    Error_Handler();
 80019f2:	f001 fcbb 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000518 	.word	0x20000518
 8001a00:	40004c00 	.word	0x40004c00

08001a04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <MX_USART1_UART_Init+0x50>)
 8001a0a:	4a13      	ldr	r2, [pc, #76]	; (8001a58 <MX_USART1_UART_Init+0x54>)
 8001a0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <MX_USART1_UART_Init+0x50>)
 8001a10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <MX_USART1_UART_Init+0x50>)
 8001a18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a1c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <MX_USART1_UART_Init+0x50>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <MX_USART1_UART_Init+0x50>)
 8001a26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <MX_USART1_UART_Init+0x50>)
 8001a2e:	220c      	movs	r2, #12
 8001a30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <MX_USART1_UART_Init+0x50>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <MX_USART1_UART_Init+0x50>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <MX_USART1_UART_Init+0x50>)
 8001a40:	f005 f888 	bl	8006b54 <HAL_UART_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8001a4a:	f001 fc8f 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	2000055c 	.word	0x2000055c
 8001a58:	40011000 	.word	0x40011000

08001a5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	; (8001aac <MX_USART2_UART_Init+0x50>)
 8001a64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a82:	220c      	movs	r2, #12
 8001a84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <MX_USART2_UART_Init+0x4c>)
 8001a94:	f005 f85e 	bl	8006b54 <HAL_UART_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a9e:	f001 fc65 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200005a0 	.word	0x200005a0
 8001aac:	40004400 	.word	0x40004400

08001ab0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <MX_USART3_UART_Init+0x4c>)
 8001ab6:	4a12      	ldr	r2, [pc, #72]	; (8001b00 <MX_USART3_UART_Init+0x50>)
 8001ab8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <MX_USART3_UART_Init+0x4c>)
 8001abc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ac0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <MX_USART3_UART_Init+0x4c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <MX_USART3_UART_Init+0x4c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <MX_USART3_UART_Init+0x4c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <MX_USART3_UART_Init+0x4c>)
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <MX_USART3_UART_Init+0x4c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <MX_USART3_UART_Init+0x4c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ae6:	4805      	ldr	r0, [pc, #20]	; (8001afc <MX_USART3_UART_Init+0x4c>)
 8001ae8:	f005 f834 	bl	8006b54 <HAL_UART_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001af2:	f001 fc3b 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200005e4 	.word	0x200005e4
 8001b00:	40004800 	.word	0x40004800

08001b04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_DMA_Init+0x3c>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <MX_DMA_Init+0x3c>)
 8001b14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_DMA_Init+0x3c>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2105      	movs	r1, #5
 8001b2a:	2038      	movs	r0, #56	; 0x38
 8001b2c:	f002 fce0 	bl	80044f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b30:	2038      	movs	r0, #56	; 0x38
 8001b32:	f002 fcf9 	bl	8004528 <HAL_NVIC_EnableIRQ>

}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800

08001b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08c      	sub	sp, #48	; 0x30
 8001b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4a:	f107 031c 	add.w	r3, r7, #28
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
 8001b58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
 8001b5e:	4b6d      	ldr	r3, [pc, #436]	; (8001d14 <MX_GPIO_Init+0x1d0>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a6c      	ldr	r2, [pc, #432]	; (8001d14 <MX_GPIO_Init+0x1d0>)
 8001b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b6a      	ldr	r3, [pc, #424]	; (8001d14 <MX_GPIO_Init+0x1d0>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b72:	61bb      	str	r3, [r7, #24]
 8001b74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	4b66      	ldr	r3, [pc, #408]	; (8001d14 <MX_GPIO_Init+0x1d0>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a65      	ldr	r2, [pc, #404]	; (8001d14 <MX_GPIO_Init+0x1d0>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b63      	ldr	r3, [pc, #396]	; (8001d14 <MX_GPIO_Init+0x1d0>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	4b5f      	ldr	r3, [pc, #380]	; (8001d14 <MX_GPIO_Init+0x1d0>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a5e      	ldr	r2, [pc, #376]	; (8001d14 <MX_GPIO_Init+0x1d0>)
 8001b9c:	f043 0310 	orr.w	r3, r3, #16
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b5c      	ldr	r3, [pc, #368]	; (8001d14 <MX_GPIO_Init+0x1d0>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	4b58      	ldr	r3, [pc, #352]	; (8001d14 <MX_GPIO_Init+0x1d0>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a57      	ldr	r2, [pc, #348]	; (8001d14 <MX_GPIO_Init+0x1d0>)
 8001bb8:	f043 0302 	orr.w	r3, r3, #2
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b55      	ldr	r3, [pc, #340]	; (8001d14 <MX_GPIO_Init+0x1d0>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	4b51      	ldr	r3, [pc, #324]	; (8001d14 <MX_GPIO_Init+0x1d0>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a50      	ldr	r2, [pc, #320]	; (8001d14 <MX_GPIO_Init+0x1d0>)
 8001bd4:	f043 0308 	orr.w	r3, r3, #8
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b4e      	ldr	r3, [pc, #312]	; (8001d14 <MX_GPIO_Init+0x1d0>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	4b4a      	ldr	r3, [pc, #296]	; (8001d14 <MX_GPIO_Init+0x1d0>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a49      	ldr	r2, [pc, #292]	; (8001d14 <MX_GPIO_Init+0x1d0>)
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b47      	ldr	r3, [pc, #284]	; (8001d14 <MX_GPIO_Init+0x1d0>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|CompassReset_Pin, GPIO_PIN_RESET);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2112      	movs	r1, #18
 8001c06:	4844      	ldr	r0, [pc, #272]	; (8001d18 <MX_GPIO_Init+0x1d4>)
 8001c08:	f003 fa52 	bl	80050b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Dir_GPIO_Port, Dir_Pin, GPIO_PIN_RESET);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c12:	4842      	ldr	r0, [pc, #264]	; (8001d1c <MX_GPIO_Init+0x1d8>)
 8001c14:	f003 fa4c 	bl	80050b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, GPIO_PIN_RESET);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c1e:	4840      	ldr	r0, [pc, #256]	; (8001d20 <MX_GPIO_Init+0x1dc>)
 8001c20:	f003 fa46 	bl	80050b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin CompassReset_Pin */
  GPIO_InitStruct.Pin = LED_Pin|CompassReset_Pin;
 8001c24:	2312      	movs	r3, #18
 8001c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4837      	ldr	r0, [pc, #220]	; (8001d18 <MX_GPIO_Init+0x1d4>)
 8001c3c:	f003 f884 	bl	8004d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : CB_thanh_Pin UpperRingSS_Pin */
  GPIO_InitStruct.Pin = CB_thanh_Pin|UpperRingSS_Pin;
 8001c40:	23a0      	movs	r3, #160	; 0xa0
 8001c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c44:	2300      	movs	r3, #0
 8001c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	4619      	mov	r1, r3
 8001c52:	4831      	ldr	r0, [pc, #196]	; (8001d18 <MX_GPIO_Init+0x1d4>)
 8001c54:	f003 f878 	bl	8004d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : Dir_Pin */
  GPIO_InitStruct.Pin = Dir_Pin;
 8001c58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Dir_GPIO_Port, &GPIO_InitStruct);
 8001c6a:	f107 031c 	add.w	r3, r7, #28
 8001c6e:	4619      	mov	r1, r3
 8001c70:	482a      	ldr	r0, [pc, #168]	; (8001d1c <MX_GPIO_Init+0x1d8>)
 8001c72:	f003 f869 	bl	8004d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : En_Pin */
  GPIO_InitStruct.Pin = En_Pin;
 8001c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	2300      	movs	r3, #0
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(En_GPIO_Port, &GPIO_InitStruct);
 8001c88:	f107 031c 	add.w	r3, r7, #28
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4824      	ldr	r0, [pc, #144]	; (8001d20 <MX_GPIO_Init+0x1dc>)
 8001c90:	f003 f85a 	bl	8004d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca2:	f107 031c 	add.w	r3, r7, #28
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	481d      	ldr	r0, [pc, #116]	; (8001d20 <MX_GPIO_Init+0x1dc>)
 8001caa:	f003 f84d 	bl	8004d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cbc:	f107 031c 	add.w	r3, r7, #28
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4818      	ldr	r0, [pc, #96]	; (8001d24 <MX_GPIO_Init+0x1e0>)
 8001cc4:	f003 f840 	bl	8004d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cc8:	2340      	movs	r3, #64	; 0x40
 8001cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ccc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd6:	f107 031c 	add.w	r3, r7, #28
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4812      	ldr	r0, [pc, #72]	; (8001d28 <MX_GPIO_Init+0x1e4>)
 8001cde:	f003 f833 	bl	8004d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : cb_vong_Pin */
  GPIO_InitStruct.Pin = cb_vong_Pin;
 8001ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cec:	2301      	movs	r3, #1
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(cb_vong_GPIO_Port, &GPIO_InitStruct);
 8001cf0:	f107 031c 	add.w	r3, r7, #28
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	480c      	ldr	r0, [pc, #48]	; (8001d28 <MX_GPIO_Init+0x1e4>)
 8001cf8:	f003 f826 	bl	8004d48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2105      	movs	r1, #5
 8001d00:	2017      	movs	r0, #23
 8001d02:	f002 fbf5 	bl	80044f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d06:	2017      	movs	r0, #23
 8001d08:	f002 fc0e 	bl	8004528 <HAL_NVIC_EnableIRQ>

}
 8001d0c:	bf00      	nop
 8001d0e:	3730      	adds	r7, #48	; 0x30
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40020000 	.word	0x40020000
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40020400 	.word	0x40020400
 8001d24:	40020c00 	.word	0x40020c00
 8001d28:	40020800 	.word	0x40020800

08001d2c <batthanh>:
//{
//  if(GPIO_Pin == cb_vong_Pin){
//	  int cambien;
//  }
//}
void batthanh(void){
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af08      	add	r7, sp, #32
	v_t = 55;
 8001d32:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <batthanh+0x7c>)
 8001d34:	2237      	movs	r2, #55	; 0x37
 8001d36:	601a      	str	r2, [r3, #0]
	forward = 2;
 8001d38:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <batthanh+0x80>)
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	601a      	str	r2, [r3, #0]

	while(1){

		if(HAL_GPIO_ReadPin(CB_thanh_GPIO_Port, CB_thanh_Pin)==0){
 8001d3e:	2120      	movs	r1, #32
 8001d40:	481b      	ldr	r0, [pc, #108]	; (8001db0 <batthanh+0x84>)
 8001d42:	f003 f99d 	bl	8005080 <HAL_GPIO_ReadPin>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d126      	bne.n	8001d9a <batthanh+0x6e>
			v_t = 0;
 8001d4c:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <batthanh+0x7c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
			osDelay(1000);
 8001d52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d56:	f005 ffe0 	bl	8007d1a <osDelay>

			forward = 0;
 8001d5a:	4b14      	ldr	r3, [pc, #80]	; (8001dac <batthanh+0x80>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
			RotatePid = 0;
 8001d60:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <batthanh+0x88>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
			ControlDriver(0, 1, 0, 600, 0, 1, 0, 600, 0, 1, 0, 600);
 8001d66:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001d6a:	9307      	str	r3, [sp, #28]
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	9306      	str	r3, [sp, #24]
 8001d70:	2301      	movs	r3, #1
 8001d72:	9305      	str	r3, [sp, #20]
 8001d74:	2300      	movs	r3, #0
 8001d76:	9304      	str	r3, [sp, #16]
 8001d78:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001d7c:	9303      	str	r3, [sp, #12]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	9302      	str	r3, [sp, #8]
 8001d82:	2301      	movs	r3, #1
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	2300      	movs	r3, #0
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2101      	movs	r1, #1
 8001d92:	2000      	movs	r0, #0
 8001d94:	f7ff fa66 	bl	8001264 <ControlDriver>
			return;
 8001d98:	e003      	b.n	8001da2 <batthanh+0x76>
		}
		osDelay(1);
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f005 ffbd 	bl	8007d1a <osDelay>
		if(HAL_GPIO_ReadPin(CB_thanh_GPIO_Port, CB_thanh_Pin)==0){
 8001da0:	e7cd      	b.n	8001d3e <batthanh+0x12>
	}
}
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000644 	.word	0x20000644
 8001dac:	20000640 	.word	0x20000640
 8001db0:	40020000 	.word	0x40020000
 8001db4:	20000688 	.word	0x20000688

08001db8 <batcot>:
uint8_t antinoise;
void batcot(void){
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
	while(1){
		if(DataTayGame[2] == 128 && !DangThucThi2){
 8001dbc:	4b27      	ldr	r3, [pc, #156]	; (8001e5c <batcot+0xa4>)
 8001dbe:	789b      	ldrb	r3, [r3, #2]
 8001dc0:	2b80      	cmp	r3, #128	; 0x80
 8001dc2:	d10b      	bne.n	8001ddc <batcot+0x24>
 8001dc4:	4b26      	ldr	r3, [pc, #152]	; (8001e60 <batcot+0xa8>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d107      	bne.n	8001ddc <batcot+0x24>
				pre_t += 2;
 8001dcc:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <batcot+0xac>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	4a24      	ldr	r2, [pc, #144]	; (8001e64 <batcot+0xac>)
 8001dd4:	6013      	str	r3, [r2, #0]
				DangThucThi2 =1;
 8001dd6:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <batcot+0xa8>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	701a      	strb	r2, [r3, #0]
				}
				if(DataTayGame[2] == 32 && !DangThucThi2){
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <batcot+0xa4>)
 8001dde:	789b      	ldrb	r3, [r3, #2]
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d10b      	bne.n	8001dfc <batcot+0x44>
 8001de4:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <batcot+0xa8>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d107      	bne.n	8001dfc <batcot+0x44>
				pre_t -= 2;
 8001dec:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <batcot+0xac>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	3b02      	subs	r3, #2
 8001df2:	4a1c      	ldr	r2, [pc, #112]	; (8001e64 <batcot+0xac>)
 8001df4:	6013      	str	r3, [r2, #0]
				DangThucThi2 =1;
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <batcot+0xa8>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	701a      	strb	r2, [r3, #0]
				}
				if(DataTayGame[2] == 0){
 8001dfc:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <batcot+0xa4>)
 8001dfe:	789b      	ldrb	r3, [r3, #2]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d102      	bne.n	8001e0a <batcot+0x52>
				DangThucThi2 = 0;
 8001e04:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <batcot+0xa8>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
				}
				goc_target = pre_t;
 8001e0a:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <batcot+0xac>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a16      	ldr	r2, [pc, #88]	; (8001e68 <batcot+0xb0>)
 8001e10:	6013      	str	r3, [r2, #0]
			if(a[0]>2000&&a[0]<3300){
 8001e12:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <batcot+0xb4>)
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e1a:	d90b      	bls.n	8001e34 <batcot+0x7c>
 8001e1c:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <batcot+0xb4>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	f640 42e3 	movw	r2, #3299	; 0xce3
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d805      	bhi.n	8001e34 <batcot+0x7c>
				antinoise ++;
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <batcot+0xb8>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <batcot+0xb8>)
 8001e32:	701a      	strb	r2, [r3, #0]
			}
				if(antinoise > 20){
 8001e34:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <batcot+0xb8>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b14      	cmp	r3, #20
 8001e3a:	d9bf      	bls.n	8001dbc <batcot+0x4>
					v_t = 0;
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <batcot+0xbc>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
					osDelay(1000);
 8001e42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e46:	f005 ff68 	bl	8007d1a <osDelay>
					forward = 0;
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <batcot+0xc0>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
					RotatePid = 0;
 8001e50:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <batcot+0xc4>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]

					return;
 8001e56:	bf00      	nop
					}
			}

			osDelay(1);
}
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200006ac 	.word	0x200006ac
 8001e60:	200006fb 	.word	0x200006fb
 8001e64:	20000010 	.word	0x20000010
 8001e68:	20000638 	.word	0x20000638
 8001e6c:	200006e4 	.word	0x200006e4
 8001e70:	200006fc 	.word	0x200006fc
 8001e74:	20000644 	.word	0x20000644
 8001e78:	20000640 	.word	0x20000640
 8001e7c:	20000688 	.word	0x20000688

08001e80 <batvong>:



void batvong(void){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	while(1){
		if(HAL_GPIO_ReadPin(cb_vong_GPIO_Port, cb_vong_Pin)==0){
 8001e84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e88:	480a      	ldr	r0, [pc, #40]	; (8001eb4 <batvong+0x34>)
 8001e8a:	f003 f8f9 	bl	8005080 <HAL_GPIO_ReadPin>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f7      	bne.n	8001e84 <batvong+0x4>
			v_t = 0;
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <batvong+0x38>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
			osDelay(1000);
 8001e9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e9e:	f005 ff3c 	bl	8007d1a <osDelay>
			forward = 0;
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <batvong+0x3c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
			RotatePid = 0;
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <batvong+0x40>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
			return;
 8001eae:	bf00      	nop
		}
	}
}
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40020800 	.word	0x40020800
 8001eb8:	20000644 	.word	0x20000644
 8001ebc:	20000640 	.word	0x20000640
 8001ec0:	20000688 	.word	0x20000688

08001ec4 <HAL_GPIO_EXTI_Callback>:
int dir9,pwm9,pwm_movable9= 600;

uint8_t cambien;
int count1;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	80fb      	strh	r3, [r7, #6]
	//Encoder DC-SPEED
	if (GPIO_Pin == GPIO_PIN_6){
 8001ece:	88fb      	ldrh	r3, [r7, #6]
 8001ed0:	2b40      	cmp	r3, #64	; 0x40
 8001ed2:	d112      	bne.n	8001efa <HAL_GPIO_EXTI_Callback+0x36>
		if (HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_15) == 0) {count1++;}
 8001ed4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ed8:	480a      	ldr	r0, [pc, #40]	; (8001f04 <HAL_GPIO_EXTI_Callback+0x40>)
 8001eda:	f003 f8d1 	bl	8005080 <HAL_GPIO_ReadPin>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d105      	bne.n	8001ef0 <HAL_GPIO_EXTI_Callback+0x2c>
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x44>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	4a07      	ldr	r2, [pc, #28]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x44>)
 8001eec:	6013      	str	r3, [r2, #0]
		else {count1--;}
	}
}
 8001eee:	e004      	b.n	8001efa <HAL_GPIO_EXTI_Callback+0x36>
		else {count1--;}
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x44>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x44>)
 8001ef8:	6013      	str	r3, [r2, #0]
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40020c00 	.word	0x40020c00
 8001f08:	20000764 	.word	0x20000764

08001f0c <PID>:
void PID(){
 8001f0c:	b5b0      	push	{r4, r5, r7, lr}
 8001f0e:	af00      	add	r7, sp, #0

	// khoảng cần đáp ứng của hệ thống
	e9 = POS_target - count1;
 8001f10:	4ba4      	ldr	r3, [pc, #656]	; (80021a4 <PID+0x298>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4ba4      	ldr	r3, [pc, #656]	; (80021a8 <PID+0x29c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe faaa 	bl	8000474 <__aeabi_i2d>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	49a1      	ldr	r1, [pc, #644]	; (80021ac <PID+0x2a0>)
 8001f26:	e9c1 2300 	strd	r2, r3, [r1]

	// Khâu tỉ lệ
	up9 = kp9*e9;
 8001f2a:	4ba1      	ldr	r3, [pc, #644]	; (80021b0 <PID+0x2a4>)
 8001f2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f30:	4b9e      	ldr	r3, [pc, #632]	; (80021ac <PID+0x2a0>)
 8001f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f36:	f7fe fb07 	bl	8000548 <__aeabi_dmul>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	499d      	ldr	r1, [pc, #628]	; (80021b4 <PID+0x2a8>)
 8001f40:	e9c1 2300 	strd	r2, r3, [r1]

	// khâu tích phân
	ui9 = ui_p9 + ki9*e9*deltaT9;
 8001f44:	4b9c      	ldr	r3, [pc, #624]	; (80021b8 <PID+0x2ac>)
 8001f46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f4a:	4b98      	ldr	r3, [pc, #608]	; (80021ac <PID+0x2a0>)
 8001f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f50:	f7fe fafa 	bl	8000548 <__aeabi_dmul>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4610      	mov	r0, r2
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4b97      	ldr	r3, [pc, #604]	; (80021bc <PID+0x2b0>)
 8001f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f62:	f7fe faf1 	bl	8000548 <__aeabi_dmul>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4b94      	ldr	r3, [pc, #592]	; (80021c0 <PID+0x2b4>)
 8001f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f74:	f7fe f932 	bl	80001dc <__adddf3>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4991      	ldr	r1, [pc, #580]	; (80021c4 <PID+0x2b8>)
 8001f7e:	e9c1 2300 	strd	r2, r3, [r1]
	// Bão hòa khâu tích phân
	if (ui9>ui_above_limit9)ui9=ui_above_limit9;
 8001f82:	4b91      	ldr	r3, [pc, #580]	; (80021c8 <PID+0x2bc>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe fa74 	bl	8000474 <__aeabi_i2d>
 8001f8c:	4b8d      	ldr	r3, [pc, #564]	; (80021c4 <PID+0x2b8>)
 8001f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f92:	f7fe fd4b 	bl	8000a2c <__aeabi_dcmplt>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00a      	beq.n	8001fb2 <PID+0xa6>
 8001f9c:	4b8a      	ldr	r3, [pc, #552]	; (80021c8 <PID+0x2bc>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fa67 	bl	8000474 <__aeabi_i2d>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4986      	ldr	r1, [pc, #536]	; (80021c4 <PID+0x2b8>)
 8001fac:	e9c1 2300 	strd	r2, r3, [r1]
 8001fb0:	e016      	b.n	8001fe0 <PID+0xd4>
	else if(ui9<ui_under_limit9)ui9=ui_under_limit9;
 8001fb2:	4b86      	ldr	r3, [pc, #536]	; (80021cc <PID+0x2c0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe fa5c 	bl	8000474 <__aeabi_i2d>
 8001fbc:	4b81      	ldr	r3, [pc, #516]	; (80021c4 <PID+0x2b8>)
 8001fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc2:	f7fe fd51 	bl	8000a68 <__aeabi_dcmpgt>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d009      	beq.n	8001fe0 <PID+0xd4>
 8001fcc:	4b7f      	ldr	r3, [pc, #508]	; (80021cc <PID+0x2c0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe fa4f 	bl	8000474 <__aeabi_i2d>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	497a      	ldr	r1, [pc, #488]	; (80021c4 <PID+0x2b8>)
 8001fdc:	e9c1 2300 	strd	r2, r3, [r1]

	// khâu đạo hàm
	ud9 = kd9*(e9 - pre_e9)/deltaT9;
 8001fe0:	4b72      	ldr	r3, [pc, #456]	; (80021ac <PID+0x2a0>)
 8001fe2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fe6:	4b7a      	ldr	r3, [pc, #488]	; (80021d0 <PID+0x2c4>)
 8001fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fec:	f7fe f8f4 	bl	80001d8 <__aeabi_dsub>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4b76      	ldr	r3, [pc, #472]	; (80021d4 <PID+0x2c8>)
 8001ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffe:	f7fe faa3 	bl	8000548 <__aeabi_dmul>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4610      	mov	r0, r2
 8002008:	4619      	mov	r1, r3
 800200a:	4b6c      	ldr	r3, [pc, #432]	; (80021bc <PID+0x2b0>)
 800200c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002010:	f7fe fbc4 	bl	800079c <__aeabi_ddiv>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	496f      	ldr	r1, [pc, #444]	; (80021d8 <PID+0x2cc>)
 800201a:	e9c1 2300 	strd	r2, r3, [r1]
	// L�?c thông thấp khâu đạo hàm
	udf9 = (1-alpha)*udf_p9+alpha9*ud9;
 800201e:	4b6f      	ldr	r3, [pc, #444]	; (80021dc <PID+0x2d0>)
 8002020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002024:	f04f 0000 	mov.w	r0, #0
 8002028:	496d      	ldr	r1, [pc, #436]	; (80021e0 <PID+0x2d4>)
 800202a:	f7fe f8d5 	bl	80001d8 <__aeabi_dsub>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	4b6b      	ldr	r3, [pc, #428]	; (80021e4 <PID+0x2d8>)
 8002038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203c:	f7fe fa84 	bl	8000548 <__aeabi_dmul>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4614      	mov	r4, r2
 8002046:	461d      	mov	r5, r3
 8002048:	4b67      	ldr	r3, [pc, #412]	; (80021e8 <PID+0x2dc>)
 800204a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800204e:	4b62      	ldr	r3, [pc, #392]	; (80021d8 <PID+0x2cc>)
 8002050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002054:	f7fe fa78 	bl	8000548 <__aeabi_dmul>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4620      	mov	r0, r4
 800205e:	4629      	mov	r1, r5
 8002060:	f7fe f8bc 	bl	80001dc <__adddf3>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4960      	ldr	r1, [pc, #384]	; (80021ec <PID+0x2e0>)
 800206a:	e9c1 2300 	strd	r2, r3, [r1]

	pre_e9 = e9;
 800206e:	4b4f      	ldr	r3, [pc, #316]	; (80021ac <PID+0x2a0>)
 8002070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002074:	4956      	ldr	r1, [pc, #344]	; (80021d0 <PID+0x2c4>)
 8002076:	e9c1 2300 	strd	r2, r3, [r1]
	ui_p9 = ui9;
 800207a:	4b52      	ldr	r3, [pc, #328]	; (80021c4 <PID+0x2b8>)
 800207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002080:	494f      	ldr	r1, [pc, #316]	; (80021c0 <PID+0x2b4>)
 8002082:	e9c1 2300 	strd	r2, r3, [r1]
	udf_p9 = udf9;
 8002086:	4b59      	ldr	r3, [pc, #356]	; (80021ec <PID+0x2e0>)
 8002088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208c:	4955      	ldr	r1, [pc, #340]	; (80021e4 <PID+0x2d8>)
 800208e:	e9c1 2300 	strd	r2, r3, [r1]

	// Tổng out put
	u9 = up9 + udf9+ui9;
 8002092:	4b48      	ldr	r3, [pc, #288]	; (80021b4 <PID+0x2a8>)
 8002094:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002098:	4b54      	ldr	r3, [pc, #336]	; (80021ec <PID+0x2e0>)
 800209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209e:	f7fe f89d 	bl	80001dc <__adddf3>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4610      	mov	r0, r2
 80020a8:	4619      	mov	r1, r3
 80020aa:	4b46      	ldr	r3, [pc, #280]	; (80021c4 <PID+0x2b8>)
 80020ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b0:	f7fe f894 	bl	80001dc <__adddf3>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	494d      	ldr	r1, [pc, #308]	; (80021f0 <PID+0x2e4>)
 80020ba:	e9c1 2300 	strd	r2, r3, [r1]
	// Bão hòa output
	if(u9>u_above_limit9)u9 = u_above_limit9;
 80020be:	4b4d      	ldr	r3, [pc, #308]	; (80021f4 <PID+0x2e8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe f9d6 	bl	8000474 <__aeabi_i2d>
 80020c8:	4b49      	ldr	r3, [pc, #292]	; (80021f0 <PID+0x2e4>)
 80020ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ce:	f7fe fcad 	bl	8000a2c <__aeabi_dcmplt>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00a      	beq.n	80020ee <PID+0x1e2>
 80020d8:	4b46      	ldr	r3, [pc, #280]	; (80021f4 <PID+0x2e8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe f9c9 	bl	8000474 <__aeabi_i2d>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4942      	ldr	r1, [pc, #264]	; (80021f0 <PID+0x2e4>)
 80020e8:	e9c1 2300 	strd	r2, r3, [r1]
 80020ec:	e016      	b.n	800211c <PID+0x210>
	else if (u9<u_under_limit9)u9=u_under_limit9;
 80020ee:	4b42      	ldr	r3, [pc, #264]	; (80021f8 <PID+0x2ec>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe f9be 	bl	8000474 <__aeabi_i2d>
 80020f8:	4b3d      	ldr	r3, [pc, #244]	; (80021f0 <PID+0x2e4>)
 80020fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fe:	f7fe fcb3 	bl	8000a68 <__aeabi_dcmpgt>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d009      	beq.n	800211c <PID+0x210>
 8002108:	4b3b      	ldr	r3, [pc, #236]	; (80021f8 <PID+0x2ec>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe f9b1 	bl	8000474 <__aeabi_i2d>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4936      	ldr	r1, [pc, #216]	; (80021f0 <PID+0x2e4>)
 8002118:	e9c1 2300 	strd	r2, r3, [r1]

	// Xác định chi�?u:
	if (u9>0)dir9=-1;
 800211c:	4b34      	ldr	r3, [pc, #208]	; (80021f0 <PID+0x2e4>)
 800211e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	f7fe fc9d 	bl	8000a68 <__aeabi_dcmpgt>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d004      	beq.n	800213e <PID+0x232>
 8002134:	4b31      	ldr	r3, [pc, #196]	; (80021fc <PID+0x2f0>)
 8002136:	f04f 32ff 	mov.w	r2, #4294967295
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	e012      	b.n	8002164 <PID+0x258>
	else if(u9<0)dir9 = 1;
 800213e:	4b2c      	ldr	r3, [pc, #176]	; (80021f0 <PID+0x2e4>)
 8002140:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	f7fe fc6e 	bl	8000a2c <__aeabi_dcmplt>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <PID+0x252>
 8002156:	4b29      	ldr	r3, [pc, #164]	; (80021fc <PID+0x2f0>)
 8002158:	2201      	movs	r2, #1
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	e002      	b.n	8002164 <PID+0x258>
	else dir9 = 0;
 800215e:	4b27      	ldr	r3, [pc, #156]	; (80021fc <PID+0x2f0>)
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]

	// Xuất giá trị pwm
	pwm9 = abs(u9);
 8002164:	4b22      	ldr	r3, [pc, #136]	; (80021f0 <PID+0x2e4>)
 8002166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216a:	4610      	mov	r0, r2
 800216c:	4619      	mov	r1, r3
 800216e:	f7fe fc85 	bl	8000a7c <__aeabi_d2iz>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	bfb8      	it	lt
 8002178:	425b      	neglt	r3, r3
 800217a:	4a21      	ldr	r2, [pc, #132]	; (8002200 <PID+0x2f4>)
 800217c:	6013      	str	r3, [r2, #0]
	if ((pwm9<pwm_movable9)&&(e9!=0)){
 800217e:	4b20      	ldr	r3, [pc, #128]	; (8002200 <PID+0x2f4>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	4b20      	ldr	r3, [pc, #128]	; (8002204 <PID+0x2f8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	da42      	bge.n	8002210 <PID+0x304>
 800218a:	4b08      	ldr	r3, [pc, #32]	; (80021ac <PID+0x2a0>)
 800218c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	f7fe fc3e 	bl	8000a18 <__aeabi_dcmpeq>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d032      	beq.n	8002208 <PID+0x2fc>
		pwm9 = pwm_movable9;

	}
}
 80021a2:	e035      	b.n	8002210 <PID+0x304>
 80021a4:	20000710 	.word	0x20000710
 80021a8:	20000764 	.word	0x20000764
 80021ac:	20000700 	.word	0x20000700
 80021b0:	20000020 	.word	0x20000020
 80021b4:	20000718 	.word	0x20000718
 80021b8:	20000028 	.word	0x20000028
 80021bc:	20000018 	.word	0x20000018
 80021c0:	20000728 	.word	0x20000728
 80021c4:	20000720 	.word	0x20000720
 80021c8:	20000730 	.word	0x20000730
 80021cc:	20000734 	.word	0x20000734
 80021d0:	20000708 	.word	0x20000708
 80021d4:	20000030 	.word	0x20000030
 80021d8:	20000738 	.word	0x20000738
 80021dc:	20000690 	.word	0x20000690
 80021e0:	3ff00000 	.word	0x3ff00000
 80021e4:	20000748 	.word	0x20000748
 80021e8:	20000038 	.word	0x20000038
 80021ec:	20000740 	.word	0x20000740
 80021f0:	20000750 	.word	0x20000750
 80021f4:	20000040 	.word	0x20000040
 80021f8:	20000044 	.word	0x20000044
 80021fc:	20000758 	.word	0x20000758
 8002200:	2000075c 	.word	0x2000075c
 8002204:	20000048 	.word	0x20000048
		pwm9 = pwm_movable9;
 8002208:	4b02      	ldr	r3, [pc, #8]	; (8002214 <PID+0x308>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a02      	ldr	r2, [pc, #8]	; (8002218 <PID+0x30c>)
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	bdb0      	pop	{r4, r5, r7, pc}
 8002214:	20000048 	.word	0x20000048
 8002218:	2000075c 	.word	0x2000075c

0800221c <ControlMotor>:


void ControlMotor(int ChannelA, int ChannelB){
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, ChannelA);
 8002226:	4b07      	ldr	r3, [pc, #28]	; (8002244 <ControlMotor+0x28>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, ChannelB);
 800222e:	4b05      	ldr	r3, [pc, #20]	; (8002244 <ControlMotor+0x28>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	200004d0 	.word	0x200004d0

08002248 <driveSpeed>:
//Ham cap xung cho dong co
void driveSpeed(int dir , int pwmVal){
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
	if (dir == -1){
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002258:	d104      	bne.n	8002264 <driveSpeed+0x1c>
		ControlMotor(pwmVal,0);
 800225a:	2100      	movs	r1, #0
 800225c:	6838      	ldr	r0, [r7, #0]
 800225e:	f7ff ffdd 	bl	800221c <ControlMotor>
		ControlMotor(0,pwmVal);
	}
	else{
		ControlMotor(0,0);
	}
}
 8002262:	e00b      	b.n	800227c <driveSpeed+0x34>
	else if (dir == 1){
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d104      	bne.n	8002274 <driveSpeed+0x2c>
		ControlMotor(0,pwmVal);
 800226a:	6839      	ldr	r1, [r7, #0]
 800226c:	2000      	movs	r0, #0
 800226e:	f7ff ffd5 	bl	800221c <ControlMotor>
}
 8002272:	e003      	b.n	800227c <driveSpeed+0x34>
		ControlMotor(0,0);
 8002274:	2100      	movs	r1, #0
 8002276:	2000      	movs	r0, #0
 8002278:	f7ff ffd0 	bl	800221c <ControlMotor>
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <driveSpeed_tail>:
int pre_angle;
int angle;//goc can huong toi 810
int break_step;
int n, x;

void driveSpeed_tail(int dir , int pwmVal){
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
	if (dir == MOTORDC_CCW){
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002294:	d108      	bne.n	80022a8 <driveSpeed_tail+0x24>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwmVal);
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <driveSpeed_tail+0x58>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800229e:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <driveSpeed_tail+0x58>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2200      	movs	r2, #0
 80022a4:	639a      	str	r2, [r3, #56]	; 0x38
	}
	else{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
	}
}
 80022a6:	e013      	b.n	80022d0 <driveSpeed_tail+0x4c>
	else if (dir == MOTORDC_CW){
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d108      	bne.n	80022c0 <driveSpeed_tail+0x3c>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <driveSpeed_tail+0x58>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2200      	movs	r2, #0
 80022b4:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwmVal);
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <driveSpeed_tail+0x58>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80022be:	e007      	b.n	80022d0 <driveSpeed_tail+0x4c>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <driveSpeed_tail+0x58>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2200      	movs	r2, #0
 80022c6:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80022c8:	4b04      	ldr	r3, [pc, #16]	; (80022dc <driveSpeed_tail+0x58>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2200      	movs	r2, #0
 80022ce:	639a      	str	r2, [r3, #56]	; 0x38
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	20000488 	.word	0x20000488

080022e0 <driveStep>:

void driveStep(){
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
	int n =0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	607b      	str	r3, [r7, #4]
	// 900
	while(currentAngle != angle){
 80022ea:	e044      	b.n	8002376 <driveStep+0x96>
		if( currentAngle < angle){
 80022ec:	4b27      	ldr	r3, [pc, #156]	; (800238c <driveStep+0xac>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b27      	ldr	r3, [pc, #156]	; (8002390 <driveStep+0xb0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	da0c      	bge.n	8002312 <driveStep+0x32>
			HAL_GPIO_WritePin(Dir_GPIO_Port, Dir_Pin, 0);
 80022f8:	2200      	movs	r2, #0
 80022fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022fe:	4825      	ldr	r0, [pc, #148]	; (8002394 <driveStep+0xb4>)
 8002300:	f002 fed6 	bl	80050b0 <HAL_GPIO_WritePin>
			n = angle - currentAngle;
 8002304:	4b22      	ldr	r3, [pc, #136]	; (8002390 <driveStep+0xb0>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4b20      	ldr	r3, [pc, #128]	; (800238c <driveStep+0xac>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	607b      	str	r3, [r7, #4]
 8002310:	e011      	b.n	8002336 <driveStep+0x56>
		}
		else if( currentAngle > angle){
 8002312:	4b1e      	ldr	r3, [pc, #120]	; (800238c <driveStep+0xac>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	4b1e      	ldr	r3, [pc, #120]	; (8002390 <driveStep+0xb0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	dd0b      	ble.n	8002336 <driveStep+0x56>
			HAL_GPIO_WritePin(Dir_GPIO_Port, Dir_Pin, 1);
 800231e:	2201      	movs	r2, #1
 8002320:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002324:	481b      	ldr	r0, [pc, #108]	; (8002394 <driveStep+0xb4>)
 8002326:	f002 fec3 	bl	80050b0 <HAL_GPIO_WritePin>
			n = currentAngle - angle;
 800232a:	4b18      	ldr	r3, [pc, #96]	; (800238c <driveStep+0xac>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <driveStep+0xb0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	607b      	str	r3, [r7, #4]
		}
		for(int x = 0; x < n; x++) {
 8002336:	2300      	movs	r3, #0
 8002338:	603b      	str	r3, [r7, #0]
 800233a:	e014      	b.n	8002366 <driveStep+0x86>
			HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, 1);
 800233c:	2201      	movs	r2, #1
 800233e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002342:	4815      	ldr	r0, [pc, #84]	; (8002398 <driveStep+0xb8>)
 8002344:	f002 feb4 	bl	80050b0 <HAL_GPIO_WritePin>
			osDelay(1);
 8002348:	2001      	movs	r0, #1
 800234a:	f005 fce6 	bl	8007d1a <osDelay>
			HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, 0);
 800234e:	2200      	movs	r2, #0
 8002350:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002354:	4810      	ldr	r0, [pc, #64]	; (8002398 <driveStep+0xb8>)
 8002356:	f002 feab 	bl	80050b0 <HAL_GPIO_WritePin>
			osDelay(1);
 800235a:	2001      	movs	r0, #1
 800235c:	f005 fcdd 	bl	8007d1a <osDelay>
		for(int x = 0; x < n; x++) {
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	3301      	adds	r3, #1
 8002364:	603b      	str	r3, [r7, #0]
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	429a      	cmp	r2, r3
 800236c:	dbe6      	blt.n	800233c <driveStep+0x5c>
		}

		currentAngle = angle;
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <driveStep+0xb0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a06      	ldr	r2, [pc, #24]	; (800238c <driveStep+0xac>)
 8002374:	6013      	str	r3, [r2, #0]
	while(currentAngle != angle){
 8002376:	4b05      	ldr	r3, [pc, #20]	; (800238c <driveStep+0xac>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <driveStep+0xb0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	429a      	cmp	r2, r3
 8002380:	d1b4      	bne.n	80022ec <driveStep+0xc>
	}
}
 8002382:	bf00      	nop
 8002384:	bf00      	nop
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	2000076c 	.word	0x2000076c
 8002390:	20000770 	.word	0x20000770
 8002394:	40021000 	.word	0x40021000
 8002398:	40020400 	.word	0x40020400

0800239c <upHandle>:

uint8_t moveup;
uint8_t gunReady;
uint16_t max_speed = 400;
void upHandle(void){
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
	driveSpeed_tail(MOTORDC_CW, max_speed);
 80023a0:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <upHandle+0x40>)
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	4619      	mov	r1, r3
 80023a6:	2001      	movs	r0, #1
 80023a8:	f7ff ff6c 	bl	8002284 <driveSpeed_tail>
	while(1){
	  if(!HAL_GPIO_ReadPin(UpperRingSS_GPIO_Port, UpperRingSS_Pin)){
 80023ac:	2180      	movs	r1, #128	; 0x80
 80023ae:	480c      	ldr	r0, [pc, #48]	; (80023e0 <upHandle+0x44>)
 80023b0:	f002 fe66 	bl	8005080 <HAL_GPIO_ReadPin>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f8      	bne.n	80023ac <upHandle+0x10>
		  driveSpeed_tail(1, 0);
 80023ba:	2100      	movs	r1, #0
 80023bc:	2001      	movs	r0, #1
 80023be:	f7ff ff61 	bl	8002284 <driveSpeed_tail>
		  osDelay(100);
 80023c2:	2064      	movs	r0, #100	; 0x64
 80023c4:	f005 fca9 	bl	8007d1a <osDelay>
		  up = 0;
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <upHandle+0x48>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
		  moveup = 1;
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <upHandle+0x4c>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]
		  break;
 80023d4:	bf00      	nop
	  }
	}
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	2000004c 	.word	0x2000004c
 80023e0:	40020000 	.word	0x40020000
 80023e4:	20000768 	.word	0x20000768
 80023e8:	20000774 	.word	0x20000774

080023ec <uphalf>:
void uphalf(void){
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
	driveSpeed_tail(MOTORDC_CW, max_speed);
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <uphalf+0x2c>)
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	4619      	mov	r1, r3
 80023f6:	2001      	movs	r0, #1
 80023f8:	f7ff ff44 	bl	8002284 <driveSpeed_tail>
	osDelay(4000);
 80023fc:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002400:	f005 fc8b 	bl	8007d1a <osDelay>
	driveSpeed_tail(MOTORDC_CW, 0);
 8002404:	2100      	movs	r1, #0
 8002406:	2001      	movs	r0, #1
 8002408:	f7ff ff3c 	bl	8002284 <driveSpeed_tail>
	up = 0;
 800240c:	4b03      	ldr	r3, [pc, #12]	; (800241c <uphalf+0x30>)
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]

}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	2000004c 	.word	0x2000004c
 800241c:	20000768 	.word	0x20000768

08002420 <downHandle>:
void downHandle(void){
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
	driveSpeed_tail(MOTORDC_CCW,max_speed);
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <downHandle+0x38>)
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	4619      	mov	r1, r3
 800242a:	f04f 30ff 	mov.w	r0, #4294967295
 800242e:	f7ff ff29 	bl	8002284 <driveSpeed_tail>
	while(1)
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1){
 8002432:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002436:	4809      	ldr	r0, [pc, #36]	; (800245c <downHandle+0x3c>)
 8002438:	f002 fe22 	bl	8005080 <HAL_GPIO_ReadPin>
 800243c:	4603      	mov	r3, r0
 800243e:	2b01      	cmp	r3, #1
 8002440:	d1f7      	bne.n	8002432 <downHandle+0x12>
			driveSpeed_tail(1,0);
 8002442:	2100      	movs	r1, #0
 8002444:	2001      	movs	r0, #1
 8002446:	f7ff ff1d 	bl	8002284 <driveSpeed_tail>
			up = 0;
 800244a:	4b05      	ldr	r3, [pc, #20]	; (8002460 <downHandle+0x40>)
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
			break;
 8002450:	bf00      	nop
		}

}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	2000004c 	.word	0x2000004c
 800245c:	40020400 	.word	0x40020400
 8002460:	20000768 	.word	0x20000768

08002464 <loadingProcess>:


void loadingProcess(void){
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
	upHandle();
 8002468:	f7ff ff98 	bl	800239c <upHandle>
	if(moveup){
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <loadingProcess+0x38>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d010      	beq.n	8002496 <loadingProcess+0x32>
		angle = 950;
 8002474:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <loadingProcess+0x3c>)
 8002476:	f240 32b6 	movw	r2, #950	; 0x3b6
 800247a:	601a      	str	r2, [r3, #0]
		driveStep();
 800247c:	f7ff ff30 	bl	80022e0 <driveStep>
		moveup = 0;
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <loadingProcess+0x38>)
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]
		angle  = 0;
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <loadingProcess+0x3c>)
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
		driveStep();
 800248c:	f7ff ff28 	bl	80022e0 <driveStep>
		gunReady = 1;
 8002490:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <loadingProcess+0x40>)
 8002492:	2201      	movs	r2, #1
 8002494:	701a      	strb	r2, [r3, #0]
	}
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000774 	.word	0x20000774
 80024a0:	20000770 	.word	0x20000770
 80024a4:	20000775 	.word	0x20000775

080024a8 <StartDefaultTask>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
int ii;
void StartDefaultTask(void const * argument)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	; 0x28
 80024ac:	af08      	add	r7, sp, #32
 80024ae:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)a, 1);
//	  osDelay(5);
cambien = HAL_GPIO_ReadPin(cb_vong_GPIO_Port, cb_vong_Pin);
 80024b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024b4:	4894      	ldr	r0, [pc, #592]	; (8002708 <StartDefaultTask+0x260>)
 80024b6:	f002 fde3 	bl	8005080 <HAL_GPIO_ReadPin>
 80024ba:	4603      	mov	r3, r0
 80024bc:	461a      	mov	r2, r3
 80024be:	4b93      	ldr	r3, [pc, #588]	; (800270c <StartDefaultTask+0x264>)
 80024c0:	701a      	strb	r2, [r3, #0]


		if(DataTayGame[1]== 128&&DataTayGame[2]==0){
 80024c2:	4b93      	ldr	r3, [pc, #588]	; (8002710 <StartDefaultTask+0x268>)
 80024c4:	785b      	ldrb	r3, [r3, #1]
 80024c6:	2b80      	cmp	r3, #128	; 0x80
 80024c8:	d131      	bne.n	800252e <StartDefaultTask+0x86>
 80024ca:	4b91      	ldr	r3, [pc, #580]	; (8002710 <StartDefaultTask+0x268>)
 80024cc:	789b      	ldrb	r3, [r3, #2]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d12d      	bne.n	800252e <StartDefaultTask+0x86>
			RotatePid = 0;
 80024d2:	4b90      	ldr	r3, [pc, #576]	; (8002714 <StartDefaultTask+0x26c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
			forward = 0;
 80024d8:	4b8f      	ldr	r3, [pc, #572]	; (8002718 <StartDefaultTask+0x270>)
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
			ControlDriver(0, 1, 0, 400, 0, 1, 0, 200, 0, 1, 0, 300);
 80024de:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80024e2:	9307      	str	r3, [sp, #28]
 80024e4:	2300      	movs	r3, #0
 80024e6:	9306      	str	r3, [sp, #24]
 80024e8:	2301      	movs	r3, #1
 80024ea:	9305      	str	r3, [sp, #20]
 80024ec:	2300      	movs	r3, #0
 80024ee:	9304      	str	r3, [sp, #16]
 80024f0:	23c8      	movs	r3, #200	; 0xc8
 80024f2:	9303      	str	r3, [sp, #12]
 80024f4:	2300      	movs	r3, #0
 80024f6:	9302      	str	r3, [sp, #8]
 80024f8:	2301      	movs	r3, #1
 80024fa:	9301      	str	r3, [sp, #4]
 80024fc:	2300      	movs	r3, #0
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002504:	2200      	movs	r2, #0
 8002506:	2101      	movs	r1, #1
 8002508:	2000      	movs	r0, #0
 800250a:	f7fe feab 	bl	8001264 <ControlDriver>
			osDelay(1000);
 800250e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002512:	f005 fc02 	bl	8007d1a <osDelay>
			loadingProcess();
 8002516:	f7ff ffa5 	bl	8002464 <loadingProcess>

			if(gunReady){
 800251a:	4b80      	ldr	r3, [pc, #512]	; (800271c <StartDefaultTask+0x274>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <StartDefaultTask+0x86>
			ControlGun(1);
 8002522:	2001      	movs	r0, #1
 8002524:	f7fe ff5e 	bl	80013e4 <ControlGun>
			gunReady = 0;
 8002528:	4b7c      	ldr	r3, [pc, #496]	; (800271c <StartDefaultTask+0x274>)
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
			}
		}
		if(DataTayGame[1]== 64&&DataTayGame[2]==0){
 800252e:	4b78      	ldr	r3, [pc, #480]	; (8002710 <StartDefaultTask+0x268>)
 8002530:	785b      	ldrb	r3, [r3, #1]
 8002532:	2b40      	cmp	r3, #64	; 0x40
 8002534:	d134      	bne.n	80025a0 <StartDefaultTask+0xf8>
 8002536:	4b76      	ldr	r3, [pc, #472]	; (8002710 <StartDefaultTask+0x268>)
 8002538:	789b      	ldrb	r3, [r3, #2]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d130      	bne.n	80025a0 <StartDefaultTask+0xf8>
			RotatePid = 0;
 800253e:	4b75      	ldr	r3, [pc, #468]	; (8002714 <StartDefaultTask+0x26c>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
			forward = 0;
 8002544:	4b74      	ldr	r3, [pc, #464]	; (8002718 <StartDefaultTask+0x270>)
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
			ControlDriver(0, 1, 0, 400, 0, 1, 0, 200, 0, 1, 0, 300);
 800254a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800254e:	9307      	str	r3, [sp, #28]
 8002550:	2300      	movs	r3, #0
 8002552:	9306      	str	r3, [sp, #24]
 8002554:	2301      	movs	r3, #1
 8002556:	9305      	str	r3, [sp, #20]
 8002558:	2300      	movs	r3, #0
 800255a:	9304      	str	r3, [sp, #16]
 800255c:	23c8      	movs	r3, #200	; 0xc8
 800255e:	9303      	str	r3, [sp, #12]
 8002560:	2300      	movs	r3, #0
 8002562:	9302      	str	r3, [sp, #8]
 8002564:	2301      	movs	r3, #1
 8002566:	9301      	str	r3, [sp, #4]
 8002568:	2300      	movs	r3, #0
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002570:	2200      	movs	r2, #0
 8002572:	2101      	movs	r1, #1
 8002574:	2000      	movs	r0, #0
 8002576:	f7fe fe75 	bl	8001264 <ControlDriver>
			osDelay(1000);
 800257a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800257e:	f005 fbcc 	bl	8007d1a <osDelay>
			loadingProcess();
 8002582:	f7ff ff6f 	bl	8002464 <loadingProcess>
			RotatePid = 0;
 8002586:	4b63      	ldr	r3, [pc, #396]	; (8002714 <StartDefaultTask+0x26c>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
			if(gunReady){
 800258c:	4b63      	ldr	r3, [pc, #396]	; (800271c <StartDefaultTask+0x274>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <StartDefaultTask+0xf8>
			ControlGun(2);
 8002594:	2002      	movs	r0, #2
 8002596:	f7fe ff25 	bl	80013e4 <ControlGun>
			gunReady = 0;
 800259a:	4b60      	ldr	r3, [pc, #384]	; (800271c <StartDefaultTask+0x274>)
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
			}
		}
		if(DataTayGame[1]== 32&&DataTayGame[2]==0){
 80025a0:	4b5b      	ldr	r3, [pc, #364]	; (8002710 <StartDefaultTask+0x268>)
 80025a2:	785b      	ldrb	r3, [r3, #1]
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d134      	bne.n	8002612 <StartDefaultTask+0x16a>
 80025a8:	4b59      	ldr	r3, [pc, #356]	; (8002710 <StartDefaultTask+0x268>)
 80025aa:	789b      	ldrb	r3, [r3, #2]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d130      	bne.n	8002612 <StartDefaultTask+0x16a>
			RotatePid = 0;
 80025b0:	4b58      	ldr	r3, [pc, #352]	; (8002714 <StartDefaultTask+0x26c>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
			forward = 0;
 80025b6:	4b58      	ldr	r3, [pc, #352]	; (8002718 <StartDefaultTask+0x270>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
			ControlDriver(0, 1, 0, 400, 0, 1, 0, 200, 0, 1, 0, 300);
 80025bc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80025c0:	9307      	str	r3, [sp, #28]
 80025c2:	2300      	movs	r3, #0
 80025c4:	9306      	str	r3, [sp, #24]
 80025c6:	2301      	movs	r3, #1
 80025c8:	9305      	str	r3, [sp, #20]
 80025ca:	2300      	movs	r3, #0
 80025cc:	9304      	str	r3, [sp, #16]
 80025ce:	23c8      	movs	r3, #200	; 0xc8
 80025d0:	9303      	str	r3, [sp, #12]
 80025d2:	2300      	movs	r3, #0
 80025d4:	9302      	str	r3, [sp, #8]
 80025d6:	2301      	movs	r3, #1
 80025d8:	9301      	str	r3, [sp, #4]
 80025da:	2300      	movs	r3, #0
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80025e2:	2200      	movs	r2, #0
 80025e4:	2101      	movs	r1, #1
 80025e6:	2000      	movs	r0, #0
 80025e8:	f7fe fe3c 	bl	8001264 <ControlDriver>
			osDelay(1000);
 80025ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025f0:	f005 fb93 	bl	8007d1a <osDelay>
			loadingProcess();
 80025f4:	f7ff ff36 	bl	8002464 <loadingProcess>
			RotatePid = 0;
 80025f8:	4b46      	ldr	r3, [pc, #280]	; (8002714 <StartDefaultTask+0x26c>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
			if(gunReady){
 80025fe:	4b47      	ldr	r3, [pc, #284]	; (800271c <StartDefaultTask+0x274>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d005      	beq.n	8002612 <StartDefaultTask+0x16a>
			ControlGun(3);
 8002606:	2003      	movs	r0, #3
 8002608:	f7fe feec 	bl	80013e4 <ControlGun>
			gunReady = 0;
 800260c:	4b43      	ldr	r3, [pc, #268]	; (800271c <StartDefaultTask+0x274>)
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
			}
		}if(DataTayGame[1]== 4&&DataTayGame[2]==0){
 8002612:	4b3f      	ldr	r3, [pc, #252]	; (8002710 <StartDefaultTask+0x268>)
 8002614:	785b      	ldrb	r3, [r3, #1]
 8002616:	2b04      	cmp	r3, #4
 8002618:	d134      	bne.n	8002684 <StartDefaultTask+0x1dc>
 800261a:	4b3d      	ldr	r3, [pc, #244]	; (8002710 <StartDefaultTask+0x268>)
 800261c:	789b      	ldrb	r3, [r3, #2]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d130      	bne.n	8002684 <StartDefaultTask+0x1dc>
			RotatePid = 0;
 8002622:	4b3c      	ldr	r3, [pc, #240]	; (8002714 <StartDefaultTask+0x26c>)
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
			forward = 0;
 8002628:	4b3b      	ldr	r3, [pc, #236]	; (8002718 <StartDefaultTask+0x270>)
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
			ControlDriver(0, 1, 0, 400, 0, 1, 0, 200, 0, 1, 0, 300);
 800262e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002632:	9307      	str	r3, [sp, #28]
 8002634:	2300      	movs	r3, #0
 8002636:	9306      	str	r3, [sp, #24]
 8002638:	2301      	movs	r3, #1
 800263a:	9305      	str	r3, [sp, #20]
 800263c:	2300      	movs	r3, #0
 800263e:	9304      	str	r3, [sp, #16]
 8002640:	23c8      	movs	r3, #200	; 0xc8
 8002642:	9303      	str	r3, [sp, #12]
 8002644:	2300      	movs	r3, #0
 8002646:	9302      	str	r3, [sp, #8]
 8002648:	2301      	movs	r3, #1
 800264a:	9301      	str	r3, [sp, #4]
 800264c:	2300      	movs	r3, #0
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002654:	2200      	movs	r2, #0
 8002656:	2101      	movs	r1, #1
 8002658:	2000      	movs	r0, #0
 800265a:	f7fe fe03 	bl	8001264 <ControlDriver>
			osDelay(1000);
 800265e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002662:	f005 fb5a 	bl	8007d1a <osDelay>
			loadingProcess();
 8002666:	f7ff fefd 	bl	8002464 <loadingProcess>
			RotatePid = 0;
 800266a:	4b2a      	ldr	r3, [pc, #168]	; (8002714 <StartDefaultTask+0x26c>)
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
			if(gunReady){
 8002670:	4b2a      	ldr	r3, [pc, #168]	; (800271c <StartDefaultTask+0x274>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <StartDefaultTask+0x1dc>
			ControlGun(6);
 8002678:	2006      	movs	r0, #6
 800267a:	f7fe feb3 	bl	80013e4 <ControlGun>
			gunReady = 0;
 800267e:	4b27      	ldr	r3, [pc, #156]	; (800271c <StartDefaultTask+0x274>)
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]
			}
		}

		if(DataTayGame[1]== 0&&DataTayGame[2]==64){
 8002684:	4b22      	ldr	r3, [pc, #136]	; (8002710 <StartDefaultTask+0x268>)
 8002686:	785b      	ldrb	r3, [r3, #1]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d127      	bne.n	80026dc <StartDefaultTask+0x234>
 800268c:	4b20      	ldr	r3, [pc, #128]	; (8002710 <StartDefaultTask+0x268>)
 800268e:	789b      	ldrb	r3, [r3, #2]
 8002690:	2b40      	cmp	r3, #64	; 0x40
 8002692:	d123      	bne.n	80026dc <StartDefaultTask+0x234>
			osDelay(20);
 8002694:	2014      	movs	r0, #20
 8002696:	f005 fb40 	bl	8007d1a <osDelay>
			if(DataTayGame[1]== 0&&DataTayGame[2]==64){
 800269a:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <StartDefaultTask+0x268>)
 800269c:	785b      	ldrb	r3, [r3, #1]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d11c      	bne.n	80026dc <StartDefaultTask+0x234>
 80026a2:	4b1b      	ldr	r3, [pc, #108]	; (8002710 <StartDefaultTask+0x268>)
 80026a4:	789b      	ldrb	r3, [r3, #2]
 80026a6:	2b40      	cmp	r3, #64	; 0x40
 80026a8:	d118      	bne.n	80026dc <StartDefaultTask+0x234>
			switchmode += 1;
 80026aa:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <StartDefaultTask+0x278>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	3301      	adds	r3, #1
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	4b1b      	ldr	r3, [pc, #108]	; (8002720 <StartDefaultTask+0x278>)
 80026b4:	701a      	strb	r2, [r3, #0]
			fuzzy = 0;
 80026b6:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <StartDefaultTask+0x27c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]
			if (switchmode >3)switchmode = 0;
 80026bc:	4b18      	ldr	r3, [pc, #96]	; (8002720 <StartDefaultTask+0x278>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b03      	cmp	r3, #3
 80026c2:	d902      	bls.n	80026ca <StartDefaultTask+0x222>
 80026c4:	4b16      	ldr	r3, [pc, #88]	; (8002720 <StartDefaultTask+0x278>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
			while((DataTayGame[1]== 0&&DataTayGame[2]==64)){}
 80026ca:	bf00      	nop
 80026cc:	4b10      	ldr	r3, [pc, #64]	; (8002710 <StartDefaultTask+0x268>)
 80026ce:	785b      	ldrb	r3, [r3, #1]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d103      	bne.n	80026dc <StartDefaultTask+0x234>
 80026d4:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <StartDefaultTask+0x268>)
 80026d6:	789b      	ldrb	r3, [r3, #2]
 80026d8:	2b40      	cmp	r3, #64	; 0x40
 80026da:	d0f7      	beq.n	80026cc <StartDefaultTask+0x224>
			}
		}

//lmao
	  /*Nhấn nút F1*/
	  if(DataTayGame[7] == 128 && !DangThucThi){
 80026dc:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <StartDefaultTask+0x268>)
 80026de:	79db      	ldrb	r3, [r3, #7]
 80026e0:	2b80      	cmp	r3, #128	; 0x80
 80026e2:	f040 8167 	bne.w	80029b4 <StartDefaultTask+0x50c>
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <StartDefaultTask+0x280>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f040 8162 	bne.w	80029b4 <StartDefaultTask+0x50c>
		  step = 0;
 80026f0:	4b0e      	ldr	r3, [pc, #56]	; (800272c <StartDefaultTask+0x284>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	701a      	strb	r2, [r3, #0]
		  if(trangthai == 0){
 80026f6:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <StartDefaultTask+0x288>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d11c      	bne.n	8002738 <StartDefaultTask+0x290>
			  up = 2;
 80026fe:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <StartDefaultTask+0x28c>)
 8002700:	2202      	movs	r2, #2
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	e14d      	b.n	80029a2 <StartDefaultTask+0x4fa>
 8002706:	bf00      	nop
 8002708:	40020800 	.word	0x40020800
 800270c:	20000760 	.word	0x20000760
 8002710:	200006ac 	.word	0x200006ac
 8002714:	20000688 	.word	0x20000688
 8002718:	20000640 	.word	0x20000640
 800271c:	20000775 	.word	0x20000775
 8002720:	20000779 	.word	0x20000779
 8002724:	2000068e 	.word	0x2000068e
 8002728:	200006bc 	.word	0x200006bc
 800272c:	20000776 	.word	0x20000776
 8002730:	20000777 	.word	0x20000777
 8002734:	20000768 	.word	0x20000768
		  }
		  else if(trangthai == 1){
 8002738:	4b8b      	ldr	r3, [pc, #556]	; (8002968 <StartDefaultTask+0x4c0>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b01      	cmp	r3, #1
 800273e:	f040 80ad 	bne.w	800289c <StartDefaultTask+0x3f4>
			  up = 3;
 8002742:	4b8a      	ldr	r3, [pc, #552]	; (800296c <StartDefaultTask+0x4c4>)
 8002744:	2203      	movs	r2, #3
 8002746:	601a      	str	r2, [r3, #0]
			  forward = 0;
 8002748:	4b89      	ldr	r3, [pc, #548]	; (8002970 <StartDefaultTask+0x4c8>)
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
			  RotatePid = 0;
 800274e:	4b89      	ldr	r3, [pc, #548]	; (8002974 <StartDefaultTask+0x4cc>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
			  ControlDriver(0, 1, 0, 300, 0, 1, 0, 300, 0, 1, 0, 300);
 8002754:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002758:	9307      	str	r3, [sp, #28]
 800275a:	2300      	movs	r3, #0
 800275c:	9306      	str	r3, [sp, #24]
 800275e:	2301      	movs	r3, #1
 8002760:	9305      	str	r3, [sp, #20]
 8002762:	2300      	movs	r3, #0
 8002764:	9304      	str	r3, [sp, #16]
 8002766:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800276a:	9303      	str	r3, [sp, #12]
 800276c:	2300      	movs	r3, #0
 800276e:	9302      	str	r3, [sp, #8]
 8002770:	2301      	movs	r3, #1
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	2300      	movs	r3, #0
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800277c:	2200      	movs	r2, #0
 800277e:	2101      	movs	r1, #1
 8002780:	2000      	movs	r0, #0
 8002782:	f7fe fd6f 	bl	8001264 <ControlDriver>
			  osDelay(4500);
 8002786:	f241 1094 	movw	r0, #4500	; 0x1194
 800278a:	f005 fac6 	bl	8007d1a <osDelay>

			  // #2 chay thang trong 3.8s
			  goc_target = 6;
 800278e:	4b7a      	ldr	r3, [pc, #488]	; (8002978 <StartDefaultTask+0x4d0>)
 8002790:	2206      	movs	r2, #6
 8002792:	601a      	str	r2, [r3, #0]
			  forward = 1;
 8002794:	4b76      	ldr	r3, [pc, #472]	; (8002970 <StartDefaultTask+0x4c8>)
 8002796:	2201      	movs	r2, #1
 8002798:	601a      	str	r2, [r3, #0]
			  v_t = 140;
 800279a:	4b78      	ldr	r3, [pc, #480]	; (800297c <StartDefaultTask+0x4d4>)
 800279c:	228c      	movs	r2, #140	; 0x8c
 800279e:	601a      	str	r2, [r3, #0]
			  osDelay(8200);
 80027a0:	f242 0008 	movw	r0, #8200	; 0x2008
 80027a4:	f005 fab9 	bl	8007d1a <osDelay>
			  // #3 thang gap trong 550ms
			  v_t = 0;
 80027a8:	4b74      	ldr	r3, [pc, #464]	; (800297c <StartDefaultTask+0x4d4>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
			  osDelay(500);
 80027ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027b2:	f005 fab2 	bl	8007d1a <osDelay>
			  forward = 0;
 80027b6:	4b6e      	ldr	r3, [pc, #440]	; (8002970 <StartDefaultTask+0x4c8>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
			  RotatePid = 0;
 80027bc:	4b6d      	ldr	r3, [pc, #436]	; (8002974 <StartDefaultTask+0x4cc>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
			  // #4 tha troi trong 3s
			  ControlDriver(0, 1, 0, (300-2*e1), 0, 1, 0, (300-2*e1), 0, 1, 0, (300+2*e1));
 80027c2:	4b6f      	ldr	r3, [pc, #444]	; (8002980 <StartDefaultTask+0x4d8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	b299      	uxth	r1, r3
 80027d0:	4b6b      	ldr	r3, [pc, #428]	; (8002980 <StartDefaultTask+0x4d8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80027d8:	b29b      	uxth	r3, r3
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	b29b      	uxth	r3, r3
 80027de:	4a68      	ldr	r2, [pc, #416]	; (8002980 <StartDefaultTask+0x4d8>)
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	3296      	adds	r2, #150	; 0x96
 80027e4:	b292      	uxth	r2, r2
 80027e6:	0052      	lsls	r2, r2, #1
 80027e8:	b292      	uxth	r2, r2
 80027ea:	9207      	str	r2, [sp, #28]
 80027ec:	2200      	movs	r2, #0
 80027ee:	9206      	str	r2, [sp, #24]
 80027f0:	2201      	movs	r2, #1
 80027f2:	9205      	str	r2, [sp, #20]
 80027f4:	2200      	movs	r2, #0
 80027f6:	9204      	str	r2, [sp, #16]
 80027f8:	9303      	str	r3, [sp, #12]
 80027fa:	2300      	movs	r3, #0
 80027fc:	9302      	str	r3, [sp, #8]
 80027fe:	2301      	movs	r3, #1
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	2300      	movs	r3, #0
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	460b      	mov	r3, r1
 8002808:	2200      	movs	r2, #0
 800280a:	2101      	movs	r1, #1
 800280c:	2000      	movs	r0, #0
 800280e:	f7fe fd29 	bl	8001264 <ControlDriver>
			  osDelay(1000);
 8002812:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002816:	f005 fa80 	bl	8007d1a <osDelay>
			  ControlDriver(0, 1, 0, (300), 0, 1, 0, (300), 0, 1, 0, (300));
 800281a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800281e:	9307      	str	r3, [sp, #28]
 8002820:	2300      	movs	r3, #0
 8002822:	9306      	str	r3, [sp, #24]
 8002824:	2301      	movs	r3, #1
 8002826:	9305      	str	r3, [sp, #20]
 8002828:	2300      	movs	r3, #0
 800282a:	9304      	str	r3, [sp, #16]
 800282c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002830:	9303      	str	r3, [sp, #12]
 8002832:	2300      	movs	r3, #0
 8002834:	9302      	str	r3, [sp, #8]
 8002836:	2301      	movs	r3, #1
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	2300      	movs	r3, #0
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002842:	2200      	movs	r2, #0
 8002844:	2101      	movs	r1, #1
 8002846:	2000      	movs	r0, #0
 8002848:	f7fe fd0c 	bl	8001264 <ControlDriver>
			  osDelay(2000);
 800284c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002850:	f005 fa63 	bl	8007d1a <osDelay>
			  // #5 quay 20 do
			  ControlDriver(0, 1, 0, (200), 0, 1, 0, (400), 0, 1, 0, (600));
 8002854:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002858:	9307      	str	r3, [sp, #28]
 800285a:	2300      	movs	r3, #0
 800285c:	9306      	str	r3, [sp, #24]
 800285e:	2301      	movs	r3, #1
 8002860:	9305      	str	r3, [sp, #20]
 8002862:	2300      	movs	r3, #0
 8002864:	9304      	str	r3, [sp, #16]
 8002866:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800286a:	9303      	str	r3, [sp, #12]
 800286c:	2300      	movs	r3, #0
 800286e:	9302      	str	r3, [sp, #8]
 8002870:	2301      	movs	r3, #1
 8002872:	9301      	str	r3, [sp, #4]
 8002874:	2300      	movs	r3, #0
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	23c8      	movs	r3, #200	; 0xc8
 800287a:	2200      	movs	r2, #0
 800287c:	2101      	movs	r1, #1
 800287e:	2000      	movs	r0, #0
 8002880:	f7fe fcf0 	bl	8001264 <ControlDriver>
			  osDelay(2000);
 8002884:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002888:	f005 fa47 	bl	8007d1a <osDelay>
			  goc_target2 = -45;//-30
 800288c:	4b3d      	ldr	r3, [pc, #244]	; (8002984 <StartDefaultTask+0x4dc>)
 800288e:	f06f 022c 	mvn.w	r2, #44	; 0x2c
 8002892:	601a      	str	r2, [r3, #0]

			  RotatePid = 1;
 8002894:	4b37      	ldr	r3, [pc, #220]	; (8002974 <StartDefaultTask+0x4cc>)
 8002896:	2201      	movs	r2, #1
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	e082      	b.n	80029a2 <StartDefaultTask+0x4fa>
		  }
		  else if (trangthai == 2){
 800289c:	4b32      	ldr	r3, [pc, #200]	; (8002968 <StartDefaultTask+0x4c0>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d109      	bne.n	80028b8 <StartDefaultTask+0x410>

		  			  forward = 0;
 80028a4:	4b32      	ldr	r3, [pc, #200]	; (8002970 <StartDefaultTask+0x4c8>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
		  			  RotatePid = 0;
 80028aa:	4b32      	ldr	r3, [pc, #200]	; (8002974 <StartDefaultTask+0x4cc>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
		  			  POS_target = -500;
 80028b0:	4b35      	ldr	r3, [pc, #212]	; (8002988 <StartDefaultTask+0x4e0>)
 80028b2:	4a36      	ldr	r2, [pc, #216]	; (800298c <StartDefaultTask+0x4e4>)
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	e074      	b.n	80029a2 <StartDefaultTask+0x4fa>

		  		  }
		  else if (trangthai == 3){
 80028b8:	4b2b      	ldr	r3, [pc, #172]	; (8002968 <StartDefaultTask+0x4c0>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d109      	bne.n	80028d4 <StartDefaultTask+0x42c>

			  forward = 0;
 80028c0:	4b2b      	ldr	r3, [pc, #172]	; (8002970 <StartDefaultTask+0x4c8>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
			  RotatePid = 0;
 80028c6:	4b2b      	ldr	r3, [pc, #172]	; (8002974 <StartDefaultTask+0x4cc>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
			  up = 2;
 80028cc:	4b27      	ldr	r3, [pc, #156]	; (800296c <StartDefaultTask+0x4c4>)
 80028ce:	2202      	movs	r2, #2
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	e066      	b.n	80029a2 <StartDefaultTask+0x4fa>

		  }
		  else if (trangthai == 4){
 80028d4:	4b24      	ldr	r3, [pc, #144]	; (8002968 <StartDefaultTask+0x4c0>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d15b      	bne.n	8002994 <StartDefaultTask+0x4ec>
			  forward = 0;
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <StartDefaultTask+0x4c8>)
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
			  RotatePid = 0;
 80028e2:	4b24      	ldr	r3, [pc, #144]	; (8002974 <StartDefaultTask+0x4cc>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
			  ControlDriver(0, 1, 0, 300, 0, 1, 0, 300, 0, 1, 0, 300);
 80028e8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80028ec:	9307      	str	r3, [sp, #28]
 80028ee:	2300      	movs	r3, #0
 80028f0:	9306      	str	r3, [sp, #24]
 80028f2:	2301      	movs	r3, #1
 80028f4:	9305      	str	r3, [sp, #20]
 80028f6:	2300      	movs	r3, #0
 80028f8:	9304      	str	r3, [sp, #16]
 80028fa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80028fe:	9303      	str	r3, [sp, #12]
 8002900:	2300      	movs	r3, #0
 8002902:	9302      	str	r3, [sp, #8]
 8002904:	2301      	movs	r3, #1
 8002906:	9301      	str	r3, [sp, #4]
 8002908:	2300      	movs	r3, #0
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002910:	2200      	movs	r2, #0
 8002912:	2101      	movs	r1, #1
 8002914:	2000      	movs	r0, #0
 8002916:	f7fe fca5 	bl	8001264 <ControlDriver>
			  osDelay(1000);
 800291a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800291e:	f005 f9fc 	bl	8007d1a <osDelay>
			  goc_target = GocRobot;//-30
 8002922:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <StartDefaultTask+0x4e8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a14      	ldr	r2, [pc, #80]	; (8002978 <StartDefaultTask+0x4d0>)
 8002928:	6013      	str	r3, [r2, #0]
			  forward = 1;
 800292a:	4b11      	ldr	r3, [pc, #68]	; (8002970 <StartDefaultTask+0x4c8>)
 800292c:	2201      	movs	r2, #1
 800292e:	601a      	str	r2, [r3, #0]
			  v_t = 20;
 8002930:	4b12      	ldr	r3, [pc, #72]	; (800297c <StartDefaultTask+0x4d4>)
 8002932:	2214      	movs	r2, #20
 8002934:	601a      	str	r2, [r3, #0]
			  batvong();
 8002936:	f7ff faa3 	bl	8001e80 <batvong>
		      POS_target = -40;
 800293a:	4b13      	ldr	r3, [pc, #76]	; (8002988 <StartDefaultTask+0x4e0>)
 800293c:	f06f 0227 	mvn.w	r2, #39	; 0x27
 8002940:	601a      	str	r2, [r3, #0]
		      osDelay(1000);
 8002942:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002946:	f005 f9e8 	bl	8007d1a <osDelay>
		      forward = 1;
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <StartDefaultTask+0x4c8>)
 800294c:	2201      	movs	r2, #1
 800294e:	601a      	str	r2, [r3, #0]
		      v_t = 25;
 8002950:	4b0a      	ldr	r3, [pc, #40]	; (800297c <StartDefaultTask+0x4d4>)
 8002952:	2219      	movs	r2, #25
 8002954:	601a      	str	r2, [r3, #0]
		      osDelay(1000);
 8002956:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800295a:	f005 f9de 	bl	8007d1a <osDelay>
		      v_t = 0;
 800295e:	4b07      	ldr	r3, [pc, #28]	; (800297c <StartDefaultTask+0x4d4>)
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	e01d      	b.n	80029a2 <StartDefaultTask+0x4fa>
 8002966:	bf00      	nop
 8002968:	20000777 	.word	0x20000777
 800296c:	20000768 	.word	0x20000768
 8002970:	20000640 	.word	0x20000640
 8002974:	20000688 	.word	0x20000688
 8002978:	20000638 	.word	0x20000638
 800297c:	20000644 	.word	0x20000644
 8002980:	20000650 	.word	0x20000650
 8002984:	2000064c 	.word	0x2000064c
 8002988:	20000710 	.word	0x20000710
 800298c:	fffffe0c 	.word	0xfffffe0c
 8002990:	200006b8 	.word	0x200006b8



		  }
		  else if (trangthai == 5){
 8002994:	4b94      	ldr	r3, [pc, #592]	; (8002be8 <StartDefaultTask+0x740>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b05      	cmp	r3, #5
 800299a:	d102      	bne.n	80029a2 <StartDefaultTask+0x4fa>
			  up = 3;
 800299c:	4b93      	ldr	r3, [pc, #588]	; (8002bec <StartDefaultTask+0x744>)
 800299e:	2203      	movs	r2, #3
 80029a0:	601a      	str	r2, [r3, #0]
		  }
		  trangthai++;
 80029a2:	4b91      	ldr	r3, [pc, #580]	; (8002be8 <StartDefaultTask+0x740>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	3301      	adds	r3, #1
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	4b8f      	ldr	r3, [pc, #572]	; (8002be8 <StartDefaultTask+0x740>)
 80029ac:	701a      	strb	r2, [r3, #0]
		  DangThucThi = 1;
 80029ae:	4b90      	ldr	r3, [pc, #576]	; (8002bf0 <StartDefaultTask+0x748>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
	  }

////
	  /*Nhấn nút F2*/
	  if(DataTayGame[7] == 64 && !DangThucThi){
 80029b4:	4b8f      	ldr	r3, [pc, #572]	; (8002bf4 <StartDefaultTask+0x74c>)
 80029b6:	79db      	ldrb	r3, [r3, #7]
 80029b8:	2b40      	cmp	r3, #64	; 0x40
 80029ba:	d170      	bne.n	8002a9e <StartDefaultTask+0x5f6>
 80029bc:	4b8c      	ldr	r3, [pc, #560]	; (8002bf0 <StartDefaultTask+0x748>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d16c      	bne.n	8002a9e <StartDefaultTask+0x5f6>
		  if(trangthai2==0){
 80029c4:	4b8c      	ldr	r3, [pc, #560]	; (8002bf8 <StartDefaultTask+0x750>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d131      	bne.n	8002a30 <StartDefaultTask+0x588>
			  POS_target = count1;
 80029cc:	4b8b      	ldr	r3, [pc, #556]	; (8002bfc <StartDefaultTask+0x754>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a8b      	ldr	r2, [pc, #556]	; (8002c00 <StartDefaultTask+0x758>)
 80029d2:	6013      	str	r3, [r2, #0]
			step = 1;
 80029d4:	4b8b      	ldr	r3, [pc, #556]	; (8002c04 <StartDefaultTask+0x75c>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	701a      	strb	r2, [r3, #0]
			//#1 quay goc on dinh banh xe trong 2s
			forward = 0;
 80029da:	4b8b      	ldr	r3, [pc, #556]	; (8002c08 <StartDefaultTask+0x760>)
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
			RotatePid = 0;
 80029e0:	4b8a      	ldr	r3, [pc, #552]	; (8002c0c <StartDefaultTask+0x764>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
			ControlDriver(0, 1, 0, 200, 0, -1, 0, 400, 0, 1, 0, 600);
 80029e6:	f44f 7316 	mov.w	r3, #600	; 0x258
 80029ea:	9307      	str	r3, [sp, #28]
 80029ec:	2300      	movs	r3, #0
 80029ee:	9306      	str	r3, [sp, #24]
 80029f0:	2301      	movs	r3, #1
 80029f2:	9305      	str	r3, [sp, #20]
 80029f4:	2300      	movs	r3, #0
 80029f6:	9304      	str	r3, [sp, #16]
 80029f8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80029fc:	9303      	str	r3, [sp, #12]
 80029fe:	2300      	movs	r3, #0
 8002a00:	9302      	str	r3, [sp, #8]
 8002a02:	f04f 33ff 	mov.w	r3, #4294967295
 8002a06:	9301      	str	r3, [sp, #4]
 8002a08:	2300      	movs	r3, #0
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	23c8      	movs	r3, #200	; 0xc8
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2101      	movs	r1, #1
 8002a12:	2000      	movs	r0, #0
 8002a14:	f7fe fc26 	bl	8001264 <ControlDriver>
			osDelay(1000);
 8002a18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a1c:	f005 f97d 	bl	8007d1a <osDelay>
			//#2 quay goc trong 8s
			goc_target2 = -90;
 8002a20:	4b7b      	ldr	r3, [pc, #492]	; (8002c10 <StartDefaultTask+0x768>)
 8002a22:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8002a26:	601a      	str	r2, [r3, #0]
			RotatePid = 1;
 8002a28:	4b78      	ldr	r3, [pc, #480]	; (8002c0c <StartDefaultTask+0x764>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	e02d      	b.n	8002a8c <StartDefaultTask+0x5e4>
		  }

		  else if(trangthai2 == 1){
 8002a30:	4b71      	ldr	r3, [pc, #452]	; (8002bf8 <StartDefaultTask+0x750>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d129      	bne.n	8002a8c <StartDefaultTask+0x5e4>
			//#3 quay goc on donh banh xe trong 2s
			RotatePid = 0;
 8002a38:	4b74      	ldr	r3, [pc, #464]	; (8002c0c <StartDefaultTask+0x764>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
			ControlDriver(0, 1, 0, 74, 0, 1, 0, 74, 0, 1, 0, 74);
 8002a3e:	234a      	movs	r3, #74	; 0x4a
 8002a40:	9307      	str	r3, [sp, #28]
 8002a42:	2300      	movs	r3, #0
 8002a44:	9306      	str	r3, [sp, #24]
 8002a46:	2301      	movs	r3, #1
 8002a48:	9305      	str	r3, [sp, #20]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	9304      	str	r3, [sp, #16]
 8002a4e:	234a      	movs	r3, #74	; 0x4a
 8002a50:	9303      	str	r3, [sp, #12]
 8002a52:	2300      	movs	r3, #0
 8002a54:	9302      	str	r3, [sp, #8]
 8002a56:	2301      	movs	r3, #1
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	234a      	movs	r3, #74	; 0x4a
 8002a60:	2200      	movs	r2, #0
 8002a62:	2101      	movs	r1, #1
 8002a64:	2000      	movs	r0, #0
 8002a66:	f7fe fbfd 	bl	8001264 <ControlDriver>
			osDelay(2000);
 8002a6a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a6e:	f005 f954 	bl	8007d1a <osDelay>
			//#4 chay theo goc -90
			goc_target = GocRobot;
 8002a72:	4b68      	ldr	r3, [pc, #416]	; (8002c14 <StartDefaultTask+0x76c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a68      	ldr	r2, [pc, #416]	; (8002c18 <StartDefaultTask+0x770>)
 8002a78:	6013      	str	r3, [r2, #0]
			batthanh();
 8002a7a:	f7ff f957 	bl	8001d2c <batthanh>
			goc_target2 = -90;
 8002a7e:	4b64      	ldr	r3, [pc, #400]	; (8002c10 <StartDefaultTask+0x768>)
 8002a80:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8002a84:	601a      	str	r2, [r3, #0]
			RotatePid = 1;
 8002a86:	4b61      	ldr	r3, [pc, #388]	; (8002c0c <StartDefaultTask+0x764>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]
			}
			trangthai2 ++;
 8002a8c:	4b5a      	ldr	r3, [pc, #360]	; (8002bf8 <StartDefaultTask+0x750>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	3301      	adds	r3, #1
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	4b58      	ldr	r3, [pc, #352]	; (8002bf8 <StartDefaultTask+0x750>)
 8002a96:	701a      	strb	r2, [r3, #0]
			DangThucThi = 1;
 8002a98:	4b55      	ldr	r3, [pc, #340]	; (8002bf0 <StartDefaultTask+0x748>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
		}
////
////	  /*Nhấn nút F3*/
	if(DataTayGame[7] == 32 && !DangThucThi){
 8002a9e:	4b55      	ldr	r3, [pc, #340]	; (8002bf4 <StartDefaultTask+0x74c>)
 8002aa0:	79db      	ldrb	r3, [r3, #7]
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	d15c      	bne.n	8002b60 <StartDefaultTask+0x6b8>
 8002aa6:	4b52      	ldr	r3, [pc, #328]	; (8002bf0 <StartDefaultTask+0x748>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d158      	bne.n	8002b60 <StartDefaultTask+0x6b8>
		step = 2;
 8002aae:	4b55      	ldr	r3, [pc, #340]	; (8002c04 <StartDefaultTask+0x75c>)
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	701a      	strb	r2, [r3, #0]
		forward = 0;
 8002ab4:	4b54      	ldr	r3, [pc, #336]	; (8002c08 <StartDefaultTask+0x760>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
		RotatePid = 0;
 8002aba:	4b54      	ldr	r3, [pc, #336]	; (8002c0c <StartDefaultTask+0x764>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
        goc_target = -90;
 8002ac0:	4b55      	ldr	r3, [pc, #340]	; (8002c18 <StartDefaultTask+0x770>)
 8002ac2:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8002ac6:	601a      	str	r2, [r3, #0]
		ControlDriver(0, 1, 0, 600, 0, 1, 0, 600, 0, 1, 0, 600);
 8002ac8:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002acc:	9307      	str	r3, [sp, #28]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	9306      	str	r3, [sp, #24]
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	9305      	str	r3, [sp, #20]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	9304      	str	r3, [sp, #16]
 8002ada:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002ade:	9303      	str	r3, [sp, #12]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	9302      	str	r3, [sp, #8]
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	9301      	str	r3, [sp, #4]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002af0:	2200      	movs	r2, #0
 8002af2:	2101      	movs	r1, #1
 8002af4:	2000      	movs	r0, #0
 8002af6:	f7fe fbb5 	bl	8001264 <ControlDriver>
		osDelay(2000);
 8002afa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002afe:	f005 f90c 	bl	8007d1a <osDelay>
		goc_target = pre_t;
 8002b02:	4b46      	ldr	r3, [pc, #280]	; (8002c1c <StartDefaultTask+0x774>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a44      	ldr	r2, [pc, #272]	; (8002c18 <StartDefaultTask+0x770>)
 8002b08:	6013      	str	r3, [r2, #0]
		v_t = 35;
 8002b0a:	4b45      	ldr	r3, [pc, #276]	; (8002c20 <StartDefaultTask+0x778>)
 8002b0c:	2223      	movs	r2, #35	; 0x23
 8002b0e:	601a      	str	r2, [r3, #0]
		forward = 3 ;
 8002b10:	4b3d      	ldr	r3, [pc, #244]	; (8002c08 <StartDefaultTask+0x760>)
 8002b12:	2203      	movs	r2, #3
 8002b14:	601a      	str	r2, [r3, #0]
		osDelay(2000);
 8002b16:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b1a:	f005 f8fe 	bl	8007d1a <osDelay>
		batcot();
 8002b1e:	f7ff f94b 	bl	8001db8 <batcot>
		ControlDriver(0, 1, 0, 600, 0, 1, 0, 600, 0, 1, 0, 600);
 8002b22:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002b26:	9307      	str	r3, [sp, #28]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	9306      	str	r3, [sp, #24]
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	9305      	str	r3, [sp, #20]
 8002b30:	2300      	movs	r3, #0
 8002b32:	9304      	str	r3, [sp, #16]
 8002b34:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002b38:	9303      	str	r3, [sp, #12]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	9302      	str	r3, [sp, #8]
 8002b3e:	2301      	movs	r3, #1
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	2300      	movs	r3, #0
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f7fe fb88 	bl	8001264 <ControlDriver>
		 antinoise = 0;
 8002b54:	4b33      	ldr	r3, [pc, #204]	; (8002c24 <StartDefaultTask+0x77c>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
		DangThucThi = 1;
 8002b5a:	4b25      	ldr	r3, [pc, #148]	; (8002bf0 <StartDefaultTask+0x748>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]
	}
////
//	  /*Nhấn nút F4*/
		if(DataTayGame[7] == 16 && !DangThucThi){
 8002b60:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <StartDefaultTask+0x74c>)
 8002b62:	79db      	ldrb	r3, [r3, #7]
 8002b64:	2b10      	cmp	r3, #16
 8002b66:	f040 80cf 	bne.w	8002d08 <StartDefaultTask+0x860>
 8002b6a:	4b21      	ldr	r3, [pc, #132]	; (8002bf0 <StartDefaultTask+0x748>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f040 80ca 	bne.w	8002d08 <StartDefaultTask+0x860>
			if(switchmode == 0){
 8002b74:	4b2c      	ldr	r3, [pc, #176]	; (8002c28 <StartDefaultTask+0x780>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d157      	bne.n	8002c2c <StartDefaultTask+0x784>
			forward = 0;
 8002b7c:	4b22      	ldr	r3, [pc, #136]	; (8002c08 <StartDefaultTask+0x760>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
			RotatePid = 0;
 8002b82:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <StartDefaultTask+0x764>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
			ControlDriver(0, 1, 0, 600, 0, 1, 0, 600, 0, 1, 0, 600);
 8002b88:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002b8c:	9307      	str	r3, [sp, #28]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	9306      	str	r3, [sp, #24]
 8002b92:	2301      	movs	r3, #1
 8002b94:	9305      	str	r3, [sp, #20]
 8002b96:	2300      	movs	r3, #0
 8002b98:	9304      	str	r3, [sp, #16]
 8002b9a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002b9e:	9303      	str	r3, [sp, #12]
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	9302      	str	r3, [sp, #8]
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	9301      	str	r3, [sp, #4]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f7fe fb55 	bl	8001264 <ControlDriver>
			osDelay(1000);
 8002bba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bbe:	f005 f8ac 	bl	8007d1a <osDelay>
			goc_target = pre_t;
 8002bc2:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <StartDefaultTask+0x774>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a14      	ldr	r2, [pc, #80]	; (8002c18 <StartDefaultTask+0x770>)
 8002bc8:	6013      	str	r3, [r2, #0]
			v_t = 22;
 8002bca:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <StartDefaultTask+0x778>)
 8002bcc:	2216      	movs	r2, #22
 8002bce:	601a      	str	r2, [r3, #0]
			forward = 3 ;
 8002bd0:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <StartDefaultTask+0x760>)
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	601a      	str	r2, [r3, #0]
			osDelay(800);
 8002bd6:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002bda:	f005 f89e 	bl	8007d1a <osDelay>
			v_t = 0;
 8002bde:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <StartDefaultTask+0x778>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	e08d      	b.n	8002d02 <StartDefaultTask+0x85a>
 8002be6:	bf00      	nop
 8002be8:	20000777 	.word	0x20000777
 8002bec:	20000768 	.word	0x20000768
 8002bf0:	200006bc 	.word	0x200006bc
 8002bf4:	200006ac 	.word	0x200006ac
 8002bf8:	20000778 	.word	0x20000778
 8002bfc:	20000764 	.word	0x20000764
 8002c00:	20000710 	.word	0x20000710
 8002c04:	20000776 	.word	0x20000776
 8002c08:	20000640 	.word	0x20000640
 8002c0c:	20000688 	.word	0x20000688
 8002c10:	2000064c 	.word	0x2000064c
 8002c14:	200006b8 	.word	0x200006b8
 8002c18:	20000638 	.word	0x20000638
 8002c1c:	20000010 	.word	0x20000010
 8002c20:	20000644 	.word	0x20000644
 8002c24:	200006fc 	.word	0x200006fc
 8002c28:	20000779 	.word	0x20000779
			}
			else if(switchmode == 1){
 8002c2c:	4b98      	ldr	r3, [pc, #608]	; (8002e90 <StartDefaultTask+0x9e8>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d12e      	bne.n	8002c92 <StartDefaultTask+0x7ea>
				fuzzy = 1;
 8002c34:	4b97      	ldr	r3, [pc, #604]	; (8002e94 <StartDefaultTask+0x9ec>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	701a      	strb	r2, [r3, #0]
				forward = 0;
 8002c3a:	4b97      	ldr	r3, [pc, #604]	; (8002e98 <StartDefaultTask+0x9f0>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
				RotatePid = 0;
 8002c40:	4b96      	ldr	r3, [pc, #600]	; (8002e9c <StartDefaultTask+0x9f4>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
				ControlDriver(0, 1, 0, 200, 0, -1, 0, 400, 0, 1, 0, 600);
 8002c46:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002c4a:	9307      	str	r3, [sp, #28]
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	9306      	str	r3, [sp, #24]
 8002c50:	2301      	movs	r3, #1
 8002c52:	9305      	str	r3, [sp, #20]
 8002c54:	2300      	movs	r3, #0
 8002c56:	9304      	str	r3, [sp, #16]
 8002c58:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002c5c:	9303      	str	r3, [sp, #12]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	9302      	str	r3, [sp, #8]
 8002c62:	f04f 33ff 	mov.w	r3, #4294967295
 8002c66:	9301      	str	r3, [sp, #4]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	23c8      	movs	r3, #200	; 0xc8
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2101      	movs	r1, #1
 8002c72:	2000      	movs	r0, #0
 8002c74:	f7fe faf6 	bl	8001264 <ControlDriver>
				osDelay(1000);
 8002c78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c7c:	f005 f84d 	bl	8007d1a <osDelay>
				goc_target2 +=1;
 8002c80:	4b87      	ldr	r3, [pc, #540]	; (8002ea0 <StartDefaultTask+0x9f8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	3301      	adds	r3, #1
 8002c86:	4a86      	ldr	r2, [pc, #536]	; (8002ea0 <StartDefaultTask+0x9f8>)
 8002c88:	6013      	str	r3, [r2, #0]
				RotatePid = 1;
 8002c8a:	4b84      	ldr	r3, [pc, #528]	; (8002e9c <StartDefaultTask+0x9f4>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	e037      	b.n	8002d02 <StartDefaultTask+0x85a>
			}
			else if (switchmode == 2){
 8002c92:	4b7f      	ldr	r3, [pc, #508]	; (8002e90 <StartDefaultTask+0x9e8>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d133      	bne.n	8002d02 <StartDefaultTask+0x85a>
				forward = 0;
 8002c9a:	4b7f      	ldr	r3, [pc, #508]	; (8002e98 <StartDefaultTask+0x9f0>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
				RotatePid = 0;
 8002ca0:	4b7e      	ldr	r3, [pc, #504]	; (8002e9c <StartDefaultTask+0x9f4>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
				ControlDriver(0, 1, 0, 300, 0, 1, 0, 300, 0, 1, 0, 300);
 8002ca6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002caa:	9307      	str	r3, [sp, #28]
 8002cac:	2300      	movs	r3, #0
 8002cae:	9306      	str	r3, [sp, #24]
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	9305      	str	r3, [sp, #20]
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	9304      	str	r3, [sp, #16]
 8002cb8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002cbc:	9303      	str	r3, [sp, #12]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	9302      	str	r3, [sp, #8]
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	9301      	str	r3, [sp, #4]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f7fe fac6 	bl	8001264 <ControlDriver>
				osDelay(1000);
 8002cd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cdc:	f005 f81d 	bl	8007d1a <osDelay>
				goc_target = pre_t;
 8002ce0:	4b70      	ldr	r3, [pc, #448]	; (8002ea4 <StartDefaultTask+0x9fc>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a70      	ldr	r2, [pc, #448]	; (8002ea8 <StartDefaultTask+0xa00>)
 8002ce6:	6013      	str	r3, [r2, #0]
				v_t = 22;
 8002ce8:	4b70      	ldr	r3, [pc, #448]	; (8002eac <StartDefaultTask+0xa04>)
 8002cea:	2216      	movs	r2, #22
 8002cec:	601a      	str	r2, [r3, #0]
				forward = 5 ;
 8002cee:	4b6a      	ldr	r3, [pc, #424]	; (8002e98 <StartDefaultTask+0x9f0>)
 8002cf0:	2205      	movs	r2, #5
 8002cf2:	601a      	str	r2, [r3, #0]
				osDelay(800);
 8002cf4:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002cf8:	f005 f80f 	bl	8007d1a <osDelay>
				v_t = 0;
 8002cfc:	4b6b      	ldr	r3, [pc, #428]	; (8002eac <StartDefaultTask+0xa04>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]

			}

			DangThucThi = 1;
 8002d02:	4b6b      	ldr	r3, [pc, #428]	; (8002eb0 <StartDefaultTask+0xa08>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	601a      	str	r2, [r3, #0]




	  /*Nhấn nút F5*/
	  if(DataTayGame[7] == 8 && !DangThucThi){
 8002d08:	4b6a      	ldr	r3, [pc, #424]	; (8002eb4 <StartDefaultTask+0xa0c>)
 8002d0a:	79db      	ldrb	r3, [r3, #7]
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d14d      	bne.n	8002dac <StartDefaultTask+0x904>
 8002d10:	4b67      	ldr	r3, [pc, #412]	; (8002eb0 <StartDefaultTask+0xa08>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d149      	bne.n	8002dac <StartDefaultTask+0x904>
		  ControlDriver(0, 1, 0, 200, 0, -1, 0, 400, 0, 1, 0, 600);
 8002d18:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002d1c:	9307      	str	r3, [sp, #28]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	9306      	str	r3, [sp, #24]
 8002d22:	2301      	movs	r3, #1
 8002d24:	9305      	str	r3, [sp, #20]
 8002d26:	2300      	movs	r3, #0
 8002d28:	9304      	str	r3, [sp, #16]
 8002d2a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002d2e:	9303      	str	r3, [sp, #12]
 8002d30:	2300      	movs	r3, #0
 8002d32:	9302      	str	r3, [sp, #8]
 8002d34:	f04f 33ff 	mov.w	r3, #4294967295
 8002d38:	9301      	str	r3, [sp, #4]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	23c8      	movs	r3, #200	; 0xc8
 8002d40:	2200      	movs	r2, #0
 8002d42:	2101      	movs	r1, #1
 8002d44:	2000      	movs	r0, #0
 8002d46:	f7fe fa8d 	bl	8001264 <ControlDriver>
		  forward =0 ;
 8002d4a:	4b53      	ldr	r3, [pc, #332]	; (8002e98 <StartDefaultTask+0x9f0>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
		  RotatePid = 0;
 8002d50:	4b52      	ldr	r3, [pc, #328]	; (8002e9c <StartDefaultTask+0x9f4>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
		  ii++;
 8002d56:	4b58      	ldr	r3, [pc, #352]	; (8002eb8 <StartDefaultTask+0xa10>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	4a56      	ldr	r2, [pc, #344]	; (8002eb8 <StartDefaultTask+0xa10>)
 8002d5e:	6013      	str	r3, [r2, #0]
		  if(ii>2){ii = 1;}
 8002d60:	4b55      	ldr	r3, [pc, #340]	; (8002eb8 <StartDefaultTask+0xa10>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	dd02      	ble.n	8002d6e <StartDefaultTask+0x8c6>
 8002d68:	4b53      	ldr	r3, [pc, #332]	; (8002eb8 <StartDefaultTask+0xa10>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]
		  if(ii%2 == 1){RotatePid = 0;}
 8002d6e:	4b52      	ldr	r3, [pc, #328]	; (8002eb8 <StartDefaultTask+0xa10>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	bfb8      	it	lt
 8002d7a:	425b      	neglt	r3, r3
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d103      	bne.n	8002d88 <StartDefaultTask+0x8e0>
 8002d80:	4b46      	ldr	r3, [pc, #280]	; (8002e9c <StartDefaultTask+0x9f4>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	e00b      	b.n	8002da0 <StartDefaultTask+0x8f8>
		  else if(ii == 2){goc_target2 = -20; pre_t = -20;}
 8002d88:	4b4b      	ldr	r3, [pc, #300]	; (8002eb8 <StartDefaultTask+0xa10>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d107      	bne.n	8002da0 <StartDefaultTask+0x8f8>
 8002d90:	4b43      	ldr	r3, [pc, #268]	; (8002ea0 <StartDefaultTask+0x9f8>)
 8002d92:	f06f 0213 	mvn.w	r2, #19
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	4b42      	ldr	r3, [pc, #264]	; (8002ea4 <StartDefaultTask+0x9fc>)
 8002d9a:	f06f 0213 	mvn.w	r2, #19
 8002d9e:	601a      	str	r2, [r3, #0]
		  RotatePid = 1;
 8002da0:	4b3e      	ldr	r3, [pc, #248]	; (8002e9c <StartDefaultTask+0x9f4>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

	  	  DangThucThi = 1;
 8002da6:	4b42      	ldr	r3, [pc, #264]	; (8002eb0 <StartDefaultTask+0xa08>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	601a      	str	r2, [r3, #0]
	  }
//
	  /*Nhấn nút F8*/
	  if(DataTayGame[7] == 4 && !DangThucThi){
 8002dac:	4b41      	ldr	r3, [pc, #260]	; (8002eb4 <StartDefaultTask+0xa0c>)
 8002dae:	79db      	ldrb	r3, [r3, #7]
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	f040 80be 	bne.w	8002f32 <StartDefaultTask+0xa8a>
 8002db6:	4b3e      	ldr	r3, [pc, #248]	; (8002eb0 <StartDefaultTask+0xa08>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f040 80b9 	bne.w	8002f32 <StartDefaultTask+0xa8a>
		  if(switchmode == 0){
 8002dc0:	4b33      	ldr	r3, [pc, #204]	; (8002e90 <StartDefaultTask+0x9e8>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d134      	bne.n	8002e32 <StartDefaultTask+0x98a>
			forward = 0;
 8002dc8:	4b33      	ldr	r3, [pc, #204]	; (8002e98 <StartDefaultTask+0x9f0>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
			RotatePid = 0;
 8002dce:	4b33      	ldr	r3, [pc, #204]	; (8002e9c <StartDefaultTask+0x9f4>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
			ControlDriver(0, 1, 0, 600, 0, 1, 0, 600, 0, 1, 0, 600);
 8002dd4:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002dd8:	9307      	str	r3, [sp, #28]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	9306      	str	r3, [sp, #24]
 8002dde:	2301      	movs	r3, #1
 8002de0:	9305      	str	r3, [sp, #20]
 8002de2:	2300      	movs	r3, #0
 8002de4:	9304      	str	r3, [sp, #16]
 8002de6:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002dea:	9303      	str	r3, [sp, #12]
 8002dec:	2300      	movs	r3, #0
 8002dee:	9302      	str	r3, [sp, #8]
 8002df0:	2301      	movs	r3, #1
 8002df2:	9301      	str	r3, [sp, #4]
 8002df4:	2300      	movs	r3, #0
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2101      	movs	r1, #1
 8002e00:	2000      	movs	r0, #0
 8002e02:	f7fe fa2f 	bl	8001264 <ControlDriver>
			osDelay(1000);
 8002e06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e0a:	f004 ff86 	bl	8007d1a <osDelay>
			goc_target = pre_t;
 8002e0e:	4b25      	ldr	r3, [pc, #148]	; (8002ea4 <StartDefaultTask+0x9fc>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a25      	ldr	r2, [pc, #148]	; (8002ea8 <StartDefaultTask+0xa00>)
 8002e14:	6013      	str	r3, [r2, #0]
			v_t = 22;
 8002e16:	4b25      	ldr	r3, [pc, #148]	; (8002eac <StartDefaultTask+0xa04>)
 8002e18:	2216      	movs	r2, #22
 8002e1a:	601a      	str	r2, [r3, #0]
			forward = 4 ;
 8002e1c:	4b1e      	ldr	r3, [pc, #120]	; (8002e98 <StartDefaultTask+0x9f0>)
 8002e1e:	2204      	movs	r2, #4
 8002e20:	601a      	str	r2, [r3, #0]
			osDelay(800);
 8002e22:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002e26:	f004 ff78 	bl	8007d1a <osDelay>
			v_t = 0;
 8002e2a:	4b20      	ldr	r3, [pc, #128]	; (8002eac <StartDefaultTask+0xa04>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	e07c      	b.n	8002f2c <StartDefaultTask+0xa84>
		  }else if(switchmode == 1){
 8002e32:	4b17      	ldr	r3, [pc, #92]	; (8002e90 <StartDefaultTask+0x9e8>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d140      	bne.n	8002ebc <StartDefaultTask+0xa14>
			  	fuzzy = 1;
 8002e3a:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <StartDefaultTask+0x9ec>)
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	701a      	strb	r2, [r3, #0]
				forward = 0;
 8002e40:	4b15      	ldr	r3, [pc, #84]	; (8002e98 <StartDefaultTask+0x9f0>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
				RotatePid = 0;
 8002e46:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <StartDefaultTask+0x9f4>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
				ControlDriver(0, 1, 0, 200, 0, -1, 0, 400, 0, 1, 0, 600);
 8002e4c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002e50:	9307      	str	r3, [sp, #28]
 8002e52:	2300      	movs	r3, #0
 8002e54:	9306      	str	r3, [sp, #24]
 8002e56:	2301      	movs	r3, #1
 8002e58:	9305      	str	r3, [sp, #20]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	9304      	str	r3, [sp, #16]
 8002e5e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002e62:	9303      	str	r3, [sp, #12]
 8002e64:	2300      	movs	r3, #0
 8002e66:	9302      	str	r3, [sp, #8]
 8002e68:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	23c8      	movs	r3, #200	; 0xc8
 8002e74:	2200      	movs	r2, #0
 8002e76:	2101      	movs	r1, #1
 8002e78:	2000      	movs	r0, #0
 8002e7a:	f7fe f9f3 	bl	8001264 <ControlDriver>
				goc_target2 -=1;
 8002e7e:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <StartDefaultTask+0x9f8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	4a06      	ldr	r2, [pc, #24]	; (8002ea0 <StartDefaultTask+0x9f8>)
 8002e86:	6013      	str	r3, [r2, #0]
				RotatePid = 1;
 8002e88:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <StartDefaultTask+0x9f4>)
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	e04d      	b.n	8002f2c <StartDefaultTask+0xa84>
 8002e90:	20000779 	.word	0x20000779
 8002e94:	2000068e 	.word	0x2000068e
 8002e98:	20000640 	.word	0x20000640
 8002e9c:	20000688 	.word	0x20000688
 8002ea0:	2000064c 	.word	0x2000064c
 8002ea4:	20000010 	.word	0x20000010
 8002ea8:	20000638 	.word	0x20000638
 8002eac:	20000644 	.word	0x20000644
 8002eb0:	200006bc 	.word	0x200006bc
 8002eb4:	200006ac 	.word	0x200006ac
 8002eb8:	2000077c 	.word	0x2000077c
			}
		  else if (switchmode == 2){
 8002ebc:	4b23      	ldr	r3, [pc, #140]	; (8002f4c <StartDefaultTask+0xaa4>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d133      	bne.n	8002f2c <StartDefaultTask+0xa84>
				forward = 0;
 8002ec4:	4b22      	ldr	r3, [pc, #136]	; (8002f50 <StartDefaultTask+0xaa8>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
				RotatePid = 0;
 8002eca:	4b22      	ldr	r3, [pc, #136]	; (8002f54 <StartDefaultTask+0xaac>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
				ControlDriver(0, 1, 0, 300, 0, 1, 0, 300, 0, 1, 0, 300);
 8002ed0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002ed4:	9307      	str	r3, [sp, #28]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	9306      	str	r3, [sp, #24]
 8002eda:	2301      	movs	r3, #1
 8002edc:	9305      	str	r3, [sp, #20]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	9304      	str	r3, [sp, #16]
 8002ee2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002ee6:	9303      	str	r3, [sp, #12]
 8002ee8:	2300      	movs	r3, #0
 8002eea:	9302      	str	r3, [sp, #8]
 8002eec:	2301      	movs	r3, #1
 8002eee:	9301      	str	r3, [sp, #4]
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2101      	movs	r1, #1
 8002efc:	2000      	movs	r0, #0
 8002efe:	f7fe f9b1 	bl	8001264 <ControlDriver>
				osDelay(1000);
 8002f02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f06:	f004 ff08 	bl	8007d1a <osDelay>
				goc_target = pre_t;
 8002f0a:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <StartDefaultTask+0xab0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a13      	ldr	r2, [pc, #76]	; (8002f5c <StartDefaultTask+0xab4>)
 8002f10:	6013      	str	r3, [r2, #0]
				v_t = 22;
 8002f12:	4b13      	ldr	r3, [pc, #76]	; (8002f60 <StartDefaultTask+0xab8>)
 8002f14:	2216      	movs	r2, #22
 8002f16:	601a      	str	r2, [r3, #0]
				forward = 1 ;
 8002f18:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <StartDefaultTask+0xaa8>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]
				osDelay(800);
 8002f1e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002f22:	f004 fefa 	bl	8007d1a <osDelay>
				v_t = 0;
 8002f26:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <StartDefaultTask+0xab8>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
			}

		  DangThucThi = 1;
 8002f2c:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <StartDefaultTask+0xabc>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	601a      	str	r2, [r3, #0]
	  }

	  if(DataTayGame[7] == 0){
 8002f32:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <StartDefaultTask+0xac0>)
 8002f34:	79db      	ldrb	r3, [r3, #7]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d102      	bne.n	8002f40 <StartDefaultTask+0xa98>
		  DangThucThi = 0;
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <StartDefaultTask+0xabc>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
	  }


	  osDelay(1);
 8002f40:	2001      	movs	r0, #1
 8002f42:	f004 feea 	bl	8007d1a <osDelay>
cambien = HAL_GPIO_ReadPin(cb_vong_GPIO_Port, cb_vong_Pin);
 8002f46:	f7ff bab3 	b.w	80024b0 <StartDefaultTask+0x8>
 8002f4a:	bf00      	nop
 8002f4c:	20000779 	.word	0x20000779
 8002f50:	20000640 	.word	0x20000640
 8002f54:	20000688 	.word	0x20000688
 8002f58:	20000010 	.word	0x20000010
 8002f5c:	20000638 	.word	0x20000638
 8002f60:	20000644 	.word	0x20000644
 8002f64:	200006bc 	.word	0x200006bc
 8002f68:	200006ac 	.word	0x200006ac

08002f6c <TaskBlinkLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskBlinkLed */
void TaskBlinkLed(void const * argument)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
//	  System.CompassStatus = HAL_GPIO_ReadPin(CompassReady_GPIO_Port, CompassReady_Pin);
	  if(GocRobot != -999){
 8002f74:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <TaskBlinkLed+0x40>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a0d      	ldr	r2, [pc, #52]	; (8002fb0 <TaskBlinkLed+0x44>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00a      	beq.n	8002f94 <TaskBlinkLed+0x28>
		  System.CompassStatus = 1;
 8002f7e:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <TaskBlinkLed+0x48>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	605a      	str	r2, [r3, #4]
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002f84:	2102      	movs	r1, #2
 8002f86:	480c      	ldr	r0, [pc, #48]	; (8002fb8 <TaskBlinkLed+0x4c>)
 8002f88:	f002 f8ab 	bl	80050e2 <HAL_GPIO_TogglePin>
		  osDelay(50);
 8002f8c:	2032      	movs	r0, #50	; 0x32
 8002f8e:	f004 fec4 	bl	8007d1a <osDelay>
 8002f92:	e7ef      	b.n	8002f74 <TaskBlinkLed+0x8>
	  }
	  else {
		  System.CompassStatus = 0;
 8002f94:	4b07      	ldr	r3, [pc, #28]	; (8002fb4 <TaskBlinkLed+0x48>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	605a      	str	r2, [r3, #4]
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002f9a:	2102      	movs	r1, #2
 8002f9c:	4806      	ldr	r0, [pc, #24]	; (8002fb8 <TaskBlinkLed+0x4c>)
 8002f9e:	f002 f8a0 	bl	80050e2 <HAL_GPIO_TogglePin>
		  osDelay(500);
 8002fa2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002fa6:	f004 feb8 	bl	8007d1a <osDelay>
	  if(GocRobot != -999){
 8002faa:	e7e3      	b.n	8002f74 <TaskBlinkLed+0x8>
 8002fac:	200006b8 	.word	0x200006b8
 8002fb0:	fffffc19 	.word	0xfffffc19
 8002fb4:	20000698 	.word	0x20000698
 8002fb8:	40020000 	.word	0x40020000

08002fbc <TaskUART>:
char DebugStr[200];
int c;

/* USER CODE END Header_TaskUART */
void TaskUART(void const * argument)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskUART */
  /* Infinite loop */
  for(;;)
  {
//	  driveSpeed(dir9,pwm9);
	  if(up == 1){upHandle();}
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <TaskUART+0x3c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d102      	bne.n	8002fd2 <TaskUART+0x16>
 8002fcc:	f7ff f9e6 	bl	800239c <upHandle>
 8002fd0:	e00c      	b.n	8002fec <TaskUART+0x30>
	  else if(up == 2){downHandle();}
 8002fd2:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <TaskUART+0x3c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d102      	bne.n	8002fe0 <TaskUART+0x24>
 8002fda:	f7ff fa21 	bl	8002420 <downHandle>
 8002fde:	e005      	b.n	8002fec <TaskUART+0x30>
	  else if (up == 3){uphalf();}
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <TaskUART+0x3c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d101      	bne.n	8002fec <TaskUART+0x30>
 8002fe8:	f7ff fa00 	bl	80023ec <uphalf>
	  driveStep();
 8002fec:	f7ff f978 	bl	80022e0 <driveStep>
	  osDelay(1);
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	f004 fe92 	bl	8007d1a <osDelay>
	  if(up == 1){upHandle();}
 8002ff6:	e7e5      	b.n	8002fc4 <TaskUART+0x8>
 8002ff8:	20000768 	.word	0x20000768

08002ffc <TaskXoayLaBan>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskXoayLaBan */
void TaskXoayLaBan(void const * argument)
{
 8002ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ffe:	b08b      	sub	sp, #44	; 0x2c
 8003000:	af08      	add	r7, sp, #32
 8003002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskXoayLaBan */
  /* Infinite loop */
  for(;;)
  {
	  driveSpeed(dir9,pwm9);
 8003004:	4b2a      	ldr	r3, [pc, #168]	; (80030b0 <TaskXoayLaBan+0xb4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a2a      	ldr	r2, [pc, #168]	; (80030b4 <TaskXoayLaBan+0xb8>)
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	4611      	mov	r1, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff f91a 	bl	8002248 <driveSpeed>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)a, 1);
 8003014:	2201      	movs	r2, #1
 8003016:	4928      	ldr	r1, [pc, #160]	; (80030b8 <TaskXoayLaBan+0xbc>)
 8003018:	4828      	ldr	r0, [pc, #160]	; (80030bc <TaskXoayLaBan+0xc0>)
 800301a:	f000 fde3 	bl	8003be4 <HAL_ADC_Start_DMA>
	  if (POS_target> 1000){
 800301e:	4b28      	ldr	r3, [pc, #160]	; (80030c0 <TaskXoayLaBan+0xc4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003026:	dd02      	ble.n	800302e <TaskXoayLaBan+0x32>
		  POS_target = 0;
 8003028:	4b25      	ldr	r3, [pc, #148]	; (80030c0 <TaskXoayLaBan+0xc4>)
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
	  }
	  if(forward == 1){
 800302e:	4b25      	ldr	r3, [pc, #148]	; (80030c4 <TaskXoayLaBan+0xc8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d14c      	bne.n	80030d0 <TaskXoayLaBan+0xd4>
	  		  ControlDriver(1, -1, v_t, (300-3*e1), 1, -1, v_t, (300-3*e1), 1, -1, v_t, (300+3*e1));
 8003036:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <TaskXoayLaBan+0xcc>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	b29c      	uxth	r4, r3
 800303c:	4b23      	ldr	r3, [pc, #140]	; (80030cc <TaskXoayLaBan+0xd0>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	b29b      	uxth	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	b29b      	uxth	r3, r3
 800304a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800304e:	b29d      	uxth	r5, r3
 8003050:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <TaskXoayLaBan+0xcc>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	b29b      	uxth	r3, r3
 8003056:	4a1d      	ldr	r2, [pc, #116]	; (80030cc <TaskXoayLaBan+0xd0>)
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	b292      	uxth	r2, r2
 800305c:	4611      	mov	r1, r2
 800305e:	0092      	lsls	r2, r2, #2
 8003060:	1a8a      	subs	r2, r1, r2
 8003062:	b292      	uxth	r2, r2
 8003064:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 8003068:	b292      	uxth	r2, r2
 800306a:	4917      	ldr	r1, [pc, #92]	; (80030c8 <TaskXoayLaBan+0xcc>)
 800306c:	6809      	ldr	r1, [r1, #0]
 800306e:	b289      	uxth	r1, r1
 8003070:	4816      	ldr	r0, [pc, #88]	; (80030cc <TaskXoayLaBan+0xd0>)
 8003072:	6800      	ldr	r0, [r0, #0]
 8003074:	b280      	uxth	r0, r0
 8003076:	4606      	mov	r6, r0
 8003078:	0076      	lsls	r6, r6, #1
 800307a:	4430      	add	r0, r6
 800307c:	b280      	uxth	r0, r0
 800307e:	f500 7096 	add.w	r0, r0, #300	; 0x12c
 8003082:	b280      	uxth	r0, r0
 8003084:	9007      	str	r0, [sp, #28]
 8003086:	9106      	str	r1, [sp, #24]
 8003088:	f04f 31ff 	mov.w	r1, #4294967295
 800308c:	9105      	str	r1, [sp, #20]
 800308e:	2101      	movs	r1, #1
 8003090:	9104      	str	r1, [sp, #16]
 8003092:	9203      	str	r2, [sp, #12]
 8003094:	9302      	str	r3, [sp, #8]
 8003096:	f04f 33ff 	mov.w	r3, #4294967295
 800309a:	9301      	str	r3, [sp, #4]
 800309c:	2301      	movs	r3, #1
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	462b      	mov	r3, r5
 80030a2:	4622      	mov	r2, r4
 80030a4:	f04f 31ff 	mov.w	r1, #4294967295
 80030a8:	2001      	movs	r0, #1
 80030aa:	f7fe f8db 	bl	8001264 <ControlDriver>
 80030ae:	e012      	b.n	80030d6 <TaskXoayLaBan+0xda>
 80030b0:	20000758 	.word	0x20000758
 80030b4:	2000075c 	.word	0x2000075c
 80030b8:	200006e4 	.word	0x200006e4
 80030bc:	20000398 	.word	0x20000398
 80030c0:	20000710 	.word	0x20000710
 80030c4:	20000640 	.word	0x20000640
 80030c8:	20000644 	.word	0x20000644
 80030cc:	20000650 	.word	0x20000650
	  	  }

	  else{
		  osDelay(1);
 80030d0:	2001      	movs	r0, #1
 80030d2:	f004 fe22 	bl	8007d1a <osDelay>
	  }
	  if(forward == 4){
 80030d6:	4b88      	ldr	r3, [pc, #544]	; (80032f8 <TaskXoayLaBan+0x2fc>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d135      	bne.n	800314a <TaskXoayLaBan+0x14e>
		  ControlDriver(1, 1, v_t, (600+6*e1), 1, 1, v_t, (600-6*e1), 1, 1, v_t, (600));
 80030de:	4b87      	ldr	r3, [pc, #540]	; (80032fc <TaskXoayLaBan+0x300>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	b298      	uxth	r0, r3
 80030e4:	4b86      	ldr	r3, [pc, #536]	; (8003300 <TaskXoayLaBan+0x304>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	461a      	mov	r2, r3
 80030ec:	0052      	lsls	r2, r2, #1
 80030ee:	4413      	add	r3, r2
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80030f8:	b29c      	uxth	r4, r3
 80030fa:	4b80      	ldr	r3, [pc, #512]	; (80032fc <TaskXoayLaBan+0x300>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	4a7f      	ldr	r2, [pc, #508]	; (8003300 <TaskXoayLaBan+0x304>)
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	b292      	uxth	r2, r2
 8003106:	4611      	mov	r1, r2
 8003108:	0092      	lsls	r2, r2, #2
 800310a:	1a8a      	subs	r2, r1, r2
 800310c:	0052      	lsls	r2, r2, #1
 800310e:	b292      	uxth	r2, r2
 8003110:	f502 7216 	add.w	r2, r2, #600	; 0x258
 8003114:	b292      	uxth	r2, r2
 8003116:	4979      	ldr	r1, [pc, #484]	; (80032fc <TaskXoayLaBan+0x300>)
 8003118:	6809      	ldr	r1, [r1, #0]
 800311a:	b289      	uxth	r1, r1
 800311c:	f44f 7516 	mov.w	r5, #600	; 0x258
 8003120:	9507      	str	r5, [sp, #28]
 8003122:	9106      	str	r1, [sp, #24]
 8003124:	2101      	movs	r1, #1
 8003126:	9105      	str	r1, [sp, #20]
 8003128:	2101      	movs	r1, #1
 800312a:	9104      	str	r1, [sp, #16]
 800312c:	9203      	str	r2, [sp, #12]
 800312e:	9302      	str	r3, [sp, #8]
 8003130:	2301      	movs	r3, #1
 8003132:	9301      	str	r3, [sp, #4]
 8003134:	2301      	movs	r3, #1
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	4623      	mov	r3, r4
 800313a:	4602      	mov	r2, r0
 800313c:	2101      	movs	r1, #1
 800313e:	2001      	movs	r0, #1
 8003140:	f7fe f890 	bl	8001264 <ControlDriver>
		 osDelay(1);
 8003144:	2001      	movs	r0, #1
 8003146:	f004 fde8 	bl	8007d1a <osDelay>
	  }
	  if(RotatePid == 1){
 800314a:	4b6e      	ldr	r3, [pc, #440]	; (8003304 <TaskXoayLaBan+0x308>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d121      	bne.n	8003196 <TaskXoayLaBan+0x19a>
		  ControlDriver(2, -dir2, pwm, 200,2 , dir2, pwm, 400, 2, -dir2, pwm, 600);
 8003152:	4b6d      	ldr	r3, [pc, #436]	; (8003308 <TaskXoayLaBan+0x30c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	425c      	negs	r4, r3
 8003158:	4b6c      	ldr	r3, [pc, #432]	; (800330c <TaskXoayLaBan+0x310>)
 800315a:	881d      	ldrh	r5, [r3, #0]
 800315c:	4b6a      	ldr	r3, [pc, #424]	; (8003308 <TaskXoayLaBan+0x30c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a6a      	ldr	r2, [pc, #424]	; (800330c <TaskXoayLaBan+0x310>)
 8003162:	8812      	ldrh	r2, [r2, #0]
 8003164:	4968      	ldr	r1, [pc, #416]	; (8003308 <TaskXoayLaBan+0x30c>)
 8003166:	6809      	ldr	r1, [r1, #0]
 8003168:	4249      	negs	r1, r1
 800316a:	4868      	ldr	r0, [pc, #416]	; (800330c <TaskXoayLaBan+0x310>)
 800316c:	8800      	ldrh	r0, [r0, #0]
 800316e:	f44f 7616 	mov.w	r6, #600	; 0x258
 8003172:	9607      	str	r6, [sp, #28]
 8003174:	9006      	str	r0, [sp, #24]
 8003176:	9105      	str	r1, [sp, #20]
 8003178:	2102      	movs	r1, #2
 800317a:	9104      	str	r1, [sp, #16]
 800317c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003180:	9103      	str	r1, [sp, #12]
 8003182:	9202      	str	r2, [sp, #8]
 8003184:	9301      	str	r3, [sp, #4]
 8003186:	2302      	movs	r3, #2
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	23c8      	movs	r3, #200	; 0xc8
 800318c:	462a      	mov	r2, r5
 800318e:	4621      	mov	r1, r4
 8003190:	2002      	movs	r0, #2
 8003192:	f7fe f867 	bl	8001264 <ControlDriver>
	  }
	  if((forward == 2)){
 8003196:	4b58      	ldr	r3, [pc, #352]	; (80032f8 <TaskXoayLaBan+0x2fc>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d12d      	bne.n	80031fa <TaskXoayLaBan+0x1fe>
		  ControlDriver(1, 1, v_t, (74+1*e1), 1, 1, v_t, (74+1*e1), 1, 1, v_t, (74-1*e1));
 800319e:	4b57      	ldr	r3, [pc, #348]	; (80032fc <TaskXoayLaBan+0x300>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	b29c      	uxth	r4, r3
 80031a4:	4b56      	ldr	r3, [pc, #344]	; (8003300 <TaskXoayLaBan+0x304>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	334a      	adds	r3, #74	; 0x4a
 80031ac:	b29d      	uxth	r5, r3
 80031ae:	4b53      	ldr	r3, [pc, #332]	; (80032fc <TaskXoayLaBan+0x300>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	4a52      	ldr	r2, [pc, #328]	; (8003300 <TaskXoayLaBan+0x304>)
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	b292      	uxth	r2, r2
 80031ba:	324a      	adds	r2, #74	; 0x4a
 80031bc:	b292      	uxth	r2, r2
 80031be:	494f      	ldr	r1, [pc, #316]	; (80032fc <TaskXoayLaBan+0x300>)
 80031c0:	6809      	ldr	r1, [r1, #0]
 80031c2:	b289      	uxth	r1, r1
 80031c4:	484e      	ldr	r0, [pc, #312]	; (8003300 <TaskXoayLaBan+0x304>)
 80031c6:	6800      	ldr	r0, [r0, #0]
 80031c8:	b280      	uxth	r0, r0
 80031ca:	f1c0 004a 	rsb	r0, r0, #74	; 0x4a
 80031ce:	b280      	uxth	r0, r0
 80031d0:	9007      	str	r0, [sp, #28]
 80031d2:	9106      	str	r1, [sp, #24]
 80031d4:	2101      	movs	r1, #1
 80031d6:	9105      	str	r1, [sp, #20]
 80031d8:	2101      	movs	r1, #1
 80031da:	9104      	str	r1, [sp, #16]
 80031dc:	9203      	str	r2, [sp, #12]
 80031de:	9302      	str	r3, [sp, #8]
 80031e0:	2301      	movs	r3, #1
 80031e2:	9301      	str	r3, [sp, #4]
 80031e4:	2301      	movs	r3, #1
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	462b      	mov	r3, r5
 80031ea:	4622      	mov	r2, r4
 80031ec:	2101      	movs	r1, #1
 80031ee:	2001      	movs	r0, #1
 80031f0:	f7fe f838 	bl	8001264 <ControlDriver>
		  osDelay(1);
 80031f4:	2001      	movs	r0, #1
 80031f6:	f004 fd90 	bl	8007d1a <osDelay>
	  }
	  if((forward == 3)){
 80031fa:	4b3f      	ldr	r3, [pc, #252]	; (80032f8 <TaskXoayLaBan+0x2fc>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d138      	bne.n	8003274 <TaskXoayLaBan+0x278>

	  		  ControlDriver(1, -1, v_t, (600-6*e1), 1, -1, v_t, (600+6*e1), 1, -1, v_t, (600));
 8003202:	4b3e      	ldr	r3, [pc, #248]	; (80032fc <TaskXoayLaBan+0x300>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	b298      	uxth	r0, r3
 8003208:	4b3d      	ldr	r3, [pc, #244]	; (8003300 <TaskXoayLaBan+0x304>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	b29b      	uxth	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	b29b      	uxth	r3, r3
 8003218:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800321c:	b29c      	uxth	r4, r3
 800321e:	4b37      	ldr	r3, [pc, #220]	; (80032fc <TaskXoayLaBan+0x300>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	b29b      	uxth	r3, r3
 8003224:	4a36      	ldr	r2, [pc, #216]	; (8003300 <TaskXoayLaBan+0x304>)
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	b292      	uxth	r2, r2
 800322a:	4611      	mov	r1, r2
 800322c:	0049      	lsls	r1, r1, #1
 800322e:	440a      	add	r2, r1
 8003230:	0052      	lsls	r2, r2, #1
 8003232:	b292      	uxth	r2, r2
 8003234:	f502 7216 	add.w	r2, r2, #600	; 0x258
 8003238:	b292      	uxth	r2, r2
 800323a:	4930      	ldr	r1, [pc, #192]	; (80032fc <TaskXoayLaBan+0x300>)
 800323c:	6809      	ldr	r1, [r1, #0]
 800323e:	b289      	uxth	r1, r1
 8003240:	f44f 7516 	mov.w	r5, #600	; 0x258
 8003244:	9507      	str	r5, [sp, #28]
 8003246:	9106      	str	r1, [sp, #24]
 8003248:	f04f 31ff 	mov.w	r1, #4294967295
 800324c:	9105      	str	r1, [sp, #20]
 800324e:	2101      	movs	r1, #1
 8003250:	9104      	str	r1, [sp, #16]
 8003252:	9203      	str	r2, [sp, #12]
 8003254:	9302      	str	r3, [sp, #8]
 8003256:	f04f 33ff 	mov.w	r3, #4294967295
 800325a:	9301      	str	r3, [sp, #4]
 800325c:	2301      	movs	r3, #1
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	4623      	mov	r3, r4
 8003262:	4602      	mov	r2, r0
 8003264:	f04f 31ff 	mov.w	r1, #4294967295
 8003268:	2001      	movs	r0, #1
 800326a:	f7fd fffb 	bl	8001264 <ControlDriver>
	  		  osDelay(1);
 800326e:	2001      	movs	r0, #1
 8003270:	f004 fd53 	bl	8007d1a <osDelay>
	  	  }
	  if(forward == 5){
 8003274:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <TaskXoayLaBan+0x2fc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b05      	cmp	r3, #5
 800327a:	f47f aec3 	bne.w	8003004 <TaskXoayLaBan+0x8>
	  	 	  		  ControlDriver(1, 1, v_t, (300+3*e1), 1, 1, v_t, (300+3*e1), 1, 1, v_t, (300-3*e1));
 800327e:	4b1f      	ldr	r3, [pc, #124]	; (80032fc <TaskXoayLaBan+0x300>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	b29c      	uxth	r4, r3
 8003284:	4b1e      	ldr	r3, [pc, #120]	; (8003300 <TaskXoayLaBan+0x304>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	b29b      	uxth	r3, r3
 800328a:	461a      	mov	r2, r3
 800328c:	0052      	lsls	r2, r2, #1
 800328e:	4413      	add	r3, r2
 8003290:	b29b      	uxth	r3, r3
 8003292:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8003296:	b29d      	uxth	r5, r3
 8003298:	4b18      	ldr	r3, [pc, #96]	; (80032fc <TaskXoayLaBan+0x300>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	b29b      	uxth	r3, r3
 800329e:	4a18      	ldr	r2, [pc, #96]	; (8003300 <TaskXoayLaBan+0x304>)
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	b292      	uxth	r2, r2
 80032a4:	4611      	mov	r1, r2
 80032a6:	0049      	lsls	r1, r1, #1
 80032a8:	440a      	add	r2, r1
 80032aa:	b292      	uxth	r2, r2
 80032ac:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 80032b0:	b292      	uxth	r2, r2
 80032b2:	4912      	ldr	r1, [pc, #72]	; (80032fc <TaskXoayLaBan+0x300>)
 80032b4:	6809      	ldr	r1, [r1, #0]
 80032b6:	b289      	uxth	r1, r1
 80032b8:	4811      	ldr	r0, [pc, #68]	; (8003300 <TaskXoayLaBan+0x304>)
 80032ba:	6800      	ldr	r0, [r0, #0]
 80032bc:	b280      	uxth	r0, r0
 80032be:	4606      	mov	r6, r0
 80032c0:	0080      	lsls	r0, r0, #2
 80032c2:	1a30      	subs	r0, r6, r0
 80032c4:	b280      	uxth	r0, r0
 80032c6:	f500 7096 	add.w	r0, r0, #300	; 0x12c
 80032ca:	b280      	uxth	r0, r0
 80032cc:	9007      	str	r0, [sp, #28]
 80032ce:	9106      	str	r1, [sp, #24]
 80032d0:	2101      	movs	r1, #1
 80032d2:	9105      	str	r1, [sp, #20]
 80032d4:	2101      	movs	r1, #1
 80032d6:	9104      	str	r1, [sp, #16]
 80032d8:	9203      	str	r2, [sp, #12]
 80032da:	9302      	str	r3, [sp, #8]
 80032dc:	2301      	movs	r3, #1
 80032de:	9301      	str	r3, [sp, #4]
 80032e0:	2301      	movs	r3, #1
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	462b      	mov	r3, r5
 80032e6:	4622      	mov	r2, r4
 80032e8:	2101      	movs	r1, #1
 80032ea:	2001      	movs	r0, #1
 80032ec:	f7fd ffba 	bl	8001264 <ControlDriver>
	  	 	  		  osDelay(1);
 80032f0:	2001      	movs	r0, #1
 80032f2:	f004 fd12 	bl	8007d1a <osDelay>
	  driveSpeed(dir9,pwm9);
 80032f6:	e685      	b.n	8003004 <TaskXoayLaBan+0x8>
 80032f8:	20000640 	.word	0x20000640
 80032fc:	20000644 	.word	0x20000644
 8003300:	20000650 	.word	0x20000650
 8003304:	20000688 	.word	0x20000688
 8003308:	20000648 	.word	0x20000648
 800330c:	2000068c 	.word	0x2000068c

08003310 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a0e      	ldr	r2, [pc, #56]	; (8003358 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d101      	bne.n	8003326 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003322:	f000 fbd7 	bl	8003ad4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2) {
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332e:	d10e      	bne.n	800334e <HAL_TIM_PeriodElapsedCallback+0x3e>
	  goc_hientai = GocRobot;
 8003330:	4b0a      	ldr	r3, [pc, #40]	; (800335c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003336:	6013      	str	r3, [r2, #0]
	    e1 = goc_target - goc_hientai;
 8003338:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4b08      	ldr	r3, [pc, #32]	; (8003360 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	4a09      	ldr	r2, [pc, #36]	; (8003368 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003344:	6013      	str	r3, [r2, #0]
	    Pid_cal();
 8003346:	f7fd fd5f 	bl	8000e08 <Pid_cal>
	    PID();
 800334a:	f7fe fddf 	bl	8001f0c <PID>
//  if (htim->Instance == TIM6) {
//      t+=100;
//    }

  /* USER CODE END Callback 1 */
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40002000 	.word	0x40002000
 800335c:	200006b8 	.word	0x200006b8
 8003360:	2000063c 	.word	0x2000063c
 8003364:	20000638 	.word	0x20000638
 8003368:	20000650 	.word	0x20000650

0800336c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003370:	b672      	cpsid	i
}
 8003372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003374:	e7fe      	b.n	8003374 <Error_Handler+0x8>
	...

08003378 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337e:	2300      	movs	r3, #0
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	4b12      	ldr	r3, [pc, #72]	; (80033cc <HAL_MspInit+0x54>)
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	4a11      	ldr	r2, [pc, #68]	; (80033cc <HAL_MspInit+0x54>)
 8003388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800338c:	6453      	str	r3, [r2, #68]	; 0x44
 800338e:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <HAL_MspInit+0x54>)
 8003390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003396:	607b      	str	r3, [r7, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800339a:	2300      	movs	r3, #0
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_MspInit+0x54>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	4a0a      	ldr	r2, [pc, #40]	; (80033cc <HAL_MspInit+0x54>)
 80033a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a8:	6413      	str	r3, [r2, #64]	; 0x40
 80033aa:	4b08      	ldr	r3, [pc, #32]	; (80033cc <HAL_MspInit+0x54>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80033b6:	2200      	movs	r2, #0
 80033b8:	210f      	movs	r1, #15
 80033ba:	f06f 0001 	mvn.w	r0, #1
 80033be:	f001 f897 	bl	80044f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40023800 	.word	0x40023800

080033d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08a      	sub	sp, #40	; 0x28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d8:	f107 0314 	add.w	r3, r7, #20
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	605a      	str	r2, [r3, #4]
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	60da      	str	r2, [r3, #12]
 80033e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a2f      	ldr	r2, [pc, #188]	; (80034ac <HAL_ADC_MspInit+0xdc>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d157      	bne.n	80034a2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	4b2e      	ldr	r3, [pc, #184]	; (80034b0 <HAL_ADC_MspInit+0xe0>)
 80033f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fa:	4a2d      	ldr	r2, [pc, #180]	; (80034b0 <HAL_ADC_MspInit+0xe0>)
 80033fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003400:	6453      	str	r3, [r2, #68]	; 0x44
 8003402:	4b2b      	ldr	r3, [pc, #172]	; (80034b0 <HAL_ADC_MspInit+0xe0>)
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	4b27      	ldr	r3, [pc, #156]	; (80034b0 <HAL_ADC_MspInit+0xe0>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	4a26      	ldr	r2, [pc, #152]	; (80034b0 <HAL_ADC_MspInit+0xe0>)
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	6313      	str	r3, [r2, #48]	; 0x30
 800341e:	4b24      	ldr	r3, [pc, #144]	; (80034b0 <HAL_ADC_MspInit+0xe0>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800342a:	2340      	movs	r3, #64	; 0x40
 800342c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800342e:	2303      	movs	r3, #3
 8003430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003432:	2300      	movs	r3, #0
 8003434:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003436:	f107 0314 	add.w	r3, r7, #20
 800343a:	4619      	mov	r1, r3
 800343c:	481d      	ldr	r0, [pc, #116]	; (80034b4 <HAL_ADC_MspInit+0xe4>)
 800343e:	f001 fc83 	bl	8004d48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003442:	4b1d      	ldr	r3, [pc, #116]	; (80034b8 <HAL_ADC_MspInit+0xe8>)
 8003444:	4a1d      	ldr	r2, [pc, #116]	; (80034bc <HAL_ADC_MspInit+0xec>)
 8003446:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003448:	4b1b      	ldr	r3, [pc, #108]	; (80034b8 <HAL_ADC_MspInit+0xe8>)
 800344a:	2200      	movs	r2, #0
 800344c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800344e:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <HAL_ADC_MspInit+0xe8>)
 8003450:	2200      	movs	r2, #0
 8003452:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003454:	4b18      	ldr	r3, [pc, #96]	; (80034b8 <HAL_ADC_MspInit+0xe8>)
 8003456:	2200      	movs	r2, #0
 8003458:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800345a:	4b17      	ldr	r3, [pc, #92]	; (80034b8 <HAL_ADC_MspInit+0xe8>)
 800345c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003460:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003462:	4b15      	ldr	r3, [pc, #84]	; (80034b8 <HAL_ADC_MspInit+0xe8>)
 8003464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003468:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800346a:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <HAL_ADC_MspInit+0xe8>)
 800346c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003470:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003472:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <HAL_ADC_MspInit+0xe8>)
 8003474:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003478:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800347a:	4b0f      	ldr	r3, [pc, #60]	; (80034b8 <HAL_ADC_MspInit+0xe8>)
 800347c:	2200      	movs	r2, #0
 800347e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003480:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <HAL_ADC_MspInit+0xe8>)
 8003482:	2200      	movs	r2, #0
 8003484:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003486:	480c      	ldr	r0, [pc, #48]	; (80034b8 <HAL_ADC_MspInit+0xe8>)
 8003488:	f001 f85c 	bl	8004544 <HAL_DMA_Init>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003492:	f7ff ff6b 	bl	800336c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a07      	ldr	r2, [pc, #28]	; (80034b8 <HAL_ADC_MspInit+0xe8>)
 800349a:	639a      	str	r2, [r3, #56]	; 0x38
 800349c:	4a06      	ldr	r2, [pc, #24]	; (80034b8 <HAL_ADC_MspInit+0xe8>)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80034a2:	bf00      	nop
 80034a4:	3728      	adds	r7, #40	; 0x28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40012000 	.word	0x40012000
 80034b0:	40023800 	.word	0x40023800
 80034b4:	40020000 	.word	0x40020000
 80034b8:	200003e0 	.word	0x200003e0
 80034bc:	40026410 	.word	0x40026410

080034c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d0:	d116      	bne.n	8003500 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	4b20      	ldr	r3, [pc, #128]	; (8003558 <HAL_TIM_Base_MspInit+0x98>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	4a1f      	ldr	r2, [pc, #124]	; (8003558 <HAL_TIM_Base_MspInit+0x98>)
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	6413      	str	r3, [r2, #64]	; 0x40
 80034e2:	4b1d      	ldr	r3, [pc, #116]	; (8003558 <HAL_TIM_Base_MspInit+0x98>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80034ee:	2200      	movs	r2, #0
 80034f0:	2105      	movs	r1, #5
 80034f2:	201c      	movs	r0, #28
 80034f4:	f000 fffc 	bl	80044f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034f8:	201c      	movs	r0, #28
 80034fa:	f001 f815 	bl	8004528 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80034fe:	e026      	b.n	800354e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a15      	ldr	r2, [pc, #84]	; (800355c <HAL_TIM_Base_MspInit+0x9c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d10e      	bne.n	8003528 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_TIM_Base_MspInit+0x98>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	4a11      	ldr	r2, [pc, #68]	; (8003558 <HAL_TIM_Base_MspInit+0x98>)
 8003514:	f043 0302 	orr.w	r3, r3, #2
 8003518:	6413      	str	r3, [r2, #64]	; 0x40
 800351a:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <HAL_TIM_Base_MspInit+0x98>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	693b      	ldr	r3, [r7, #16]
}
 8003526:	e012      	b.n	800354e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a0c      	ldr	r2, [pc, #48]	; (8003560 <HAL_TIM_Base_MspInit+0xa0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d10d      	bne.n	800354e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	4b08      	ldr	r3, [pc, #32]	; (8003558 <HAL_TIM_Base_MspInit+0x98>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	4a07      	ldr	r2, [pc, #28]	; (8003558 <HAL_TIM_Base_MspInit+0x98>)
 800353c:	f043 0304 	orr.w	r3, r3, #4
 8003540:	6413      	str	r3, [r2, #64]	; 0x40
 8003542:	4b05      	ldr	r3, [pc, #20]	; (8003558 <HAL_TIM_Base_MspInit+0x98>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
}
 800354e:	bf00      	nop
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800
 800355c:	40000400 	.word	0x40000400
 8003560:	40000800 	.word	0x40000800

08003564 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08a      	sub	sp, #40	; 0x28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800356c:	f107 0314 	add.w	r3, r7, #20
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	60da      	str	r2, [r3, #12]
 800357a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a25      	ldr	r2, [pc, #148]	; (8003618 <HAL_TIM_MspPostInit+0xb4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d11f      	bne.n	80035c6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	4b24      	ldr	r3, [pc, #144]	; (800361c <HAL_TIM_MspPostInit+0xb8>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	4a23      	ldr	r2, [pc, #140]	; (800361c <HAL_TIM_MspPostInit+0xb8>)
 8003590:	f043 0304 	orr.w	r3, r3, #4
 8003594:	6313      	str	r3, [r2, #48]	; 0x30
 8003596:	4b21      	ldr	r3, [pc, #132]	; (800361c <HAL_TIM_MspPostInit+0xb8>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80035a2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80035a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a8:	2302      	movs	r3, #2
 80035aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b0:	2300      	movs	r3, #0
 80035b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035b4:	2302      	movs	r3, #2
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035b8:	f107 0314 	add.w	r3, r7, #20
 80035bc:	4619      	mov	r1, r3
 80035be:	4818      	ldr	r0, [pc, #96]	; (8003620 <HAL_TIM_MspPostInit+0xbc>)
 80035c0:	f001 fbc2 	bl	8004d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80035c4:	e023      	b.n	800360e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM4)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a16      	ldr	r2, [pc, #88]	; (8003624 <HAL_TIM_MspPostInit+0xc0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d11e      	bne.n	800360e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035d0:	2300      	movs	r3, #0
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	4b11      	ldr	r3, [pc, #68]	; (800361c <HAL_TIM_MspPostInit+0xb8>)
 80035d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d8:	4a10      	ldr	r2, [pc, #64]	; (800361c <HAL_TIM_MspPostInit+0xb8>)
 80035da:	f043 0308 	orr.w	r3, r3, #8
 80035de:	6313      	str	r3, [r2, #48]	; 0x30
 80035e0:	4b0e      	ldr	r3, [pc, #56]	; (800361c <HAL_TIM_MspPostInit+0xb8>)
 80035e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80035ec:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80035f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f2:	2302      	movs	r3, #2
 80035f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fa:	2300      	movs	r3, #0
 80035fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80035fe:	2302      	movs	r3, #2
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003602:	f107 0314 	add.w	r3, r7, #20
 8003606:	4619      	mov	r1, r3
 8003608:	4807      	ldr	r0, [pc, #28]	; (8003628 <HAL_TIM_MspPostInit+0xc4>)
 800360a:	f001 fb9d 	bl	8004d48 <HAL_GPIO_Init>
}
 800360e:	bf00      	nop
 8003610:	3728      	adds	r7, #40	; 0x28
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40000400 	.word	0x40000400
 800361c:	40023800 	.word	0x40023800
 8003620:	40020800 	.word	0x40020800
 8003624:	40000800 	.word	0x40000800
 8003628:	40020c00 	.word	0x40020c00

0800362c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b090      	sub	sp, #64	; 0x40
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	60da      	str	r2, [r3, #12]
 8003642:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a80      	ldr	r2, [pc, #512]	; (800384c <HAL_UART_MspInit+0x220>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d14b      	bne.n	80036e6 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	62bb      	str	r3, [r7, #40]	; 0x28
 8003652:	4b7f      	ldr	r3, [pc, #508]	; (8003850 <HAL_UART_MspInit+0x224>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	4a7e      	ldr	r2, [pc, #504]	; (8003850 <HAL_UART_MspInit+0x224>)
 8003658:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800365c:	6413      	str	r3, [r2, #64]	; 0x40
 800365e:	4b7c      	ldr	r3, [pc, #496]	; (8003850 <HAL_UART_MspInit+0x224>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003666:	62bb      	str	r3, [r7, #40]	; 0x28
 8003668:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
 800366e:	4b78      	ldr	r3, [pc, #480]	; (8003850 <HAL_UART_MspInit+0x224>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	4a77      	ldr	r2, [pc, #476]	; (8003850 <HAL_UART_MspInit+0x224>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	6313      	str	r3, [r2, #48]	; 0x30
 800367a:	4b75      	ldr	r3, [pc, #468]	; (8003850 <HAL_UART_MspInit+0x224>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003686:	2300      	movs	r3, #0
 8003688:	623b      	str	r3, [r7, #32]
 800368a:	4b71      	ldr	r3, [pc, #452]	; (8003850 <HAL_UART_MspInit+0x224>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	4a70      	ldr	r2, [pc, #448]	; (8003850 <HAL_UART_MspInit+0x224>)
 8003690:	f043 0304 	orr.w	r3, r3, #4
 8003694:	6313      	str	r3, [r2, #48]	; 0x30
 8003696:	4b6e      	ldr	r3, [pc, #440]	; (8003850 <HAL_UART_MspInit+0x224>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	623b      	str	r3, [r7, #32]
 80036a0:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80036a2:	2301      	movs	r3, #1
 80036a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a6:	2302      	movs	r3, #2
 80036a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ae:	2303      	movs	r3, #3
 80036b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80036b2:	2308      	movs	r3, #8
 80036b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036ba:	4619      	mov	r1, r3
 80036bc:	4865      	ldr	r0, [pc, #404]	; (8003854 <HAL_UART_MspInit+0x228>)
 80036be:	f001 fb43 	bl	8004d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80036c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c8:	2302      	movs	r3, #2
 80036ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d0:	2303      	movs	r3, #3
 80036d2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80036d4:	2308      	movs	r3, #8
 80036d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036dc:	4619      	mov	r1, r3
 80036de:	485e      	ldr	r0, [pc, #376]	; (8003858 <HAL_UART_MspInit+0x22c>)
 80036e0:	f001 fb32 	bl	8004d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80036e4:	e0ae      	b.n	8003844 <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART1)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a5c      	ldr	r2, [pc, #368]	; (800385c <HAL_UART_MspInit+0x230>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d135      	bne.n	800375c <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART1_CLK_ENABLE();
 80036f0:	2300      	movs	r3, #0
 80036f2:	61fb      	str	r3, [r7, #28]
 80036f4:	4b56      	ldr	r3, [pc, #344]	; (8003850 <HAL_UART_MspInit+0x224>)
 80036f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f8:	4a55      	ldr	r2, [pc, #340]	; (8003850 <HAL_UART_MspInit+0x224>)
 80036fa:	f043 0310 	orr.w	r3, r3, #16
 80036fe:	6453      	str	r3, [r2, #68]	; 0x44
 8003700:	4b53      	ldr	r3, [pc, #332]	; (8003850 <HAL_UART_MspInit+0x224>)
 8003702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003704:	f003 0310 	and.w	r3, r3, #16
 8003708:	61fb      	str	r3, [r7, #28]
 800370a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800370c:	2300      	movs	r3, #0
 800370e:	61bb      	str	r3, [r7, #24]
 8003710:	4b4f      	ldr	r3, [pc, #316]	; (8003850 <HAL_UART_MspInit+0x224>)
 8003712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003714:	4a4e      	ldr	r2, [pc, #312]	; (8003850 <HAL_UART_MspInit+0x224>)
 8003716:	f043 0301 	orr.w	r3, r3, #1
 800371a:	6313      	str	r3, [r2, #48]	; 0x30
 800371c:	4b4c      	ldr	r3, [pc, #304]	; (8003850 <HAL_UART_MspInit+0x224>)
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	61bb      	str	r3, [r7, #24]
 8003726:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003728:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800372c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372e:	2302      	movs	r3, #2
 8003730:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003732:	2300      	movs	r3, #0
 8003734:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003736:	2303      	movs	r3, #3
 8003738:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800373a:	2307      	movs	r3, #7
 800373c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800373e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003742:	4619      	mov	r1, r3
 8003744:	4843      	ldr	r0, [pc, #268]	; (8003854 <HAL_UART_MspInit+0x228>)
 8003746:	f001 faff 	bl	8004d48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800374a:	2200      	movs	r2, #0
 800374c:	2105      	movs	r1, #5
 800374e:	2025      	movs	r0, #37	; 0x25
 8003750:	f000 fece 	bl	80044f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003754:	2025      	movs	r0, #37	; 0x25
 8003756:	f000 fee7 	bl	8004528 <HAL_NVIC_EnableIRQ>
}
 800375a:	e073      	b.n	8003844 <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART2)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a3f      	ldr	r2, [pc, #252]	; (8003860 <HAL_UART_MspInit+0x234>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d134      	bne.n	80037d0 <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	4b39      	ldr	r3, [pc, #228]	; (8003850 <HAL_UART_MspInit+0x224>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	4a38      	ldr	r2, [pc, #224]	; (8003850 <HAL_UART_MspInit+0x224>)
 8003770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003774:	6413      	str	r3, [r2, #64]	; 0x40
 8003776:	4b36      	ldr	r3, [pc, #216]	; (8003850 <HAL_UART_MspInit+0x224>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	613b      	str	r3, [r7, #16]
 8003786:	4b32      	ldr	r3, [pc, #200]	; (8003850 <HAL_UART_MspInit+0x224>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	4a31      	ldr	r2, [pc, #196]	; (8003850 <HAL_UART_MspInit+0x224>)
 800378c:	f043 0301 	orr.w	r3, r3, #1
 8003790:	6313      	str	r3, [r2, #48]	; 0x30
 8003792:	4b2f      	ldr	r3, [pc, #188]	; (8003850 <HAL_UART_MspInit+0x224>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800379e:	230c      	movs	r3, #12
 80037a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a2:	2302      	movs	r3, #2
 80037a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037aa:	2303      	movs	r3, #3
 80037ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037ae:	2307      	movs	r3, #7
 80037b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037b6:	4619      	mov	r1, r3
 80037b8:	4826      	ldr	r0, [pc, #152]	; (8003854 <HAL_UART_MspInit+0x228>)
 80037ba:	f001 fac5 	bl	8004d48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80037be:	2200      	movs	r2, #0
 80037c0:	2105      	movs	r1, #5
 80037c2:	2026      	movs	r0, #38	; 0x26
 80037c4:	f000 fe94 	bl	80044f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80037c8:	2026      	movs	r0, #38	; 0x26
 80037ca:	f000 fead 	bl	8004528 <HAL_NVIC_EnableIRQ>
}
 80037ce:	e039      	b.n	8003844 <HAL_UART_MspInit+0x218>
  else if(huart->Instance==USART3)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a23      	ldr	r2, [pc, #140]	; (8003864 <HAL_UART_MspInit+0x238>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d134      	bne.n	8003844 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART3_CLK_ENABLE();
 80037da:	2300      	movs	r3, #0
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <HAL_UART_MspInit+0x224>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	4a1b      	ldr	r2, [pc, #108]	; (8003850 <HAL_UART_MspInit+0x224>)
 80037e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037e8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ea:	4b19      	ldr	r3, [pc, #100]	; (8003850 <HAL_UART_MspInit+0x224>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	4b15      	ldr	r3, [pc, #84]	; (8003850 <HAL_UART_MspInit+0x224>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	4a14      	ldr	r2, [pc, #80]	; (8003850 <HAL_UART_MspInit+0x224>)
 8003800:	f043 0302 	orr.w	r3, r3, #2
 8003804:	6313      	str	r3, [r2, #48]	; 0x30
 8003806:	4b12      	ldr	r3, [pc, #72]	; (8003850 <HAL_UART_MspInit+0x224>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003812:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003816:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003818:	2302      	movs	r3, #2
 800381a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381c:	2300      	movs	r3, #0
 800381e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003820:	2303      	movs	r3, #3
 8003822:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003824:	2307      	movs	r3, #7
 8003826:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003828:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800382c:	4619      	mov	r1, r3
 800382e:	480e      	ldr	r0, [pc, #56]	; (8003868 <HAL_UART_MspInit+0x23c>)
 8003830:	f001 fa8a 	bl	8004d48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003834:	2200      	movs	r2, #0
 8003836:	2105      	movs	r1, #5
 8003838:	2027      	movs	r0, #39	; 0x27
 800383a:	f000 fe59 	bl	80044f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800383e:	2027      	movs	r0, #39	; 0x27
 8003840:	f000 fe72 	bl	8004528 <HAL_NVIC_EnableIRQ>
}
 8003844:	bf00      	nop
 8003846:	3740      	adds	r7, #64	; 0x40
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40004c00 	.word	0x40004c00
 8003850:	40023800 	.word	0x40023800
 8003854:	40020000 	.word	0x40020000
 8003858:	40020800 	.word	0x40020800
 800385c:	40011000 	.word	0x40011000
 8003860:	40004400 	.word	0x40004400
 8003864:	40004800 	.word	0x40004800
 8003868:	40020400 	.word	0x40020400

0800386c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08e      	sub	sp, #56	; 0x38
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	4b33      	ldr	r3, [pc, #204]	; (8003950 <HAL_InitTick+0xe4>)
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	4a32      	ldr	r2, [pc, #200]	; (8003950 <HAL_InitTick+0xe4>)
 8003886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800388a:	6413      	str	r3, [r2, #64]	; 0x40
 800388c:	4b30      	ldr	r3, [pc, #192]	; (8003950 <HAL_InitTick+0xe4>)
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003898:	f107 0210 	add.w	r2, r7, #16
 800389c:	f107 0314 	add.w	r3, r7, #20
 80038a0:	4611      	mov	r1, r2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f002 f8e8 	bl	8005a78 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80038ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d103      	bne.n	80038ba <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80038b2:	f002 f8b9 	bl	8005a28 <HAL_RCC_GetPCLK1Freq>
 80038b6:	6378      	str	r0, [r7, #52]	; 0x34
 80038b8:	e004      	b.n	80038c4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80038ba:	f002 f8b5 	bl	8005a28 <HAL_RCC_GetPCLK1Freq>
 80038be:	4603      	mov	r3, r0
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c6:	4a23      	ldr	r2, [pc, #140]	; (8003954 <HAL_InitTick+0xe8>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	0c9b      	lsrs	r3, r3, #18
 80038ce:	3b01      	subs	r3, #1
 80038d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80038d2:	4b21      	ldr	r3, [pc, #132]	; (8003958 <HAL_InitTick+0xec>)
 80038d4:	4a21      	ldr	r2, [pc, #132]	; (800395c <HAL_InitTick+0xf0>)
 80038d6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80038d8:	4b1f      	ldr	r3, [pc, #124]	; (8003958 <HAL_InitTick+0xec>)
 80038da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038de:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80038e0:	4a1d      	ldr	r2, [pc, #116]	; (8003958 <HAL_InitTick+0xec>)
 80038e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e4:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80038e6:	4b1c      	ldr	r3, [pc, #112]	; (8003958 <HAL_InitTick+0xec>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ec:	4b1a      	ldr	r3, [pc, #104]	; (8003958 <HAL_InitTick+0xec>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038f2:	4b19      	ldr	r3, [pc, #100]	; (8003958 <HAL_InitTick+0xec>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80038f8:	4817      	ldr	r0, [pc, #92]	; (8003958 <HAL_InitTick+0xec>)
 80038fa:	f002 f8ef 	bl	8005adc <HAL_TIM_Base_Init>
 80038fe:	4603      	mov	r3, r0
 8003900:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003904:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003908:	2b00      	cmp	r3, #0
 800390a:	d11b      	bne.n	8003944 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 800390c:	4812      	ldr	r0, [pc, #72]	; (8003958 <HAL_InitTick+0xec>)
 800390e:	f002 f935 	bl	8005b7c <HAL_TIM_Base_Start_IT>
 8003912:	4603      	mov	r3, r0
 8003914:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003918:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800391c:	2b00      	cmp	r3, #0
 800391e:	d111      	bne.n	8003944 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003920:	202d      	movs	r0, #45	; 0x2d
 8003922:	f000 fe01 	bl	8004528 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b0f      	cmp	r3, #15
 800392a:	d808      	bhi.n	800393e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 800392c:	2200      	movs	r2, #0
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	202d      	movs	r0, #45	; 0x2d
 8003932:	f000 fddd 	bl	80044f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003936:	4a0a      	ldr	r2, [pc, #40]	; (8003960 <HAL_InitTick+0xf4>)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	e002      	b.n	8003944 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003944:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003948:	4618      	mov	r0, r3
 800394a:	3738      	adds	r7, #56	; 0x38
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40023800 	.word	0x40023800
 8003954:	431bde83 	.word	0x431bde83
 8003958:	20000780 	.word	0x20000780
 800395c:	40002000 	.word	0x40002000
 8003960:	20000054 	.word	0x20000054

08003964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003968:	e7fe      	b.n	8003968 <NMI_Handler+0x4>

0800396a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800396a:	b480      	push	{r7}
 800396c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800396e:	e7fe      	b.n	800396e <HardFault_Handler+0x4>

08003970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003974:	e7fe      	b.n	8003974 <MemManage_Handler+0x4>

08003976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003976:	b480      	push	{r7}
 8003978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800397a:	e7fe      	b.n	800397a <BusFault_Handler+0x4>

0800397c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003980:	e7fe      	b.n	8003980 <UsageFault_Handler+0x4>

08003982 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003982:	b480      	push	{r7}
 8003984:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003986:	bf00      	nop
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003994:	2040      	movs	r0, #64	; 0x40
 8003996:	f001 fbbf 	bl	8005118 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800399a:	bf00      	nop
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80039a4:	4802      	ldr	r0, [pc, #8]	; (80039b0 <TIM2_IRQHandler+0x10>)
 80039a6:	f002 fa7b 	bl	8005ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80039aa:	bf00      	nop
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000440 	.word	0x20000440

080039b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80039b8:	4802      	ldr	r0, [pc, #8]	; (80039c4 <USART1_IRQHandler+0x10>)
 80039ba:	f003 f9db 	bl	8006d74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	2000055c 	.word	0x2000055c

080039c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80039cc:	4802      	ldr	r0, [pc, #8]	; (80039d8 <USART2_IRQHandler+0x10>)
 80039ce:	f003 f9d1 	bl	8006d74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	200005a0 	.word	0x200005a0

080039dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80039e0:	4802      	ldr	r0, [pc, #8]	; (80039ec <USART3_IRQHandler+0x10>)
 80039e2:	f003 f9c7 	bl	8006d74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	200005e4 	.word	0x200005e4

080039f0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80039f4:	4802      	ldr	r0, [pc, #8]	; (8003a00 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80039f6:	f002 fa53 	bl	8005ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20000780 	.word	0x20000780

08003a04 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a08:	4802      	ldr	r0, [pc, #8]	; (8003a14 <DMA2_Stream0_IRQHandler+0x10>)
 8003a0a:	f000 ff33 	bl	8004874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	200003e0 	.word	0x200003e0

08003a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a1c:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <SystemInit+0x20>)
 8003a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a22:	4a05      	ldr	r2, [pc, #20]	; (8003a38 <SystemInit+0x20>)
 8003a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}/**
 8003a2c:	bf00      	nop
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	e000ed00 	.word	0xe000ed00

08003a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a40:	480d      	ldr	r0, [pc, #52]	; (8003a78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a42:	490e      	ldr	r1, [pc, #56]	; (8003a7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a44:	4a0e      	ldr	r2, [pc, #56]	; (8003a80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a48:	e002      	b.n	8003a50 <LoopCopyDataInit>

08003a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a4e:	3304      	adds	r3, #4

08003a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a54:	d3f9      	bcc.n	8003a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a56:	4a0b      	ldr	r2, [pc, #44]	; (8003a84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a58:	4c0b      	ldr	r4, [pc, #44]	; (8003a88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a5c:	e001      	b.n	8003a62 <LoopFillZerobss>

08003a5e <FillZerobss>:
FillZerobss:
  str  r3, [r2]
 8003a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a60:	3204      	adds	r2, #4

08003a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a64:	d3fb      	bcc.n	8003a5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a66:	f7ff ffd7 	bl	8003a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a6a:	f005 fb67 	bl	800913c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a6e:	f7fd fce3 	bl	8001438 <main>
  bx  lr    
 8003a72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003a74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a7c:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8003a80:	08009470 	.word	0x08009470
  ldr r2, =_sbss
 8003a84:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8003a88:	20004528 	.word	0x20004528

08003a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a8c:	e7fe      	b.n	8003a8c <ADC_IRQHandler>
	...

08003a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a94:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <HAL_Init+0x40>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a0d      	ldr	r2, [pc, #52]	; (8003ad0 <HAL_Init+0x40>)
 8003a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <HAL_Init+0x40>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a0a      	ldr	r2, [pc, #40]	; (8003ad0 <HAL_Init+0x40>)
 8003aa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003aaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003aac:	4b08      	ldr	r3, [pc, #32]	; (8003ad0 <HAL_Init+0x40>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a07      	ldr	r2, [pc, #28]	; (8003ad0 <HAL_Init+0x40>)
 8003ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ab8:	2003      	movs	r0, #3
 8003aba:	f000 fd0e 	bl	80044da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003abe:	200f      	movs	r0, #15
 8003ac0:	f7ff fed4 	bl	800386c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ac4:	f7ff fc58 	bl	8003378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40023c00 	.word	0x40023c00

08003ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ad8:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <HAL_IncTick+0x20>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	461a      	mov	r2, r3
 8003ade:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <HAL_IncTick+0x24>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	4a04      	ldr	r2, [pc, #16]	; (8003af8 <HAL_IncTick+0x24>)
 8003ae6:	6013      	str	r3, [r2, #0]
}
 8003ae8:	bf00      	nop
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	20000058 	.word	0x20000058
 8003af8:	200007c8 	.word	0x200007c8

08003afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  return uwTick;
 8003b00:	4b03      	ldr	r3, [pc, #12]	; (8003b10 <HAL_GetTick+0x14>)
 8003b02:	681b      	ldr	r3, [r3, #0]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	200007c8 	.word	0x200007c8

08003b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b1c:	f7ff ffee 	bl	8003afc <HAL_GetTick>
 8003b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2c:	d005      	beq.n	8003b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b2e:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <HAL_Delay+0x44>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4413      	add	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b3a:	bf00      	nop
 8003b3c:	f7ff ffde 	bl	8003afc <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d8f7      	bhi.n	8003b3c <HAL_Delay+0x28>
  {
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	bf00      	nop
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000058 	.word	0x20000058

08003b5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e033      	b.n	8003bda <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d109      	bne.n	8003b8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7ff fc28 	bl	80033d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d118      	bne.n	8003bcc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ba2:	f023 0302 	bic.w	r3, r3, #2
 8003ba6:	f043 0202 	orr.w	r2, r3, #2
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fa68 	bl	8004084 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	f023 0303 	bic.w	r3, r3, #3
 8003bc2:	f043 0201 	orr.w	r2, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	641a      	str	r2, [r3, #64]	; 0x40
 8003bca:	e001      	b.n	8003bd0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_ADC_Start_DMA+0x1e>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e0e9      	b.n	8003dd6 <HAL_ADC_Start_DMA+0x1f2>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d018      	beq.n	8003c4a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689a      	ldr	r2, [r3, #8]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c28:	4b6d      	ldr	r3, [pc, #436]	; (8003de0 <HAL_ADC_Start_DMA+0x1fc>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a6d      	ldr	r2, [pc, #436]	; (8003de4 <HAL_ADC_Start_DMA+0x200>)
 8003c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c32:	0c9a      	lsrs	r2, r3, #18
 8003c34:	4613      	mov	r3, r2
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	4413      	add	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003c3c:	e002      	b.n	8003c44 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	3b01      	subs	r3, #1
 8003c42:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f9      	bne.n	8003c3e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c58:	d107      	bne.n	8003c6a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c68:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	f040 80a1 	bne.w	8003dbc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003c82:	f023 0301 	bic.w	r3, r3, #1
 8003c86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d007      	beq.n	8003cac <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ca4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb8:	d106      	bne.n	8003cc8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbe:	f023 0206 	bic.w	r2, r3, #6
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	645a      	str	r2, [r3, #68]	; 0x44
 8003cc6:	e002      	b.n	8003cce <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cd6:	4b44      	ldr	r3, [pc, #272]	; (8003de8 <HAL_ADC_Start_DMA+0x204>)
 8003cd8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	4a43      	ldr	r2, [pc, #268]	; (8003dec <HAL_ADC_Start_DMA+0x208>)
 8003ce0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	4a42      	ldr	r2, [pc, #264]	; (8003df0 <HAL_ADC_Start_DMA+0x20c>)
 8003ce8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cee:	4a41      	ldr	r2, [pc, #260]	; (8003df4 <HAL_ADC_Start_DMA+0x210>)
 8003cf0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003cfa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003d0a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d1a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	334c      	adds	r3, #76	; 0x4c
 8003d26:	4619      	mov	r1, r3
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f000 fcb8 	bl	80046a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d12a      	bne.n	8003d92 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a2d      	ldr	r2, [pc, #180]	; (8003df8 <HAL_ADC_Start_DMA+0x214>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d015      	beq.n	8003d72 <HAL_ADC_Start_DMA+0x18e>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a2c      	ldr	r2, [pc, #176]	; (8003dfc <HAL_ADC_Start_DMA+0x218>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d105      	bne.n	8003d5c <HAL_ADC_Start_DMA+0x178>
 8003d50:	4b25      	ldr	r3, [pc, #148]	; (8003de8 <HAL_ADC_Start_DMA+0x204>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a27      	ldr	r2, [pc, #156]	; (8003e00 <HAL_ADC_Start_DMA+0x21c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d136      	bne.n	8003dd4 <HAL_ADC_Start_DMA+0x1f0>
 8003d66:	4b20      	ldr	r3, [pc, #128]	; (8003de8 <HAL_ADC_Start_DMA+0x204>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f003 0310 	and.w	r3, r3, #16
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d130      	bne.n	8003dd4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d129      	bne.n	8003dd4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d8e:	609a      	str	r2, [r3, #8]
 8003d90:	e020      	b.n	8003dd4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a18      	ldr	r2, [pc, #96]	; (8003df8 <HAL_ADC_Start_DMA+0x214>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d11b      	bne.n	8003dd4 <HAL_ADC_Start_DMA+0x1f0>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d114      	bne.n	8003dd4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003db8:	609a      	str	r2, [r3, #8]
 8003dba:	e00b      	b.n	8003dd4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	f043 0210 	orr.w	r2, r3, #16
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dcc:	f043 0201 	orr.w	r2, r3, #1
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	20000050 	.word	0x20000050
 8003de4:	431bde83 	.word	0x431bde83
 8003de8:	40012300 	.word	0x40012300
 8003dec:	0800427d 	.word	0x0800427d
 8003df0:	08004337 	.word	0x08004337
 8003df4:	08004353 	.word	0x08004353
 8003df8:	40012000 	.word	0x40012000
 8003dfc:	40012100 	.word	0x40012100
 8003e00:	40012200 	.word	0x40012200

08003e04 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x1c>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e105      	b.n	8004068 <HAL_ADC_ConfigChannel+0x228>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b09      	cmp	r3, #9
 8003e6a:	d925      	bls.n	8003eb8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68d9      	ldr	r1, [r3, #12]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	4413      	add	r3, r2
 8003e80:	3b1e      	subs	r3, #30
 8003e82:	2207      	movs	r2, #7
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	43da      	mvns	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	400a      	ands	r2, r1
 8003e90:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68d9      	ldr	r1, [r3, #12]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	4403      	add	r3, r0
 8003eaa:	3b1e      	subs	r3, #30
 8003eac:	409a      	lsls	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	60da      	str	r2, [r3, #12]
 8003eb6:	e022      	b.n	8003efe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6919      	ldr	r1, [r3, #16]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	4413      	add	r3, r2
 8003ecc:	2207      	movs	r2, #7
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	43da      	mvns	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	400a      	ands	r2, r1
 8003eda:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6919      	ldr	r1, [r3, #16]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	4618      	mov	r0, r3
 8003eee:	4603      	mov	r3, r0
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	4403      	add	r3, r0
 8003ef4:	409a      	lsls	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b06      	cmp	r3, #6
 8003f04:	d824      	bhi.n	8003f50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	3b05      	subs	r3, #5
 8003f18:	221f      	movs	r2, #31
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	43da      	mvns	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	400a      	ands	r2, r1
 8003f26:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	4618      	mov	r0, r3
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	3b05      	subs	r3, #5
 8003f42:	fa00 f203 	lsl.w	r2, r0, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	635a      	str	r2, [r3, #52]	; 0x34
 8003f4e:	e04c      	b.n	8003fea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b0c      	cmp	r3, #12
 8003f56:	d824      	bhi.n	8003fa2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	3b23      	subs	r3, #35	; 0x23
 8003f6a:	221f      	movs	r2, #31
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	43da      	mvns	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	400a      	ands	r2, r1
 8003f78:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	4618      	mov	r0, r3
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	3b23      	subs	r3, #35	; 0x23
 8003f94:	fa00 f203 	lsl.w	r2, r0, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	631a      	str	r2, [r3, #48]	; 0x30
 8003fa0:	e023      	b.n	8003fea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3b41      	subs	r3, #65	; 0x41
 8003fb4:	221f      	movs	r2, #31
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	43da      	mvns	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	400a      	ands	r2, r1
 8003fc2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	3b41      	subs	r3, #65	; 0x41
 8003fde:	fa00 f203 	lsl.w	r2, r0, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fea:	4b22      	ldr	r3, [pc, #136]	; (8004074 <HAL_ADC_ConfigChannel+0x234>)
 8003fec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a21      	ldr	r2, [pc, #132]	; (8004078 <HAL_ADC_ConfigChannel+0x238>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d109      	bne.n	800400c <HAL_ADC_ConfigChannel+0x1cc>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b12      	cmp	r3, #18
 8003ffe:	d105      	bne.n	800400c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a19      	ldr	r2, [pc, #100]	; (8004078 <HAL_ADC_ConfigChannel+0x238>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d123      	bne.n	800405e <HAL_ADC_ConfigChannel+0x21e>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b10      	cmp	r3, #16
 800401c:	d003      	beq.n	8004026 <HAL_ADC_ConfigChannel+0x1e6>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b11      	cmp	r3, #17
 8004024:	d11b      	bne.n	800405e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b10      	cmp	r3, #16
 8004038:	d111      	bne.n	800405e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800403a:	4b10      	ldr	r3, [pc, #64]	; (800407c <HAL_ADC_ConfigChannel+0x23c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a10      	ldr	r2, [pc, #64]	; (8004080 <HAL_ADC_ConfigChannel+0x240>)
 8004040:	fba2 2303 	umull	r2, r3, r2, r3
 8004044:	0c9a      	lsrs	r2, r3, #18
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004050:	e002      	b.n	8004058 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	3b01      	subs	r3, #1
 8004056:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f9      	bne.n	8004052 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	40012300 	.word	0x40012300
 8004078:	40012000 	.word	0x40012000
 800407c:	20000050 	.word	0x20000050
 8004080:	431bde83 	.word	0x431bde83

08004084 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800408c:	4b79      	ldr	r3, [pc, #484]	; (8004274 <ADC_Init+0x1f0>)
 800408e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	431a      	orrs	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6859      	ldr	r1, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	021a      	lsls	r2, r3, #8
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80040dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6859      	ldr	r1, [r3, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6899      	ldr	r1, [r3, #8]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	4a58      	ldr	r2, [pc, #352]	; (8004278 <ADC_Init+0x1f4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d022      	beq.n	8004162 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800412a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6899      	ldr	r1, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800414c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6899      	ldr	r1, [r3, #8]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	609a      	str	r2, [r3, #8]
 8004160:	e00f      	b.n	8004182 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004170:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004180:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0202 	bic.w	r2, r2, #2
 8004190:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6899      	ldr	r1, [r3, #8]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	7e1b      	ldrb	r3, [r3, #24]
 800419c:	005a      	lsls	r2, r3, #1
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d01b      	beq.n	80041e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80041ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6859      	ldr	r1, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	3b01      	subs	r3, #1
 80041dc:	035a      	lsls	r2, r3, #13
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]
 80041e6:	e007      	b.n	80041f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004206:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	3b01      	subs	r3, #1
 8004214:	051a      	lsls	r2, r3, #20
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800422c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6899      	ldr	r1, [r3, #8]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800423a:	025a      	lsls	r2, r3, #9
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004252:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6899      	ldr	r1, [r3, #8]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	029a      	lsls	r2, r3, #10
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	609a      	str	r2, [r3, #8]
}
 8004268:	bf00      	nop
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	40012300 	.word	0x40012300
 8004278:	0f000001 	.word	0x0f000001

0800427c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004292:	2b00      	cmp	r3, #0
 8004294:	d13c      	bne.n	8004310 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d12b      	bne.n	8004308 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d127      	bne.n	8004308 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d006      	beq.n	80042d4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d119      	bne.n	8004308 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0220 	bic.w	r2, r2, #32
 80042e2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d105      	bne.n	8004308 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	f043 0201 	orr.w	r2, r3, #1
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f7ff fd7b 	bl	8003e04 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800430e:	e00e      	b.n	800432e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	f003 0310 	and.w	r3, r3, #16
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f7ff fd85 	bl	8003e2c <HAL_ADC_ErrorCallback>
}
 8004322:	e004      	b.n	800432e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	4798      	blx	r3
}
 800432e:	bf00      	nop
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b084      	sub	sp, #16
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004342:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f7ff fd67 	bl	8003e18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2240      	movs	r2, #64	; 0x40
 8004364:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	f043 0204 	orr.w	r2, r3, #4
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f7ff fd5a 	bl	8003e2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004378:	bf00      	nop
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004390:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <__NVIC_SetPriorityGrouping+0x44>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800439c:	4013      	ands	r3, r2
 800439e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043b2:	4a04      	ldr	r2, [pc, #16]	; (80043c4 <__NVIC_SetPriorityGrouping+0x44>)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	60d3      	str	r3, [r2, #12]
}
 80043b8:	bf00      	nop
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	e000ed00 	.word	0xe000ed00

080043c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043cc:	4b04      	ldr	r3, [pc, #16]	; (80043e0 <__NVIC_GetPriorityGrouping+0x18>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	0a1b      	lsrs	r3, r3, #8
 80043d2:	f003 0307 	and.w	r3, r3, #7
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	e000ed00 	.word	0xe000ed00

080043e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	4603      	mov	r3, r0
 80043ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	db0b      	blt.n	800440e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	f003 021f 	and.w	r2, r3, #31
 80043fc:	4907      	ldr	r1, [pc, #28]	; (800441c <__NVIC_EnableIRQ+0x38>)
 80043fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	2001      	movs	r0, #1
 8004406:	fa00 f202 	lsl.w	r2, r0, r2
 800440a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	e000e100 	.word	0xe000e100

08004420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	4603      	mov	r3, r0
 8004428:	6039      	str	r1, [r7, #0]
 800442a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800442c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004430:	2b00      	cmp	r3, #0
 8004432:	db0a      	blt.n	800444a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	b2da      	uxtb	r2, r3
 8004438:	490c      	ldr	r1, [pc, #48]	; (800446c <__NVIC_SetPriority+0x4c>)
 800443a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800443e:	0112      	lsls	r2, r2, #4
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	440b      	add	r3, r1
 8004444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004448:	e00a      	b.n	8004460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	b2da      	uxtb	r2, r3
 800444e:	4908      	ldr	r1, [pc, #32]	; (8004470 <__NVIC_SetPriority+0x50>)
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	3b04      	subs	r3, #4
 8004458:	0112      	lsls	r2, r2, #4
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	440b      	add	r3, r1
 800445e:	761a      	strb	r2, [r3, #24]
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	e000e100 	.word	0xe000e100
 8004470:	e000ed00 	.word	0xe000ed00

08004474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004474:	b480      	push	{r7}
 8004476:	b089      	sub	sp, #36	; 0x24
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	f1c3 0307 	rsb	r3, r3, #7
 800448e:	2b04      	cmp	r3, #4
 8004490:	bf28      	it	cs
 8004492:	2304      	movcs	r3, #4
 8004494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	3304      	adds	r3, #4
 800449a:	2b06      	cmp	r3, #6
 800449c:	d902      	bls.n	80044a4 <NVIC_EncodePriority+0x30>
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	3b03      	subs	r3, #3
 80044a2:	e000      	b.n	80044a6 <NVIC_EncodePriority+0x32>
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044a8:	f04f 32ff 	mov.w	r2, #4294967295
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	fa02 f303 	lsl.w	r3, r2, r3
 80044b2:	43da      	mvns	r2, r3
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	401a      	ands	r2, r3
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044bc:	f04f 31ff 	mov.w	r1, #4294967295
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	fa01 f303 	lsl.w	r3, r1, r3
 80044c6:	43d9      	mvns	r1, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044cc:	4313      	orrs	r3, r2
         );
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3724      	adds	r7, #36	; 0x24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7ff ff4c 	bl	8004380 <__NVIC_SetPriorityGrouping>
}
 80044e8:	bf00      	nop
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044fe:	2300      	movs	r3, #0
 8004500:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004502:	f7ff ff61 	bl	80043c8 <__NVIC_GetPriorityGrouping>
 8004506:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	6978      	ldr	r0, [r7, #20]
 800450e:	f7ff ffb1 	bl	8004474 <NVIC_EncodePriority>
 8004512:	4602      	mov	r2, r0
 8004514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004518:	4611      	mov	r1, r2
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff ff80 	bl	8004420 <__NVIC_SetPriority>
}
 8004520:	bf00      	nop
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff ff54 	bl	80043e4 <__NVIC_EnableIRQ>
}
 800453c:	bf00      	nop
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004550:	f7ff fad4 	bl	8003afc <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e099      	b.n	8004694 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0201 	bic.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004580:	e00f      	b.n	80045a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004582:	f7ff fabb 	bl	8003afc <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b05      	cmp	r3, #5
 800458e:	d908      	bls.n	80045a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2203      	movs	r2, #3
 800459a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e078      	b.n	8004694 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e8      	bne.n	8004582 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	4b38      	ldr	r3, [pc, #224]	; (800469c <HAL_DMA_Init+0x158>)
 80045bc:	4013      	ands	r3, r2
 80045be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d107      	bne.n	800460c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	4313      	orrs	r3, r2
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	4313      	orrs	r3, r2
 800460a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f023 0307 	bic.w	r3, r3, #7
 8004622:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	2b04      	cmp	r3, #4
 8004634:	d117      	bne.n	8004666 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00e      	beq.n	8004666 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 fb01 	bl	8004c50 <DMA_CheckFifoParam>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d008      	beq.n	8004666 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2240      	movs	r2, #64	; 0x40
 8004658:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004662:	2301      	movs	r3, #1
 8004664:	e016      	b.n	8004694 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 fab8 	bl	8004be4 <DMA_CalcBaseAndBitshift>
 8004674:	4603      	mov	r3, r0
 8004676:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467c:	223f      	movs	r2, #63	; 0x3f
 800467e:	409a      	lsls	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	f010803f 	.word	0xf010803f

080046a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <HAL_DMA_Start_IT+0x26>
 80046c2:	2302      	movs	r3, #2
 80046c4:	e040      	b.n	8004748 <HAL_DMA_Start_IT+0xa8>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d12f      	bne.n	800473a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2202      	movs	r2, #2
 80046de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 fa4a 	bl	8004b88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f8:	223f      	movs	r2, #63	; 0x3f
 80046fa:	409a      	lsls	r2, r3
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0216 	orr.w	r2, r2, #22
 800470e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	2b00      	cmp	r3, #0
 8004716:	d007      	beq.n	8004728 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0208 	orr.w	r2, r2, #8
 8004726:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	e005      	b.n	8004746 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004742:	2302      	movs	r3, #2
 8004744:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004746:	7dfb      	ldrb	r3, [r7, #23]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800475e:	f7ff f9cd 	bl	8003afc <HAL_GetTick>
 8004762:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d008      	beq.n	8004782 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2280      	movs	r2, #128	; 0x80
 8004774:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e052      	b.n	8004828 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0216 	bic.w	r2, r2, #22
 8004790:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695a      	ldr	r2, [r3, #20]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d103      	bne.n	80047b2 <HAL_DMA_Abort+0x62>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d007      	beq.n	80047c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0208 	bic.w	r2, r2, #8
 80047c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0201 	bic.w	r2, r2, #1
 80047d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047d2:	e013      	b.n	80047fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047d4:	f7ff f992 	bl	8003afc <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b05      	cmp	r3, #5
 80047e0:	d90c      	bls.n	80047fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2220      	movs	r2, #32
 80047e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2203      	movs	r2, #3
 80047ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e015      	b.n	8004828 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1e4      	bne.n	80047d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480e:	223f      	movs	r2, #63	; 0x3f
 8004810:	409a      	lsls	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d004      	beq.n	800484e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2280      	movs	r2, #128	; 0x80
 8004848:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e00c      	b.n	8004868 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2205      	movs	r2, #5
 8004852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0201 	bic.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004880:	4b8e      	ldr	r3, [pc, #568]	; (8004abc <HAL_DMA_IRQHandler+0x248>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a8e      	ldr	r2, [pc, #568]	; (8004ac0 <HAL_DMA_IRQHandler+0x24c>)
 8004886:	fba2 2303 	umull	r2, r3, r2, r3
 800488a:	0a9b      	lsrs	r3, r3, #10
 800488c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004892:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800489e:	2208      	movs	r2, #8
 80048a0:	409a      	lsls	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4013      	ands	r3, r2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d01a      	beq.n	80048e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d013      	beq.n	80048e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0204 	bic.w	r2, r2, #4
 80048c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048cc:	2208      	movs	r2, #8
 80048ce:	409a      	lsls	r2, r3
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d8:	f043 0201 	orr.w	r2, r3, #1
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e4:	2201      	movs	r2, #1
 80048e6:	409a      	lsls	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4013      	ands	r3, r2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d012      	beq.n	8004916 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00b      	beq.n	8004916 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004902:	2201      	movs	r2, #1
 8004904:	409a      	lsls	r2, r3
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490e:	f043 0202 	orr.w	r2, r3, #2
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491a:	2204      	movs	r2, #4
 800491c:	409a      	lsls	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4013      	ands	r3, r2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d012      	beq.n	800494c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00b      	beq.n	800494c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004938:	2204      	movs	r2, #4
 800493a:	409a      	lsls	r2, r3
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004944:	f043 0204 	orr.w	r2, r3, #4
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004950:	2210      	movs	r2, #16
 8004952:	409a      	lsls	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4013      	ands	r3, r2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d043      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d03c      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496e:	2210      	movs	r2, #16
 8004970:	409a      	lsls	r2, r3
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d018      	beq.n	80049b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d108      	bne.n	80049a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d024      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	4798      	blx	r3
 80049a2:	e01f      	b.n	80049e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d01b      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	4798      	blx	r3
 80049b4:	e016      	b.n	80049e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d107      	bne.n	80049d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0208 	bic.w	r2, r2, #8
 80049d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e8:	2220      	movs	r2, #32
 80049ea:	409a      	lsls	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4013      	ands	r3, r2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 808f 	beq.w	8004b14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0310 	and.w	r3, r3, #16
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 8087 	beq.w	8004b14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	409a      	lsls	r2, r3
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b05      	cmp	r3, #5
 8004a1c:	d136      	bne.n	8004a8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0216 	bic.w	r2, r2, #22
 8004a2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695a      	ldr	r2, [r3, #20]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d103      	bne.n	8004a4e <HAL_DMA_IRQHandler+0x1da>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d007      	beq.n	8004a5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0208 	bic.w	r2, r2, #8
 8004a5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a62:	223f      	movs	r2, #63	; 0x3f
 8004a64:	409a      	lsls	r2, r3
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d07e      	beq.n	8004b80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	4798      	blx	r3
        }
        return;
 8004a8a:	e079      	b.n	8004b80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d01d      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10d      	bne.n	8004ac4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d031      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	4798      	blx	r3
 8004ab8:	e02c      	b.n	8004b14 <HAL_DMA_IRQHandler+0x2a0>
 8004aba:	bf00      	nop
 8004abc:	20000050 	.word	0x20000050
 8004ac0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d023      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	4798      	blx	r3
 8004ad4:	e01e      	b.n	8004b14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10f      	bne.n	8004b04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0210 	bic.w	r2, r2, #16
 8004af2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d032      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d022      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2205      	movs	r2, #5
 8004b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0201 	bic.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	3301      	adds	r3, #1
 8004b44:	60bb      	str	r3, [r7, #8]
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d307      	bcc.n	8004b5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1f2      	bne.n	8004b40 <HAL_DMA_IRQHandler+0x2cc>
 8004b5a:	e000      	b.n	8004b5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004b5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	4798      	blx	r3
 8004b7e:	e000      	b.n	8004b82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b80:	bf00      	nop
    }
  }
}
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ba4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	2b40      	cmp	r3, #64	; 0x40
 8004bb4:	d108      	bne.n	8004bc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004bc6:	e007      	b.n	8004bd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	60da      	str	r2, [r3, #12]
}
 8004bd8:	bf00      	nop
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	3b10      	subs	r3, #16
 8004bf4:	4a14      	ldr	r2, [pc, #80]	; (8004c48 <DMA_CalcBaseAndBitshift+0x64>)
 8004bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfa:	091b      	lsrs	r3, r3, #4
 8004bfc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004bfe:	4a13      	ldr	r2, [pc, #76]	; (8004c4c <DMA_CalcBaseAndBitshift+0x68>)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4413      	add	r3, r2
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	461a      	mov	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d909      	bls.n	8004c26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c1a:	f023 0303 	bic.w	r3, r3, #3
 8004c1e:	1d1a      	adds	r2, r3, #4
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	659a      	str	r2, [r3, #88]	; 0x58
 8004c24:	e007      	b.n	8004c36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c2e:	f023 0303 	bic.w	r3, r3, #3
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	aaaaaaab 	.word	0xaaaaaaab
 8004c4c:	080093f8 	.word	0x080093f8

08004c50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d11f      	bne.n	8004caa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2b03      	cmp	r3, #3
 8004c6e:	d856      	bhi.n	8004d1e <DMA_CheckFifoParam+0xce>
 8004c70:	a201      	add	r2, pc, #4	; (adr r2, 8004c78 <DMA_CheckFifoParam+0x28>)
 8004c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c76:	bf00      	nop
 8004c78:	08004c89 	.word	0x08004c89
 8004c7c:	08004c9b 	.word	0x08004c9b
 8004c80:	08004c89 	.word	0x08004c89
 8004c84:	08004d1f 	.word	0x08004d1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d046      	beq.n	8004d22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c98:	e043      	b.n	8004d22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ca2:	d140      	bne.n	8004d26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ca8:	e03d      	b.n	8004d26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cb2:	d121      	bne.n	8004cf8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2b03      	cmp	r3, #3
 8004cb8:	d837      	bhi.n	8004d2a <DMA_CheckFifoParam+0xda>
 8004cba:	a201      	add	r2, pc, #4	; (adr r2, 8004cc0 <DMA_CheckFifoParam+0x70>)
 8004cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc0:	08004cd1 	.word	0x08004cd1
 8004cc4:	08004cd7 	.word	0x08004cd7
 8004cc8:	08004cd1 	.word	0x08004cd1
 8004ccc:	08004ce9 	.word	0x08004ce9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cd4:	e030      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d025      	beq.n	8004d2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ce6:	e022      	b.n	8004d2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cf0:	d11f      	bne.n	8004d32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004cf6:	e01c      	b.n	8004d32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d903      	bls.n	8004d06 <DMA_CheckFifoParam+0xb6>
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d003      	beq.n	8004d0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d04:	e018      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	73fb      	strb	r3, [r7, #15]
      break;
 8004d0a:	e015      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00e      	beq.n	8004d36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d1c:	e00b      	b.n	8004d36 <DMA_CheckFifoParam+0xe6>
      break;
 8004d1e:	bf00      	nop
 8004d20:	e00a      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
      break;
 8004d22:	bf00      	nop
 8004d24:	e008      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
      break;
 8004d26:	bf00      	nop
 8004d28:	e006      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
      break;
 8004d2a:	bf00      	nop
 8004d2c:	e004      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
      break;
 8004d2e:	bf00      	nop
 8004d30:	e002      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
      break;   
 8004d32:	bf00      	nop
 8004d34:	e000      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
      break;
 8004d36:	bf00      	nop
    }
  } 
  
  return status; 
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop

08004d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b089      	sub	sp, #36	; 0x24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61fb      	str	r3, [r7, #28]
 8004d62:	e16b      	b.n	800503c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d64:	2201      	movs	r2, #1
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	4013      	ands	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	f040 815a 	bne.w	8005036 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d005      	beq.n	8004d9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d130      	bne.n	8004dfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	2203      	movs	r2, #3
 8004da6:	fa02 f303 	lsl.w	r3, r2, r3
 8004daa:	43db      	mvns	r3, r3
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	4013      	ands	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	091b      	lsrs	r3, r3, #4
 8004de6:	f003 0201 	and.w	r2, r3, #1
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 0303 	and.w	r3, r3, #3
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	d017      	beq.n	8004e38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	2203      	movs	r2, #3
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f003 0303 	and.w	r3, r3, #3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d123      	bne.n	8004e8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	08da      	lsrs	r2, r3, #3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3208      	adds	r2, #8
 8004e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	220f      	movs	r2, #15
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	43db      	mvns	r3, r3
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	4013      	ands	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	08da      	lsrs	r2, r3, #3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3208      	adds	r2, #8
 8004e86:	69b9      	ldr	r1, [r7, #24]
 8004e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	2203      	movs	r2, #3
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f003 0203 	and.w	r2, r3, #3
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 80b4 	beq.w	8005036 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]
 8004ed2:	4b60      	ldr	r3, [pc, #384]	; (8005054 <HAL_GPIO_Init+0x30c>)
 8004ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed6:	4a5f      	ldr	r2, [pc, #380]	; (8005054 <HAL_GPIO_Init+0x30c>)
 8004ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004edc:	6453      	str	r3, [r2, #68]	; 0x44
 8004ede:	4b5d      	ldr	r3, [pc, #372]	; (8005054 <HAL_GPIO_Init+0x30c>)
 8004ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004eea:	4a5b      	ldr	r2, [pc, #364]	; (8005058 <HAL_GPIO_Init+0x310>)
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	089b      	lsrs	r3, r3, #2
 8004ef0:	3302      	adds	r3, #2
 8004ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	220f      	movs	r2, #15
 8004f02:	fa02 f303 	lsl.w	r3, r2, r3
 8004f06:	43db      	mvns	r3, r3
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a52      	ldr	r2, [pc, #328]	; (800505c <HAL_GPIO_Init+0x314>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d02b      	beq.n	8004f6e <HAL_GPIO_Init+0x226>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a51      	ldr	r2, [pc, #324]	; (8005060 <HAL_GPIO_Init+0x318>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d025      	beq.n	8004f6a <HAL_GPIO_Init+0x222>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a50      	ldr	r2, [pc, #320]	; (8005064 <HAL_GPIO_Init+0x31c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d01f      	beq.n	8004f66 <HAL_GPIO_Init+0x21e>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a4f      	ldr	r2, [pc, #316]	; (8005068 <HAL_GPIO_Init+0x320>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d019      	beq.n	8004f62 <HAL_GPIO_Init+0x21a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a4e      	ldr	r2, [pc, #312]	; (800506c <HAL_GPIO_Init+0x324>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <HAL_GPIO_Init+0x216>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a4d      	ldr	r2, [pc, #308]	; (8005070 <HAL_GPIO_Init+0x328>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00d      	beq.n	8004f5a <HAL_GPIO_Init+0x212>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a4c      	ldr	r2, [pc, #304]	; (8005074 <HAL_GPIO_Init+0x32c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d007      	beq.n	8004f56 <HAL_GPIO_Init+0x20e>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a4b      	ldr	r2, [pc, #300]	; (8005078 <HAL_GPIO_Init+0x330>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d101      	bne.n	8004f52 <HAL_GPIO_Init+0x20a>
 8004f4e:	2307      	movs	r3, #7
 8004f50:	e00e      	b.n	8004f70 <HAL_GPIO_Init+0x228>
 8004f52:	2308      	movs	r3, #8
 8004f54:	e00c      	b.n	8004f70 <HAL_GPIO_Init+0x228>
 8004f56:	2306      	movs	r3, #6
 8004f58:	e00a      	b.n	8004f70 <HAL_GPIO_Init+0x228>
 8004f5a:	2305      	movs	r3, #5
 8004f5c:	e008      	b.n	8004f70 <HAL_GPIO_Init+0x228>
 8004f5e:	2304      	movs	r3, #4
 8004f60:	e006      	b.n	8004f70 <HAL_GPIO_Init+0x228>
 8004f62:	2303      	movs	r3, #3
 8004f64:	e004      	b.n	8004f70 <HAL_GPIO_Init+0x228>
 8004f66:	2302      	movs	r3, #2
 8004f68:	e002      	b.n	8004f70 <HAL_GPIO_Init+0x228>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e000      	b.n	8004f70 <HAL_GPIO_Init+0x228>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	69fa      	ldr	r2, [r7, #28]
 8004f72:	f002 0203 	and.w	r2, r2, #3
 8004f76:	0092      	lsls	r2, r2, #2
 8004f78:	4093      	lsls	r3, r2
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f80:	4935      	ldr	r1, [pc, #212]	; (8005058 <HAL_GPIO_Init+0x310>)
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	089b      	lsrs	r3, r3, #2
 8004f86:	3302      	adds	r3, #2
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f8e:	4b3b      	ldr	r3, [pc, #236]	; (800507c <HAL_GPIO_Init+0x334>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	43db      	mvns	r3, r3
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fb2:	4a32      	ldr	r2, [pc, #200]	; (800507c <HAL_GPIO_Init+0x334>)
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fb8:	4b30      	ldr	r3, [pc, #192]	; (800507c <HAL_GPIO_Init+0x334>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fdc:	4a27      	ldr	r2, [pc, #156]	; (800507c <HAL_GPIO_Init+0x334>)
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004fe2:	4b26      	ldr	r3, [pc, #152]	; (800507c <HAL_GPIO_Init+0x334>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	43db      	mvns	r3, r3
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005006:	4a1d      	ldr	r2, [pc, #116]	; (800507c <HAL_GPIO_Init+0x334>)
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800500c:	4b1b      	ldr	r3, [pc, #108]	; (800507c <HAL_GPIO_Init+0x334>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	43db      	mvns	r3, r3
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	4013      	ands	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005030:	4a12      	ldr	r2, [pc, #72]	; (800507c <HAL_GPIO_Init+0x334>)
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	3301      	adds	r3, #1
 800503a:	61fb      	str	r3, [r7, #28]
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	2b0f      	cmp	r3, #15
 8005040:	f67f ae90 	bls.w	8004d64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop
 8005048:	3724      	adds	r7, #36	; 0x24
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	40023800 	.word	0x40023800
 8005058:	40013800 	.word	0x40013800
 800505c:	40020000 	.word	0x40020000
 8005060:	40020400 	.word	0x40020400
 8005064:	40020800 	.word	0x40020800
 8005068:	40020c00 	.word	0x40020c00
 800506c:	40021000 	.word	0x40021000
 8005070:	40021400 	.word	0x40021400
 8005074:	40021800 	.word	0x40021800
 8005078:	40021c00 	.word	0x40021c00
 800507c:	40013c00 	.word	0x40013c00

08005080 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	460b      	mov	r3, r1
 800508a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	887b      	ldrh	r3, [r7, #2]
 8005092:	4013      	ands	r3, r2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005098:	2301      	movs	r3, #1
 800509a:	73fb      	strb	r3, [r7, #15]
 800509c:	e001      	b.n	80050a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800509e:	2300      	movs	r3, #0
 80050a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	460b      	mov	r3, r1
 80050ba:	807b      	strh	r3, [r7, #2]
 80050bc:	4613      	mov	r3, r2
 80050be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050c0:	787b      	ldrb	r3, [r7, #1]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050c6:	887a      	ldrh	r2, [r7, #2]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050cc:	e003      	b.n	80050d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050ce:	887b      	ldrh	r3, [r7, #2]
 80050d0:	041a      	lsls	r2, r3, #16
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	619a      	str	r2, [r3, #24]
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b085      	sub	sp, #20
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	460b      	mov	r3, r1
 80050ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050f4:	887a      	ldrh	r2, [r7, #2]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4013      	ands	r3, r2
 80050fa:	041a      	lsls	r2, r3, #16
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	43d9      	mvns	r1, r3
 8005100:	887b      	ldrh	r3, [r7, #2]
 8005102:	400b      	ands	r3, r1
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	619a      	str	r2, [r3, #24]
}
 800510a:	bf00      	nop
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
	...

08005118 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	4603      	mov	r3, r0
 8005120:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005122:	4b08      	ldr	r3, [pc, #32]	; (8005144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005124:	695a      	ldr	r2, [r3, #20]
 8005126:	88fb      	ldrh	r3, [r7, #6]
 8005128:	4013      	ands	r3, r2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d006      	beq.n	800513c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800512e:	4a05      	ldr	r2, [pc, #20]	; (8005144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005130:	88fb      	ldrh	r3, [r7, #6]
 8005132:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005134:	88fb      	ldrh	r3, [r7, #6]
 8005136:	4618      	mov	r0, r3
 8005138:	f7fc fec4 	bl	8001ec4 <HAL_GPIO_EXTI_Callback>
  }
}
 800513c:	bf00      	nop
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40013c00 	.word	0x40013c00

08005148 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e267      	b.n	800562a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d075      	beq.n	8005252 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005166:	4b88      	ldr	r3, [pc, #544]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 030c 	and.w	r3, r3, #12
 800516e:	2b04      	cmp	r3, #4
 8005170:	d00c      	beq.n	800518c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005172:	4b85      	ldr	r3, [pc, #532]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800517a:	2b08      	cmp	r3, #8
 800517c:	d112      	bne.n	80051a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800517e:	4b82      	ldr	r3, [pc, #520]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800518a:	d10b      	bne.n	80051a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800518c:	4b7e      	ldr	r3, [pc, #504]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d05b      	beq.n	8005250 <HAL_RCC_OscConfig+0x108>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d157      	bne.n	8005250 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e242      	b.n	800562a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ac:	d106      	bne.n	80051bc <HAL_RCC_OscConfig+0x74>
 80051ae:	4b76      	ldr	r3, [pc, #472]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a75      	ldr	r2, [pc, #468]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 80051b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	e01d      	b.n	80051f8 <HAL_RCC_OscConfig+0xb0>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051c4:	d10c      	bne.n	80051e0 <HAL_RCC_OscConfig+0x98>
 80051c6:	4b70      	ldr	r3, [pc, #448]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a6f      	ldr	r2, [pc, #444]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 80051cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	4b6d      	ldr	r3, [pc, #436]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a6c      	ldr	r2, [pc, #432]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 80051d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051dc:	6013      	str	r3, [r2, #0]
 80051de:	e00b      	b.n	80051f8 <HAL_RCC_OscConfig+0xb0>
 80051e0:	4b69      	ldr	r3, [pc, #420]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a68      	ldr	r2, [pc, #416]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 80051e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ea:	6013      	str	r3, [r2, #0]
 80051ec:	4b66      	ldr	r3, [pc, #408]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a65      	ldr	r2, [pc, #404]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 80051f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d013      	beq.n	8005228 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005200:	f7fe fc7c 	bl	8003afc <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005208:	f7fe fc78 	bl	8003afc <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b64      	cmp	r3, #100	; 0x64
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e207      	b.n	800562a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800521a:	4b5b      	ldr	r3, [pc, #364]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0f0      	beq.n	8005208 <HAL_RCC_OscConfig+0xc0>
 8005226:	e014      	b.n	8005252 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005228:	f7fe fc68 	bl	8003afc <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005230:	f7fe fc64 	bl	8003afc <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b64      	cmp	r3, #100	; 0x64
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e1f3      	b.n	800562a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005242:	4b51      	ldr	r3, [pc, #324]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1f0      	bne.n	8005230 <HAL_RCC_OscConfig+0xe8>
 800524e:	e000      	b.n	8005252 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d063      	beq.n	8005326 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800525e:	4b4a      	ldr	r3, [pc, #296]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f003 030c 	and.w	r3, r3, #12
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00b      	beq.n	8005282 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800526a:	4b47      	ldr	r3, [pc, #284]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005272:	2b08      	cmp	r3, #8
 8005274:	d11c      	bne.n	80052b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005276:	4b44      	ldr	r3, [pc, #272]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d116      	bne.n	80052b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005282:	4b41      	ldr	r3, [pc, #260]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d005      	beq.n	800529a <HAL_RCC_OscConfig+0x152>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d001      	beq.n	800529a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e1c7      	b.n	800562a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800529a:	4b3b      	ldr	r3, [pc, #236]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	4937      	ldr	r1, [pc, #220]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052ae:	e03a      	b.n	8005326 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d020      	beq.n	80052fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052b8:	4b34      	ldr	r3, [pc, #208]	; (800538c <HAL_RCC_OscConfig+0x244>)
 80052ba:	2201      	movs	r2, #1
 80052bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052be:	f7fe fc1d 	bl	8003afc <HAL_GetTick>
 80052c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052c6:	f7fe fc19 	bl	8003afc <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e1a8      	b.n	800562a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052d8:	4b2b      	ldr	r3, [pc, #172]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0f0      	beq.n	80052c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052e4:	4b28      	ldr	r3, [pc, #160]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	00db      	lsls	r3, r3, #3
 80052f2:	4925      	ldr	r1, [pc, #148]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	600b      	str	r3, [r1, #0]
 80052f8:	e015      	b.n	8005326 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052fa:	4b24      	ldr	r3, [pc, #144]	; (800538c <HAL_RCC_OscConfig+0x244>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005300:	f7fe fbfc 	bl	8003afc <HAL_GetTick>
 8005304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005308:	f7fe fbf8 	bl	8003afc <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e187      	b.n	800562a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800531a:	4b1b      	ldr	r3, [pc, #108]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1f0      	bne.n	8005308 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0308 	and.w	r3, r3, #8
 800532e:	2b00      	cmp	r3, #0
 8005330:	d036      	beq.n	80053a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d016      	beq.n	8005368 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800533a:	4b15      	ldr	r3, [pc, #84]	; (8005390 <HAL_RCC_OscConfig+0x248>)
 800533c:	2201      	movs	r2, #1
 800533e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005340:	f7fe fbdc 	bl	8003afc <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005348:	f7fe fbd8 	bl	8003afc <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e167      	b.n	800562a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800535a:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <HAL_RCC_OscConfig+0x240>)
 800535c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0f0      	beq.n	8005348 <HAL_RCC_OscConfig+0x200>
 8005366:	e01b      	b.n	80053a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005368:	4b09      	ldr	r3, [pc, #36]	; (8005390 <HAL_RCC_OscConfig+0x248>)
 800536a:	2200      	movs	r2, #0
 800536c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800536e:	f7fe fbc5 	bl	8003afc <HAL_GetTick>
 8005372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005374:	e00e      	b.n	8005394 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005376:	f7fe fbc1 	bl	8003afc <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d907      	bls.n	8005394 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e150      	b.n	800562a <HAL_RCC_OscConfig+0x4e2>
 8005388:	40023800 	.word	0x40023800
 800538c:	42470000 	.word	0x42470000
 8005390:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005394:	4b88      	ldr	r3, [pc, #544]	; (80055b8 <HAL_RCC_OscConfig+0x470>)
 8005396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1ea      	bne.n	8005376 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 8097 	beq.w	80054dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053ae:	2300      	movs	r3, #0
 80053b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053b2:	4b81      	ldr	r3, [pc, #516]	; (80055b8 <HAL_RCC_OscConfig+0x470>)
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10f      	bne.n	80053de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053be:	2300      	movs	r3, #0
 80053c0:	60bb      	str	r3, [r7, #8]
 80053c2:	4b7d      	ldr	r3, [pc, #500]	; (80055b8 <HAL_RCC_OscConfig+0x470>)
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	4a7c      	ldr	r2, [pc, #496]	; (80055b8 <HAL_RCC_OscConfig+0x470>)
 80053c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053cc:	6413      	str	r3, [r2, #64]	; 0x40
 80053ce:	4b7a      	ldr	r3, [pc, #488]	; (80055b8 <HAL_RCC_OscConfig+0x470>)
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d6:	60bb      	str	r3, [r7, #8]
 80053d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053da:	2301      	movs	r3, #1
 80053dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053de:	4b77      	ldr	r3, [pc, #476]	; (80055bc <HAL_RCC_OscConfig+0x474>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d118      	bne.n	800541c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053ea:	4b74      	ldr	r3, [pc, #464]	; (80055bc <HAL_RCC_OscConfig+0x474>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a73      	ldr	r2, [pc, #460]	; (80055bc <HAL_RCC_OscConfig+0x474>)
 80053f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053f6:	f7fe fb81 	bl	8003afc <HAL_GetTick>
 80053fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053fc:	e008      	b.n	8005410 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053fe:	f7fe fb7d 	bl	8003afc <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b02      	cmp	r3, #2
 800540a:	d901      	bls.n	8005410 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e10c      	b.n	800562a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005410:	4b6a      	ldr	r3, [pc, #424]	; (80055bc <HAL_RCC_OscConfig+0x474>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0f0      	beq.n	80053fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d106      	bne.n	8005432 <HAL_RCC_OscConfig+0x2ea>
 8005424:	4b64      	ldr	r3, [pc, #400]	; (80055b8 <HAL_RCC_OscConfig+0x470>)
 8005426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005428:	4a63      	ldr	r2, [pc, #396]	; (80055b8 <HAL_RCC_OscConfig+0x470>)
 800542a:	f043 0301 	orr.w	r3, r3, #1
 800542e:	6713      	str	r3, [r2, #112]	; 0x70
 8005430:	e01c      	b.n	800546c <HAL_RCC_OscConfig+0x324>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	2b05      	cmp	r3, #5
 8005438:	d10c      	bne.n	8005454 <HAL_RCC_OscConfig+0x30c>
 800543a:	4b5f      	ldr	r3, [pc, #380]	; (80055b8 <HAL_RCC_OscConfig+0x470>)
 800543c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543e:	4a5e      	ldr	r2, [pc, #376]	; (80055b8 <HAL_RCC_OscConfig+0x470>)
 8005440:	f043 0304 	orr.w	r3, r3, #4
 8005444:	6713      	str	r3, [r2, #112]	; 0x70
 8005446:	4b5c      	ldr	r3, [pc, #368]	; (80055b8 <HAL_RCC_OscConfig+0x470>)
 8005448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544a:	4a5b      	ldr	r2, [pc, #364]	; (80055b8 <HAL_RCC_OscConfig+0x470>)
 800544c:	f043 0301 	orr.w	r3, r3, #1
 8005450:	6713      	str	r3, [r2, #112]	; 0x70
 8005452:	e00b      	b.n	800546c <HAL_RCC_OscConfig+0x324>
 8005454:	4b58      	ldr	r3, [pc, #352]	; (80055b8 <HAL_RCC_OscConfig+0x470>)
 8005456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005458:	4a57      	ldr	r2, [pc, #348]	; (80055b8 <HAL_RCC_OscConfig+0x470>)
 800545a:	f023 0301 	bic.w	r3, r3, #1
 800545e:	6713      	str	r3, [r2, #112]	; 0x70
 8005460:	4b55      	ldr	r3, [pc, #340]	; (80055b8 <HAL_RCC_OscConfig+0x470>)
 8005462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005464:	4a54      	ldr	r2, [pc, #336]	; (80055b8 <HAL_RCC_OscConfig+0x470>)
 8005466:	f023 0304 	bic.w	r3, r3, #4
 800546a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d015      	beq.n	80054a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005474:	f7fe fb42 	bl	8003afc <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800547a:	e00a      	b.n	8005492 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800547c:	f7fe fb3e 	bl	8003afc <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	f241 3288 	movw	r2, #5000	; 0x1388
 800548a:	4293      	cmp	r3, r2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e0cb      	b.n	800562a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005492:	4b49      	ldr	r3, [pc, #292]	; (80055b8 <HAL_RCC_OscConfig+0x470>)
 8005494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0ee      	beq.n	800547c <HAL_RCC_OscConfig+0x334>
 800549e:	e014      	b.n	80054ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054a0:	f7fe fb2c 	bl	8003afc <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054a6:	e00a      	b.n	80054be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054a8:	f7fe fb28 	bl	8003afc <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d901      	bls.n	80054be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e0b5      	b.n	800562a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054be:	4b3e      	ldr	r3, [pc, #248]	; (80055b8 <HAL_RCC_OscConfig+0x470>)
 80054c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1ee      	bne.n	80054a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054ca:	7dfb      	ldrb	r3, [r7, #23]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d105      	bne.n	80054dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054d0:	4b39      	ldr	r3, [pc, #228]	; (80055b8 <HAL_RCC_OscConfig+0x470>)
 80054d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d4:	4a38      	ldr	r2, [pc, #224]	; (80055b8 <HAL_RCC_OscConfig+0x470>)
 80054d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 80a1 	beq.w	8005628 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054e6:	4b34      	ldr	r3, [pc, #208]	; (80055b8 <HAL_RCC_OscConfig+0x470>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f003 030c 	and.w	r3, r3, #12
 80054ee:	2b08      	cmp	r3, #8
 80054f0:	d05c      	beq.n	80055ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d141      	bne.n	800557e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054fa:	4b31      	ldr	r3, [pc, #196]	; (80055c0 <HAL_RCC_OscConfig+0x478>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005500:	f7fe fafc 	bl	8003afc <HAL_GetTick>
 8005504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005506:	e008      	b.n	800551a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005508:	f7fe faf8 	bl	8003afc <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e087      	b.n	800562a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800551a:	4b27      	ldr	r3, [pc, #156]	; (80055b8 <HAL_RCC_OscConfig+0x470>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1f0      	bne.n	8005508 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	69da      	ldr	r2, [r3, #28]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	019b      	lsls	r3, r3, #6
 8005536:	431a      	orrs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553c:	085b      	lsrs	r3, r3, #1
 800553e:	3b01      	subs	r3, #1
 8005540:	041b      	lsls	r3, r3, #16
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005548:	061b      	lsls	r3, r3, #24
 800554a:	491b      	ldr	r1, [pc, #108]	; (80055b8 <HAL_RCC_OscConfig+0x470>)
 800554c:	4313      	orrs	r3, r2
 800554e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005550:	4b1b      	ldr	r3, [pc, #108]	; (80055c0 <HAL_RCC_OscConfig+0x478>)
 8005552:	2201      	movs	r2, #1
 8005554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005556:	f7fe fad1 	bl	8003afc <HAL_GetTick>
 800555a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800555c:	e008      	b.n	8005570 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800555e:	f7fe facd 	bl	8003afc <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e05c      	b.n	800562a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005570:	4b11      	ldr	r3, [pc, #68]	; (80055b8 <HAL_RCC_OscConfig+0x470>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0f0      	beq.n	800555e <HAL_RCC_OscConfig+0x416>
 800557c:	e054      	b.n	8005628 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800557e:	4b10      	ldr	r3, [pc, #64]	; (80055c0 <HAL_RCC_OscConfig+0x478>)
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005584:	f7fe faba 	bl	8003afc <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800558c:	f7fe fab6 	bl	8003afc <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e045      	b.n	800562a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800559e:	4b06      	ldr	r3, [pc, #24]	; (80055b8 <HAL_RCC_OscConfig+0x470>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f0      	bne.n	800558c <HAL_RCC_OscConfig+0x444>
 80055aa:	e03d      	b.n	8005628 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d107      	bne.n	80055c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e038      	b.n	800562a <HAL_RCC_OscConfig+0x4e2>
 80055b8:	40023800 	.word	0x40023800
 80055bc:	40007000 	.word	0x40007000
 80055c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055c4:	4b1b      	ldr	r3, [pc, #108]	; (8005634 <HAL_RCC_OscConfig+0x4ec>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d028      	beq.n	8005624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055dc:	429a      	cmp	r2, r3
 80055de:	d121      	bne.n	8005624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d11a      	bne.n	8005624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80055f4:	4013      	ands	r3, r2
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d111      	bne.n	8005624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560a:	085b      	lsrs	r3, r3, #1
 800560c:	3b01      	subs	r3, #1
 800560e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005610:	429a      	cmp	r2, r3
 8005612:	d107      	bne.n	8005624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005620:	429a      	cmp	r2, r3
 8005622:	d001      	beq.n	8005628 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e000      	b.n	800562a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3718      	adds	r7, #24
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	40023800 	.word	0x40023800

08005638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e0cc      	b.n	80057e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800564c:	4b68      	ldr	r3, [pc, #416]	; (80057f0 <HAL_RCC_ClockConfig+0x1b8>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	429a      	cmp	r2, r3
 8005658:	d90c      	bls.n	8005674 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800565a:	4b65      	ldr	r3, [pc, #404]	; (80057f0 <HAL_RCC_ClockConfig+0x1b8>)
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005662:	4b63      	ldr	r3, [pc, #396]	; (80057f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	429a      	cmp	r2, r3
 800566e:	d001      	beq.n	8005674 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e0b8      	b.n	80057e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d020      	beq.n	80056c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b00      	cmp	r3, #0
 800568a:	d005      	beq.n	8005698 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800568c:	4b59      	ldr	r3, [pc, #356]	; (80057f4 <HAL_RCC_ClockConfig+0x1bc>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	4a58      	ldr	r2, [pc, #352]	; (80057f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005692:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005696:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0308 	and.w	r3, r3, #8
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d005      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056a4:	4b53      	ldr	r3, [pc, #332]	; (80057f4 <HAL_RCC_ClockConfig+0x1bc>)
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	4a52      	ldr	r2, [pc, #328]	; (80057f4 <HAL_RCC_ClockConfig+0x1bc>)
 80056aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056b0:	4b50      	ldr	r3, [pc, #320]	; (80057f4 <HAL_RCC_ClockConfig+0x1bc>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	494d      	ldr	r1, [pc, #308]	; (80057f4 <HAL_RCC_ClockConfig+0x1bc>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d044      	beq.n	8005758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d107      	bne.n	80056e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056d6:	4b47      	ldr	r3, [pc, #284]	; (80057f4 <HAL_RCC_ClockConfig+0x1bc>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d119      	bne.n	8005716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e07f      	b.n	80057e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d003      	beq.n	80056f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056f2:	2b03      	cmp	r3, #3
 80056f4:	d107      	bne.n	8005706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056f6:	4b3f      	ldr	r3, [pc, #252]	; (80057f4 <HAL_RCC_ClockConfig+0x1bc>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d109      	bne.n	8005716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e06f      	b.n	80057e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005706:	4b3b      	ldr	r3, [pc, #236]	; (80057f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e067      	b.n	80057e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005716:	4b37      	ldr	r3, [pc, #220]	; (80057f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f023 0203 	bic.w	r2, r3, #3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	4934      	ldr	r1, [pc, #208]	; (80057f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005724:	4313      	orrs	r3, r2
 8005726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005728:	f7fe f9e8 	bl	8003afc <HAL_GetTick>
 800572c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800572e:	e00a      	b.n	8005746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005730:	f7fe f9e4 	bl	8003afc <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	f241 3288 	movw	r2, #5000	; 0x1388
 800573e:	4293      	cmp	r3, r2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e04f      	b.n	80057e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005746:	4b2b      	ldr	r3, [pc, #172]	; (80057f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f003 020c 	and.w	r2, r3, #12
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	429a      	cmp	r2, r3
 8005756:	d1eb      	bne.n	8005730 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005758:	4b25      	ldr	r3, [pc, #148]	; (80057f0 <HAL_RCC_ClockConfig+0x1b8>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0307 	and.w	r3, r3, #7
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d20c      	bcs.n	8005780 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005766:	4b22      	ldr	r3, [pc, #136]	; (80057f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800576e:	4b20      	ldr	r3, [pc, #128]	; (80057f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0307 	and.w	r3, r3, #7
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	429a      	cmp	r2, r3
 800577a:	d001      	beq.n	8005780 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e032      	b.n	80057e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b00      	cmp	r3, #0
 800578a:	d008      	beq.n	800579e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800578c:	4b19      	ldr	r3, [pc, #100]	; (80057f4 <HAL_RCC_ClockConfig+0x1bc>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	4916      	ldr	r1, [pc, #88]	; (80057f4 <HAL_RCC_ClockConfig+0x1bc>)
 800579a:	4313      	orrs	r3, r2
 800579c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0308 	and.w	r3, r3, #8
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d009      	beq.n	80057be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057aa:	4b12      	ldr	r3, [pc, #72]	; (80057f4 <HAL_RCC_ClockConfig+0x1bc>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	490e      	ldr	r1, [pc, #56]	; (80057f4 <HAL_RCC_ClockConfig+0x1bc>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057be:	f000 f821 	bl	8005804 <HAL_RCC_GetSysClockFreq>
 80057c2:	4602      	mov	r2, r0
 80057c4:	4b0b      	ldr	r3, [pc, #44]	; (80057f4 <HAL_RCC_ClockConfig+0x1bc>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	091b      	lsrs	r3, r3, #4
 80057ca:	f003 030f 	and.w	r3, r3, #15
 80057ce:	490a      	ldr	r1, [pc, #40]	; (80057f8 <HAL_RCC_ClockConfig+0x1c0>)
 80057d0:	5ccb      	ldrb	r3, [r1, r3]
 80057d2:	fa22 f303 	lsr.w	r3, r2, r3
 80057d6:	4a09      	ldr	r2, [pc, #36]	; (80057fc <HAL_RCC_ClockConfig+0x1c4>)
 80057d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80057da:	4b09      	ldr	r3, [pc, #36]	; (8005800 <HAL_RCC_ClockConfig+0x1c8>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fe f844 	bl	800386c <HAL_InitTick>

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	40023c00 	.word	0x40023c00
 80057f4:	40023800 	.word	0x40023800
 80057f8:	080093e0 	.word	0x080093e0
 80057fc:	20000050 	.word	0x20000050
 8005800:	20000054 	.word	0x20000054

08005804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005808:	b094      	sub	sp, #80	; 0x50
 800580a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	647b      	str	r3, [r7, #68]	; 0x44
 8005810:	2300      	movs	r3, #0
 8005812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005814:	2300      	movs	r3, #0
 8005816:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800581c:	4b79      	ldr	r3, [pc, #484]	; (8005a04 <HAL_RCC_GetSysClockFreq+0x200>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f003 030c 	and.w	r3, r3, #12
 8005824:	2b08      	cmp	r3, #8
 8005826:	d00d      	beq.n	8005844 <HAL_RCC_GetSysClockFreq+0x40>
 8005828:	2b08      	cmp	r3, #8
 800582a:	f200 80e1 	bhi.w	80059f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <HAL_RCC_GetSysClockFreq+0x34>
 8005832:	2b04      	cmp	r3, #4
 8005834:	d003      	beq.n	800583e <HAL_RCC_GetSysClockFreq+0x3a>
 8005836:	e0db      	b.n	80059f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005838:	4b73      	ldr	r3, [pc, #460]	; (8005a08 <HAL_RCC_GetSysClockFreq+0x204>)
 800583a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800583c:	e0db      	b.n	80059f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800583e:	4b73      	ldr	r3, [pc, #460]	; (8005a0c <HAL_RCC_GetSysClockFreq+0x208>)
 8005840:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005842:	e0d8      	b.n	80059f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005844:	4b6f      	ldr	r3, [pc, #444]	; (8005a04 <HAL_RCC_GetSysClockFreq+0x200>)
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800584c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800584e:	4b6d      	ldr	r3, [pc, #436]	; (8005a04 <HAL_RCC_GetSysClockFreq+0x200>)
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d063      	beq.n	8005922 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800585a:	4b6a      	ldr	r3, [pc, #424]	; (8005a04 <HAL_RCC_GetSysClockFreq+0x200>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	099b      	lsrs	r3, r3, #6
 8005860:	2200      	movs	r2, #0
 8005862:	63bb      	str	r3, [r7, #56]	; 0x38
 8005864:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800586c:	633b      	str	r3, [r7, #48]	; 0x30
 800586e:	2300      	movs	r3, #0
 8005870:	637b      	str	r3, [r7, #52]	; 0x34
 8005872:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005876:	4622      	mov	r2, r4
 8005878:	462b      	mov	r3, r5
 800587a:	f04f 0000 	mov.w	r0, #0
 800587e:	f04f 0100 	mov.w	r1, #0
 8005882:	0159      	lsls	r1, r3, #5
 8005884:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005888:	0150      	lsls	r0, r2, #5
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	4621      	mov	r1, r4
 8005890:	1a51      	subs	r1, r2, r1
 8005892:	6139      	str	r1, [r7, #16]
 8005894:	4629      	mov	r1, r5
 8005896:	eb63 0301 	sbc.w	r3, r3, r1
 800589a:	617b      	str	r3, [r7, #20]
 800589c:	f04f 0200 	mov.w	r2, #0
 80058a0:	f04f 0300 	mov.w	r3, #0
 80058a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058a8:	4659      	mov	r1, fp
 80058aa:	018b      	lsls	r3, r1, #6
 80058ac:	4651      	mov	r1, sl
 80058ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058b2:	4651      	mov	r1, sl
 80058b4:	018a      	lsls	r2, r1, #6
 80058b6:	4651      	mov	r1, sl
 80058b8:	ebb2 0801 	subs.w	r8, r2, r1
 80058bc:	4659      	mov	r1, fp
 80058be:	eb63 0901 	sbc.w	r9, r3, r1
 80058c2:	f04f 0200 	mov.w	r2, #0
 80058c6:	f04f 0300 	mov.w	r3, #0
 80058ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058d6:	4690      	mov	r8, r2
 80058d8:	4699      	mov	r9, r3
 80058da:	4623      	mov	r3, r4
 80058dc:	eb18 0303 	adds.w	r3, r8, r3
 80058e0:	60bb      	str	r3, [r7, #8]
 80058e2:	462b      	mov	r3, r5
 80058e4:	eb49 0303 	adc.w	r3, r9, r3
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	f04f 0200 	mov.w	r2, #0
 80058ee:	f04f 0300 	mov.w	r3, #0
 80058f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80058f6:	4629      	mov	r1, r5
 80058f8:	024b      	lsls	r3, r1, #9
 80058fa:	4621      	mov	r1, r4
 80058fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005900:	4621      	mov	r1, r4
 8005902:	024a      	lsls	r2, r1, #9
 8005904:	4610      	mov	r0, r2
 8005906:	4619      	mov	r1, r3
 8005908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800590a:	2200      	movs	r2, #0
 800590c:	62bb      	str	r3, [r7, #40]	; 0x28
 800590e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005910:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005914:	f7fb f8da 	bl	8000acc <__aeabi_uldivmod>
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	4613      	mov	r3, r2
 800591e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005920:	e058      	b.n	80059d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005922:	4b38      	ldr	r3, [pc, #224]	; (8005a04 <HAL_RCC_GetSysClockFreq+0x200>)
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	099b      	lsrs	r3, r3, #6
 8005928:	2200      	movs	r2, #0
 800592a:	4618      	mov	r0, r3
 800592c:	4611      	mov	r1, r2
 800592e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005932:	623b      	str	r3, [r7, #32]
 8005934:	2300      	movs	r3, #0
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
 8005938:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800593c:	4642      	mov	r2, r8
 800593e:	464b      	mov	r3, r9
 8005940:	f04f 0000 	mov.w	r0, #0
 8005944:	f04f 0100 	mov.w	r1, #0
 8005948:	0159      	lsls	r1, r3, #5
 800594a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800594e:	0150      	lsls	r0, r2, #5
 8005950:	4602      	mov	r2, r0
 8005952:	460b      	mov	r3, r1
 8005954:	4641      	mov	r1, r8
 8005956:	ebb2 0a01 	subs.w	sl, r2, r1
 800595a:	4649      	mov	r1, r9
 800595c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	f04f 0300 	mov.w	r3, #0
 8005968:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800596c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005970:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005974:	ebb2 040a 	subs.w	r4, r2, sl
 8005978:	eb63 050b 	sbc.w	r5, r3, fp
 800597c:	f04f 0200 	mov.w	r2, #0
 8005980:	f04f 0300 	mov.w	r3, #0
 8005984:	00eb      	lsls	r3, r5, #3
 8005986:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800598a:	00e2      	lsls	r2, r4, #3
 800598c:	4614      	mov	r4, r2
 800598e:	461d      	mov	r5, r3
 8005990:	4643      	mov	r3, r8
 8005992:	18e3      	adds	r3, r4, r3
 8005994:	603b      	str	r3, [r7, #0]
 8005996:	464b      	mov	r3, r9
 8005998:	eb45 0303 	adc.w	r3, r5, r3
 800599c:	607b      	str	r3, [r7, #4]
 800599e:	f04f 0200 	mov.w	r2, #0
 80059a2:	f04f 0300 	mov.w	r3, #0
 80059a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059aa:	4629      	mov	r1, r5
 80059ac:	028b      	lsls	r3, r1, #10
 80059ae:	4621      	mov	r1, r4
 80059b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059b4:	4621      	mov	r1, r4
 80059b6:	028a      	lsls	r2, r1, #10
 80059b8:	4610      	mov	r0, r2
 80059ba:	4619      	mov	r1, r3
 80059bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059be:	2200      	movs	r2, #0
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	61fa      	str	r2, [r7, #28]
 80059c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059c8:	f7fb f880 	bl	8000acc <__aeabi_uldivmod>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	4613      	mov	r3, r2
 80059d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059d4:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <HAL_RCC_GetSysClockFreq+0x200>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	0c1b      	lsrs	r3, r3, #16
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	3301      	adds	r3, #1
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80059e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059ee:	e002      	b.n	80059f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059f0:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <HAL_RCC_GetSysClockFreq+0x204>)
 80059f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3750      	adds	r7, #80	; 0x50
 80059fc:	46bd      	mov	sp, r7
 80059fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a02:	bf00      	nop
 8005a04:	40023800 	.word	0x40023800
 8005a08:	00f42400 	.word	0x00f42400
 8005a0c:	007a1200 	.word	0x007a1200

08005a10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a14:	4b03      	ldr	r3, [pc, #12]	; (8005a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a16:	681b      	ldr	r3, [r3, #0]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	20000050 	.word	0x20000050

08005a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a2c:	f7ff fff0 	bl	8005a10 <HAL_RCC_GetHCLKFreq>
 8005a30:	4602      	mov	r2, r0
 8005a32:	4b05      	ldr	r3, [pc, #20]	; (8005a48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	0a9b      	lsrs	r3, r3, #10
 8005a38:	f003 0307 	and.w	r3, r3, #7
 8005a3c:	4903      	ldr	r1, [pc, #12]	; (8005a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a3e:	5ccb      	ldrb	r3, [r1, r3]
 8005a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	40023800 	.word	0x40023800
 8005a4c:	080093f0 	.word	0x080093f0

08005a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a54:	f7ff ffdc 	bl	8005a10 <HAL_RCC_GetHCLKFreq>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	4b05      	ldr	r3, [pc, #20]	; (8005a70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	0b5b      	lsrs	r3, r3, #13
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	4903      	ldr	r1, [pc, #12]	; (8005a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a66:	5ccb      	ldrb	r3, [r1, r3]
 8005a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	40023800 	.word	0x40023800
 8005a74:	080093f0 	.word	0x080093f0

08005a78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	220f      	movs	r2, #15
 8005a86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005a88:	4b12      	ldr	r3, [pc, #72]	; (8005ad4 <HAL_RCC_GetClockConfig+0x5c>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f003 0203 	and.w	r2, r3, #3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005a94:	4b0f      	ldr	r3, [pc, #60]	; (8005ad4 <HAL_RCC_GetClockConfig+0x5c>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005aa0:	4b0c      	ldr	r3, [pc, #48]	; (8005ad4 <HAL_RCC_GetClockConfig+0x5c>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005aac:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <HAL_RCC_GetClockConfig+0x5c>)
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	08db      	lsrs	r3, r3, #3
 8005ab2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005aba:	4b07      	ldr	r3, [pc, #28]	; (8005ad8 <HAL_RCC_GetClockConfig+0x60>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0207 	and.w	r2, r3, #7
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	601a      	str	r2, [r3, #0]
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	40023c00 	.word	0x40023c00

08005adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e041      	b.n	8005b72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fd fcdc 	bl	80034c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3304      	adds	r3, #4
 8005b18:	4619      	mov	r1, r3
 8005b1a:	4610      	mov	r0, r2
 8005b1c:	f000 fc7a 	bl	8006414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
	...

08005b7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d001      	beq.n	8005b94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e04e      	b.n	8005c32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0201 	orr.w	r2, r2, #1
 8005baa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a23      	ldr	r2, [pc, #140]	; (8005c40 <HAL_TIM_Base_Start_IT+0xc4>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d022      	beq.n	8005bfc <HAL_TIM_Base_Start_IT+0x80>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bbe:	d01d      	beq.n	8005bfc <HAL_TIM_Base_Start_IT+0x80>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a1f      	ldr	r2, [pc, #124]	; (8005c44 <HAL_TIM_Base_Start_IT+0xc8>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d018      	beq.n	8005bfc <HAL_TIM_Base_Start_IT+0x80>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a1e      	ldr	r2, [pc, #120]	; (8005c48 <HAL_TIM_Base_Start_IT+0xcc>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d013      	beq.n	8005bfc <HAL_TIM_Base_Start_IT+0x80>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a1c      	ldr	r2, [pc, #112]	; (8005c4c <HAL_TIM_Base_Start_IT+0xd0>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00e      	beq.n	8005bfc <HAL_TIM_Base_Start_IT+0x80>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a1b      	ldr	r2, [pc, #108]	; (8005c50 <HAL_TIM_Base_Start_IT+0xd4>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d009      	beq.n	8005bfc <HAL_TIM_Base_Start_IT+0x80>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a19      	ldr	r2, [pc, #100]	; (8005c54 <HAL_TIM_Base_Start_IT+0xd8>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d004      	beq.n	8005bfc <HAL_TIM_Base_Start_IT+0x80>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a18      	ldr	r2, [pc, #96]	; (8005c58 <HAL_TIM_Base_Start_IT+0xdc>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d111      	bne.n	8005c20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2b06      	cmp	r3, #6
 8005c0c:	d010      	beq.n	8005c30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f042 0201 	orr.w	r2, r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c1e:	e007      	b.n	8005c30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0201 	orr.w	r2, r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	40010000 	.word	0x40010000
 8005c44:	40000400 	.word	0x40000400
 8005c48:	40000800 	.word	0x40000800
 8005c4c:	40000c00 	.word	0x40000c00
 8005c50:	40010400 	.word	0x40010400
 8005c54:	40014000 	.word	0x40014000
 8005c58:	40001800 	.word	0x40001800

08005c5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e041      	b.n	8005cf2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d106      	bne.n	8005c88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f839 	bl	8005cfa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3304      	adds	r3, #4
 8005c98:	4619      	mov	r1, r3
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	f000 fbba 	bl	8006414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
	...

08005d10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d109      	bne.n	8005d34 <HAL_TIM_PWM_Start+0x24>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	bf14      	ite	ne
 8005d2c:	2301      	movne	r3, #1
 8005d2e:	2300      	moveq	r3, #0
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	e022      	b.n	8005d7a <HAL_TIM_PWM_Start+0x6a>
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	2b04      	cmp	r3, #4
 8005d38:	d109      	bne.n	8005d4e <HAL_TIM_PWM_Start+0x3e>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	bf14      	ite	ne
 8005d46:	2301      	movne	r3, #1
 8005d48:	2300      	moveq	r3, #0
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	e015      	b.n	8005d7a <HAL_TIM_PWM_Start+0x6a>
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	d109      	bne.n	8005d68 <HAL_TIM_PWM_Start+0x58>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	bf14      	ite	ne
 8005d60:	2301      	movne	r3, #1
 8005d62:	2300      	moveq	r3, #0
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	e008      	b.n	8005d7a <HAL_TIM_PWM_Start+0x6a>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	bf14      	ite	ne
 8005d74:	2301      	movne	r3, #1
 8005d76:	2300      	moveq	r3, #0
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e07c      	b.n	8005e7c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d104      	bne.n	8005d92 <HAL_TIM_PWM_Start+0x82>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d90:	e013      	b.n	8005dba <HAL_TIM_PWM_Start+0xaa>
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d104      	bne.n	8005da2 <HAL_TIM_PWM_Start+0x92>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005da0:	e00b      	b.n	8005dba <HAL_TIM_PWM_Start+0xaa>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b08      	cmp	r3, #8
 8005da6:	d104      	bne.n	8005db2 <HAL_TIM_PWM_Start+0xa2>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005db0:	e003      	b.n	8005dba <HAL_TIM_PWM_Start+0xaa>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2202      	movs	r2, #2
 8005db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	6839      	ldr	r1, [r7, #0]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 fe10 	bl	80069e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a2d      	ldr	r2, [pc, #180]	; (8005e84 <HAL_TIM_PWM_Start+0x174>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d004      	beq.n	8005ddc <HAL_TIM_PWM_Start+0xcc>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a2c      	ldr	r2, [pc, #176]	; (8005e88 <HAL_TIM_PWM_Start+0x178>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d101      	bne.n	8005de0 <HAL_TIM_PWM_Start+0xd0>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e000      	b.n	8005de2 <HAL_TIM_PWM_Start+0xd2>
 8005de0:	2300      	movs	r3, #0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d007      	beq.n	8005df6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005df4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a22      	ldr	r2, [pc, #136]	; (8005e84 <HAL_TIM_PWM_Start+0x174>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d022      	beq.n	8005e46 <HAL_TIM_PWM_Start+0x136>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e08:	d01d      	beq.n	8005e46 <HAL_TIM_PWM_Start+0x136>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a1f      	ldr	r2, [pc, #124]	; (8005e8c <HAL_TIM_PWM_Start+0x17c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d018      	beq.n	8005e46 <HAL_TIM_PWM_Start+0x136>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a1d      	ldr	r2, [pc, #116]	; (8005e90 <HAL_TIM_PWM_Start+0x180>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d013      	beq.n	8005e46 <HAL_TIM_PWM_Start+0x136>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a1c      	ldr	r2, [pc, #112]	; (8005e94 <HAL_TIM_PWM_Start+0x184>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d00e      	beq.n	8005e46 <HAL_TIM_PWM_Start+0x136>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a16      	ldr	r2, [pc, #88]	; (8005e88 <HAL_TIM_PWM_Start+0x178>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d009      	beq.n	8005e46 <HAL_TIM_PWM_Start+0x136>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a18      	ldr	r2, [pc, #96]	; (8005e98 <HAL_TIM_PWM_Start+0x188>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d004      	beq.n	8005e46 <HAL_TIM_PWM_Start+0x136>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a16      	ldr	r2, [pc, #88]	; (8005e9c <HAL_TIM_PWM_Start+0x18c>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d111      	bne.n	8005e6a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f003 0307 	and.w	r3, r3, #7
 8005e50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2b06      	cmp	r3, #6
 8005e56:	d010      	beq.n	8005e7a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f042 0201 	orr.w	r2, r2, #1
 8005e66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e68:	e007      	b.n	8005e7a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f042 0201 	orr.w	r2, r2, #1
 8005e78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	40010000 	.word	0x40010000
 8005e88:	40010400 	.word	0x40010400
 8005e8c:	40000400 	.word	0x40000400
 8005e90:	40000800 	.word	0x40000800
 8005e94:	40000c00 	.word	0x40000c00
 8005e98:	40014000 	.word	0x40014000
 8005e9c:	40001800 	.word	0x40001800

08005ea0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d122      	bne.n	8005efc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d11b      	bne.n	8005efc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f06f 0202 	mvn.w	r2, #2
 8005ecc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fa77 	bl	80063d6 <HAL_TIM_IC_CaptureCallback>
 8005ee8:	e005      	b.n	8005ef6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fa69 	bl	80063c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 fa7a 	bl	80063ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	d122      	bne.n	8005f50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b04      	cmp	r3, #4
 8005f16:	d11b      	bne.n	8005f50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f06f 0204 	mvn.w	r2, #4
 8005f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2202      	movs	r2, #2
 8005f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fa4d 	bl	80063d6 <HAL_TIM_IC_CaptureCallback>
 8005f3c:	e005      	b.n	8005f4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fa3f 	bl	80063c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fa50 	bl	80063ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f003 0308 	and.w	r3, r3, #8
 8005f5a:	2b08      	cmp	r3, #8
 8005f5c:	d122      	bne.n	8005fa4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f003 0308 	and.w	r3, r3, #8
 8005f68:	2b08      	cmp	r3, #8
 8005f6a:	d11b      	bne.n	8005fa4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f06f 0208 	mvn.w	r2, #8
 8005f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2204      	movs	r2, #4
 8005f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	f003 0303 	and.w	r3, r3, #3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fa23 	bl	80063d6 <HAL_TIM_IC_CaptureCallback>
 8005f90:	e005      	b.n	8005f9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fa15 	bl	80063c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fa26 	bl	80063ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	f003 0310 	and.w	r3, r3, #16
 8005fae:	2b10      	cmp	r3, #16
 8005fb0:	d122      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f003 0310 	and.w	r3, r3, #16
 8005fbc:	2b10      	cmp	r3, #16
 8005fbe:	d11b      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f06f 0210 	mvn.w	r2, #16
 8005fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2208      	movs	r2, #8
 8005fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f9f9 	bl	80063d6 <HAL_TIM_IC_CaptureCallback>
 8005fe4:	e005      	b.n	8005ff2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f9eb 	bl	80063c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f9fc 	bl	80063ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b01      	cmp	r3, #1
 8006004:	d10e      	bne.n	8006024 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b01      	cmp	r3, #1
 8006012:	d107      	bne.n	8006024 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f06f 0201 	mvn.w	r2, #1
 800601c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7fd f976 	bl	8003310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602e:	2b80      	cmp	r3, #128	; 0x80
 8006030:	d10e      	bne.n	8006050 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800603c:	2b80      	cmp	r3, #128	; 0x80
 800603e:	d107      	bne.n	8006050 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fd78 	bl	8006b40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605a:	2b40      	cmp	r3, #64	; 0x40
 800605c:	d10e      	bne.n	800607c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006068:	2b40      	cmp	r3, #64	; 0x40
 800606a:	d107      	bne.n	800607c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f9c1 	bl	80063fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	f003 0320 	and.w	r3, r3, #32
 8006086:	2b20      	cmp	r3, #32
 8006088:	d10e      	bne.n	80060a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f003 0320 	and.w	r3, r3, #32
 8006094:	2b20      	cmp	r3, #32
 8006096:	d107      	bne.n	80060a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f06f 0220 	mvn.w	r2, #32
 80060a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fd42 	bl	8006b2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060a8:	bf00      	nop
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060bc:	2300      	movs	r3, #0
 80060be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d101      	bne.n	80060ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060ca:	2302      	movs	r3, #2
 80060cc:	e0ae      	b.n	800622c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b0c      	cmp	r3, #12
 80060da:	f200 809f 	bhi.w	800621c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80060de:	a201      	add	r2, pc, #4	; (adr r2, 80060e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e4:	08006119 	.word	0x08006119
 80060e8:	0800621d 	.word	0x0800621d
 80060ec:	0800621d 	.word	0x0800621d
 80060f0:	0800621d 	.word	0x0800621d
 80060f4:	08006159 	.word	0x08006159
 80060f8:	0800621d 	.word	0x0800621d
 80060fc:	0800621d 	.word	0x0800621d
 8006100:	0800621d 	.word	0x0800621d
 8006104:	0800619b 	.word	0x0800619b
 8006108:	0800621d 	.word	0x0800621d
 800610c:	0800621d 	.word	0x0800621d
 8006110:	0800621d 	.word	0x0800621d
 8006114:	080061db 	.word	0x080061db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68b9      	ldr	r1, [r7, #8]
 800611e:	4618      	mov	r0, r3
 8006120:	f000 fa18 	bl	8006554 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	699a      	ldr	r2, [r3, #24]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f042 0208 	orr.w	r2, r2, #8
 8006132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699a      	ldr	r2, [r3, #24]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 0204 	bic.w	r2, r2, #4
 8006142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6999      	ldr	r1, [r3, #24]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	691a      	ldr	r2, [r3, #16]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	619a      	str	r2, [r3, #24]
      break;
 8006156:	e064      	b.n	8006222 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68b9      	ldr	r1, [r7, #8]
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fa68 	bl	8006634 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	699a      	ldr	r2, [r3, #24]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006172:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699a      	ldr	r2, [r3, #24]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006182:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6999      	ldr	r1, [r3, #24]
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	021a      	lsls	r2, r3, #8
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	430a      	orrs	r2, r1
 8006196:	619a      	str	r2, [r3, #24]
      break;
 8006198:	e043      	b.n	8006222 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68b9      	ldr	r1, [r7, #8]
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 fabd 	bl	8006720 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	69da      	ldr	r2, [r3, #28]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f042 0208 	orr.w	r2, r2, #8
 80061b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	69da      	ldr	r2, [r3, #28]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f022 0204 	bic.w	r2, r2, #4
 80061c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	69d9      	ldr	r1, [r3, #28]
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	691a      	ldr	r2, [r3, #16]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	430a      	orrs	r2, r1
 80061d6:	61da      	str	r2, [r3, #28]
      break;
 80061d8:	e023      	b.n	8006222 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68b9      	ldr	r1, [r7, #8]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 fb11 	bl	8006808 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	69da      	ldr	r2, [r3, #28]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	69da      	ldr	r2, [r3, #28]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006204:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69d9      	ldr	r1, [r3, #28]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	021a      	lsls	r2, r3, #8
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	61da      	str	r2, [r3, #28]
      break;
 800621a:	e002      	b.n	8006222 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	75fb      	strb	r3, [r7, #23]
      break;
 8006220:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800622a:	7dfb      	ldrb	r3, [r7, #23]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3718      	adds	r7, #24
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_TIM_ConfigClockSource+0x1c>
 800624c:	2302      	movs	r3, #2
 800624e:	e0b4      	b.n	80063ba <HAL_TIM_ConfigClockSource+0x186>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800626e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006276:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006288:	d03e      	beq.n	8006308 <HAL_TIM_ConfigClockSource+0xd4>
 800628a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800628e:	f200 8087 	bhi.w	80063a0 <HAL_TIM_ConfigClockSource+0x16c>
 8006292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006296:	f000 8086 	beq.w	80063a6 <HAL_TIM_ConfigClockSource+0x172>
 800629a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800629e:	d87f      	bhi.n	80063a0 <HAL_TIM_ConfigClockSource+0x16c>
 80062a0:	2b70      	cmp	r3, #112	; 0x70
 80062a2:	d01a      	beq.n	80062da <HAL_TIM_ConfigClockSource+0xa6>
 80062a4:	2b70      	cmp	r3, #112	; 0x70
 80062a6:	d87b      	bhi.n	80063a0 <HAL_TIM_ConfigClockSource+0x16c>
 80062a8:	2b60      	cmp	r3, #96	; 0x60
 80062aa:	d050      	beq.n	800634e <HAL_TIM_ConfigClockSource+0x11a>
 80062ac:	2b60      	cmp	r3, #96	; 0x60
 80062ae:	d877      	bhi.n	80063a0 <HAL_TIM_ConfigClockSource+0x16c>
 80062b0:	2b50      	cmp	r3, #80	; 0x50
 80062b2:	d03c      	beq.n	800632e <HAL_TIM_ConfigClockSource+0xfa>
 80062b4:	2b50      	cmp	r3, #80	; 0x50
 80062b6:	d873      	bhi.n	80063a0 <HAL_TIM_ConfigClockSource+0x16c>
 80062b8:	2b40      	cmp	r3, #64	; 0x40
 80062ba:	d058      	beq.n	800636e <HAL_TIM_ConfigClockSource+0x13a>
 80062bc:	2b40      	cmp	r3, #64	; 0x40
 80062be:	d86f      	bhi.n	80063a0 <HAL_TIM_ConfigClockSource+0x16c>
 80062c0:	2b30      	cmp	r3, #48	; 0x30
 80062c2:	d064      	beq.n	800638e <HAL_TIM_ConfigClockSource+0x15a>
 80062c4:	2b30      	cmp	r3, #48	; 0x30
 80062c6:	d86b      	bhi.n	80063a0 <HAL_TIM_ConfigClockSource+0x16c>
 80062c8:	2b20      	cmp	r3, #32
 80062ca:	d060      	beq.n	800638e <HAL_TIM_ConfigClockSource+0x15a>
 80062cc:	2b20      	cmp	r3, #32
 80062ce:	d867      	bhi.n	80063a0 <HAL_TIM_ConfigClockSource+0x16c>
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d05c      	beq.n	800638e <HAL_TIM_ConfigClockSource+0x15a>
 80062d4:	2b10      	cmp	r3, #16
 80062d6:	d05a      	beq.n	800638e <HAL_TIM_ConfigClockSource+0x15a>
 80062d8:	e062      	b.n	80063a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6818      	ldr	r0, [r3, #0]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	6899      	ldr	r1, [r3, #8]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	f000 fb5d 	bl	80069a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	609a      	str	r2, [r3, #8]
      break;
 8006306:	e04f      	b.n	80063a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6818      	ldr	r0, [r3, #0]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	6899      	ldr	r1, [r3, #8]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f000 fb46 	bl	80069a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689a      	ldr	r2, [r3, #8]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800632a:	609a      	str	r2, [r3, #8]
      break;
 800632c:	e03c      	b.n	80063a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6818      	ldr	r0, [r3, #0]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	6859      	ldr	r1, [r3, #4]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	461a      	mov	r2, r3
 800633c:	f000 faba 	bl	80068b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2150      	movs	r1, #80	; 0x50
 8006346:	4618      	mov	r0, r3
 8006348:	f000 fb13 	bl	8006972 <TIM_ITRx_SetConfig>
      break;
 800634c:	e02c      	b.n	80063a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6818      	ldr	r0, [r3, #0]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	6859      	ldr	r1, [r3, #4]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	461a      	mov	r2, r3
 800635c:	f000 fad9 	bl	8006912 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2160      	movs	r1, #96	; 0x60
 8006366:	4618      	mov	r0, r3
 8006368:	f000 fb03 	bl	8006972 <TIM_ITRx_SetConfig>
      break;
 800636c:	e01c      	b.n	80063a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6818      	ldr	r0, [r3, #0]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	6859      	ldr	r1, [r3, #4]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	461a      	mov	r2, r3
 800637c:	f000 fa9a 	bl	80068b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2140      	movs	r1, #64	; 0x40
 8006386:	4618      	mov	r0, r3
 8006388:	f000 faf3 	bl	8006972 <TIM_ITRx_SetConfig>
      break;
 800638c:	e00c      	b.n	80063a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4619      	mov	r1, r3
 8006398:	4610      	mov	r0, r2
 800639a:	f000 faea 	bl	8006972 <TIM_ITRx_SetConfig>
      break;
 800639e:	e003      	b.n	80063a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	73fb      	strb	r3, [r7, #15]
      break;
 80063a4:	e000      	b.n	80063a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b083      	sub	sp, #12
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063ca:	bf00      	nop
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063de:	bf00      	nop
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063f2:	bf00      	nop
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
	...

08006414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a40      	ldr	r2, [pc, #256]	; (8006528 <TIM_Base_SetConfig+0x114>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d013      	beq.n	8006454 <TIM_Base_SetConfig+0x40>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006432:	d00f      	beq.n	8006454 <TIM_Base_SetConfig+0x40>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a3d      	ldr	r2, [pc, #244]	; (800652c <TIM_Base_SetConfig+0x118>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d00b      	beq.n	8006454 <TIM_Base_SetConfig+0x40>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a3c      	ldr	r2, [pc, #240]	; (8006530 <TIM_Base_SetConfig+0x11c>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d007      	beq.n	8006454 <TIM_Base_SetConfig+0x40>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a3b      	ldr	r2, [pc, #236]	; (8006534 <TIM_Base_SetConfig+0x120>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d003      	beq.n	8006454 <TIM_Base_SetConfig+0x40>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a3a      	ldr	r2, [pc, #232]	; (8006538 <TIM_Base_SetConfig+0x124>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d108      	bne.n	8006466 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a2f      	ldr	r2, [pc, #188]	; (8006528 <TIM_Base_SetConfig+0x114>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d02b      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006474:	d027      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a2c      	ldr	r2, [pc, #176]	; (800652c <TIM_Base_SetConfig+0x118>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d023      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a2b      	ldr	r2, [pc, #172]	; (8006530 <TIM_Base_SetConfig+0x11c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d01f      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a2a      	ldr	r2, [pc, #168]	; (8006534 <TIM_Base_SetConfig+0x120>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d01b      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a29      	ldr	r2, [pc, #164]	; (8006538 <TIM_Base_SetConfig+0x124>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d017      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a28      	ldr	r2, [pc, #160]	; (800653c <TIM_Base_SetConfig+0x128>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d013      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a27      	ldr	r2, [pc, #156]	; (8006540 <TIM_Base_SetConfig+0x12c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d00f      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a26      	ldr	r2, [pc, #152]	; (8006544 <TIM_Base_SetConfig+0x130>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d00b      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a25      	ldr	r2, [pc, #148]	; (8006548 <TIM_Base_SetConfig+0x134>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d007      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a24      	ldr	r2, [pc, #144]	; (800654c <TIM_Base_SetConfig+0x138>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d003      	beq.n	80064c6 <TIM_Base_SetConfig+0xb2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a23      	ldr	r2, [pc, #140]	; (8006550 <TIM_Base_SetConfig+0x13c>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d108      	bne.n	80064d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a0a      	ldr	r2, [pc, #40]	; (8006528 <TIM_Base_SetConfig+0x114>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d003      	beq.n	800650c <TIM_Base_SetConfig+0xf8>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a0c      	ldr	r2, [pc, #48]	; (8006538 <TIM_Base_SetConfig+0x124>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d103      	bne.n	8006514 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	691a      	ldr	r2, [r3, #16]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	615a      	str	r2, [r3, #20]
}
 800651a:	bf00      	nop
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	40010000 	.word	0x40010000
 800652c:	40000400 	.word	0x40000400
 8006530:	40000800 	.word	0x40000800
 8006534:	40000c00 	.word	0x40000c00
 8006538:	40010400 	.word	0x40010400
 800653c:	40014000 	.word	0x40014000
 8006540:	40014400 	.word	0x40014400
 8006544:	40014800 	.word	0x40014800
 8006548:	40001800 	.word	0x40001800
 800654c:	40001c00 	.word	0x40001c00
 8006550:	40002000 	.word	0x40002000

08006554 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	f023 0201 	bic.w	r2, r3, #1
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 0303 	bic.w	r3, r3, #3
 800658a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	4313      	orrs	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f023 0302 	bic.w	r3, r3, #2
 800659c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a20      	ldr	r2, [pc, #128]	; (800662c <TIM_OC1_SetConfig+0xd8>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d003      	beq.n	80065b8 <TIM_OC1_SetConfig+0x64>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a1f      	ldr	r2, [pc, #124]	; (8006630 <TIM_OC1_SetConfig+0xdc>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d10c      	bne.n	80065d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f023 0308 	bic.w	r3, r3, #8
 80065be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f023 0304 	bic.w	r3, r3, #4
 80065d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a15      	ldr	r2, [pc, #84]	; (800662c <TIM_OC1_SetConfig+0xd8>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d003      	beq.n	80065e2 <TIM_OC1_SetConfig+0x8e>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a14      	ldr	r2, [pc, #80]	; (8006630 <TIM_OC1_SetConfig+0xdc>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d111      	bne.n	8006606 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	4313      	orrs	r3, r2
 8006604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	621a      	str	r2, [r3, #32]
}
 8006620:	bf00      	nop
 8006622:	371c      	adds	r7, #28
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	40010000 	.word	0x40010000
 8006630:	40010400 	.word	0x40010400

08006634 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	f023 0210 	bic.w	r2, r3, #16
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800666a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	021b      	lsls	r3, r3, #8
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	4313      	orrs	r3, r2
 8006676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f023 0320 	bic.w	r3, r3, #32
 800667e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	011b      	lsls	r3, r3, #4
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	4313      	orrs	r3, r2
 800668a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a22      	ldr	r2, [pc, #136]	; (8006718 <TIM_OC2_SetConfig+0xe4>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d003      	beq.n	800669c <TIM_OC2_SetConfig+0x68>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a21      	ldr	r2, [pc, #132]	; (800671c <TIM_OC2_SetConfig+0xe8>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d10d      	bne.n	80066b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	011b      	lsls	r3, r3, #4
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a17      	ldr	r2, [pc, #92]	; (8006718 <TIM_OC2_SetConfig+0xe4>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d003      	beq.n	80066c8 <TIM_OC2_SetConfig+0x94>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a16      	ldr	r2, [pc, #88]	; (800671c <TIM_OC2_SetConfig+0xe8>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d113      	bne.n	80066f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	621a      	str	r2, [r3, #32]
}
 800670a:	bf00      	nop
 800670c:	371c      	adds	r7, #28
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	40010000 	.word	0x40010000
 800671c:	40010400 	.word	0x40010400

08006720 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006720:	b480      	push	{r7}
 8006722:	b087      	sub	sp, #28
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f023 0303 	bic.w	r3, r3, #3
 8006756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	4313      	orrs	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	021b      	lsls	r3, r3, #8
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	4313      	orrs	r3, r2
 8006774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a21      	ldr	r2, [pc, #132]	; (8006800 <TIM_OC3_SetConfig+0xe0>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d003      	beq.n	8006786 <TIM_OC3_SetConfig+0x66>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a20      	ldr	r2, [pc, #128]	; (8006804 <TIM_OC3_SetConfig+0xe4>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d10d      	bne.n	80067a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800678c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	021b      	lsls	r3, r3, #8
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a16      	ldr	r2, [pc, #88]	; (8006800 <TIM_OC3_SetConfig+0xe0>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d003      	beq.n	80067b2 <TIM_OC3_SetConfig+0x92>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a15      	ldr	r2, [pc, #84]	; (8006804 <TIM_OC3_SetConfig+0xe4>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d113      	bne.n	80067da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	011b      	lsls	r3, r3, #4
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	011b      	lsls	r3, r3, #4
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	621a      	str	r2, [r3, #32]
}
 80067f4:	bf00      	nop
 80067f6:	371c      	adds	r7, #28
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	40010000 	.word	0x40010000
 8006804:	40010400 	.word	0x40010400

08006808 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800683e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	021b      	lsls	r3, r3, #8
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	4313      	orrs	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006852:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	031b      	lsls	r3, r3, #12
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	4313      	orrs	r3, r2
 800685e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a12      	ldr	r2, [pc, #72]	; (80068ac <TIM_OC4_SetConfig+0xa4>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d003      	beq.n	8006870 <TIM_OC4_SetConfig+0x68>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a11      	ldr	r2, [pc, #68]	; (80068b0 <TIM_OC4_SetConfig+0xa8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d109      	bne.n	8006884 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006876:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	695b      	ldr	r3, [r3, #20]
 800687c:	019b      	lsls	r3, r3, #6
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	4313      	orrs	r3, r2
 8006882:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	621a      	str	r2, [r3, #32]
}
 800689e:	bf00      	nop
 80068a0:	371c      	adds	r7, #28
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	40010000 	.word	0x40010000
 80068b0:	40010400 	.word	0x40010400

080068b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	f023 0201 	bic.w	r2, r3, #1
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	011b      	lsls	r3, r3, #4
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	f023 030a 	bic.w	r3, r3, #10
 80068f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	621a      	str	r2, [r3, #32]
}
 8006906:	bf00      	nop
 8006908:	371c      	adds	r7, #28
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006912:	b480      	push	{r7}
 8006914:	b087      	sub	sp, #28
 8006916:	af00      	add	r7, sp, #0
 8006918:	60f8      	str	r0, [r7, #12]
 800691a:	60b9      	str	r1, [r7, #8]
 800691c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	f023 0210 	bic.w	r2, r3, #16
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800693c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	031b      	lsls	r3, r3, #12
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	4313      	orrs	r3, r2
 8006946:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800694e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	011b      	lsls	r3, r3, #4
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	4313      	orrs	r3, r2
 8006958:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	621a      	str	r2, [r3, #32]
}
 8006966:	bf00      	nop
 8006968:	371c      	adds	r7, #28
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006972:	b480      	push	{r7}
 8006974:	b085      	sub	sp, #20
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006988:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800698a:	683a      	ldr	r2, [r7, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4313      	orrs	r3, r2
 8006990:	f043 0307 	orr.w	r3, r3, #7
 8006994:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	609a      	str	r2, [r3, #8]
}
 800699c:	bf00      	nop
 800699e:	3714      	adds	r7, #20
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b087      	sub	sp, #28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
 80069b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	021a      	lsls	r2, r3, #8
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	431a      	orrs	r2, r3
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	609a      	str	r2, [r3, #8]
}
 80069dc:	bf00      	nop
 80069de:	371c      	adds	r7, #28
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	f003 031f 	and.w	r3, r3, #31
 80069fa:	2201      	movs	r2, #1
 80069fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006a00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6a1a      	ldr	r2, [r3, #32]
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	43db      	mvns	r3, r3
 8006a0a:	401a      	ands	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6a1a      	ldr	r2, [r3, #32]
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f003 031f 	and.w	r3, r3, #31
 8006a1a:	6879      	ldr	r1, [r7, #4]
 8006a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a20:	431a      	orrs	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	621a      	str	r2, [r3, #32]
}
 8006a26:	bf00      	nop
 8006a28:	371c      	adds	r7, #28
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
	...

08006a34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d101      	bne.n	8006a4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a48:	2302      	movs	r3, #2
 8006a4a:	e05a      	b.n	8006b02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2202      	movs	r2, #2
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a21      	ldr	r2, [pc, #132]	; (8006b10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d022      	beq.n	8006ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a98:	d01d      	beq.n	8006ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a1d      	ldr	r2, [pc, #116]	; (8006b14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d018      	beq.n	8006ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a1b      	ldr	r2, [pc, #108]	; (8006b18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d013      	beq.n	8006ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a1a      	ldr	r2, [pc, #104]	; (8006b1c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d00e      	beq.n	8006ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a18      	ldr	r2, [pc, #96]	; (8006b20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d009      	beq.n	8006ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a17      	ldr	r2, [pc, #92]	; (8006b24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d004      	beq.n	8006ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a15      	ldr	r2, [pc, #84]	; (8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d10c      	bne.n	8006af0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006adc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	40010000 	.word	0x40010000
 8006b14:	40000400 	.word	0x40000400
 8006b18:	40000800 	.word	0x40000800
 8006b1c:	40000c00 	.word	0x40000c00
 8006b20:	40010400 	.word	0x40010400
 8006b24:	40014000 	.word	0x40014000
 8006b28:	40001800 	.word	0x40001800

08006b2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e03f      	b.n	8006be6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d106      	bne.n	8006b80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7fc fd56 	bl	800362c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2224      	movs	r2, #36	; 0x24
 8006b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68da      	ldr	r2, [r3, #12]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fddf 	bl	800775c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	691a      	ldr	r2, [r3, #16]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	695a      	ldr	r2, [r3, #20]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68da      	ldr	r2, [r3, #12]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2220      	movs	r2, #32
 8006be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b08a      	sub	sp, #40	; 0x28
 8006bf2:	af02      	add	r7, sp, #8
 8006bf4:	60f8      	str	r0, [r7, #12]
 8006bf6:	60b9      	str	r1, [r7, #8]
 8006bf8:	603b      	str	r3, [r7, #0]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b20      	cmp	r3, #32
 8006c0c:	d17c      	bne.n	8006d08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d002      	beq.n	8006c1a <HAL_UART_Transmit+0x2c>
 8006c14:	88fb      	ldrh	r3, [r7, #6]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e075      	b.n	8006d0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d101      	bne.n	8006c2c <HAL_UART_Transmit+0x3e>
 8006c28:	2302      	movs	r3, #2
 8006c2a:	e06e      	b.n	8006d0a <HAL_UART_Transmit+0x11c>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2221      	movs	r2, #33	; 0x21
 8006c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c42:	f7fc ff5b 	bl	8003afc <HAL_GetTick>
 8006c46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	88fa      	ldrh	r2, [r7, #6]
 8006c4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	88fa      	ldrh	r2, [r7, #6]
 8006c52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c5c:	d108      	bne.n	8006c70 <HAL_UART_Transmit+0x82>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d104      	bne.n	8006c70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006c66:	2300      	movs	r3, #0
 8006c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	61bb      	str	r3, [r7, #24]
 8006c6e:	e003      	b.n	8006c78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c74:	2300      	movs	r3, #0
 8006c76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006c80:	e02a      	b.n	8006cd8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	2180      	movs	r1, #128	; 0x80
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f000 fb1f 	bl	80072d0 <UART_WaitOnFlagUntilTimeout>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e036      	b.n	8006d0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10b      	bne.n	8006cba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	3302      	adds	r3, #2
 8006cb6:	61bb      	str	r3, [r7, #24]
 8006cb8:	e007      	b.n	8006cca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	781a      	ldrb	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1cf      	bne.n	8006c82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	2140      	movs	r1, #64	; 0x40
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f000 faef 	bl	80072d0 <UART_WaitOnFlagUntilTimeout>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d001      	beq.n	8006cfc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e006      	b.n	8006d0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006d04:	2300      	movs	r3, #0
 8006d06:	e000      	b.n	8006d0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006d08:	2302      	movs	r3, #2
  }
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3720      	adds	r7, #32
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b084      	sub	sp, #16
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	60f8      	str	r0, [r7, #12]
 8006d1a:	60b9      	str	r1, [r7, #8]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b20      	cmp	r3, #32
 8006d2a:	d11d      	bne.n	8006d68 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d002      	beq.n	8006d38 <HAL_UART_Receive_IT+0x26>
 8006d32:	88fb      	ldrh	r3, [r7, #6]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e016      	b.n	8006d6a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d101      	bne.n	8006d4a <HAL_UART_Receive_IT+0x38>
 8006d46:	2302      	movs	r3, #2
 8006d48:	e00f      	b.n	8006d6a <HAL_UART_Receive_IT+0x58>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d58:	88fb      	ldrh	r3, [r7, #6]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	68b9      	ldr	r1, [r7, #8]
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 fb24 	bl	80073ac <UART_Start_Receive_IT>
 8006d64:	4603      	mov	r3, r0
 8006d66:	e000      	b.n	8006d6a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006d68:	2302      	movs	r3, #2
  }
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
	...

08006d74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b0ba      	sub	sp, #232	; 0xe8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006da0:	2300      	movs	r3, #0
 8006da2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006daa:	f003 030f 	and.w	r3, r3, #15
 8006dae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006db2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10f      	bne.n	8006dda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dbe:	f003 0320 	and.w	r3, r3, #32
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d009      	beq.n	8006dda <HAL_UART_IRQHandler+0x66>
 8006dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dca:	f003 0320 	and.w	r3, r3, #32
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d003      	beq.n	8006dda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fc07 	bl	80075e6 <UART_Receive_IT>
      return;
 8006dd8:	e256      	b.n	8007288 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006dda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f000 80de 	beq.w	8006fa0 <HAL_UART_IRQHandler+0x22c>
 8006de4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d106      	bne.n	8006dfe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006df4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f000 80d1 	beq.w	8006fa0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00b      	beq.n	8006e22 <HAL_UART_IRQHandler+0xae>
 8006e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d005      	beq.n	8006e22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1a:	f043 0201 	orr.w	r2, r3, #1
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e26:	f003 0304 	and.w	r3, r3, #4
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00b      	beq.n	8006e46 <HAL_UART_IRQHandler+0xd2>
 8006e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d005      	beq.n	8006e46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3e:	f043 0202 	orr.w	r2, r3, #2
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e4a:	f003 0302 	and.w	r3, r3, #2
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00b      	beq.n	8006e6a <HAL_UART_IRQHandler+0xf6>
 8006e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d005      	beq.n	8006e6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e62:	f043 0204 	orr.w	r2, r3, #4
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e6e:	f003 0308 	and.w	r3, r3, #8
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d011      	beq.n	8006e9a <HAL_UART_IRQHandler+0x126>
 8006e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e7a:	f003 0320 	and.w	r3, r3, #32
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d105      	bne.n	8006e8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d005      	beq.n	8006e9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e92:	f043 0208 	orr.w	r2, r3, #8
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 81ed 	beq.w	800727e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ea8:	f003 0320 	and.w	r3, r3, #32
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d008      	beq.n	8006ec2 <HAL_UART_IRQHandler+0x14e>
 8006eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eb4:	f003 0320 	and.w	r3, r3, #32
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 fb92 	bl	80075e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	695b      	ldr	r3, [r3, #20]
 8006ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ecc:	2b40      	cmp	r3, #64	; 0x40
 8006ece:	bf0c      	ite	eq
 8006ed0:	2301      	moveq	r3, #1
 8006ed2:	2300      	movne	r3, #0
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ede:	f003 0308 	and.w	r3, r3, #8
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d103      	bne.n	8006eee <HAL_UART_IRQHandler+0x17a>
 8006ee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d04f      	beq.n	8006f8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fa9a 	bl	8007428 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efe:	2b40      	cmp	r3, #64	; 0x40
 8006f00:	d141      	bne.n	8006f86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3314      	adds	r3, #20
 8006f08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f10:	e853 3f00 	ldrex	r3, [r3]
 8006f14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3314      	adds	r3, #20
 8006f2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f3e:	e841 2300 	strex	r3, r2, [r1]
 8006f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1d9      	bne.n	8006f02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d013      	beq.n	8006f7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5a:	4a7d      	ldr	r2, [pc, #500]	; (8007150 <HAL_UART_IRQHandler+0x3dc>)
 8006f5c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fd fc64 	bl	8004830 <HAL_DMA_Abort_IT>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d016      	beq.n	8006f9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f78:	4610      	mov	r0, r2
 8006f7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f7c:	e00e      	b.n	8006f9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f990 	bl	80072a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f84:	e00a      	b.n	8006f9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f98c 	bl	80072a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f8c:	e006      	b.n	8006f9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f988 	bl	80072a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006f9a:	e170      	b.n	800727e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f9c:	bf00      	nop
    return;
 8006f9e:	e16e      	b.n	800727e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	f040 814a 	bne.w	800723e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fae:	f003 0310 	and.w	r3, r3, #16
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f000 8143 	beq.w	800723e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fbc:	f003 0310 	and.w	r3, r3, #16
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f000 813c 	beq.w	800723e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60bb      	str	r3, [r7, #8]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	60bb      	str	r3, [r7, #8]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	60bb      	str	r3, [r7, #8]
 8006fda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe6:	2b40      	cmp	r3, #64	; 0x40
 8006fe8:	f040 80b4 	bne.w	8007154 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ff8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f000 8140 	beq.w	8007282 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800700a:	429a      	cmp	r2, r3
 800700c:	f080 8139 	bcs.w	8007282 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007016:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007022:	f000 8088 	beq.w	8007136 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	330c      	adds	r3, #12
 800702c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007030:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007034:	e853 3f00 	ldrex	r3, [r3]
 8007038:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800703c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007044:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	330c      	adds	r3, #12
 800704e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007052:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007056:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800705e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800706a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1d9      	bne.n	8007026 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	3314      	adds	r3, #20
 8007078:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800707c:	e853 3f00 	ldrex	r3, [r3]
 8007080:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007082:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007084:	f023 0301 	bic.w	r3, r3, #1
 8007088:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3314      	adds	r3, #20
 8007092:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007096:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800709a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800709e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070a2:	e841 2300 	strex	r3, r2, [r1]
 80070a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80070a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1e1      	bne.n	8007072 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3314      	adds	r3, #20
 80070b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070b8:	e853 3f00 	ldrex	r3, [r3]
 80070bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80070be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3314      	adds	r3, #20
 80070ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80070d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80070d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80070d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80070da:	e841 2300 	strex	r3, r2, [r1]
 80070de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80070e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1e3      	bne.n	80070ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2220      	movs	r2, #32
 80070ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	330c      	adds	r3, #12
 80070fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070fe:	e853 3f00 	ldrex	r3, [r3]
 8007102:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007106:	f023 0310 	bic.w	r3, r3, #16
 800710a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	330c      	adds	r3, #12
 8007114:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007118:	65ba      	str	r2, [r7, #88]	; 0x58
 800711a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800711e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007120:	e841 2300 	strex	r3, r2, [r1]
 8007124:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1e3      	bne.n	80070f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007130:	4618      	mov	r0, r3
 8007132:	f7fd fb0d 	bl	8004750 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800713e:	b29b      	uxth	r3, r3
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	b29b      	uxth	r3, r3
 8007144:	4619      	mov	r1, r3
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f8b6 	bl	80072b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800714c:	e099      	b.n	8007282 <HAL_UART_IRQHandler+0x50e>
 800714e:	bf00      	nop
 8007150:	080074ef 	.word	0x080074ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800715c:	b29b      	uxth	r3, r3
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007168:	b29b      	uxth	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 808b 	beq.w	8007286 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007170:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 8086 	beq.w	8007286 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	330c      	adds	r3, #12
 8007180:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007184:	e853 3f00 	ldrex	r3, [r3]
 8007188:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800718a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800718c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007190:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	330c      	adds	r3, #12
 800719a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800719e:	647a      	str	r2, [r7, #68]	; 0x44
 80071a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071a6:	e841 2300 	strex	r3, r2, [r1]
 80071aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1e3      	bne.n	800717a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3314      	adds	r3, #20
 80071b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	e853 3f00 	ldrex	r3, [r3]
 80071c0:	623b      	str	r3, [r7, #32]
   return(result);
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	f023 0301 	bic.w	r3, r3, #1
 80071c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	3314      	adds	r3, #20
 80071d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80071d6:	633a      	str	r2, [r7, #48]	; 0x30
 80071d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071de:	e841 2300 	strex	r3, r2, [r1]
 80071e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1e3      	bne.n	80071b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2220      	movs	r2, #32
 80071ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	330c      	adds	r3, #12
 80071fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	e853 3f00 	ldrex	r3, [r3]
 8007206:	60fb      	str	r3, [r7, #12]
   return(result);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f023 0310 	bic.w	r3, r3, #16
 800720e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	330c      	adds	r3, #12
 8007218:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800721c:	61fa      	str	r2, [r7, #28]
 800721e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007220:	69b9      	ldr	r1, [r7, #24]
 8007222:	69fa      	ldr	r2, [r7, #28]
 8007224:	e841 2300 	strex	r3, r2, [r1]
 8007228:	617b      	str	r3, [r7, #20]
   return(result);
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e3      	bne.n	80071f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007230:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f83e 	bl	80072b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800723c:	e023      	b.n	8007286 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800723e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007246:	2b00      	cmp	r3, #0
 8007248:	d009      	beq.n	800725e <HAL_UART_IRQHandler+0x4ea>
 800724a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800724e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f95d 	bl	8007516 <UART_Transmit_IT>
    return;
 800725c:	e014      	b.n	8007288 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800725e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00e      	beq.n	8007288 <HAL_UART_IRQHandler+0x514>
 800726a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800726e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007272:	2b00      	cmp	r3, #0
 8007274:	d008      	beq.n	8007288 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f99d 	bl	80075b6 <UART_EndTransmit_IT>
    return;
 800727c:	e004      	b.n	8007288 <HAL_UART_IRQHandler+0x514>
    return;
 800727e:	bf00      	nop
 8007280:	e002      	b.n	8007288 <HAL_UART_IRQHandler+0x514>
      return;
 8007282:	bf00      	nop
 8007284:	e000      	b.n	8007288 <HAL_UART_IRQHandler+0x514>
      return;
 8007286:	bf00      	nop
  }
}
 8007288:	37e8      	adds	r7, #232	; 0xe8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop

08007290 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	460b      	mov	r3, r1
 80072c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b090      	sub	sp, #64	; 0x40
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	603b      	str	r3, [r7, #0]
 80072dc:	4613      	mov	r3, r2
 80072de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072e0:	e050      	b.n	8007384 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e8:	d04c      	beq.n	8007384 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80072ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d007      	beq.n	8007300 <UART_WaitOnFlagUntilTimeout+0x30>
 80072f0:	f7fc fc04 	bl	8003afc <HAL_GetTick>
 80072f4:	4602      	mov	r2, r0
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d241      	bcs.n	8007384 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	330c      	adds	r3, #12
 8007306:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730a:	e853 3f00 	ldrex	r3, [r3]
 800730e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	330c      	adds	r3, #12
 800731e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007320:	637a      	str	r2, [r7, #52]	; 0x34
 8007322:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007324:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007326:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007328:	e841 2300 	strex	r3, r2, [r1]
 800732c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800732e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1e5      	bne.n	8007300 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3314      	adds	r3, #20
 800733a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	e853 3f00 	ldrex	r3, [r3]
 8007342:	613b      	str	r3, [r7, #16]
   return(result);
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	f023 0301 	bic.w	r3, r3, #1
 800734a:	63bb      	str	r3, [r7, #56]	; 0x38
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3314      	adds	r3, #20
 8007352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007354:	623a      	str	r2, [r7, #32]
 8007356:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007358:	69f9      	ldr	r1, [r7, #28]
 800735a:	6a3a      	ldr	r2, [r7, #32]
 800735c:	e841 2300 	strex	r3, r2, [r1]
 8007360:	61bb      	str	r3, [r7, #24]
   return(result);
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1e5      	bne.n	8007334 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2220      	movs	r2, #32
 800736c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2220      	movs	r2, #32
 8007374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e00f      	b.n	80073a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	4013      	ands	r3, r2
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	429a      	cmp	r2, r3
 8007392:	bf0c      	ite	eq
 8007394:	2301      	moveq	r3, #1
 8007396:	2300      	movne	r3, #0
 8007398:	b2db      	uxtb	r3, r3
 800739a:	461a      	mov	r2, r3
 800739c:	79fb      	ldrb	r3, [r7, #7]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d09f      	beq.n	80072e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3740      	adds	r7, #64	; 0x40
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	4613      	mov	r3, r2
 80073b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	88fa      	ldrh	r2, [r7, #6]
 80073c4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	88fa      	ldrh	r2, [r7, #6]
 80073ca:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2222      	movs	r2, #34	; 0x22
 80073d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d007      	beq.n	80073fa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68da      	ldr	r2, [r3, #12]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073f8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	695a      	ldr	r2, [r3, #20]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f042 0201 	orr.w	r2, r2, #1
 8007408:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68da      	ldr	r2, [r3, #12]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f042 0220 	orr.w	r2, r2, #32
 8007418:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3714      	adds	r7, #20
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007428:	b480      	push	{r7}
 800742a:	b095      	sub	sp, #84	; 0x54
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	330c      	adds	r3, #12
 8007436:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800743a:	e853 3f00 	ldrex	r3, [r3]
 800743e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007442:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007446:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	330c      	adds	r3, #12
 800744e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007450:	643a      	str	r2, [r7, #64]	; 0x40
 8007452:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007454:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007456:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007458:	e841 2300 	strex	r3, r2, [r1]
 800745c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800745e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1e5      	bne.n	8007430 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3314      	adds	r3, #20
 800746a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	e853 3f00 	ldrex	r3, [r3]
 8007472:	61fb      	str	r3, [r7, #28]
   return(result);
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	f023 0301 	bic.w	r3, r3, #1
 800747a:	64bb      	str	r3, [r7, #72]	; 0x48
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3314      	adds	r3, #20
 8007482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007484:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007486:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007488:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800748a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800748c:	e841 2300 	strex	r3, r2, [r1]
 8007490:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1e5      	bne.n	8007464 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749c:	2b01      	cmp	r3, #1
 800749e:	d119      	bne.n	80074d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	330c      	adds	r3, #12
 80074a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	e853 3f00 	ldrex	r3, [r3]
 80074ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f023 0310 	bic.w	r3, r3, #16
 80074b6:	647b      	str	r3, [r7, #68]	; 0x44
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	330c      	adds	r3, #12
 80074be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074c0:	61ba      	str	r2, [r7, #24]
 80074c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c4:	6979      	ldr	r1, [r7, #20]
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	e841 2300 	strex	r3, r2, [r1]
 80074cc:	613b      	str	r3, [r7, #16]
   return(result);
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1e5      	bne.n	80074a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2220      	movs	r2, #32
 80074d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80074e2:	bf00      	nop
 80074e4:	3754      	adds	r7, #84	; 0x54
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b084      	sub	sp, #16
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f7ff fecb 	bl	80072a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800750e:	bf00      	nop
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007516:	b480      	push	{r7}
 8007518:	b085      	sub	sp, #20
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b21      	cmp	r3, #33	; 0x21
 8007528:	d13e      	bne.n	80075a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007532:	d114      	bne.n	800755e <UART_Transmit_IT+0x48>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d110      	bne.n	800755e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a1b      	ldr	r3, [r3, #32]
 8007540:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	881b      	ldrh	r3, [r3, #0]
 8007546:	461a      	mov	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007550:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	1c9a      	adds	r2, r3, #2
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	621a      	str	r2, [r3, #32]
 800755c:	e008      	b.n	8007570 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	1c59      	adds	r1, r3, #1
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	6211      	str	r1, [r2, #32]
 8007568:	781a      	ldrb	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007574:	b29b      	uxth	r3, r3
 8007576:	3b01      	subs	r3, #1
 8007578:	b29b      	uxth	r3, r3
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	4619      	mov	r1, r3
 800757e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10f      	bne.n	80075a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68da      	ldr	r2, [r3, #12]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007592:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68da      	ldr	r2, [r3, #12]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	e000      	b.n	80075aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80075a8:	2302      	movs	r3, #2
  }
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b082      	sub	sp, #8
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68da      	ldr	r2, [r3, #12]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2220      	movs	r2, #32
 80075d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7ff fe5a 	bl	8007290 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b08c      	sub	sp, #48	; 0x30
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b22      	cmp	r3, #34	; 0x22
 80075f8:	f040 80ab 	bne.w	8007752 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007604:	d117      	bne.n	8007636 <UART_Receive_IT+0x50>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d113      	bne.n	8007636 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800760e:	2300      	movs	r3, #0
 8007610:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007616:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	b29b      	uxth	r3, r3
 8007620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007624:	b29a      	uxth	r2, r3
 8007626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007628:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762e:	1c9a      	adds	r2, r3, #2
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	629a      	str	r2, [r3, #40]	; 0x28
 8007634:	e026      	b.n	8007684 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800763c:	2300      	movs	r3, #0
 800763e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007648:	d007      	beq.n	800765a <UART_Receive_IT+0x74>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10a      	bne.n	8007668 <UART_Receive_IT+0x82>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d106      	bne.n	8007668 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	b2da      	uxtb	r2, r3
 8007662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007664:	701a      	strb	r2, [r3, #0]
 8007666:	e008      	b.n	800767a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	b2db      	uxtb	r3, r3
 8007670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007674:	b2da      	uxtb	r2, r3
 8007676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007678:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007688:	b29b      	uxth	r3, r3
 800768a:	3b01      	subs	r3, #1
 800768c:	b29b      	uxth	r3, r3
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	4619      	mov	r1, r3
 8007692:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007694:	2b00      	cmp	r3, #0
 8007696:	d15a      	bne.n	800774e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68da      	ldr	r2, [r3, #12]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f022 0220 	bic.w	r2, r2, #32
 80076a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68da      	ldr	r2, [r3, #12]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	695a      	ldr	r2, [r3, #20]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f022 0201 	bic.w	r2, r2, #1
 80076c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2220      	movs	r2, #32
 80076cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d135      	bne.n	8007744 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	330c      	adds	r3, #12
 80076e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	e853 3f00 	ldrex	r3, [r3]
 80076ec:	613b      	str	r3, [r7, #16]
   return(result);
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	f023 0310 	bic.w	r3, r3, #16
 80076f4:	627b      	str	r3, [r7, #36]	; 0x24
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	330c      	adds	r3, #12
 80076fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076fe:	623a      	str	r2, [r7, #32]
 8007700:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007702:	69f9      	ldr	r1, [r7, #28]
 8007704:	6a3a      	ldr	r2, [r7, #32]
 8007706:	e841 2300 	strex	r3, r2, [r1]
 800770a:	61bb      	str	r3, [r7, #24]
   return(result);
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1e5      	bne.n	80076de <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0310 	and.w	r3, r3, #16
 800771c:	2b10      	cmp	r3, #16
 800771e:	d10a      	bne.n	8007736 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007720:	2300      	movs	r3, #0
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	60fb      	str	r3, [r7, #12]
 8007734:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800773a:	4619      	mov	r1, r3
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f7ff fdbb 	bl	80072b8 <HAL_UARTEx_RxEventCallback>
 8007742:	e002      	b.n	800774a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f7f9 fd07 	bl	8001158 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800774a:	2300      	movs	r3, #0
 800774c:	e002      	b.n	8007754 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	e000      	b.n	8007754 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007752:	2302      	movs	r3, #2
  }
}
 8007754:	4618      	mov	r0, r3
 8007756:	3730      	adds	r7, #48	; 0x30
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800775c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007760:	b0c0      	sub	sp, #256	; 0x100
 8007762:	af00      	add	r7, sp, #0
 8007764:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007778:	68d9      	ldr	r1, [r3, #12]
 800777a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	ea40 0301 	orr.w	r3, r0, r1
 8007784:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800778a:	689a      	ldr	r2, [r3, #8]
 800778c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	431a      	orrs	r2, r3
 8007794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	431a      	orrs	r2, r3
 800779c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80077a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80077b4:	f021 010c 	bic.w	r1, r1, #12
 80077b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80077c2:	430b      	orrs	r3, r1
 80077c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80077d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077d6:	6999      	ldr	r1, [r3, #24]
 80077d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	ea40 0301 	orr.w	r3, r0, r1
 80077e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80077e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	4b8f      	ldr	r3, [pc, #572]	; (8007a28 <UART_SetConfig+0x2cc>)
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d005      	beq.n	80077fc <UART_SetConfig+0xa0>
 80077f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	4b8d      	ldr	r3, [pc, #564]	; (8007a2c <UART_SetConfig+0x2d0>)
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d104      	bne.n	8007806 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80077fc:	f7fe f928 	bl	8005a50 <HAL_RCC_GetPCLK2Freq>
 8007800:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007804:	e003      	b.n	800780e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007806:	f7fe f90f 	bl	8005a28 <HAL_RCC_GetPCLK1Freq>
 800780a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800780e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007812:	69db      	ldr	r3, [r3, #28]
 8007814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007818:	f040 810c 	bne.w	8007a34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800781c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007820:	2200      	movs	r2, #0
 8007822:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007826:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800782a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800782e:	4622      	mov	r2, r4
 8007830:	462b      	mov	r3, r5
 8007832:	1891      	adds	r1, r2, r2
 8007834:	65b9      	str	r1, [r7, #88]	; 0x58
 8007836:	415b      	adcs	r3, r3
 8007838:	65fb      	str	r3, [r7, #92]	; 0x5c
 800783a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800783e:	4621      	mov	r1, r4
 8007840:	eb12 0801 	adds.w	r8, r2, r1
 8007844:	4629      	mov	r1, r5
 8007846:	eb43 0901 	adc.w	r9, r3, r1
 800784a:	f04f 0200 	mov.w	r2, #0
 800784e:	f04f 0300 	mov.w	r3, #0
 8007852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800785a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800785e:	4690      	mov	r8, r2
 8007860:	4699      	mov	r9, r3
 8007862:	4623      	mov	r3, r4
 8007864:	eb18 0303 	adds.w	r3, r8, r3
 8007868:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800786c:	462b      	mov	r3, r5
 800786e:	eb49 0303 	adc.w	r3, r9, r3
 8007872:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007882:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007886:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800788a:	460b      	mov	r3, r1
 800788c:	18db      	adds	r3, r3, r3
 800788e:	653b      	str	r3, [r7, #80]	; 0x50
 8007890:	4613      	mov	r3, r2
 8007892:	eb42 0303 	adc.w	r3, r2, r3
 8007896:	657b      	str	r3, [r7, #84]	; 0x54
 8007898:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800789c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80078a0:	f7f9 f914 	bl	8000acc <__aeabi_uldivmod>
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	4b61      	ldr	r3, [pc, #388]	; (8007a30 <UART_SetConfig+0x2d4>)
 80078aa:	fba3 2302 	umull	r2, r3, r3, r2
 80078ae:	095b      	lsrs	r3, r3, #5
 80078b0:	011c      	lsls	r4, r3, #4
 80078b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078b6:	2200      	movs	r2, #0
 80078b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80078c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80078c4:	4642      	mov	r2, r8
 80078c6:	464b      	mov	r3, r9
 80078c8:	1891      	adds	r1, r2, r2
 80078ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80078cc:	415b      	adcs	r3, r3
 80078ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80078d4:	4641      	mov	r1, r8
 80078d6:	eb12 0a01 	adds.w	sl, r2, r1
 80078da:	4649      	mov	r1, r9
 80078dc:	eb43 0b01 	adc.w	fp, r3, r1
 80078e0:	f04f 0200 	mov.w	r2, #0
 80078e4:	f04f 0300 	mov.w	r3, #0
 80078e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80078ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80078f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078f4:	4692      	mov	sl, r2
 80078f6:	469b      	mov	fp, r3
 80078f8:	4643      	mov	r3, r8
 80078fa:	eb1a 0303 	adds.w	r3, sl, r3
 80078fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007902:	464b      	mov	r3, r9
 8007904:	eb4b 0303 	adc.w	r3, fp, r3
 8007908:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800790c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007918:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800791c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007920:	460b      	mov	r3, r1
 8007922:	18db      	adds	r3, r3, r3
 8007924:	643b      	str	r3, [r7, #64]	; 0x40
 8007926:	4613      	mov	r3, r2
 8007928:	eb42 0303 	adc.w	r3, r2, r3
 800792c:	647b      	str	r3, [r7, #68]	; 0x44
 800792e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007932:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007936:	f7f9 f8c9 	bl	8000acc <__aeabi_uldivmod>
 800793a:	4602      	mov	r2, r0
 800793c:	460b      	mov	r3, r1
 800793e:	4611      	mov	r1, r2
 8007940:	4b3b      	ldr	r3, [pc, #236]	; (8007a30 <UART_SetConfig+0x2d4>)
 8007942:	fba3 2301 	umull	r2, r3, r3, r1
 8007946:	095b      	lsrs	r3, r3, #5
 8007948:	2264      	movs	r2, #100	; 0x64
 800794a:	fb02 f303 	mul.w	r3, r2, r3
 800794e:	1acb      	subs	r3, r1, r3
 8007950:	00db      	lsls	r3, r3, #3
 8007952:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007956:	4b36      	ldr	r3, [pc, #216]	; (8007a30 <UART_SetConfig+0x2d4>)
 8007958:	fba3 2302 	umull	r2, r3, r3, r2
 800795c:	095b      	lsrs	r3, r3, #5
 800795e:	005b      	lsls	r3, r3, #1
 8007960:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007964:	441c      	add	r4, r3
 8007966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800796a:	2200      	movs	r2, #0
 800796c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007970:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007974:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007978:	4642      	mov	r2, r8
 800797a:	464b      	mov	r3, r9
 800797c:	1891      	adds	r1, r2, r2
 800797e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007980:	415b      	adcs	r3, r3
 8007982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007984:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007988:	4641      	mov	r1, r8
 800798a:	1851      	adds	r1, r2, r1
 800798c:	6339      	str	r1, [r7, #48]	; 0x30
 800798e:	4649      	mov	r1, r9
 8007990:	414b      	adcs	r3, r1
 8007992:	637b      	str	r3, [r7, #52]	; 0x34
 8007994:	f04f 0200 	mov.w	r2, #0
 8007998:	f04f 0300 	mov.w	r3, #0
 800799c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80079a0:	4659      	mov	r1, fp
 80079a2:	00cb      	lsls	r3, r1, #3
 80079a4:	4651      	mov	r1, sl
 80079a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079aa:	4651      	mov	r1, sl
 80079ac:	00ca      	lsls	r2, r1, #3
 80079ae:	4610      	mov	r0, r2
 80079b0:	4619      	mov	r1, r3
 80079b2:	4603      	mov	r3, r0
 80079b4:	4642      	mov	r2, r8
 80079b6:	189b      	adds	r3, r3, r2
 80079b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079bc:	464b      	mov	r3, r9
 80079be:	460a      	mov	r2, r1
 80079c0:	eb42 0303 	adc.w	r3, r2, r3
 80079c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80079d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80079d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80079dc:	460b      	mov	r3, r1
 80079de:	18db      	adds	r3, r3, r3
 80079e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80079e2:	4613      	mov	r3, r2
 80079e4:	eb42 0303 	adc.w	r3, r2, r3
 80079e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80079ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80079f2:	f7f9 f86b 	bl	8000acc <__aeabi_uldivmod>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	4b0d      	ldr	r3, [pc, #52]	; (8007a30 <UART_SetConfig+0x2d4>)
 80079fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007a00:	095b      	lsrs	r3, r3, #5
 8007a02:	2164      	movs	r1, #100	; 0x64
 8007a04:	fb01 f303 	mul.w	r3, r1, r3
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	00db      	lsls	r3, r3, #3
 8007a0c:	3332      	adds	r3, #50	; 0x32
 8007a0e:	4a08      	ldr	r2, [pc, #32]	; (8007a30 <UART_SetConfig+0x2d4>)
 8007a10:	fba2 2303 	umull	r2, r3, r2, r3
 8007a14:	095b      	lsrs	r3, r3, #5
 8007a16:	f003 0207 	and.w	r2, r3, #7
 8007a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4422      	add	r2, r4
 8007a22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007a24:	e105      	b.n	8007c32 <UART_SetConfig+0x4d6>
 8007a26:	bf00      	nop
 8007a28:	40011000 	.word	0x40011000
 8007a2c:	40011400 	.word	0x40011400
 8007a30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007a42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007a46:	4642      	mov	r2, r8
 8007a48:	464b      	mov	r3, r9
 8007a4a:	1891      	adds	r1, r2, r2
 8007a4c:	6239      	str	r1, [r7, #32]
 8007a4e:	415b      	adcs	r3, r3
 8007a50:	627b      	str	r3, [r7, #36]	; 0x24
 8007a52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a56:	4641      	mov	r1, r8
 8007a58:	1854      	adds	r4, r2, r1
 8007a5a:	4649      	mov	r1, r9
 8007a5c:	eb43 0501 	adc.w	r5, r3, r1
 8007a60:	f04f 0200 	mov.w	r2, #0
 8007a64:	f04f 0300 	mov.w	r3, #0
 8007a68:	00eb      	lsls	r3, r5, #3
 8007a6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a6e:	00e2      	lsls	r2, r4, #3
 8007a70:	4614      	mov	r4, r2
 8007a72:	461d      	mov	r5, r3
 8007a74:	4643      	mov	r3, r8
 8007a76:	18e3      	adds	r3, r4, r3
 8007a78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007a7c:	464b      	mov	r3, r9
 8007a7e:	eb45 0303 	adc.w	r3, r5, r3
 8007a82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a96:	f04f 0200 	mov.w	r2, #0
 8007a9a:	f04f 0300 	mov.w	r3, #0
 8007a9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	008b      	lsls	r3, r1, #2
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007aac:	4621      	mov	r1, r4
 8007aae:	008a      	lsls	r2, r1, #2
 8007ab0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007ab4:	f7f9 f80a 	bl	8000acc <__aeabi_uldivmod>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	4b60      	ldr	r3, [pc, #384]	; (8007c40 <UART_SetConfig+0x4e4>)
 8007abe:	fba3 2302 	umull	r2, r3, r3, r2
 8007ac2:	095b      	lsrs	r3, r3, #5
 8007ac4:	011c      	lsls	r4, r3, #4
 8007ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007aca:	2200      	movs	r2, #0
 8007acc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ad0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007ad4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007ad8:	4642      	mov	r2, r8
 8007ada:	464b      	mov	r3, r9
 8007adc:	1891      	adds	r1, r2, r2
 8007ade:	61b9      	str	r1, [r7, #24]
 8007ae0:	415b      	adcs	r3, r3
 8007ae2:	61fb      	str	r3, [r7, #28]
 8007ae4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ae8:	4641      	mov	r1, r8
 8007aea:	1851      	adds	r1, r2, r1
 8007aec:	6139      	str	r1, [r7, #16]
 8007aee:	4649      	mov	r1, r9
 8007af0:	414b      	adcs	r3, r1
 8007af2:	617b      	str	r3, [r7, #20]
 8007af4:	f04f 0200 	mov.w	r2, #0
 8007af8:	f04f 0300 	mov.w	r3, #0
 8007afc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b00:	4659      	mov	r1, fp
 8007b02:	00cb      	lsls	r3, r1, #3
 8007b04:	4651      	mov	r1, sl
 8007b06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b0a:	4651      	mov	r1, sl
 8007b0c:	00ca      	lsls	r2, r1, #3
 8007b0e:	4610      	mov	r0, r2
 8007b10:	4619      	mov	r1, r3
 8007b12:	4603      	mov	r3, r0
 8007b14:	4642      	mov	r2, r8
 8007b16:	189b      	adds	r3, r3, r2
 8007b18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b1c:	464b      	mov	r3, r9
 8007b1e:	460a      	mov	r2, r1
 8007b20:	eb42 0303 	adc.w	r3, r2, r3
 8007b24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007b34:	f04f 0200 	mov.w	r2, #0
 8007b38:	f04f 0300 	mov.w	r3, #0
 8007b3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007b40:	4649      	mov	r1, r9
 8007b42:	008b      	lsls	r3, r1, #2
 8007b44:	4641      	mov	r1, r8
 8007b46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b4a:	4641      	mov	r1, r8
 8007b4c:	008a      	lsls	r2, r1, #2
 8007b4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007b52:	f7f8 ffbb 	bl	8000acc <__aeabi_uldivmod>
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	4b39      	ldr	r3, [pc, #228]	; (8007c40 <UART_SetConfig+0x4e4>)
 8007b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8007b60:	095b      	lsrs	r3, r3, #5
 8007b62:	2164      	movs	r1, #100	; 0x64
 8007b64:	fb01 f303 	mul.w	r3, r1, r3
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	011b      	lsls	r3, r3, #4
 8007b6c:	3332      	adds	r3, #50	; 0x32
 8007b6e:	4a34      	ldr	r2, [pc, #208]	; (8007c40 <UART_SetConfig+0x4e4>)
 8007b70:	fba2 2303 	umull	r2, r3, r2, r3
 8007b74:	095b      	lsrs	r3, r3, #5
 8007b76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b7a:	441c      	add	r4, r3
 8007b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b80:	2200      	movs	r2, #0
 8007b82:	673b      	str	r3, [r7, #112]	; 0x70
 8007b84:	677a      	str	r2, [r7, #116]	; 0x74
 8007b86:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007b8a:	4642      	mov	r2, r8
 8007b8c:	464b      	mov	r3, r9
 8007b8e:	1891      	adds	r1, r2, r2
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	415b      	adcs	r3, r3
 8007b94:	60fb      	str	r3, [r7, #12]
 8007b96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b9a:	4641      	mov	r1, r8
 8007b9c:	1851      	adds	r1, r2, r1
 8007b9e:	6039      	str	r1, [r7, #0]
 8007ba0:	4649      	mov	r1, r9
 8007ba2:	414b      	adcs	r3, r1
 8007ba4:	607b      	str	r3, [r7, #4]
 8007ba6:	f04f 0200 	mov.w	r2, #0
 8007baa:	f04f 0300 	mov.w	r3, #0
 8007bae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007bb2:	4659      	mov	r1, fp
 8007bb4:	00cb      	lsls	r3, r1, #3
 8007bb6:	4651      	mov	r1, sl
 8007bb8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bbc:	4651      	mov	r1, sl
 8007bbe:	00ca      	lsls	r2, r1, #3
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	4642      	mov	r2, r8
 8007bc8:	189b      	adds	r3, r3, r2
 8007bca:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bcc:	464b      	mov	r3, r9
 8007bce:	460a      	mov	r2, r1
 8007bd0:	eb42 0303 	adc.w	r3, r2, r3
 8007bd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	663b      	str	r3, [r7, #96]	; 0x60
 8007be0:	667a      	str	r2, [r7, #100]	; 0x64
 8007be2:	f04f 0200 	mov.w	r2, #0
 8007be6:	f04f 0300 	mov.w	r3, #0
 8007bea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007bee:	4649      	mov	r1, r9
 8007bf0:	008b      	lsls	r3, r1, #2
 8007bf2:	4641      	mov	r1, r8
 8007bf4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bf8:	4641      	mov	r1, r8
 8007bfa:	008a      	lsls	r2, r1, #2
 8007bfc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007c00:	f7f8 ff64 	bl	8000acc <__aeabi_uldivmod>
 8007c04:	4602      	mov	r2, r0
 8007c06:	460b      	mov	r3, r1
 8007c08:	4b0d      	ldr	r3, [pc, #52]	; (8007c40 <UART_SetConfig+0x4e4>)
 8007c0a:	fba3 1302 	umull	r1, r3, r3, r2
 8007c0e:	095b      	lsrs	r3, r3, #5
 8007c10:	2164      	movs	r1, #100	; 0x64
 8007c12:	fb01 f303 	mul.w	r3, r1, r3
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	011b      	lsls	r3, r3, #4
 8007c1a:	3332      	adds	r3, #50	; 0x32
 8007c1c:	4a08      	ldr	r2, [pc, #32]	; (8007c40 <UART_SetConfig+0x4e4>)
 8007c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c22:	095b      	lsrs	r3, r3, #5
 8007c24:	f003 020f 	and.w	r2, r3, #15
 8007c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4422      	add	r2, r4
 8007c30:	609a      	str	r2, [r3, #8]
}
 8007c32:	bf00      	nop
 8007c34:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c3e:	bf00      	nop
 8007c40:	51eb851f 	.word	0x51eb851f

08007c44 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c56:	2b84      	cmp	r3, #132	; 0x84
 8007c58:	d005      	beq.n	8007c66 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007c5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	4413      	add	r3, r2
 8007c62:	3303      	adds	r3, #3
 8007c64:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007c66:	68fb      	ldr	r3, [r7, #12]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3714      	adds	r7, #20
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007c78:	f000 faf6 	bl	8008268 <vTaskStartScheduler>
  
  return osOK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007c82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c84:	b089      	sub	sp, #36	; 0x24
 8007c86:	af04      	add	r7, sp, #16
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	695b      	ldr	r3, [r3, #20]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d020      	beq.n	8007cd6 <osThreadCreate+0x54>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d01c      	beq.n	8007cd6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685c      	ldr	r4, [r3, #4]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681d      	ldr	r5, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	691e      	ldr	r6, [r3, #16]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7ff ffc8 	bl	8007c44 <makeFreeRtosPriority>
 8007cb4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cbe:	9202      	str	r2, [sp, #8]
 8007cc0:	9301      	str	r3, [sp, #4]
 8007cc2:	9100      	str	r1, [sp, #0]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	4632      	mov	r2, r6
 8007cc8:	4629      	mov	r1, r5
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f000 f8ed 	bl	8007eaa <xTaskCreateStatic>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	e01c      	b.n	8007d10 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685c      	ldr	r4, [r3, #4]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ce2:	b29e      	uxth	r6, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7ff ffaa 	bl	8007c44 <makeFreeRtosPriority>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	f107 030c 	add.w	r3, r7, #12
 8007cf6:	9301      	str	r3, [sp, #4]
 8007cf8:	9200      	str	r2, [sp, #0]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	4632      	mov	r2, r6
 8007cfe:	4629      	mov	r1, r5
 8007d00:	4620      	mov	r0, r4
 8007d02:	f000 f92f 	bl	8007f64 <xTaskCreate>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d001      	beq.n	8007d10 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	e000      	b.n	8007d12 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007d10:	68fb      	ldr	r3, [r7, #12]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d1a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b084      	sub	sp, #16
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d001      	beq.n	8007d30 <osDelay+0x16>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	e000      	b.n	8007d32 <osDelay+0x18>
 8007d30:	2301      	movs	r3, #1
 8007d32:	4618      	mov	r0, r3
 8007d34:	f000 fa64 	bl	8008200 <vTaskDelay>
  
  return osOK;
 8007d38:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d42:	b480      	push	{r7}
 8007d44:	b083      	sub	sp, #12
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f103 0208 	add.w	r2, r3, #8
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f04f 32ff 	mov.w	r2, #4294967295
 8007d5a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f103 0208 	add.w	r2, r3, #8
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f103 0208 	add.w	r2, r3, #8
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d76:	bf00      	nop
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d82:	b480      	push	{r7}
 8007d84:	b083      	sub	sp, #12
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	689a      	ldr	r2, [r3, #8]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	601a      	str	r2, [r3, #0]
}
 8007dd8:	bf00      	nop
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfa:	d103      	bne.n	8007e04 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	60fb      	str	r3, [r7, #12]
 8007e02:	e00c      	b.n	8007e1e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3308      	adds	r3, #8
 8007e08:	60fb      	str	r3, [r7, #12]
 8007e0a:	e002      	b.n	8007e12 <vListInsert+0x2e>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	60fb      	str	r3, [r7, #12]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d2f6      	bcs.n	8007e0c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	685a      	ldr	r2, [r3, #4]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	1c5a      	adds	r2, r3, #1
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	601a      	str	r2, [r3, #0]
}
 8007e4a:	bf00      	nop
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e56:	b480      	push	{r7}
 8007e58:	b085      	sub	sp, #20
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	6892      	ldr	r2, [r2, #8]
 8007e6c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	6852      	ldr	r2, [r2, #4]
 8007e76:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d103      	bne.n	8007e8a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	689a      	ldr	r2, [r3, #8]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	1e5a      	subs	r2, r3, #1
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3714      	adds	r7, #20
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b08e      	sub	sp, #56	; 0x38
 8007eae:	af04      	add	r7, sp, #16
 8007eb0:	60f8      	str	r0, [r7, #12]
 8007eb2:	60b9      	str	r1, [r7, #8]
 8007eb4:	607a      	str	r2, [r7, #4]
 8007eb6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10a      	bne.n	8007ed4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007ed0:	bf00      	nop
 8007ed2:	e7fe      	b.n	8007ed2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10a      	bne.n	8007ef0 <xTaskCreateStatic+0x46>
	__asm volatile
 8007eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	61fb      	str	r3, [r7, #28]
}
 8007eec:	bf00      	nop
 8007eee:	e7fe      	b.n	8007eee <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007ef0:	23b4      	movs	r3, #180	; 0xb4
 8007ef2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	2bb4      	cmp	r3, #180	; 0xb4
 8007ef8:	d00a      	beq.n	8007f10 <xTaskCreateStatic+0x66>
	__asm volatile
 8007efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efe:	f383 8811 	msr	BASEPRI, r3
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	61bb      	str	r3, [r7, #24]
}
 8007f0c:	bf00      	nop
 8007f0e:	e7fe      	b.n	8007f0e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f10:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d01e      	beq.n	8007f56 <xTaskCreateStatic+0xac>
 8007f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d01b      	beq.n	8007f56 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f20:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f26:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f30:	2300      	movs	r3, #0
 8007f32:	9303      	str	r3, [sp, #12]
 8007f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f36:	9302      	str	r3, [sp, #8]
 8007f38:	f107 0314 	add.w	r3, r7, #20
 8007f3c:	9301      	str	r3, [sp, #4]
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	68b9      	ldr	r1, [r7, #8]
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 f851 	bl	8007ff0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f50:	f000 f8ec 	bl	800812c <prvAddNewTaskToReadyList>
 8007f54:	e001      	b.n	8007f5a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007f56:	2300      	movs	r3, #0
 8007f58:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007f5a:	697b      	ldr	r3, [r7, #20]
	}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3728      	adds	r7, #40	; 0x28
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b08c      	sub	sp, #48	; 0x30
 8007f68:	af04      	add	r7, sp, #16
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	603b      	str	r3, [r7, #0]
 8007f70:	4613      	mov	r3, r2
 8007f72:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007f74:	88fb      	ldrh	r3, [r7, #6]
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f000 fef5 	bl	8008d68 <pvPortMalloc>
 8007f7e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00e      	beq.n	8007fa4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007f86:	20b4      	movs	r0, #180	; 0xb4
 8007f88:	f000 feee 	bl	8008d68 <pvPortMalloc>
 8007f8c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d003      	beq.n	8007f9c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	631a      	str	r2, [r3, #48]	; 0x30
 8007f9a:	e005      	b.n	8007fa8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007f9c:	6978      	ldr	r0, [r7, #20]
 8007f9e:	f000 ffaf 	bl	8008f00 <vPortFree>
 8007fa2:	e001      	b.n	8007fa8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d017      	beq.n	8007fde <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007fb6:	88fa      	ldrh	r2, [r7, #6]
 8007fb8:	2300      	movs	r3, #0
 8007fba:	9303      	str	r3, [sp, #12]
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	9302      	str	r3, [sp, #8]
 8007fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc2:	9301      	str	r3, [sp, #4]
 8007fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	68b9      	ldr	r1, [r7, #8]
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 f80f 	bl	8007ff0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fd2:	69f8      	ldr	r0, [r7, #28]
 8007fd4:	f000 f8aa 	bl	800812c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	61bb      	str	r3, [r7, #24]
 8007fdc:	e002      	b.n	8007fe4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007fde:	f04f 33ff 	mov.w	r3, #4294967295
 8007fe2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007fe4:	69bb      	ldr	r3, [r7, #24]
	}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3720      	adds	r7, #32
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
	...

08007ff0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b088      	sub	sp, #32
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
 8007ffc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008008:	3b01      	subs	r3, #1
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4413      	add	r3, r2
 800800e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	f023 0307 	bic.w	r3, r3, #7
 8008016:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	f003 0307 	and.w	r3, r3, #7
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00a      	beq.n	8008038 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	617b      	str	r3, [r7, #20]
}
 8008034:	bf00      	nop
 8008036:	e7fe      	b.n	8008036 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d01f      	beq.n	800807e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800803e:	2300      	movs	r3, #0
 8008040:	61fb      	str	r3, [r7, #28]
 8008042:	e012      	b.n	800806a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	4413      	add	r3, r2
 800804a:	7819      	ldrb	r1, [r3, #0]
 800804c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	4413      	add	r3, r2
 8008052:	3334      	adds	r3, #52	; 0x34
 8008054:	460a      	mov	r2, r1
 8008056:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	4413      	add	r3, r2
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d006      	beq.n	8008072 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	3301      	adds	r3, #1
 8008068:	61fb      	str	r3, [r7, #28]
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	2b0f      	cmp	r3, #15
 800806e:	d9e9      	bls.n	8008044 <prvInitialiseNewTask+0x54>
 8008070:	e000      	b.n	8008074 <prvInitialiseNewTask+0x84>
			{
				break;
 8008072:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008076:	2200      	movs	r2, #0
 8008078:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800807c:	e003      	b.n	8008086 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800807e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008080:	2200      	movs	r2, #0
 8008082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008088:	2b06      	cmp	r3, #6
 800808a:	d901      	bls.n	8008090 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800808c:	2306      	movs	r3, #6
 800808e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008094:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008098:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800809a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800809c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809e:	2200      	movs	r2, #0
 80080a0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a4:	3304      	adds	r3, #4
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7ff fe6b 	bl	8007d82 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80080ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ae:	3318      	adds	r3, #24
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7ff fe66 	bl	8007d82 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80080b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080be:	f1c3 0207 	rsb	r2, r3, #7
 80080c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80080c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80080cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ce:	2200      	movs	r2, #0
 80080d0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80080d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80080dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080de:	334c      	adds	r3, #76	; 0x4c
 80080e0:	2260      	movs	r2, #96	; 0x60
 80080e2:	2100      	movs	r1, #0
 80080e4:	4618      	mov	r0, r3
 80080e6:	f001 f84f 	bl	8009188 <memset>
 80080ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ec:	4a0c      	ldr	r2, [pc, #48]	; (8008120 <prvInitialiseNewTask+0x130>)
 80080ee:	651a      	str	r2, [r3, #80]	; 0x50
 80080f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f2:	4a0c      	ldr	r2, [pc, #48]	; (8008124 <prvInitialiseNewTask+0x134>)
 80080f4:	655a      	str	r2, [r3, #84]	; 0x54
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	4a0b      	ldr	r2, [pc, #44]	; (8008128 <prvInitialiseNewTask+0x138>)
 80080fa:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80080fc:	683a      	ldr	r2, [r7, #0]
 80080fe:	68f9      	ldr	r1, [r7, #12]
 8008100:	69b8      	ldr	r0, [r7, #24]
 8008102:	f000 fc1f 	bl	8008944 <pxPortInitialiseStack>
 8008106:	4602      	mov	r2, r0
 8008108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800810c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810e:	2b00      	cmp	r3, #0
 8008110:	d002      	beq.n	8008118 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008116:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008118:	bf00      	nop
 800811a:	3720      	adds	r7, #32
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	08009420 	.word	0x08009420
 8008124:	08009440 	.word	0x08009440
 8008128:	08009400 	.word	0x08009400

0800812c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008134:	f000 fd36 	bl	8008ba4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008138:	4b2a      	ldr	r3, [pc, #168]	; (80081e4 <prvAddNewTaskToReadyList+0xb8>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	3301      	adds	r3, #1
 800813e:	4a29      	ldr	r2, [pc, #164]	; (80081e4 <prvAddNewTaskToReadyList+0xb8>)
 8008140:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008142:	4b29      	ldr	r3, [pc, #164]	; (80081e8 <prvAddNewTaskToReadyList+0xbc>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d109      	bne.n	800815e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800814a:	4a27      	ldr	r2, [pc, #156]	; (80081e8 <prvAddNewTaskToReadyList+0xbc>)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008150:	4b24      	ldr	r3, [pc, #144]	; (80081e4 <prvAddNewTaskToReadyList+0xb8>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d110      	bne.n	800817a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008158:	f000 facc 	bl	80086f4 <prvInitialiseTaskLists>
 800815c:	e00d      	b.n	800817a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800815e:	4b23      	ldr	r3, [pc, #140]	; (80081ec <prvAddNewTaskToReadyList+0xc0>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d109      	bne.n	800817a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008166:	4b20      	ldr	r3, [pc, #128]	; (80081e8 <prvAddNewTaskToReadyList+0xbc>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008170:	429a      	cmp	r2, r3
 8008172:	d802      	bhi.n	800817a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008174:	4a1c      	ldr	r2, [pc, #112]	; (80081e8 <prvAddNewTaskToReadyList+0xbc>)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800817a:	4b1d      	ldr	r3, [pc, #116]	; (80081f0 <prvAddNewTaskToReadyList+0xc4>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	3301      	adds	r3, #1
 8008180:	4a1b      	ldr	r2, [pc, #108]	; (80081f0 <prvAddNewTaskToReadyList+0xc4>)
 8008182:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008188:	2201      	movs	r2, #1
 800818a:	409a      	lsls	r2, r3
 800818c:	4b19      	ldr	r3, [pc, #100]	; (80081f4 <prvAddNewTaskToReadyList+0xc8>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4313      	orrs	r3, r2
 8008192:	4a18      	ldr	r2, [pc, #96]	; (80081f4 <prvAddNewTaskToReadyList+0xc8>)
 8008194:	6013      	str	r3, [r2, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800819a:	4613      	mov	r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4413      	add	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4a15      	ldr	r2, [pc, #84]	; (80081f8 <prvAddNewTaskToReadyList+0xcc>)
 80081a4:	441a      	add	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	3304      	adds	r3, #4
 80081aa:	4619      	mov	r1, r3
 80081ac:	4610      	mov	r0, r2
 80081ae:	f7ff fdf5 	bl	8007d9c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80081b2:	f000 fd27 	bl	8008c04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80081b6:	4b0d      	ldr	r3, [pc, #52]	; (80081ec <prvAddNewTaskToReadyList+0xc0>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00e      	beq.n	80081dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80081be:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <prvAddNewTaskToReadyList+0xbc>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d207      	bcs.n	80081dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80081cc:	4b0b      	ldr	r3, [pc, #44]	; (80081fc <prvAddNewTaskToReadyList+0xd0>)
 80081ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081d2:	601a      	str	r2, [r3, #0]
 80081d4:	f3bf 8f4f 	dsb	sy
 80081d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081dc:	bf00      	nop
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	200008cc 	.word	0x200008cc
 80081e8:	200007cc 	.word	0x200007cc
 80081ec:	200008d8 	.word	0x200008d8
 80081f0:	200008e8 	.word	0x200008e8
 80081f4:	200008d4 	.word	0x200008d4
 80081f8:	200007d0 	.word	0x200007d0
 80081fc:	e000ed04 	.word	0xe000ed04

08008200 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008208:	2300      	movs	r3, #0
 800820a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d017      	beq.n	8008242 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008212:	4b13      	ldr	r3, [pc, #76]	; (8008260 <vTaskDelay+0x60>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00a      	beq.n	8008230 <vTaskDelay+0x30>
	__asm volatile
 800821a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	60bb      	str	r3, [r7, #8]
}
 800822c:	bf00      	nop
 800822e:	e7fe      	b.n	800822e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008230:	f000 f884 	bl	800833c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008234:	2100      	movs	r1, #0
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fb1e 	bl	8008878 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800823c:	f000 f88c 	bl	8008358 <xTaskResumeAll>
 8008240:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d107      	bne.n	8008258 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008248:	4b06      	ldr	r3, [pc, #24]	; (8008264 <vTaskDelay+0x64>)
 800824a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800824e:	601a      	str	r2, [r3, #0]
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008258:	bf00      	nop
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	200008f4 	.word	0x200008f4
 8008264:	e000ed04 	.word	0xe000ed04

08008268 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b08a      	sub	sp, #40	; 0x28
 800826c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800826e:	2300      	movs	r3, #0
 8008270:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008272:	2300      	movs	r3, #0
 8008274:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008276:	463a      	mov	r2, r7
 8008278:	1d39      	adds	r1, r7, #4
 800827a:	f107 0308 	add.w	r3, r7, #8
 800827e:	4618      	mov	r0, r3
 8008280:	f7f8 fda6 	bl	8000dd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	9202      	str	r2, [sp, #8]
 800828c:	9301      	str	r3, [sp, #4]
 800828e:	2300      	movs	r3, #0
 8008290:	9300      	str	r3, [sp, #0]
 8008292:	2300      	movs	r3, #0
 8008294:	460a      	mov	r2, r1
 8008296:	4921      	ldr	r1, [pc, #132]	; (800831c <vTaskStartScheduler+0xb4>)
 8008298:	4821      	ldr	r0, [pc, #132]	; (8008320 <vTaskStartScheduler+0xb8>)
 800829a:	f7ff fe06 	bl	8007eaa <xTaskCreateStatic>
 800829e:	4603      	mov	r3, r0
 80082a0:	4a20      	ldr	r2, [pc, #128]	; (8008324 <vTaskStartScheduler+0xbc>)
 80082a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80082a4:	4b1f      	ldr	r3, [pc, #124]	; (8008324 <vTaskStartScheduler+0xbc>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d002      	beq.n	80082b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80082ac:	2301      	movs	r3, #1
 80082ae:	617b      	str	r3, [r7, #20]
 80082b0:	e001      	b.n	80082b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80082b2:	2300      	movs	r3, #0
 80082b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d11b      	bne.n	80082f4 <vTaskStartScheduler+0x8c>
	__asm volatile
 80082bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	613b      	str	r3, [r7, #16]
}
 80082ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80082d0:	4b15      	ldr	r3, [pc, #84]	; (8008328 <vTaskStartScheduler+0xc0>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	334c      	adds	r3, #76	; 0x4c
 80082d6:	4a15      	ldr	r2, [pc, #84]	; (800832c <vTaskStartScheduler+0xc4>)
 80082d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80082da:	4b15      	ldr	r3, [pc, #84]	; (8008330 <vTaskStartScheduler+0xc8>)
 80082dc:	f04f 32ff 	mov.w	r2, #4294967295
 80082e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80082e2:	4b14      	ldr	r3, [pc, #80]	; (8008334 <vTaskStartScheduler+0xcc>)
 80082e4:	2201      	movs	r2, #1
 80082e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80082e8:	4b13      	ldr	r3, [pc, #76]	; (8008338 <vTaskStartScheduler+0xd0>)
 80082ea:	2200      	movs	r2, #0
 80082ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80082ee:	f000 fbb7 	bl	8008a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80082f2:	e00e      	b.n	8008312 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082fa:	d10a      	bne.n	8008312 <vTaskStartScheduler+0xaa>
	__asm volatile
 80082fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008300:	f383 8811 	msr	BASEPRI, r3
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	f3bf 8f4f 	dsb	sy
 800830c:	60fb      	str	r3, [r7, #12]
}
 800830e:	bf00      	nop
 8008310:	e7fe      	b.n	8008310 <vTaskStartScheduler+0xa8>
}
 8008312:	bf00      	nop
 8008314:	3718      	adds	r7, #24
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	080093d8 	.word	0x080093d8
 8008320:	080086c5 	.word	0x080086c5
 8008324:	200008f0 	.word	0x200008f0
 8008328:	200007cc 	.word	0x200007cc
 800832c:	20000060 	.word	0x20000060
 8008330:	200008ec 	.word	0x200008ec
 8008334:	200008d8 	.word	0x200008d8
 8008338:	200008d0 	.word	0x200008d0

0800833c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800833c:	b480      	push	{r7}
 800833e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008340:	4b04      	ldr	r3, [pc, #16]	; (8008354 <vTaskSuspendAll+0x18>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	3301      	adds	r3, #1
 8008346:	4a03      	ldr	r2, [pc, #12]	; (8008354 <vTaskSuspendAll+0x18>)
 8008348:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800834a:	bf00      	nop
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr
 8008354:	200008f4 	.word	0x200008f4

08008358 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800835e:	2300      	movs	r3, #0
 8008360:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008362:	2300      	movs	r3, #0
 8008364:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008366:	4b41      	ldr	r3, [pc, #260]	; (800846c <xTaskResumeAll+0x114>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10a      	bne.n	8008384 <xTaskResumeAll+0x2c>
	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	603b      	str	r3, [r7, #0]
}
 8008380:	bf00      	nop
 8008382:	e7fe      	b.n	8008382 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008384:	f000 fc0e 	bl	8008ba4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008388:	4b38      	ldr	r3, [pc, #224]	; (800846c <xTaskResumeAll+0x114>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3b01      	subs	r3, #1
 800838e:	4a37      	ldr	r2, [pc, #220]	; (800846c <xTaskResumeAll+0x114>)
 8008390:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008392:	4b36      	ldr	r3, [pc, #216]	; (800846c <xTaskResumeAll+0x114>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d161      	bne.n	800845e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800839a:	4b35      	ldr	r3, [pc, #212]	; (8008470 <xTaskResumeAll+0x118>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d05d      	beq.n	800845e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083a2:	e02e      	b.n	8008402 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083a4:	4b33      	ldr	r3, [pc, #204]	; (8008474 <xTaskResumeAll+0x11c>)
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	3318      	adds	r3, #24
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7ff fd50 	bl	8007e56 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	3304      	adds	r3, #4
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7ff fd4b 	bl	8007e56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c4:	2201      	movs	r2, #1
 80083c6:	409a      	lsls	r2, r3
 80083c8:	4b2b      	ldr	r3, [pc, #172]	; (8008478 <xTaskResumeAll+0x120>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	4a2a      	ldr	r2, [pc, #168]	; (8008478 <xTaskResumeAll+0x120>)
 80083d0:	6013      	str	r3, [r2, #0]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d6:	4613      	mov	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4413      	add	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4a27      	ldr	r2, [pc, #156]	; (800847c <xTaskResumeAll+0x124>)
 80083e0:	441a      	add	r2, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	3304      	adds	r3, #4
 80083e6:	4619      	mov	r1, r3
 80083e8:	4610      	mov	r0, r2
 80083ea:	f7ff fcd7 	bl	8007d9c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083f2:	4b23      	ldr	r3, [pc, #140]	; (8008480 <xTaskResumeAll+0x128>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d302      	bcc.n	8008402 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80083fc:	4b21      	ldr	r3, [pc, #132]	; (8008484 <xTaskResumeAll+0x12c>)
 80083fe:	2201      	movs	r2, #1
 8008400:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008402:	4b1c      	ldr	r3, [pc, #112]	; (8008474 <xTaskResumeAll+0x11c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1cc      	bne.n	80083a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d001      	beq.n	8008414 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008410:	f000 fa12 	bl	8008838 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008414:	4b1c      	ldr	r3, [pc, #112]	; (8008488 <xTaskResumeAll+0x130>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d010      	beq.n	8008442 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008420:	f000 f836 	bl	8008490 <xTaskIncrementTick>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d002      	beq.n	8008430 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800842a:	4b16      	ldr	r3, [pc, #88]	; (8008484 <xTaskResumeAll+0x12c>)
 800842c:	2201      	movs	r2, #1
 800842e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	3b01      	subs	r3, #1
 8008434:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1f1      	bne.n	8008420 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800843c:	4b12      	ldr	r3, [pc, #72]	; (8008488 <xTaskResumeAll+0x130>)
 800843e:	2200      	movs	r2, #0
 8008440:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008442:	4b10      	ldr	r3, [pc, #64]	; (8008484 <xTaskResumeAll+0x12c>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d009      	beq.n	800845e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800844a:	2301      	movs	r3, #1
 800844c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800844e:	4b0f      	ldr	r3, [pc, #60]	; (800848c <xTaskResumeAll+0x134>)
 8008450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008454:	601a      	str	r2, [r3, #0]
 8008456:	f3bf 8f4f 	dsb	sy
 800845a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800845e:	f000 fbd1 	bl	8008c04 <vPortExitCritical>

	return xAlreadyYielded;
 8008462:	68bb      	ldr	r3, [r7, #8]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	200008f4 	.word	0x200008f4
 8008470:	200008cc 	.word	0x200008cc
 8008474:	2000088c 	.word	0x2000088c
 8008478:	200008d4 	.word	0x200008d4
 800847c:	200007d0 	.word	0x200007d0
 8008480:	200007cc 	.word	0x200007cc
 8008484:	200008e0 	.word	0x200008e0
 8008488:	200008dc 	.word	0x200008dc
 800848c:	e000ed04 	.word	0xe000ed04

08008490 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008496:	2300      	movs	r3, #0
 8008498:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800849a:	4b4e      	ldr	r3, [pc, #312]	; (80085d4 <xTaskIncrementTick+0x144>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	f040 808e 	bne.w	80085c0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80084a4:	4b4c      	ldr	r3, [pc, #304]	; (80085d8 <xTaskIncrementTick+0x148>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3301      	adds	r3, #1
 80084aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80084ac:	4a4a      	ldr	r2, [pc, #296]	; (80085d8 <xTaskIncrementTick+0x148>)
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d120      	bne.n	80084fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80084b8:	4b48      	ldr	r3, [pc, #288]	; (80085dc <xTaskIncrementTick+0x14c>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00a      	beq.n	80084d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80084c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c6:	f383 8811 	msr	BASEPRI, r3
 80084ca:	f3bf 8f6f 	isb	sy
 80084ce:	f3bf 8f4f 	dsb	sy
 80084d2:	603b      	str	r3, [r7, #0]
}
 80084d4:	bf00      	nop
 80084d6:	e7fe      	b.n	80084d6 <xTaskIncrementTick+0x46>
 80084d8:	4b40      	ldr	r3, [pc, #256]	; (80085dc <xTaskIncrementTick+0x14c>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	60fb      	str	r3, [r7, #12]
 80084de:	4b40      	ldr	r3, [pc, #256]	; (80085e0 <xTaskIncrementTick+0x150>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a3e      	ldr	r2, [pc, #248]	; (80085dc <xTaskIncrementTick+0x14c>)
 80084e4:	6013      	str	r3, [r2, #0]
 80084e6:	4a3e      	ldr	r2, [pc, #248]	; (80085e0 <xTaskIncrementTick+0x150>)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6013      	str	r3, [r2, #0]
 80084ec:	4b3d      	ldr	r3, [pc, #244]	; (80085e4 <xTaskIncrementTick+0x154>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	3301      	adds	r3, #1
 80084f2:	4a3c      	ldr	r2, [pc, #240]	; (80085e4 <xTaskIncrementTick+0x154>)
 80084f4:	6013      	str	r3, [r2, #0]
 80084f6:	f000 f99f 	bl	8008838 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80084fa:	4b3b      	ldr	r3, [pc, #236]	; (80085e8 <xTaskIncrementTick+0x158>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	429a      	cmp	r2, r3
 8008502:	d348      	bcc.n	8008596 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008504:	4b35      	ldr	r3, [pc, #212]	; (80085dc <xTaskIncrementTick+0x14c>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d104      	bne.n	8008518 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800850e:	4b36      	ldr	r3, [pc, #216]	; (80085e8 <xTaskIncrementTick+0x158>)
 8008510:	f04f 32ff 	mov.w	r2, #4294967295
 8008514:	601a      	str	r2, [r3, #0]
					break;
 8008516:	e03e      	b.n	8008596 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008518:	4b30      	ldr	r3, [pc, #192]	; (80085dc <xTaskIncrementTick+0x14c>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	429a      	cmp	r2, r3
 800852e:	d203      	bcs.n	8008538 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008530:	4a2d      	ldr	r2, [pc, #180]	; (80085e8 <xTaskIncrementTick+0x158>)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008536:	e02e      	b.n	8008596 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	3304      	adds	r3, #4
 800853c:	4618      	mov	r0, r3
 800853e:	f7ff fc8a 	bl	8007e56 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008546:	2b00      	cmp	r3, #0
 8008548:	d004      	beq.n	8008554 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	3318      	adds	r3, #24
 800854e:	4618      	mov	r0, r3
 8008550:	f7ff fc81 	bl	8007e56 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008558:	2201      	movs	r2, #1
 800855a:	409a      	lsls	r2, r3
 800855c:	4b23      	ldr	r3, [pc, #140]	; (80085ec <xTaskIncrementTick+0x15c>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4313      	orrs	r3, r2
 8008562:	4a22      	ldr	r2, [pc, #136]	; (80085ec <xTaskIncrementTick+0x15c>)
 8008564:	6013      	str	r3, [r2, #0]
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856a:	4613      	mov	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4413      	add	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	4a1f      	ldr	r2, [pc, #124]	; (80085f0 <xTaskIncrementTick+0x160>)
 8008574:	441a      	add	r2, r3
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	3304      	adds	r3, #4
 800857a:	4619      	mov	r1, r3
 800857c:	4610      	mov	r0, r2
 800857e:	f7ff fc0d 	bl	8007d9c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008586:	4b1b      	ldr	r3, [pc, #108]	; (80085f4 <xTaskIncrementTick+0x164>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858c:	429a      	cmp	r2, r3
 800858e:	d3b9      	bcc.n	8008504 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008590:	2301      	movs	r3, #1
 8008592:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008594:	e7b6      	b.n	8008504 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008596:	4b17      	ldr	r3, [pc, #92]	; (80085f4 <xTaskIncrementTick+0x164>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800859c:	4914      	ldr	r1, [pc, #80]	; (80085f0 <xTaskIncrementTick+0x160>)
 800859e:	4613      	mov	r3, r2
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4413      	add	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	440b      	add	r3, r1
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d901      	bls.n	80085b2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80085ae:	2301      	movs	r3, #1
 80085b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80085b2:	4b11      	ldr	r3, [pc, #68]	; (80085f8 <xTaskIncrementTick+0x168>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d007      	beq.n	80085ca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80085ba:	2301      	movs	r3, #1
 80085bc:	617b      	str	r3, [r7, #20]
 80085be:	e004      	b.n	80085ca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80085c0:	4b0e      	ldr	r3, [pc, #56]	; (80085fc <xTaskIncrementTick+0x16c>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	3301      	adds	r3, #1
 80085c6:	4a0d      	ldr	r2, [pc, #52]	; (80085fc <xTaskIncrementTick+0x16c>)
 80085c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80085ca:	697b      	ldr	r3, [r7, #20]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3718      	adds	r7, #24
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	200008f4 	.word	0x200008f4
 80085d8:	200008d0 	.word	0x200008d0
 80085dc:	20000884 	.word	0x20000884
 80085e0:	20000888 	.word	0x20000888
 80085e4:	200008e4 	.word	0x200008e4
 80085e8:	200008ec 	.word	0x200008ec
 80085ec:	200008d4 	.word	0x200008d4
 80085f0:	200007d0 	.word	0x200007d0
 80085f4:	200007cc 	.word	0x200007cc
 80085f8:	200008e0 	.word	0x200008e0
 80085fc:	200008dc 	.word	0x200008dc

08008600 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008600:	b480      	push	{r7}
 8008602:	b087      	sub	sp, #28
 8008604:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008606:	4b29      	ldr	r3, [pc, #164]	; (80086ac <vTaskSwitchContext+0xac>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800860e:	4b28      	ldr	r3, [pc, #160]	; (80086b0 <vTaskSwitchContext+0xb0>)
 8008610:	2201      	movs	r2, #1
 8008612:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008614:	e044      	b.n	80086a0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008616:	4b26      	ldr	r3, [pc, #152]	; (80086b0 <vTaskSwitchContext+0xb0>)
 8008618:	2200      	movs	r2, #0
 800861a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800861c:	4b25      	ldr	r3, [pc, #148]	; (80086b4 <vTaskSwitchContext+0xb4>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	fab3 f383 	clz	r3, r3
 8008628:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800862a:	7afb      	ldrb	r3, [r7, #11]
 800862c:	f1c3 031f 	rsb	r3, r3, #31
 8008630:	617b      	str	r3, [r7, #20]
 8008632:	4921      	ldr	r1, [pc, #132]	; (80086b8 <vTaskSwitchContext+0xb8>)
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	4613      	mov	r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	4413      	add	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	440b      	add	r3, r1
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10a      	bne.n	800865c <vTaskSwitchContext+0x5c>
	__asm volatile
 8008646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864a:	f383 8811 	msr	BASEPRI, r3
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	f3bf 8f4f 	dsb	sy
 8008656:	607b      	str	r3, [r7, #4]
}
 8008658:	bf00      	nop
 800865a:	e7fe      	b.n	800865a <vTaskSwitchContext+0x5a>
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	4613      	mov	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4413      	add	r3, r2
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	4a14      	ldr	r2, [pc, #80]	; (80086b8 <vTaskSwitchContext+0xb8>)
 8008668:	4413      	add	r3, r2
 800866a:	613b      	str	r3, [r7, #16]
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	685a      	ldr	r2, [r3, #4]
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	605a      	str	r2, [r3, #4]
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	685a      	ldr	r2, [r3, #4]
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	3308      	adds	r3, #8
 800867e:	429a      	cmp	r2, r3
 8008680:	d104      	bne.n	800868c <vTaskSwitchContext+0x8c>
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	605a      	str	r2, [r3, #4]
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	4a0a      	ldr	r2, [pc, #40]	; (80086bc <vTaskSwitchContext+0xbc>)
 8008694:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008696:	4b09      	ldr	r3, [pc, #36]	; (80086bc <vTaskSwitchContext+0xbc>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	334c      	adds	r3, #76	; 0x4c
 800869c:	4a08      	ldr	r2, [pc, #32]	; (80086c0 <vTaskSwitchContext+0xc0>)
 800869e:	6013      	str	r3, [r2, #0]
}
 80086a0:	bf00      	nop
 80086a2:	371c      	adds	r7, #28
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	200008f4 	.word	0x200008f4
 80086b0:	200008e0 	.word	0x200008e0
 80086b4:	200008d4 	.word	0x200008d4
 80086b8:	200007d0 	.word	0x200007d0
 80086bc:	200007cc 	.word	0x200007cc
 80086c0:	20000060 	.word	0x20000060

080086c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80086cc:	f000 f852 	bl	8008774 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80086d0:	4b06      	ldr	r3, [pc, #24]	; (80086ec <prvIdleTask+0x28>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d9f9      	bls.n	80086cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80086d8:	4b05      	ldr	r3, [pc, #20]	; (80086f0 <prvIdleTask+0x2c>)
 80086da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80086e8:	e7f0      	b.n	80086cc <prvIdleTask+0x8>
 80086ea:	bf00      	nop
 80086ec:	200007d0 	.word	0x200007d0
 80086f0:	e000ed04 	.word	0xe000ed04

080086f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086fa:	2300      	movs	r3, #0
 80086fc:	607b      	str	r3, [r7, #4]
 80086fe:	e00c      	b.n	800871a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	4613      	mov	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	4413      	add	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4a12      	ldr	r2, [pc, #72]	; (8008754 <prvInitialiseTaskLists+0x60>)
 800870c:	4413      	add	r3, r2
 800870e:	4618      	mov	r0, r3
 8008710:	f7ff fb17 	bl	8007d42 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	3301      	adds	r3, #1
 8008718:	607b      	str	r3, [r7, #4]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2b06      	cmp	r3, #6
 800871e:	d9ef      	bls.n	8008700 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008720:	480d      	ldr	r0, [pc, #52]	; (8008758 <prvInitialiseTaskLists+0x64>)
 8008722:	f7ff fb0e 	bl	8007d42 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008726:	480d      	ldr	r0, [pc, #52]	; (800875c <prvInitialiseTaskLists+0x68>)
 8008728:	f7ff fb0b 	bl	8007d42 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800872c:	480c      	ldr	r0, [pc, #48]	; (8008760 <prvInitialiseTaskLists+0x6c>)
 800872e:	f7ff fb08 	bl	8007d42 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008732:	480c      	ldr	r0, [pc, #48]	; (8008764 <prvInitialiseTaskLists+0x70>)
 8008734:	f7ff fb05 	bl	8007d42 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008738:	480b      	ldr	r0, [pc, #44]	; (8008768 <prvInitialiseTaskLists+0x74>)
 800873a:	f7ff fb02 	bl	8007d42 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800873e:	4b0b      	ldr	r3, [pc, #44]	; (800876c <prvInitialiseTaskLists+0x78>)
 8008740:	4a05      	ldr	r2, [pc, #20]	; (8008758 <prvInitialiseTaskLists+0x64>)
 8008742:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008744:	4b0a      	ldr	r3, [pc, #40]	; (8008770 <prvInitialiseTaskLists+0x7c>)
 8008746:	4a05      	ldr	r2, [pc, #20]	; (800875c <prvInitialiseTaskLists+0x68>)
 8008748:	601a      	str	r2, [r3, #0]
}
 800874a:	bf00      	nop
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	200007d0 	.word	0x200007d0
 8008758:	2000085c 	.word	0x2000085c
 800875c:	20000870 	.word	0x20000870
 8008760:	2000088c 	.word	0x2000088c
 8008764:	200008a0 	.word	0x200008a0
 8008768:	200008b8 	.word	0x200008b8
 800876c:	20000884 	.word	0x20000884
 8008770:	20000888 	.word	0x20000888

08008774 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800877a:	e019      	b.n	80087b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800877c:	f000 fa12 	bl	8008ba4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008780:	4b10      	ldr	r3, [pc, #64]	; (80087c4 <prvCheckTasksWaitingTermination+0x50>)
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	3304      	adds	r3, #4
 800878c:	4618      	mov	r0, r3
 800878e:	f7ff fb62 	bl	8007e56 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008792:	4b0d      	ldr	r3, [pc, #52]	; (80087c8 <prvCheckTasksWaitingTermination+0x54>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	3b01      	subs	r3, #1
 8008798:	4a0b      	ldr	r2, [pc, #44]	; (80087c8 <prvCheckTasksWaitingTermination+0x54>)
 800879a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800879c:	4b0b      	ldr	r3, [pc, #44]	; (80087cc <prvCheckTasksWaitingTermination+0x58>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	3b01      	subs	r3, #1
 80087a2:	4a0a      	ldr	r2, [pc, #40]	; (80087cc <prvCheckTasksWaitingTermination+0x58>)
 80087a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80087a6:	f000 fa2d 	bl	8008c04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f810 	bl	80087d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087b0:	4b06      	ldr	r3, [pc, #24]	; (80087cc <prvCheckTasksWaitingTermination+0x58>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d1e1      	bne.n	800877c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80087b8:	bf00      	nop
 80087ba:	bf00      	nop
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	200008a0 	.word	0x200008a0
 80087c8:	200008cc 	.word	0x200008cc
 80087cc:	200008b4 	.word	0x200008b4

080087d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	334c      	adds	r3, #76	; 0x4c
 80087dc:	4618      	mov	r0, r3
 80087de:	f000 fce9 	bl	80091b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d108      	bne.n	80087fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f0:	4618      	mov	r0, r3
 80087f2:	f000 fb85 	bl	8008f00 <vPortFree>
				vPortFree( pxTCB );
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fb82 	bl	8008f00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80087fc:	e018      	b.n	8008830 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008804:	2b01      	cmp	r3, #1
 8008806:	d103      	bne.n	8008810 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fb79 	bl	8008f00 <vPortFree>
	}
 800880e:	e00f      	b.n	8008830 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008816:	2b02      	cmp	r3, #2
 8008818:	d00a      	beq.n	8008830 <prvDeleteTCB+0x60>
	__asm volatile
 800881a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	60fb      	str	r3, [r7, #12]
}
 800882c:	bf00      	nop
 800882e:	e7fe      	b.n	800882e <prvDeleteTCB+0x5e>
	}
 8008830:	bf00      	nop
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800883e:	4b0c      	ldr	r3, [pc, #48]	; (8008870 <prvResetNextTaskUnblockTime+0x38>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d104      	bne.n	8008852 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008848:	4b0a      	ldr	r3, [pc, #40]	; (8008874 <prvResetNextTaskUnblockTime+0x3c>)
 800884a:	f04f 32ff 	mov.w	r2, #4294967295
 800884e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008850:	e008      	b.n	8008864 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008852:	4b07      	ldr	r3, [pc, #28]	; (8008870 <prvResetNextTaskUnblockTime+0x38>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	4a04      	ldr	r2, [pc, #16]	; (8008874 <prvResetNextTaskUnblockTime+0x3c>)
 8008862:	6013      	str	r3, [r2, #0]
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr
 8008870:	20000884 	.word	0x20000884
 8008874:	200008ec 	.word	0x200008ec

08008878 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008882:	4b29      	ldr	r3, [pc, #164]	; (8008928 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008888:	4b28      	ldr	r3, [pc, #160]	; (800892c <prvAddCurrentTaskToDelayedList+0xb4>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	3304      	adds	r3, #4
 800888e:	4618      	mov	r0, r3
 8008890:	f7ff fae1 	bl	8007e56 <uxListRemove>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10b      	bne.n	80088b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800889a:	4b24      	ldr	r3, [pc, #144]	; (800892c <prvAddCurrentTaskToDelayedList+0xb4>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a0:	2201      	movs	r2, #1
 80088a2:	fa02 f303 	lsl.w	r3, r2, r3
 80088a6:	43da      	mvns	r2, r3
 80088a8:	4b21      	ldr	r3, [pc, #132]	; (8008930 <prvAddCurrentTaskToDelayedList+0xb8>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4013      	ands	r3, r2
 80088ae:	4a20      	ldr	r2, [pc, #128]	; (8008930 <prvAddCurrentTaskToDelayedList+0xb8>)
 80088b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b8:	d10a      	bne.n	80088d0 <prvAddCurrentTaskToDelayedList+0x58>
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d007      	beq.n	80088d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088c0:	4b1a      	ldr	r3, [pc, #104]	; (800892c <prvAddCurrentTaskToDelayedList+0xb4>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	3304      	adds	r3, #4
 80088c6:	4619      	mov	r1, r3
 80088c8:	481a      	ldr	r0, [pc, #104]	; (8008934 <prvAddCurrentTaskToDelayedList+0xbc>)
 80088ca:	f7ff fa67 	bl	8007d9c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80088ce:	e026      	b.n	800891e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4413      	add	r3, r2
 80088d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80088d8:	4b14      	ldr	r3, [pc, #80]	; (800892c <prvAddCurrentTaskToDelayedList+0xb4>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80088e0:	68ba      	ldr	r2, [r7, #8]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d209      	bcs.n	80088fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088e8:	4b13      	ldr	r3, [pc, #76]	; (8008938 <prvAddCurrentTaskToDelayedList+0xc0>)
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	4b0f      	ldr	r3, [pc, #60]	; (800892c <prvAddCurrentTaskToDelayedList+0xb4>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3304      	adds	r3, #4
 80088f2:	4619      	mov	r1, r3
 80088f4:	4610      	mov	r0, r2
 80088f6:	f7ff fa75 	bl	8007de4 <vListInsert>
}
 80088fa:	e010      	b.n	800891e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088fc:	4b0f      	ldr	r3, [pc, #60]	; (800893c <prvAddCurrentTaskToDelayedList+0xc4>)
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	4b0a      	ldr	r3, [pc, #40]	; (800892c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	3304      	adds	r3, #4
 8008906:	4619      	mov	r1, r3
 8008908:	4610      	mov	r0, r2
 800890a:	f7ff fa6b 	bl	8007de4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800890e:	4b0c      	ldr	r3, [pc, #48]	; (8008940 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	429a      	cmp	r2, r3
 8008916:	d202      	bcs.n	800891e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008918:	4a09      	ldr	r2, [pc, #36]	; (8008940 <prvAddCurrentTaskToDelayedList+0xc8>)
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	6013      	str	r3, [r2, #0]
}
 800891e:	bf00      	nop
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	200008d0 	.word	0x200008d0
 800892c:	200007cc 	.word	0x200007cc
 8008930:	200008d4 	.word	0x200008d4
 8008934:	200008b8 	.word	0x200008b8
 8008938:	20000888 	.word	0x20000888
 800893c:	20000884 	.word	0x20000884
 8008940:	200008ec 	.word	0x200008ec

08008944 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	3b04      	subs	r3, #4
 8008954:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800895c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3b04      	subs	r3, #4
 8008962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	f023 0201 	bic.w	r2, r3, #1
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	3b04      	subs	r3, #4
 8008972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008974:	4a0c      	ldr	r2, [pc, #48]	; (80089a8 <pxPortInitialiseStack+0x64>)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	3b14      	subs	r3, #20
 800897e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	3b04      	subs	r3, #4
 800898a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f06f 0202 	mvn.w	r2, #2
 8008992:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	3b20      	subs	r3, #32
 8008998:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800899a:	68fb      	ldr	r3, [r7, #12]
}
 800899c:	4618      	mov	r0, r3
 800899e:	3714      	adds	r7, #20
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr
 80089a8:	080089ad 	.word	0x080089ad

080089ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089b2:	2300      	movs	r3, #0
 80089b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089b6:	4b12      	ldr	r3, [pc, #72]	; (8008a00 <prvTaskExitError+0x54>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089be:	d00a      	beq.n	80089d6 <prvTaskExitError+0x2a>
	__asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	60fb      	str	r3, [r7, #12]
}
 80089d2:	bf00      	nop
 80089d4:	e7fe      	b.n	80089d4 <prvTaskExitError+0x28>
	__asm volatile
 80089d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089da:	f383 8811 	msr	BASEPRI, r3
 80089de:	f3bf 8f6f 	isb	sy
 80089e2:	f3bf 8f4f 	dsb	sy
 80089e6:	60bb      	str	r3, [r7, #8]
}
 80089e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089ea:	bf00      	nop
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d0fc      	beq.n	80089ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089f2:	bf00      	nop
 80089f4:	bf00      	nop
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr
 8008a00:	2000005c 	.word	0x2000005c
	...

08008a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a10:	4b07      	ldr	r3, [pc, #28]	; (8008a30 <pxCurrentTCBConst2>)
 8008a12:	6819      	ldr	r1, [r3, #0]
 8008a14:	6808      	ldr	r0, [r1, #0]
 8008a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1a:	f380 8809 	msr	PSP, r0
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f04f 0000 	mov.w	r0, #0
 8008a26:	f380 8811 	msr	BASEPRI, r0
 8008a2a:	4770      	bx	lr
 8008a2c:	f3af 8000 	nop.w

08008a30 <pxCurrentTCBConst2>:
 8008a30:	200007cc 	.word	0x200007cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a34:	bf00      	nop
 8008a36:	bf00      	nop

08008a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a38:	4808      	ldr	r0, [pc, #32]	; (8008a5c <prvPortStartFirstTask+0x24>)
 8008a3a:	6800      	ldr	r0, [r0, #0]
 8008a3c:	6800      	ldr	r0, [r0, #0]
 8008a3e:	f380 8808 	msr	MSP, r0
 8008a42:	f04f 0000 	mov.w	r0, #0
 8008a46:	f380 8814 	msr	CONTROL, r0
 8008a4a:	b662      	cpsie	i
 8008a4c:	b661      	cpsie	f
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	df00      	svc	0
 8008a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a5a:	bf00      	nop
 8008a5c:	e000ed08 	.word	0xe000ed08

08008a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a66:	4b46      	ldr	r3, [pc, #280]	; (8008b80 <xPortStartScheduler+0x120>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a46      	ldr	r2, [pc, #280]	; (8008b84 <xPortStartScheduler+0x124>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d10a      	bne.n	8008a86 <xPortStartScheduler+0x26>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	613b      	str	r3, [r7, #16]
}
 8008a82:	bf00      	nop
 8008a84:	e7fe      	b.n	8008a84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a86:	4b3e      	ldr	r3, [pc, #248]	; (8008b80 <xPortStartScheduler+0x120>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a3f      	ldr	r2, [pc, #252]	; (8008b88 <xPortStartScheduler+0x128>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d10a      	bne.n	8008aa6 <xPortStartScheduler+0x46>
	__asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	60fb      	str	r3, [r7, #12]
}
 8008aa2:	bf00      	nop
 8008aa4:	e7fe      	b.n	8008aa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008aa6:	4b39      	ldr	r3, [pc, #228]	; (8008b8c <xPortStartScheduler+0x12c>)
 8008aa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	22ff      	movs	r2, #255	; 0xff
 8008ab6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ac0:	78fb      	ldrb	r3, [r7, #3]
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	4b31      	ldr	r3, [pc, #196]	; (8008b90 <xPortStartScheduler+0x130>)
 8008acc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ace:	4b31      	ldr	r3, [pc, #196]	; (8008b94 <xPortStartScheduler+0x134>)
 8008ad0:	2207      	movs	r2, #7
 8008ad2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ad4:	e009      	b.n	8008aea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008ad6:	4b2f      	ldr	r3, [pc, #188]	; (8008b94 <xPortStartScheduler+0x134>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	3b01      	subs	r3, #1
 8008adc:	4a2d      	ldr	r2, [pc, #180]	; (8008b94 <xPortStartScheduler+0x134>)
 8008ade:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ae0:	78fb      	ldrb	r3, [r7, #3]
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	005b      	lsls	r3, r3, #1
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aea:	78fb      	ldrb	r3, [r7, #3]
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008af2:	2b80      	cmp	r3, #128	; 0x80
 8008af4:	d0ef      	beq.n	8008ad6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008af6:	4b27      	ldr	r3, [pc, #156]	; (8008b94 <xPortStartScheduler+0x134>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f1c3 0307 	rsb	r3, r3, #7
 8008afe:	2b04      	cmp	r3, #4
 8008b00:	d00a      	beq.n	8008b18 <xPortStartScheduler+0xb8>
	__asm volatile
 8008b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	60bb      	str	r3, [r7, #8]
}
 8008b14:	bf00      	nop
 8008b16:	e7fe      	b.n	8008b16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b18:	4b1e      	ldr	r3, [pc, #120]	; (8008b94 <xPortStartScheduler+0x134>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	021b      	lsls	r3, r3, #8
 8008b1e:	4a1d      	ldr	r2, [pc, #116]	; (8008b94 <xPortStartScheduler+0x134>)
 8008b20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b22:	4b1c      	ldr	r3, [pc, #112]	; (8008b94 <xPortStartScheduler+0x134>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b2a:	4a1a      	ldr	r2, [pc, #104]	; (8008b94 <xPortStartScheduler+0x134>)
 8008b2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	b2da      	uxtb	r2, r3
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b36:	4b18      	ldr	r3, [pc, #96]	; (8008b98 <xPortStartScheduler+0x138>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a17      	ldr	r2, [pc, #92]	; (8008b98 <xPortStartScheduler+0x138>)
 8008b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b42:	4b15      	ldr	r3, [pc, #84]	; (8008b98 <xPortStartScheduler+0x138>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a14      	ldr	r2, [pc, #80]	; (8008b98 <xPortStartScheduler+0x138>)
 8008b48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b4e:	f000 f8dd 	bl	8008d0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b52:	4b12      	ldr	r3, [pc, #72]	; (8008b9c <xPortStartScheduler+0x13c>)
 8008b54:	2200      	movs	r2, #0
 8008b56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b58:	f000 f8fc 	bl	8008d54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b5c:	4b10      	ldr	r3, [pc, #64]	; (8008ba0 <xPortStartScheduler+0x140>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a0f      	ldr	r2, [pc, #60]	; (8008ba0 <xPortStartScheduler+0x140>)
 8008b62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b68:	f7ff ff66 	bl	8008a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b6c:	f7ff fd48 	bl	8008600 <vTaskSwitchContext>
	prvTaskExitError();
 8008b70:	f7ff ff1c 	bl	80089ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3718      	adds	r7, #24
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	e000ed00 	.word	0xe000ed00
 8008b84:	410fc271 	.word	0x410fc271
 8008b88:	410fc270 	.word	0x410fc270
 8008b8c:	e000e400 	.word	0xe000e400
 8008b90:	200008f8 	.word	0x200008f8
 8008b94:	200008fc 	.word	0x200008fc
 8008b98:	e000ed20 	.word	0xe000ed20
 8008b9c:	2000005c 	.word	0x2000005c
 8008ba0:	e000ef34 	.word	0xe000ef34

08008ba4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
	__asm volatile
 8008baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	607b      	str	r3, [r7, #4]
}
 8008bbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bbe:	4b0f      	ldr	r3, [pc, #60]	; (8008bfc <vPortEnterCritical+0x58>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	4a0d      	ldr	r2, [pc, #52]	; (8008bfc <vPortEnterCritical+0x58>)
 8008bc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008bc8:	4b0c      	ldr	r3, [pc, #48]	; (8008bfc <vPortEnterCritical+0x58>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d10f      	bne.n	8008bf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008bd0:	4b0b      	ldr	r3, [pc, #44]	; (8008c00 <vPortEnterCritical+0x5c>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00a      	beq.n	8008bf0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	603b      	str	r3, [r7, #0]
}
 8008bec:	bf00      	nop
 8008bee:	e7fe      	b.n	8008bee <vPortEnterCritical+0x4a>
	}
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr
 8008bfc:	2000005c 	.word	0x2000005c
 8008c00:	e000ed04 	.word	0xe000ed04

08008c04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c0a:	4b12      	ldr	r3, [pc, #72]	; (8008c54 <vPortExitCritical+0x50>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d10a      	bne.n	8008c28 <vPortExitCritical+0x24>
	__asm volatile
 8008c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	607b      	str	r3, [r7, #4]
}
 8008c24:	bf00      	nop
 8008c26:	e7fe      	b.n	8008c26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c28:	4b0a      	ldr	r3, [pc, #40]	; (8008c54 <vPortExitCritical+0x50>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	4a09      	ldr	r2, [pc, #36]	; (8008c54 <vPortExitCritical+0x50>)
 8008c30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c32:	4b08      	ldr	r3, [pc, #32]	; (8008c54 <vPortExitCritical+0x50>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d105      	bne.n	8008c46 <vPortExitCritical+0x42>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008c44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c46:	bf00      	nop
 8008c48:	370c      	adds	r7, #12
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	2000005c 	.word	0x2000005c
	...

08008c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c60:	f3ef 8009 	mrs	r0, PSP
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	4b15      	ldr	r3, [pc, #84]	; (8008cc0 <pxCurrentTCBConst>)
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	f01e 0f10 	tst.w	lr, #16
 8008c70:	bf08      	it	eq
 8008c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7a:	6010      	str	r0, [r2, #0]
 8008c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c84:	f380 8811 	msr	BASEPRI, r0
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f7ff fcb6 	bl	8008600 <vTaskSwitchContext>
 8008c94:	f04f 0000 	mov.w	r0, #0
 8008c98:	f380 8811 	msr	BASEPRI, r0
 8008c9c:	bc09      	pop	{r0, r3}
 8008c9e:	6819      	ldr	r1, [r3, #0]
 8008ca0:	6808      	ldr	r0, [r1, #0]
 8008ca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca6:	f01e 0f10 	tst.w	lr, #16
 8008caa:	bf08      	it	eq
 8008cac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008cb0:	f380 8809 	msr	PSP, r0
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	f3af 8000 	nop.w

08008cc0 <pxCurrentTCBConst>:
 8008cc0:	200007cc 	.word	0x200007cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008cc4:	bf00      	nop
 8008cc6:	bf00      	nop

08008cc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	607b      	str	r3, [r7, #4]
}
 8008ce0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ce2:	f7ff fbd5 	bl	8008490 <xTaskIncrementTick>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d003      	beq.n	8008cf4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cec:	4b06      	ldr	r3, [pc, #24]	; (8008d08 <SysTick_Handler+0x40>)
 8008cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cf2:	601a      	str	r2, [r3, #0]
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	f383 8811 	msr	BASEPRI, r3
}
 8008cfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d00:	bf00      	nop
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	e000ed04 	.word	0xe000ed04

08008d0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d10:	4b0b      	ldr	r3, [pc, #44]	; (8008d40 <vPortSetupTimerInterrupt+0x34>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d16:	4b0b      	ldr	r3, [pc, #44]	; (8008d44 <vPortSetupTimerInterrupt+0x38>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d1c:	4b0a      	ldr	r3, [pc, #40]	; (8008d48 <vPortSetupTimerInterrupt+0x3c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a0a      	ldr	r2, [pc, #40]	; (8008d4c <vPortSetupTimerInterrupt+0x40>)
 8008d22:	fba2 2303 	umull	r2, r3, r2, r3
 8008d26:	099b      	lsrs	r3, r3, #6
 8008d28:	4a09      	ldr	r2, [pc, #36]	; (8008d50 <vPortSetupTimerInterrupt+0x44>)
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d2e:	4b04      	ldr	r3, [pc, #16]	; (8008d40 <vPortSetupTimerInterrupt+0x34>)
 8008d30:	2207      	movs	r2, #7
 8008d32:	601a      	str	r2, [r3, #0]
}
 8008d34:	bf00      	nop
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	e000e010 	.word	0xe000e010
 8008d44:	e000e018 	.word	0xe000e018
 8008d48:	20000050 	.word	0x20000050
 8008d4c:	10624dd3 	.word	0x10624dd3
 8008d50:	e000e014 	.word	0xe000e014

08008d54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d64 <vPortEnableVFP+0x10>
 8008d58:	6801      	ldr	r1, [r0, #0]
 8008d5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d5e:	6001      	str	r1, [r0, #0]
 8008d60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d62:	bf00      	nop
 8008d64:	e000ed88 	.word	0xe000ed88

08008d68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b08a      	sub	sp, #40	; 0x28
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d70:	2300      	movs	r3, #0
 8008d72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d74:	f7ff fae2 	bl	800833c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d78:	4b5b      	ldr	r3, [pc, #364]	; (8008ee8 <pvPortMalloc+0x180>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d101      	bne.n	8008d84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d80:	f000 f920 	bl	8008fc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d84:	4b59      	ldr	r3, [pc, #356]	; (8008eec <pvPortMalloc+0x184>)
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f040 8093 	bne.w	8008eb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d01d      	beq.n	8008dd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008d98:	2208      	movs	r2, #8
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f003 0307 	and.w	r3, r3, #7
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d014      	beq.n	8008dd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f023 0307 	bic.w	r3, r3, #7
 8008db0:	3308      	adds	r3, #8
 8008db2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f003 0307 	and.w	r3, r3, #7
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00a      	beq.n	8008dd4 <pvPortMalloc+0x6c>
	__asm volatile
 8008dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	617b      	str	r3, [r7, #20]
}
 8008dd0:	bf00      	nop
 8008dd2:	e7fe      	b.n	8008dd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d06e      	beq.n	8008eb8 <pvPortMalloc+0x150>
 8008dda:	4b45      	ldr	r3, [pc, #276]	; (8008ef0 <pvPortMalloc+0x188>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d869      	bhi.n	8008eb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008de4:	4b43      	ldr	r3, [pc, #268]	; (8008ef4 <pvPortMalloc+0x18c>)
 8008de6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008de8:	4b42      	ldr	r3, [pc, #264]	; (8008ef4 <pvPortMalloc+0x18c>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dee:	e004      	b.n	8008dfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d903      	bls.n	8008e0c <pvPortMalloc+0xa4>
 8008e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1f1      	bne.n	8008df0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e0c:	4b36      	ldr	r3, [pc, #216]	; (8008ee8 <pvPortMalloc+0x180>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d050      	beq.n	8008eb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e16:	6a3b      	ldr	r3, [r7, #32]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2208      	movs	r2, #8
 8008e1c:	4413      	add	r3, r2
 8008e1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	1ad2      	subs	r2, r2, r3
 8008e30:	2308      	movs	r3, #8
 8008e32:	005b      	lsls	r3, r3, #1
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d91f      	bls.n	8008e78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	f003 0307 	and.w	r3, r3, #7
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00a      	beq.n	8008e60 <pvPortMalloc+0xf8>
	__asm volatile
 8008e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4e:	f383 8811 	msr	BASEPRI, r3
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	613b      	str	r3, [r7, #16]
}
 8008e5c:	bf00      	nop
 8008e5e:	e7fe      	b.n	8008e5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e62:	685a      	ldr	r2, [r3, #4]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	1ad2      	subs	r2, r2, r3
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e72:	69b8      	ldr	r0, [r7, #24]
 8008e74:	f000 f908 	bl	8009088 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e78:	4b1d      	ldr	r3, [pc, #116]	; (8008ef0 <pvPortMalloc+0x188>)
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	4a1b      	ldr	r2, [pc, #108]	; (8008ef0 <pvPortMalloc+0x188>)
 8008e84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e86:	4b1a      	ldr	r3, [pc, #104]	; (8008ef0 <pvPortMalloc+0x188>)
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	4b1b      	ldr	r3, [pc, #108]	; (8008ef8 <pvPortMalloc+0x190>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d203      	bcs.n	8008e9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e92:	4b17      	ldr	r3, [pc, #92]	; (8008ef0 <pvPortMalloc+0x188>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a18      	ldr	r2, [pc, #96]	; (8008ef8 <pvPortMalloc+0x190>)
 8008e98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9c:	685a      	ldr	r2, [r3, #4]
 8008e9e:	4b13      	ldr	r3, [pc, #76]	; (8008eec <pvPortMalloc+0x184>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	431a      	orrs	r2, r3
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eaa:	2200      	movs	r2, #0
 8008eac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008eae:	4b13      	ldr	r3, [pc, #76]	; (8008efc <pvPortMalloc+0x194>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	4a11      	ldr	r2, [pc, #68]	; (8008efc <pvPortMalloc+0x194>)
 8008eb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008eb8:	f7ff fa4e 	bl	8008358 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	f003 0307 	and.w	r3, r3, #7
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00a      	beq.n	8008edc <pvPortMalloc+0x174>
	__asm volatile
 8008ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eca:	f383 8811 	msr	BASEPRI, r3
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	60fb      	str	r3, [r7, #12]
}
 8008ed8:	bf00      	nop
 8008eda:	e7fe      	b.n	8008eda <pvPortMalloc+0x172>
	return pvReturn;
 8008edc:	69fb      	ldr	r3, [r7, #28]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3728      	adds	r7, #40	; 0x28
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	20004508 	.word	0x20004508
 8008eec:	2000451c 	.word	0x2000451c
 8008ef0:	2000450c 	.word	0x2000450c
 8008ef4:	20004500 	.word	0x20004500
 8008ef8:	20004510 	.word	0x20004510
 8008efc:	20004514 	.word	0x20004514

08008f00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d04d      	beq.n	8008fae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f12:	2308      	movs	r3, #8
 8008f14:	425b      	negs	r3, r3
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	4413      	add	r3, r2
 8008f1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	4b24      	ldr	r3, [pc, #144]	; (8008fb8 <vPortFree+0xb8>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4013      	ands	r3, r2
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10a      	bne.n	8008f44 <vPortFree+0x44>
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	60fb      	str	r3, [r7, #12]
}
 8008f40:	bf00      	nop
 8008f42:	e7fe      	b.n	8008f42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00a      	beq.n	8008f62 <vPortFree+0x62>
	__asm volatile
 8008f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f50:	f383 8811 	msr	BASEPRI, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	60bb      	str	r3, [r7, #8]
}
 8008f5e:	bf00      	nop
 8008f60:	e7fe      	b.n	8008f60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	685a      	ldr	r2, [r3, #4]
 8008f66:	4b14      	ldr	r3, [pc, #80]	; (8008fb8 <vPortFree+0xb8>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d01e      	beq.n	8008fae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d11a      	bne.n	8008fae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	685a      	ldr	r2, [r3, #4]
 8008f7c:	4b0e      	ldr	r3, [pc, #56]	; (8008fb8 <vPortFree+0xb8>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	43db      	mvns	r3, r3
 8008f82:	401a      	ands	r2, r3
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f88:	f7ff f9d8 	bl	800833c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	685a      	ldr	r2, [r3, #4]
 8008f90:	4b0a      	ldr	r3, [pc, #40]	; (8008fbc <vPortFree+0xbc>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4413      	add	r3, r2
 8008f96:	4a09      	ldr	r2, [pc, #36]	; (8008fbc <vPortFree+0xbc>)
 8008f98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f9a:	6938      	ldr	r0, [r7, #16]
 8008f9c:	f000 f874 	bl	8009088 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008fa0:	4b07      	ldr	r3, [pc, #28]	; (8008fc0 <vPortFree+0xc0>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	4a06      	ldr	r2, [pc, #24]	; (8008fc0 <vPortFree+0xc0>)
 8008fa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008faa:	f7ff f9d5 	bl	8008358 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008fae:	bf00      	nop
 8008fb0:	3718      	adds	r7, #24
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	2000451c 	.word	0x2000451c
 8008fbc:	2000450c 	.word	0x2000450c
 8008fc0:	20004518 	.word	0x20004518

08008fc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008fca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008fce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008fd0:	4b27      	ldr	r3, [pc, #156]	; (8009070 <prvHeapInit+0xac>)
 8008fd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f003 0307 	and.w	r3, r3, #7
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00c      	beq.n	8008ff8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	3307      	adds	r3, #7
 8008fe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f023 0307 	bic.w	r3, r3, #7
 8008fea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	4a1f      	ldr	r2, [pc, #124]	; (8009070 <prvHeapInit+0xac>)
 8008ff4:	4413      	add	r3, r2
 8008ff6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ffc:	4a1d      	ldr	r2, [pc, #116]	; (8009074 <prvHeapInit+0xb0>)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009002:	4b1c      	ldr	r3, [pc, #112]	; (8009074 <prvHeapInit+0xb0>)
 8009004:	2200      	movs	r2, #0
 8009006:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	4413      	add	r3, r2
 800900e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009010:	2208      	movs	r2, #8
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	1a9b      	subs	r3, r3, r2
 8009016:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f023 0307 	bic.w	r3, r3, #7
 800901e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	4a15      	ldr	r2, [pc, #84]	; (8009078 <prvHeapInit+0xb4>)
 8009024:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009026:	4b14      	ldr	r3, [pc, #80]	; (8009078 <prvHeapInit+0xb4>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2200      	movs	r2, #0
 800902c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800902e:	4b12      	ldr	r3, [pc, #72]	; (8009078 <prvHeapInit+0xb4>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2200      	movs	r2, #0
 8009034:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	1ad2      	subs	r2, r2, r3
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009044:	4b0c      	ldr	r3, [pc, #48]	; (8009078 <prvHeapInit+0xb4>)
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	4a0a      	ldr	r2, [pc, #40]	; (800907c <prvHeapInit+0xb8>)
 8009052:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	4a09      	ldr	r2, [pc, #36]	; (8009080 <prvHeapInit+0xbc>)
 800905a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800905c:	4b09      	ldr	r3, [pc, #36]	; (8009084 <prvHeapInit+0xc0>)
 800905e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009062:	601a      	str	r2, [r3, #0]
}
 8009064:	bf00      	nop
 8009066:	3714      	adds	r7, #20
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	20000900 	.word	0x20000900
 8009074:	20004500 	.word	0x20004500
 8009078:	20004508 	.word	0x20004508
 800907c:	20004510 	.word	0x20004510
 8009080:	2000450c 	.word	0x2000450c
 8009084:	2000451c 	.word	0x2000451c

08009088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009090:	4b28      	ldr	r3, [pc, #160]	; (8009134 <prvInsertBlockIntoFreeList+0xac>)
 8009092:	60fb      	str	r3, [r7, #12]
 8009094:	e002      	b.n	800909c <prvInsertBlockIntoFreeList+0x14>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	60fb      	str	r3, [r7, #12]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d8f7      	bhi.n	8009096 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	4413      	add	r3, r2
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d108      	bne.n	80090ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	685a      	ldr	r2, [r3, #4]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	441a      	add	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	441a      	add	r2, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d118      	bne.n	8009110 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	4b15      	ldr	r3, [pc, #84]	; (8009138 <prvInsertBlockIntoFreeList+0xb0>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d00d      	beq.n	8009106 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	685a      	ldr	r2, [r3, #4]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	441a      	add	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	601a      	str	r2, [r3, #0]
 8009104:	e008      	b.n	8009118 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009106:	4b0c      	ldr	r3, [pc, #48]	; (8009138 <prvInsertBlockIntoFreeList+0xb0>)
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	601a      	str	r2, [r3, #0]
 800910e:	e003      	b.n	8009118 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	429a      	cmp	r2, r3
 800911e:	d002      	beq.n	8009126 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009126:	bf00      	nop
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	20004500 	.word	0x20004500
 8009138:	20004508 	.word	0x20004508

0800913c <__libc_init_array>:
 800913c:	b570      	push	{r4, r5, r6, lr}
 800913e:	4d0d      	ldr	r5, [pc, #52]	; (8009174 <__libc_init_array+0x38>)
 8009140:	4c0d      	ldr	r4, [pc, #52]	; (8009178 <__libc_init_array+0x3c>)
 8009142:	1b64      	subs	r4, r4, r5
 8009144:	10a4      	asrs	r4, r4, #2
 8009146:	2600      	movs	r6, #0
 8009148:	42a6      	cmp	r6, r4
 800914a:	d109      	bne.n	8009160 <__libc_init_array+0x24>
 800914c:	4d0b      	ldr	r5, [pc, #44]	; (800917c <__libc_init_array+0x40>)
 800914e:	4c0c      	ldr	r4, [pc, #48]	; (8009180 <__libc_init_array+0x44>)
 8009150:	f000 f8e4 	bl	800931c <_init>
 8009154:	1b64      	subs	r4, r4, r5
 8009156:	10a4      	asrs	r4, r4, #2
 8009158:	2600      	movs	r6, #0
 800915a:	42a6      	cmp	r6, r4
 800915c:	d105      	bne.n	800916a <__libc_init_array+0x2e>
 800915e:	bd70      	pop	{r4, r5, r6, pc}
 8009160:	f855 3b04 	ldr.w	r3, [r5], #4
 8009164:	4798      	blx	r3
 8009166:	3601      	adds	r6, #1
 8009168:	e7ee      	b.n	8009148 <__libc_init_array+0xc>
 800916a:	f855 3b04 	ldr.w	r3, [r5], #4
 800916e:	4798      	blx	r3
 8009170:	3601      	adds	r6, #1
 8009172:	e7f2      	b.n	800915a <__libc_init_array+0x1e>
 8009174:	08009468 	.word	0x08009468
 8009178:	08009468 	.word	0x08009468
 800917c:	08009468 	.word	0x08009468
 8009180:	0800946c 	.word	0x0800946c

08009184 <__retarget_lock_acquire_recursive>:
 8009184:	4770      	bx	lr

08009186 <__retarget_lock_release_recursive>:
 8009186:	4770      	bx	lr

08009188 <memset>:
 8009188:	4402      	add	r2, r0
 800918a:	4603      	mov	r3, r0
 800918c:	4293      	cmp	r3, r2
 800918e:	d100      	bne.n	8009192 <memset+0xa>
 8009190:	4770      	bx	lr
 8009192:	f803 1b01 	strb.w	r1, [r3], #1
 8009196:	e7f9      	b.n	800918c <memset+0x4>

08009198 <cleanup_glue>:
 8009198:	b538      	push	{r3, r4, r5, lr}
 800919a:	460c      	mov	r4, r1
 800919c:	6809      	ldr	r1, [r1, #0]
 800919e:	4605      	mov	r5, r0
 80091a0:	b109      	cbz	r1, 80091a6 <cleanup_glue+0xe>
 80091a2:	f7ff fff9 	bl	8009198 <cleanup_glue>
 80091a6:	4621      	mov	r1, r4
 80091a8:	4628      	mov	r0, r5
 80091aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091ae:	f000 b869 	b.w	8009284 <_free_r>
	...

080091b4 <_reclaim_reent>:
 80091b4:	4b2c      	ldr	r3, [pc, #176]	; (8009268 <_reclaim_reent+0xb4>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4283      	cmp	r3, r0
 80091ba:	b570      	push	{r4, r5, r6, lr}
 80091bc:	4604      	mov	r4, r0
 80091be:	d051      	beq.n	8009264 <_reclaim_reent+0xb0>
 80091c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80091c2:	b143      	cbz	r3, 80091d6 <_reclaim_reent+0x22>
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d14a      	bne.n	8009260 <_reclaim_reent+0xac>
 80091ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091cc:	6819      	ldr	r1, [r3, #0]
 80091ce:	b111      	cbz	r1, 80091d6 <_reclaim_reent+0x22>
 80091d0:	4620      	mov	r0, r4
 80091d2:	f000 f857 	bl	8009284 <_free_r>
 80091d6:	6961      	ldr	r1, [r4, #20]
 80091d8:	b111      	cbz	r1, 80091e0 <_reclaim_reent+0x2c>
 80091da:	4620      	mov	r0, r4
 80091dc:	f000 f852 	bl	8009284 <_free_r>
 80091e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80091e2:	b111      	cbz	r1, 80091ea <_reclaim_reent+0x36>
 80091e4:	4620      	mov	r0, r4
 80091e6:	f000 f84d 	bl	8009284 <_free_r>
 80091ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80091ec:	b111      	cbz	r1, 80091f4 <_reclaim_reent+0x40>
 80091ee:	4620      	mov	r0, r4
 80091f0:	f000 f848 	bl	8009284 <_free_r>
 80091f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80091f6:	b111      	cbz	r1, 80091fe <_reclaim_reent+0x4a>
 80091f8:	4620      	mov	r0, r4
 80091fa:	f000 f843 	bl	8009284 <_free_r>
 80091fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009200:	b111      	cbz	r1, 8009208 <_reclaim_reent+0x54>
 8009202:	4620      	mov	r0, r4
 8009204:	f000 f83e 	bl	8009284 <_free_r>
 8009208:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800920a:	b111      	cbz	r1, 8009212 <_reclaim_reent+0x5e>
 800920c:	4620      	mov	r0, r4
 800920e:	f000 f839 	bl	8009284 <_free_r>
 8009212:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009214:	b111      	cbz	r1, 800921c <_reclaim_reent+0x68>
 8009216:	4620      	mov	r0, r4
 8009218:	f000 f834 	bl	8009284 <_free_r>
 800921c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800921e:	b111      	cbz	r1, 8009226 <_reclaim_reent+0x72>
 8009220:	4620      	mov	r0, r4
 8009222:	f000 f82f 	bl	8009284 <_free_r>
 8009226:	69a3      	ldr	r3, [r4, #24]
 8009228:	b1e3      	cbz	r3, 8009264 <_reclaim_reent+0xb0>
 800922a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800922c:	4620      	mov	r0, r4
 800922e:	4798      	blx	r3
 8009230:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009232:	b1b9      	cbz	r1, 8009264 <_reclaim_reent+0xb0>
 8009234:	4620      	mov	r0, r4
 8009236:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800923a:	f7ff bfad 	b.w	8009198 <cleanup_glue>
 800923e:	5949      	ldr	r1, [r1, r5]
 8009240:	b941      	cbnz	r1, 8009254 <_reclaim_reent+0xa0>
 8009242:	3504      	adds	r5, #4
 8009244:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009246:	2d80      	cmp	r5, #128	; 0x80
 8009248:	68d9      	ldr	r1, [r3, #12]
 800924a:	d1f8      	bne.n	800923e <_reclaim_reent+0x8a>
 800924c:	4620      	mov	r0, r4
 800924e:	f000 f819 	bl	8009284 <_free_r>
 8009252:	e7ba      	b.n	80091ca <_reclaim_reent+0x16>
 8009254:	680e      	ldr	r6, [r1, #0]
 8009256:	4620      	mov	r0, r4
 8009258:	f000 f814 	bl	8009284 <_free_r>
 800925c:	4631      	mov	r1, r6
 800925e:	e7ef      	b.n	8009240 <_reclaim_reent+0x8c>
 8009260:	2500      	movs	r5, #0
 8009262:	e7ef      	b.n	8009244 <_reclaim_reent+0x90>
 8009264:	bd70      	pop	{r4, r5, r6, pc}
 8009266:	bf00      	nop
 8009268:	20000060 	.word	0x20000060

0800926c <__malloc_lock>:
 800926c:	4801      	ldr	r0, [pc, #4]	; (8009274 <__malloc_lock+0x8>)
 800926e:	f7ff bf89 	b.w	8009184 <__retarget_lock_acquire_recursive>
 8009272:	bf00      	nop
 8009274:	20004520 	.word	0x20004520

08009278 <__malloc_unlock>:
 8009278:	4801      	ldr	r0, [pc, #4]	; (8009280 <__malloc_unlock+0x8>)
 800927a:	f7ff bf84 	b.w	8009186 <__retarget_lock_release_recursive>
 800927e:	bf00      	nop
 8009280:	20004520 	.word	0x20004520

08009284 <_free_r>:
 8009284:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009286:	2900      	cmp	r1, #0
 8009288:	d044      	beq.n	8009314 <_free_r+0x90>
 800928a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800928e:	9001      	str	r0, [sp, #4]
 8009290:	2b00      	cmp	r3, #0
 8009292:	f1a1 0404 	sub.w	r4, r1, #4
 8009296:	bfb8      	it	lt
 8009298:	18e4      	addlt	r4, r4, r3
 800929a:	f7ff ffe7 	bl	800926c <__malloc_lock>
 800929e:	4a1e      	ldr	r2, [pc, #120]	; (8009318 <_free_r+0x94>)
 80092a0:	9801      	ldr	r0, [sp, #4]
 80092a2:	6813      	ldr	r3, [r2, #0]
 80092a4:	b933      	cbnz	r3, 80092b4 <_free_r+0x30>
 80092a6:	6063      	str	r3, [r4, #4]
 80092a8:	6014      	str	r4, [r2, #0]
 80092aa:	b003      	add	sp, #12
 80092ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092b0:	f7ff bfe2 	b.w	8009278 <__malloc_unlock>
 80092b4:	42a3      	cmp	r3, r4
 80092b6:	d908      	bls.n	80092ca <_free_r+0x46>
 80092b8:	6825      	ldr	r5, [r4, #0]
 80092ba:	1961      	adds	r1, r4, r5
 80092bc:	428b      	cmp	r3, r1
 80092be:	bf01      	itttt	eq
 80092c0:	6819      	ldreq	r1, [r3, #0]
 80092c2:	685b      	ldreq	r3, [r3, #4]
 80092c4:	1949      	addeq	r1, r1, r5
 80092c6:	6021      	streq	r1, [r4, #0]
 80092c8:	e7ed      	b.n	80092a6 <_free_r+0x22>
 80092ca:	461a      	mov	r2, r3
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	b10b      	cbz	r3, 80092d4 <_free_r+0x50>
 80092d0:	42a3      	cmp	r3, r4
 80092d2:	d9fa      	bls.n	80092ca <_free_r+0x46>
 80092d4:	6811      	ldr	r1, [r2, #0]
 80092d6:	1855      	adds	r5, r2, r1
 80092d8:	42a5      	cmp	r5, r4
 80092da:	d10b      	bne.n	80092f4 <_free_r+0x70>
 80092dc:	6824      	ldr	r4, [r4, #0]
 80092de:	4421      	add	r1, r4
 80092e0:	1854      	adds	r4, r2, r1
 80092e2:	42a3      	cmp	r3, r4
 80092e4:	6011      	str	r1, [r2, #0]
 80092e6:	d1e0      	bne.n	80092aa <_free_r+0x26>
 80092e8:	681c      	ldr	r4, [r3, #0]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	6053      	str	r3, [r2, #4]
 80092ee:	4421      	add	r1, r4
 80092f0:	6011      	str	r1, [r2, #0]
 80092f2:	e7da      	b.n	80092aa <_free_r+0x26>
 80092f4:	d902      	bls.n	80092fc <_free_r+0x78>
 80092f6:	230c      	movs	r3, #12
 80092f8:	6003      	str	r3, [r0, #0]
 80092fa:	e7d6      	b.n	80092aa <_free_r+0x26>
 80092fc:	6825      	ldr	r5, [r4, #0]
 80092fe:	1961      	adds	r1, r4, r5
 8009300:	428b      	cmp	r3, r1
 8009302:	bf04      	itt	eq
 8009304:	6819      	ldreq	r1, [r3, #0]
 8009306:	685b      	ldreq	r3, [r3, #4]
 8009308:	6063      	str	r3, [r4, #4]
 800930a:	bf04      	itt	eq
 800930c:	1949      	addeq	r1, r1, r5
 800930e:	6021      	streq	r1, [r4, #0]
 8009310:	6054      	str	r4, [r2, #4]
 8009312:	e7ca      	b.n	80092aa <_free_r+0x26>
 8009314:	b003      	add	sp, #12
 8009316:	bd30      	pop	{r4, r5, pc}
 8009318:	20004524 	.word	0x20004524

0800931c <_init>:
 800931c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800931e:	bf00      	nop
 8009320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009322:	bc08      	pop	{r3}
 8009324:	469e      	mov	lr, r3
 8009326:	4770      	bx	lr

08009328 <_fini>:
 8009328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800932a:	bf00      	nop
 800932c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800932e:	bc08      	pop	{r3}
 8009330:	469e      	mov	lr, r3
 8009332:	4770      	bx	lr
