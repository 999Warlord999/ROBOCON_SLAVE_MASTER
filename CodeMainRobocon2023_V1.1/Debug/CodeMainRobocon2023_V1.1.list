
CodeMainRobocon2023_V1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08006554  08006554  00016554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006678  08006678  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08006678  08006678  00016678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006680  08006680  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006680  08006680  00016680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006684  08006684  00016684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006688  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00004258  20000088  20000088  00020088  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200042e0  200042e0  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   000151d9  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c5b  00000000  00000000  0003528d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00037ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001038  00000000  00000000  00039028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000227d4  00000000  00000000  0003a060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001334f  00000000  00000000  0005c834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2fa1  00000000  00000000  0006fb83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00142b24  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ce8  00000000  00000000  00142b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800653c 	.word	0x0800653c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800653c 	.word	0x0800653c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b974 	b.w	8000e0c <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	468e      	mov	lr, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14d      	bne.n	8000be6 <__udivmoddi4+0xaa>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4694      	mov	ip, r2
 8000b4e:	d969      	bls.n	8000c24 <__udivmoddi4+0xe8>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b152      	cbz	r2, 8000b6c <__udivmoddi4+0x30>
 8000b56:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5a:	f1c2 0120 	rsb	r1, r2, #32
 8000b5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b66:	ea41 0e03 	orr.w	lr, r1, r3
 8000b6a:	4094      	lsls	r4, r2
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	0c21      	lsrs	r1, r4, #16
 8000b72:	fbbe f6f8 	udiv	r6, lr, r8
 8000b76:	fa1f f78c 	uxth.w	r7, ip
 8000b7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b82:	fb06 f107 	mul.w	r1, r6, r7
 8000b86:	4299      	cmp	r1, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x64>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b92:	f080 811f 	bcs.w	8000dd4 <__udivmoddi4+0x298>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 811c 	bls.w	8000dd4 <__udivmoddi4+0x298>
 8000b9c:	3e02      	subs	r6, #2
 8000b9e:	4463      	add	r3, ip
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb0:	fb00 f707 	mul.w	r7, r0, r7
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	d90a      	bls.n	8000bce <__udivmoddi4+0x92>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc0:	f080 810a 	bcs.w	8000dd8 <__udivmoddi4+0x29c>
 8000bc4:	42a7      	cmp	r7, r4
 8000bc6:	f240 8107 	bls.w	8000dd8 <__udivmoddi4+0x29c>
 8000bca:	4464      	add	r4, ip
 8000bcc:	3802      	subs	r0, #2
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	1be4      	subs	r4, r4, r7
 8000bd4:	2600      	movs	r6, #0
 8000bd6:	b11d      	cbz	r5, 8000be0 <__udivmoddi4+0xa4>
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000be0:	4631      	mov	r1, r6
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0xc2>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	f000 80ef 	beq.w	8000dce <__udivmoddi4+0x292>
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f683 	clz	r6, r3
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d14a      	bne.n	8000c9c <__udivmoddi4+0x160>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xd4>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80f9 	bhi.w	8000e02 <__udivmoddi4+0x2c6>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0303 	sbc.w	r3, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	469e      	mov	lr, r3
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d0e0      	beq.n	8000be0 <__udivmoddi4+0xa4>
 8000c1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c22:	e7dd      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000c24:	b902      	cbnz	r2, 8000c28 <__udivmoddi4+0xec>
 8000c26:	deff      	udf	#255	; 0xff
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	f040 8092 	bne.w	8000d56 <__udivmoddi4+0x21a>
 8000c32:	eba1 010c 	sub.w	r1, r1, ip
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f fe8c 	uxth.w	lr, ip
 8000c3e:	2601      	movs	r6, #1
 8000c40:	0c20      	lsrs	r0, r4, #16
 8000c42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c46:	fb07 1113 	mls	r1, r7, r3, r1
 8000c4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c4e:	fb0e f003 	mul.w	r0, lr, r3
 8000c52:	4288      	cmp	r0, r1
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x12c>
 8000c56:	eb1c 0101 	adds.w	r1, ip, r1
 8000c5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x12a>
 8000c60:	4288      	cmp	r0, r1
 8000c62:	f200 80cb 	bhi.w	8000dfc <__udivmoddi4+0x2c0>
 8000c66:	4643      	mov	r3, r8
 8000c68:	1a09      	subs	r1, r1, r0
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c70:	fb07 1110 	mls	r1, r7, r0, r1
 8000c74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c78:	fb0e fe00 	mul.w	lr, lr, r0
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x156>
 8000c80:	eb1c 0404 	adds.w	r4, ip, r4
 8000c84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c88:	d202      	bcs.n	8000c90 <__udivmoddi4+0x154>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f200 80bb 	bhi.w	8000e06 <__udivmoddi4+0x2ca>
 8000c90:	4608      	mov	r0, r1
 8000c92:	eba4 040e 	sub.w	r4, r4, lr
 8000c96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c9a:	e79c      	b.n	8000bd6 <__udivmoddi4+0x9a>
 8000c9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ca0:	40b3      	lsls	r3, r6
 8000ca2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ca6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000caa:	fa20 f407 	lsr.w	r4, r0, r7
 8000cae:	fa01 f306 	lsl.w	r3, r1, r6
 8000cb2:	431c      	orrs	r4, r3
 8000cb4:	40f9      	lsrs	r1, r7
 8000cb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cba:	fa00 f306 	lsl.w	r3, r0, r6
 8000cbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cc2:	0c20      	lsrs	r0, r4, #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000ccc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b8>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ce4:	f080 8088 	bcs.w	8000df8 <__udivmoddi4+0x2bc>
 8000ce8:	4288      	cmp	r0, r1
 8000cea:	f240 8085 	bls.w	8000df8 <__udivmoddi4+0x2bc>
 8000cee:	f1a8 0802 	sub.w	r8, r8, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000d00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d08:	458e      	cmp	lr, r1
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x1e2>
 8000d0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d14:	d26c      	bcs.n	8000df0 <__udivmoddi4+0x2b4>
 8000d16:	458e      	cmp	lr, r1
 8000d18:	d96a      	bls.n	8000df0 <__udivmoddi4+0x2b4>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4461      	add	r1, ip
 8000d1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d22:	fba0 9402 	umull	r9, r4, r0, r2
 8000d26:	eba1 010e 	sub.w	r1, r1, lr
 8000d2a:	42a1      	cmp	r1, r4
 8000d2c:	46c8      	mov	r8, r9
 8000d2e:	46a6      	mov	lr, r4
 8000d30:	d356      	bcc.n	8000de0 <__udivmoddi4+0x2a4>
 8000d32:	d053      	beq.n	8000ddc <__udivmoddi4+0x2a0>
 8000d34:	b15d      	cbz	r5, 8000d4e <__udivmoddi4+0x212>
 8000d36:	ebb3 0208 	subs.w	r2, r3, r8
 8000d3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d42:	fa22 f306 	lsr.w	r3, r2, r6
 8000d46:	40f1      	lsrs	r1, r6
 8000d48:	431f      	orrs	r7, r3
 8000d4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d4e:	2600      	movs	r6, #0
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	f1c2 0320 	rsb	r3, r2, #32
 8000d5a:	40d8      	lsrs	r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	fa21 f303 	lsr.w	r3, r1, r3
 8000d64:	4091      	lsls	r1, r2
 8000d66:	4301      	orrs	r1, r0
 8000d68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6c:	fa1f fe8c 	uxth.w	lr, ip
 8000d70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d74:	fb07 3610 	mls	r6, r7, r0, r3
 8000d78:	0c0b      	lsrs	r3, r1, #16
 8000d7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d82:	429e      	cmp	r6, r3
 8000d84:	fa04 f402 	lsl.w	r4, r4, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x260>
 8000d8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d92:	d22f      	bcs.n	8000df4 <__udivmoddi4+0x2b8>
 8000d94:	429e      	cmp	r6, r3
 8000d96:	d92d      	bls.n	8000df4 <__udivmoddi4+0x2b8>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	b289      	uxth	r1, r1
 8000da0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000da4:	fb07 3316 	mls	r3, r7, r6, r3
 8000da8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dac:	fb06 f30e 	mul.w	r3, r6, lr
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x28a>
 8000db4:	eb1c 0101 	adds.w	r1, ip, r1
 8000db8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dbc:	d216      	bcs.n	8000dec <__udivmoddi4+0x2b0>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d914      	bls.n	8000dec <__udivmoddi4+0x2b0>
 8000dc2:	3e02      	subs	r6, #2
 8000dc4:	4461      	add	r1, ip
 8000dc6:	1ac9      	subs	r1, r1, r3
 8000dc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dcc:	e738      	b.n	8000c40 <__udivmoddi4+0x104>
 8000dce:	462e      	mov	r6, r5
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	e705      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000dd4:	4606      	mov	r6, r0
 8000dd6:	e6e3      	b.n	8000ba0 <__udivmoddi4+0x64>
 8000dd8:	4618      	mov	r0, r3
 8000dda:	e6f8      	b.n	8000bce <__udivmoddi4+0x92>
 8000ddc:	454b      	cmp	r3, r9
 8000dde:	d2a9      	bcs.n	8000d34 <__udivmoddi4+0x1f8>
 8000de0:	ebb9 0802 	subs.w	r8, r9, r2
 8000de4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000de8:	3801      	subs	r0, #1
 8000dea:	e7a3      	b.n	8000d34 <__udivmoddi4+0x1f8>
 8000dec:	4646      	mov	r6, r8
 8000dee:	e7ea      	b.n	8000dc6 <__udivmoddi4+0x28a>
 8000df0:	4620      	mov	r0, r4
 8000df2:	e794      	b.n	8000d1e <__udivmoddi4+0x1e2>
 8000df4:	4640      	mov	r0, r8
 8000df6:	e7d1      	b.n	8000d9c <__udivmoddi4+0x260>
 8000df8:	46d0      	mov	r8, sl
 8000dfa:	e77b      	b.n	8000cf4 <__udivmoddi4+0x1b8>
 8000dfc:	3b02      	subs	r3, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	e732      	b.n	8000c68 <__udivmoddi4+0x12c>
 8000e02:	4630      	mov	r0, r6
 8000e04:	e709      	b.n	8000c1a <__udivmoddi4+0xde>
 8000e06:	4464      	add	r4, ip
 8000e08:	3802      	subs	r0, #2
 8000e0a:	e742      	b.n	8000c92 <__udivmoddi4+0x156>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <vApplicationGetIdleTaskMemory+0x2c>)
 8000e20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	4a06      	ldr	r2, [pc, #24]	; (8000e40 <vApplicationGetIdleTaskMemory+0x30>)
 8000e26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2280      	movs	r2, #128	; 0x80
 8000e2c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e2e:	bf00      	nop
 8000e30:	3714      	adds	r7, #20
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	200000a4 	.word	0x200000a4
 8000e40:	20000158 	.word	0x20000158
 8000e44:	00000000 	.word	0x00000000

08000e48 <Pid_cal>:

/* USER CODE BEGIN PFP */

/*G�?i trong  HAL_TIM_PeriodElapsedCallback*/
double alpha;
void Pid_cal(){
 8000e48:	b5b0      	push	{r4, r5, r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	e2 = goc_target2 - goc_hientai;
 8000e4c:	4b92      	ldr	r3, [pc, #584]	; (8001098 <Pid_cal+0x250>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b92      	ldr	r3, [pc, #584]	; (800109c <Pid_cal+0x254>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	4a92      	ldr	r2, [pc, #584]	; (80010a0 <Pid_cal+0x258>)
 8000e58:	6013      	str	r3, [r2, #0]
	if(goc_target2>=0){
 8000e5a:	4b8f      	ldr	r3, [pc, #572]	; (8001098 <Pid_cal+0x250>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	db1d      	blt.n	8000e9e <Pid_cal+0x56>
		if((e2<goc_target2*(1/3)))
 8000e62:	4b8f      	ldr	r3, [pc, #572]	; (80010a0 <Pid_cal+0x258>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	da0c      	bge.n	8000e84 <Pid_cal+0x3c>
			{alpha = 0.09;
 8000e6a:	498e      	ldr	r1, [pc, #568]	; (80010a4 <Pid_cal+0x25c>)
 8000e6c:	a384      	add	r3, pc, #528	; (adr r3, 8001080 <Pid_cal+0x238>)
 8000e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e72:	e9c1 2300 	strd	r2, r3, [r1]
			kp2 = 0.075;}
 8000e76:	498c      	ldr	r1, [pc, #560]	; (80010a8 <Pid_cal+0x260>)
 8000e78:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000e7c:	4b8b      	ldr	r3, [pc, #556]	; (80010ac <Pid_cal+0x264>)
 8000e7e:	e9c1 2300 	strd	r2, r3, [r1]
 8000e82:	e029      	b.n	8000ed8 <Pid_cal+0x90>
		else {
		alpha = 0.8;
 8000e84:	4987      	ldr	r1, [pc, #540]	; (80010a4 <Pid_cal+0x25c>)
 8000e86:	a380      	add	r3, pc, #512	; (adr r3, 8001088 <Pid_cal+0x240>)
 8000e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8c:	e9c1 2300 	strd	r2, r3, [r1]
		kp2 = 0.5;}
 8000e90:	4985      	ldr	r1, [pc, #532]	; (80010a8 <Pid_cal+0x260>)
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	4b86      	ldr	r3, [pc, #536]	; (80010b0 <Pid_cal+0x268>)
 8000e98:	e9c1 2300 	strd	r2, r3, [r1]
 8000e9c:	e01c      	b.n	8000ed8 <Pid_cal+0x90>
	}else{
		if((e2>goc_target2*(1/3)))
 8000e9e:	4b80      	ldr	r3, [pc, #512]	; (80010a0 <Pid_cal+0x258>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	dd0c      	ble.n	8000ec0 <Pid_cal+0x78>
					{alpha = 0.09;
 8000ea6:	497f      	ldr	r1, [pc, #508]	; (80010a4 <Pid_cal+0x25c>)
 8000ea8:	a375      	add	r3, pc, #468	; (adr r3, 8001080 <Pid_cal+0x238>)
 8000eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eae:	e9c1 2300 	strd	r2, r3, [r1]
					kp2 = 0.075;}
 8000eb2:	497d      	ldr	r1, [pc, #500]	; (80010a8 <Pid_cal+0x260>)
 8000eb4:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000eb8:	4b7c      	ldr	r3, [pc, #496]	; (80010ac <Pid_cal+0x264>)
 8000eba:	e9c1 2300 	strd	r2, r3, [r1]
 8000ebe:	e00b      	b.n	8000ed8 <Pid_cal+0x90>
				else {
				alpha = 0.8;
 8000ec0:	4978      	ldr	r1, [pc, #480]	; (80010a4 <Pid_cal+0x25c>)
 8000ec2:	a371      	add	r3, pc, #452	; (adr r3, 8001088 <Pid_cal+0x240>)
 8000ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec8:	e9c1 2300 	strd	r2, r3, [r1]
				kp2 = 0.5;}
 8000ecc:	4976      	ldr	r1, [pc, #472]	; (80010a8 <Pid_cal+0x260>)
 8000ece:	f04f 0200 	mov.w	r2, #0
 8000ed2:	4b77      	ldr	r3, [pc, #476]	; (80010b0 <Pid_cal+0x268>)
 8000ed4:	e9c1 2300 	strd	r2, r3, [r1]
	}

	    up2 = kp2*e2;
 8000ed8:	4b71      	ldr	r3, [pc, #452]	; (80010a0 <Pid_cal+0x258>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fac9 	bl	8000474 <__aeabi_i2d>
 8000ee2:	4b71      	ldr	r3, [pc, #452]	; (80010a8 <Pid_cal+0x260>)
 8000ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee8:	f7ff fb2e 	bl	8000548 <__aeabi_dmul>
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	4970      	ldr	r1, [pc, #448]	; (80010b4 <Pid_cal+0x26c>)
 8000ef2:	e9c1 2300 	strd	r2, r3, [r1]
		ud2 = kd2*(e2 - pre_e2)/0.001;
 8000ef6:	4b6a      	ldr	r3, [pc, #424]	; (80010a0 <Pid_cal+0x258>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff faba 	bl	8000474 <__aeabi_i2d>
 8000f00:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <Pid_cal+0x270>)
 8000f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f06:	f7ff f967 	bl	80001d8 <__aeabi_dsub>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	4610      	mov	r0, r2
 8000f10:	4619      	mov	r1, r3
 8000f12:	4b6a      	ldr	r3, [pc, #424]	; (80010bc <Pid_cal+0x274>)
 8000f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f18:	f7ff fb16 	bl	8000548 <__aeabi_dmul>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
 8000f24:	a35a      	add	r3, pc, #360	; (adr r3, 8001090 <Pid_cal+0x248>)
 8000f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2a:	f7ff fc37 	bl	800079c <__aeabi_ddiv>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	4963      	ldr	r1, [pc, #396]	; (80010c0 <Pid_cal+0x278>)
 8000f34:	e9c1 2300 	strd	r2, r3, [r1]
//		ui2 = ui_p2 + ki2*e2*0.001;
		udf2 = (1-alpha)*uf2_p+alpha*ud2;
 8000f38:	4b5a      	ldr	r3, [pc, #360]	; (80010a4 <Pid_cal+0x25c>)
 8000f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3e:	f04f 0000 	mov.w	r0, #0
 8000f42:	4960      	ldr	r1, [pc, #384]	; (80010c4 <Pid_cal+0x27c>)
 8000f44:	f7ff f948 	bl	80001d8 <__aeabi_dsub>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4b5d      	ldr	r3, [pc, #372]	; (80010c8 <Pid_cal+0x280>)
 8000f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f56:	f7ff faf7 	bl	8000548 <__aeabi_dmul>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4614      	mov	r4, r2
 8000f60:	461d      	mov	r5, r3
 8000f62:	4b50      	ldr	r3, [pc, #320]	; (80010a4 <Pid_cal+0x25c>)
 8000f64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f68:	4b55      	ldr	r3, [pc, #340]	; (80010c0 <Pid_cal+0x278>)
 8000f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6e:	f7ff faeb 	bl	8000548 <__aeabi_dmul>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4620      	mov	r0, r4
 8000f78:	4629      	mov	r1, r5
 8000f7a:	f7ff f92f 	bl	80001dc <__adddf3>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4952      	ldr	r1, [pc, #328]	; (80010cc <Pid_cal+0x284>)
 8000f84:	e9c1 2300 	strd	r2, r3, [r1]

//		if(ui2>8)ui2=8;
//		else if(ui2<-8)ui2=-8;


		pre_e2 = e2;
 8000f88:	4b45      	ldr	r3, [pc, #276]	; (80010a0 <Pid_cal+0x258>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fa71 	bl	8000474 <__aeabi_i2d>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4948      	ldr	r1, [pc, #288]	; (80010b8 <Pid_cal+0x270>)
 8000f98:	e9c1 2300 	strd	r2, r3, [r1]
		uf2_p = udf2;
 8000f9c:	4b4b      	ldr	r3, [pc, #300]	; (80010cc <Pid_cal+0x284>)
 8000f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa2:	4949      	ldr	r1, [pc, #292]	; (80010c8 <Pid_cal+0x280>)
 8000fa4:	e9c1 2300 	strd	r2, r3, [r1]
//		ui_p2 = ui2;

		if (u2>0)Dir2=1;
 8000fa8:	4b49      	ldr	r3, [pc, #292]	; (80010d0 <Pid_cal+0x288>)
 8000faa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	f7ff fd57 	bl	8000a68 <__aeabi_dcmpgt>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <Pid_cal+0x180>
 8000fc0:	4b44      	ldr	r3, [pc, #272]	; (80010d4 <Pid_cal+0x28c>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	e00f      	b.n	8000fe8 <Pid_cal+0x1a0>
		else if (u2<0)Dir2 = -1;
 8000fc8:	4b41      	ldr	r3, [pc, #260]	; (80010d0 <Pid_cal+0x288>)
 8000fca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	f04f 0300 	mov.w	r3, #0
 8000fd6:	f7ff fd29 	bl	8000a2c <__aeabi_dcmplt>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <Pid_cal+0x1a0>
 8000fe0:	4b3c      	ldr	r3, [pc, #240]	; (80010d4 <Pid_cal+0x28c>)
 8000fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe6:	601a      	str	r2, [r3, #0]
		u2 = up2 + udf2;
 8000fe8:	4b32      	ldr	r3, [pc, #200]	; (80010b4 <Pid_cal+0x26c>)
 8000fea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fee:	4b37      	ldr	r3, [pc, #220]	; (80010cc <Pid_cal+0x284>)
 8000ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff4:	f7ff f8f2 	bl	80001dc <__adddf3>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4934      	ldr	r1, [pc, #208]	; (80010d0 <Pid_cal+0x288>)
 8000ffe:	e9c1 2300 	strd	r2, r3, [r1]
		if (u2> 400)u2 =400;//180
 8001002:	4b33      	ldr	r3, [pc, #204]	; (80010d0 <Pid_cal+0x288>)
 8001004:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001008:	f04f 0200 	mov.w	r2, #0
 800100c:	4b32      	ldr	r3, [pc, #200]	; (80010d8 <Pid_cal+0x290>)
 800100e:	f7ff fd2b 	bl	8000a68 <__aeabi_dcmpgt>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d006      	beq.n	8001026 <Pid_cal+0x1de>
 8001018:	492d      	ldr	r1, [pc, #180]	; (80010d0 <Pid_cal+0x288>)
 800101a:	f04f 0200 	mov.w	r2, #0
 800101e:	4b2e      	ldr	r3, [pc, #184]	; (80010d8 <Pid_cal+0x290>)
 8001020:	e9c1 2300 	strd	r2, r3, [r1]
 8001024:	e010      	b.n	8001048 <Pid_cal+0x200>
		else if (u2<-400)u2=-400;//-180
 8001026:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <Pid_cal+0x288>)
 8001028:	e9d3 0100 	ldrd	r0, r1, [r3]
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <Pid_cal+0x294>)
 8001032:	f7ff fcfb 	bl	8000a2c <__aeabi_dcmplt>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <Pid_cal+0x200>
 800103c:	4924      	ldr	r1, [pc, #144]	; (80010d0 <Pid_cal+0x288>)
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	4b26      	ldr	r3, [pc, #152]	; (80010dc <Pid_cal+0x294>)
 8001044:	e9c1 2300 	strd	r2, r3, [r1]
		pwm = abs(u2);
 8001048:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <Pid_cal+0x288>)
 800104a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104e:	4610      	mov	r0, r2
 8001050:	4619      	mov	r1, r3
 8001052:	f7ff fd13 	bl	8000a7c <__aeabi_d2iz>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	bfb8      	it	lt
 800105c:	425b      	neglt	r3, r3
 800105e:	b29a      	uxth	r2, r3
 8001060:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <Pid_cal+0x298>)
 8001062:	801a      	strh	r2, [r3, #0]
		if((pwm < 122)&&(e2!=0)){//85
 8001064:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <Pid_cal+0x298>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	2b79      	cmp	r3, #121	; 0x79
 800106a:	d806      	bhi.n	800107a <Pid_cal+0x232>
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <Pid_cal+0x258>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <Pid_cal+0x232>
			pwm = 122;
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <Pid_cal+0x298>)
 8001076:	227a      	movs	r2, #122	; 0x7a
 8001078:	801a      	strh	r2, [r3, #0]
		}
}
 800107a:	bf00      	nop
 800107c:	bdb0      	pop	{r4, r5, r7, pc}
 800107e:	bf00      	nop
 8001080:	70a3d70a 	.word	0x70a3d70a
 8001084:	3fb70a3d 	.word	0x3fb70a3d
 8001088:	9999999a 	.word	0x9999999a
 800108c:	3fe99999 	.word	0x3fe99999
 8001090:	d2f1a9fc 	.word	0xd2f1a9fc
 8001094:	3f50624d 	.word	0x3f50624d
 8001098:	20000488 	.word	0x20000488
 800109c:	20000480 	.word	0x20000480
 80010a0:	20000490 	.word	0x20000490
 80010a4:	200004d8 	.word	0x200004d8
 80010a8:	20000000 	.word	0x20000000
 80010ac:	3fb33333 	.word	0x3fb33333
 80010b0:	3fe00000 	.word	0x3fe00000
 80010b4:	200004a0 	.word	0x200004a0
 80010b8:	20000498 	.word	0x20000498
 80010bc:	20000008 	.word	0x20000008
 80010c0:	200004a8 	.word	0x200004a8
 80010c4:	3ff00000 	.word	0x3ff00000
 80010c8:	200004b8 	.word	0x200004b8
 80010cc:	200004b0 	.word	0x200004b0
 80010d0:	200004c0 	.word	0x200004c0
 80010d4:	200004cc 	.word	0x200004cc
 80010d8:	40790000 	.word	0x40790000
 80010dc:	c0790000 	.word	0xc0790000
 80010e0:	200004d0 	.word	0x200004d0

080010e4 <GetDataCompass>:


char ds[12];
uint8_t uart1_ds, ds_ind, ds_cnt, ds_flg;

void GetDataCompass(){
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
	GocRobot = ds[1] - 48;
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <GetDataCompass+0x7c>)
 80010ec:	785b      	ldrb	r3, [r3, #1]
 80010ee:	3b30      	subs	r3, #48	; 0x30
 80010f0:	4a1c      	ldr	r2, [pc, #112]	; (8001164 <GetDataCompass+0x80>)
 80010f2:	6013      	str	r3, [r2, #0]
	int x = 2;
 80010f4:	2302      	movs	r3, #2
 80010f6:	607b      	str	r3, [r7, #4]
	while((ds[x] >= 48) && (ds[x] <= 57)){
 80010f8:	e016      	b.n	8001128 <GetDataCompass+0x44>
		GocRobot = GocRobot * 10;
 80010fa:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <GetDataCompass+0x80>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	461a      	mov	r2, r3
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <GetDataCompass+0x80>)
 800110a:	601a      	str	r2, [r3, #0]
		GocRobot += ds[x] -48;
 800110c:	4a14      	ldr	r2, [pc, #80]	; (8001160 <GetDataCompass+0x7c>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <GetDataCompass+0x80>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4413      	add	r3, r2
 800111e:	4a11      	ldr	r2, [pc, #68]	; (8001164 <GetDataCompass+0x80>)
 8001120:	6013      	str	r3, [r2, #0]
		++x;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3301      	adds	r3, #1
 8001126:	607b      	str	r3, [r7, #4]
	while((ds[x] >= 48) && (ds[x] <= 57)){
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <GetDataCompass+0x7c>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b2f      	cmp	r3, #47	; 0x2f
 8001132:	d905      	bls.n	8001140 <GetDataCompass+0x5c>
 8001134:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <GetDataCompass+0x7c>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b39      	cmp	r3, #57	; 0x39
 800113e:	d9dc      	bls.n	80010fa <GetDataCompass+0x16>
	}

	if(ds[0] == '-'){
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <GetDataCompass+0x7c>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b2d      	cmp	r3, #45	; 0x2d
 8001146:	d104      	bne.n	8001152 <GetDataCompass+0x6e>
		GocRobot = -GocRobot;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <GetDataCompass+0x80>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	425b      	negs	r3, r3
 800114e:	4a05      	ldr	r2, [pc, #20]	; (8001164 <GetDataCompass+0x80>)
 8001150:	6013      	str	r3, [r2, #0]
	}
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000508 	.word	0x20000508
 8001164:	20000500 	.word	0x20000500

08001168 <HAL_UART_RxCpltCallback>:

//char UARTRX1_Buffer[17];
//char DataMain[17];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
//	if(huart->Instance == USART1){
//
//	}

	if(huart->Instance == USART2){
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a34      	ldr	r2, [pc, #208]	; (8001248 <HAL_UART_RxCpltCallback+0xe0>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d120      	bne.n	80011bc <HAL_UART_RxCpltCallback+0x54>
//		HAL_UART_Receive_IT(&huart2, (uint8_t*)UARTRX2_Buffer, 10);

		if(uart1_ds != '\n')
 800117a:	4b34      	ldr	r3, [pc, #208]	; (800124c <HAL_UART_RxCpltCallback+0xe4>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b0a      	cmp	r3, #10
 8001180:	d00b      	beq.n	800119a <HAL_UART_RxCpltCallback+0x32>
				ds[ds_ind++] = uart1_ds;
 8001182:	4b33      	ldr	r3, [pc, #204]	; (8001250 <HAL_UART_RxCpltCallback+0xe8>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	b2d1      	uxtb	r1, r2
 800118a:	4a31      	ldr	r2, [pc, #196]	; (8001250 <HAL_UART_RxCpltCallback+0xe8>)
 800118c:	7011      	strb	r1, [r2, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	4b2e      	ldr	r3, [pc, #184]	; (800124c <HAL_UART_RxCpltCallback+0xe4>)
 8001192:	7819      	ldrb	r1, [r3, #0]
 8001194:	4b2f      	ldr	r3, [pc, #188]	; (8001254 <HAL_UART_RxCpltCallback+0xec>)
 8001196:	5499      	strb	r1, [r3, r2]
 8001198:	e00b      	b.n	80011b2 <HAL_UART_RxCpltCallback+0x4a>
		else{
				GetDataCompass();
 800119a:	f7ff ffa3 	bl	80010e4 <GetDataCompass>
				ds_cnt = ds_ind;
 800119e:	4b2c      	ldr	r3, [pc, #176]	; (8001250 <HAL_UART_RxCpltCallback+0xe8>)
 80011a0:	781a      	ldrb	r2, [r3, #0]
 80011a2:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <HAL_UART_RxCpltCallback+0xf0>)
 80011a4:	701a      	strb	r2, [r3, #0]
				ds_flg = 1;
 80011a6:	4b2d      	ldr	r3, [pc, #180]	; (800125c <HAL_UART_RxCpltCallback+0xf4>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
				ds_ind = 0;
 80011ac:	4b28      	ldr	r3, [pc, #160]	; (8001250 <HAL_UART_RxCpltCallback+0xe8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, &uart1_ds, 1);
 80011b2:	2201      	movs	r2, #1
 80011b4:	4925      	ldr	r1, [pc, #148]	; (800124c <HAL_UART_RxCpltCallback+0xe4>)
 80011b6:	482a      	ldr	r0, [pc, #168]	; (8001260 <HAL_UART_RxCpltCallback+0xf8>)
 80011b8:	f002 febd 	bl	8003f36 <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART3){
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a28      	ldr	r2, [pc, #160]	; (8001264 <HAL_UART_RxCpltCallback+0xfc>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d13c      	bne.n	8001240 <HAL_UART_RxCpltCallback+0xd8>
		HAL_UART_Receive_IT(&huart3, (uint8_t*)UARTRX3_Buffer, 9);
 80011c6:	2209      	movs	r2, #9
 80011c8:	4927      	ldr	r1, [pc, #156]	; (8001268 <HAL_UART_RxCpltCallback+0x100>)
 80011ca:	4828      	ldr	r0, [pc, #160]	; (800126c <HAL_UART_RxCpltCallback+0x104>)
 80011cc:	f002 feb3 	bl	8003f36 <HAL_UART_Receive_IT>
		int ViTriData = -1;
 80011d0:	f04f 33ff 	mov.w	r3, #4294967295
 80011d4:	617b      	str	r3, [r7, #20]
		for(int i = 0; i <= 8; ++i){
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	e010      	b.n	80011fe <HAL_UART_RxCpltCallback+0x96>
			if((UARTRX3_Buffer[i] == (RFAddress << 1 | 0)) || (UARTRX3_Buffer[i] == (RFAddress << 1 | 1))){
 80011dc:	4a22      	ldr	r2, [pc, #136]	; (8001268 <HAL_UART_RxCpltCallback+0x100>)
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	4413      	add	r3, r2
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b94      	cmp	r3, #148	; 0x94
 80011e6:	d005      	beq.n	80011f4 <HAL_UART_RxCpltCallback+0x8c>
 80011e8:	4a1f      	ldr	r2, [pc, #124]	; (8001268 <HAL_UART_RxCpltCallback+0x100>)
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4413      	add	r3, r2
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b95      	cmp	r3, #149	; 0x95
 80011f2:	d101      	bne.n	80011f8 <HAL_UART_RxCpltCallback+0x90>
				ViTriData = i;
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	617b      	str	r3, [r7, #20]
		for(int i = 0; i <= 8; ++i){
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	3301      	adds	r3, #1
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	2b08      	cmp	r3, #8
 8001202:	ddeb      	ble.n	80011dc <HAL_UART_RxCpltCallback+0x74>
			}
		}
		if(ViTriData != -1){
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800120a:	d019      	beq.n	8001240 <HAL_UART_RxCpltCallback+0xd8>
			int cnt = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
			while(cnt < 9){
 8001210:	e013      	b.n	800123a <HAL_UART_RxCpltCallback+0xd2>
				DataTayGame[cnt] = UARTRX3_Buffer[ViTriData];
 8001212:	4a15      	ldr	r2, [pc, #84]	; (8001268 <HAL_UART_RxCpltCallback+0x100>)
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	4413      	add	r3, r2
 8001218:	7819      	ldrb	r1, [r3, #0]
 800121a:	4a15      	ldr	r2, [pc, #84]	; (8001270 <HAL_UART_RxCpltCallback+0x108>)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4413      	add	r3, r2
 8001220:	460a      	mov	r2, r1
 8001222:	701a      	strb	r2, [r3, #0]
				++ViTriData;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	3301      	adds	r3, #1
 8001228:	617b      	str	r3, [r7, #20]
				if(ViTriData == 9){
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	2b09      	cmp	r3, #9
 800122e:	d101      	bne.n	8001234 <HAL_UART_RxCpltCallback+0xcc>
					ViTriData = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
				}
				++cnt;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	3301      	adds	r3, #1
 8001238:	60fb      	str	r3, [r7, #12]
			while(cnt < 9){
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2b08      	cmp	r3, #8
 800123e:	dde8      	ble.n	8001212 <HAL_UART_RxCpltCallback+0xaa>
			}
		}
	}
}
 8001240:	bf00      	nop
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40004400 	.word	0x40004400
 800124c:	20000514 	.word	0x20000514
 8001250:	20000515 	.word	0x20000515
 8001254:	20000508 	.word	0x20000508
 8001258:	20000516 	.word	0x20000516
 800125c:	20000517 	.word	0x20000517
 8001260:	200003e4 	.word	0x200003e4
 8001264:	40004800 	.word	0x40004800
 8001268:	200004e8 	.word	0x200004e8
 800126c:	20000428 	.word	0x20000428
 8001270:	200004f4 	.word	0x200004f4

08001274 <ControlDriver>:


uint8_t UART1TxData[17];
/*Hàm truy�?n data xuống cho các board driver*/
int ControlDriver(uint8_t Mode1, int Dir1, uint16_t Speed1, uint16_t Rotate1, uint8_t Mode2, int Dir2, uint16_t Speed2, uint16_t Rotate2, uint8_t Mode3, int Dir3, uint16_t Speed3, uint16_t Rotate3){
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	4611      	mov	r1, r2
 800127e:	461a      	mov	r2, r3
 8001280:	4603      	mov	r3, r0
 8001282:	73fb      	strb	r3, [r7, #15]
 8001284:	460b      	mov	r3, r1
 8001286:	81bb      	strh	r3, [r7, #12]
 8001288:	4613      	mov	r3, r2
 800128a:	80fb      	strh	r3, [r7, #6]
	UART1TxData[0] = 149;
 800128c:	4b57      	ldr	r3, [pc, #348]	; (80013ec <ControlDriver+0x178>)
 800128e:	2295      	movs	r2, #149	; 0x95
 8001290:	701a      	strb	r2, [r3, #0]

	if(Dir1 == -1){
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001298:	d108      	bne.n	80012ac <ControlDriver+0x38>
		UART1TxData[1] = (Mode1 & 3) << 1;
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	f003 0306 	and.w	r3, r3, #6
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4b51      	ldr	r3, [pc, #324]	; (80013ec <ControlDriver+0x178>)
 80012a8:	705a      	strb	r2, [r3, #1]
 80012aa:	e00e      	b.n	80012ca <ControlDriver+0x56>
	}
	else if(Dir1 == 1){
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d10b      	bne.n	80012ca <ControlDriver+0x56>
		UART1TxData[1] = (Mode1 & 3) << 1 | 1;
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	b25b      	sxtb	r3, r3
 80012b8:	f003 0306 	and.w	r3, r3, #6
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	b25b      	sxtb	r3, r3
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4b49      	ldr	r3, [pc, #292]	; (80013ec <ControlDriver+0x178>)
 80012c8:	705a      	strb	r2, [r3, #1]
	}

	UART1TxData[2] = Speed1 >> 8;
 80012ca:	89bb      	ldrh	r3, [r7, #12]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4b46      	ldr	r3, [pc, #280]	; (80013ec <ControlDriver+0x178>)
 80012d4:	709a      	strb	r2, [r3, #2]
	UART1TxData[3] = Speed1;
 80012d6:	89bb      	ldrh	r3, [r7, #12]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b44      	ldr	r3, [pc, #272]	; (80013ec <ControlDriver+0x178>)
 80012dc:	70da      	strb	r2, [r3, #3]

	UART1TxData[4] = Rotate1 >> 8;
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	0a1b      	lsrs	r3, r3, #8
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4b41      	ldr	r3, [pc, #260]	; (80013ec <ControlDriver+0x178>)
 80012e8:	711a      	strb	r2, [r3, #4]
	UART1TxData[5] = Rotate1;
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b3f      	ldr	r3, [pc, #252]	; (80013ec <ControlDriver+0x178>)
 80012f0:	715a      	strb	r2, [r3, #5]

	if(Dir2 == -1){
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f8:	d108      	bne.n	800130c <ControlDriver+0x98>
		UART1TxData[6] = (Mode2 & 3) << 1;
 80012fa:	7e3b      	ldrb	r3, [r7, #24]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	f003 0306 	and.w	r3, r3, #6
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4b39      	ldr	r3, [pc, #228]	; (80013ec <ControlDriver+0x178>)
 8001308:	719a      	strb	r2, [r3, #6]
 800130a:	e00e      	b.n	800132a <ControlDriver+0xb6>
	}
	else if(Dir2 == 1){
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d10b      	bne.n	800132a <ControlDriver+0xb6>
		UART1TxData[6] = (Mode2 & 3) << 1 | 1;
 8001312:	7e3b      	ldrb	r3, [r7, #24]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	b25b      	sxtb	r3, r3
 8001318:	f003 0306 	and.w	r3, r3, #6
 800131c:	b25b      	sxtb	r3, r3
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	b25b      	sxtb	r3, r3
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b31      	ldr	r3, [pc, #196]	; (80013ec <ControlDriver+0x178>)
 8001328:	719a      	strb	r2, [r3, #6]
	}

	UART1TxData[7] = Speed2 >> 8;
 800132a:	8c3b      	ldrh	r3, [r7, #32]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	b29b      	uxth	r3, r3
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4b2e      	ldr	r3, [pc, #184]	; (80013ec <ControlDriver+0x178>)
 8001334:	71da      	strb	r2, [r3, #7]
	UART1TxData[8] = Speed2;
 8001336:	8c3b      	ldrh	r3, [r7, #32]
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <ControlDriver+0x178>)
 800133c:	721a      	strb	r2, [r3, #8]

	UART1TxData[9] = Rotate2 >> 8;
 800133e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	b29b      	uxth	r3, r3
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b29      	ldr	r3, [pc, #164]	; (80013ec <ControlDriver+0x178>)
 8001348:	725a      	strb	r2, [r3, #9]
	UART1TxData[10] = Rotate2;
 800134a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4b27      	ldr	r3, [pc, #156]	; (80013ec <ControlDriver+0x178>)
 8001350:	729a      	strb	r2, [r3, #10]

	if(Dir3 == -1){
 8001352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001358:	d109      	bne.n	800136e <ControlDriver+0xfa>
		UART1TxData[11] = (Mode3 & 3) << 1;
 800135a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	b2db      	uxtb	r3, r3
 8001362:	f003 0306 	and.w	r3, r3, #6
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b20      	ldr	r3, [pc, #128]	; (80013ec <ControlDriver+0x178>)
 800136a:	72da      	strb	r2, [r3, #11]
 800136c:	e00f      	b.n	800138e <ControlDriver+0x11a>
	}
	else if(Dir3 == 1){
 800136e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001370:	2b01      	cmp	r3, #1
 8001372:	d10c      	bne.n	800138e <ControlDriver+0x11a>
		UART1TxData[11] = (Mode3 & 3) << 1 | 1;
 8001374:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	b25b      	sxtb	r3, r3
 800137c:	f003 0306 	and.w	r3, r3, #6
 8001380:	b25b      	sxtb	r3, r3
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	b25b      	sxtb	r3, r3
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b18      	ldr	r3, [pc, #96]	; (80013ec <ControlDriver+0x178>)
 800138c:	72da      	strb	r2, [r3, #11]
	}

	UART1TxData[12] = Speed3 >> 8;
 800138e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	b29b      	uxth	r3, r3
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <ControlDriver+0x178>)
 8001398:	731a      	strb	r2, [r3, #12]
	UART1TxData[13] = Speed3;
 800139a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <ControlDriver+0x178>)
 80013a0:	735a      	strb	r2, [r3, #13]

	UART1TxData[14] = Rotate3 >> 8;
 80013a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <ControlDriver+0x178>)
 80013ac:	739a      	strb	r2, [r3, #14]
	UART1TxData[15] = Rotate3;
 80013ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <ControlDriver+0x178>)
 80013b4:	73da      	strb	r2, [r3, #15]

	UART1TxData[16] = 10;
 80013b6:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <ControlDriver+0x178>)
 80013b8:	220a      	movs	r2, #10
 80013ba:	741a      	strb	r2, [r3, #16]

	if(HAL_UART_Transmit(&huart1, (uint8_t *) UART1TxData, 17, 1000) != HAL_OK){
 80013bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c0:	2211      	movs	r2, #17
 80013c2:	490a      	ldr	r1, [pc, #40]	; (80013ec <ControlDriver+0x178>)
 80013c4:	480a      	ldr	r0, [pc, #40]	; (80013f0 <ControlDriver+0x17c>)
 80013c6:	f002 fd24 	bl	8003e12 <HAL_UART_Transmit>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d004      	beq.n	80013da <ControlDriver+0x166>
		osDelay(1);
 80013d0:	2001      	movs	r0, #1
 80013d2:	f003 fdb4 	bl	8004f3e <osDelay>
		return 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e003      	b.n	80013e2 <ControlDriver+0x16e>
	}
	osDelay(1);
 80013da:	2001      	movs	r0, #1
 80013dc:	f003 fdaf 	bl	8004f3e <osDelay>
	return 1;
 80013e0:	2301      	movs	r3, #1
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000518 	.word	0x20000518
 80013f0:	200003a0 	.word	0x200003a0

080013f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f4:	b5b0      	push	{r4, r5, r7, lr}
 80013f6:	b09c      	sub	sp, #112	; 0x70
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013fa:	f000 ffc7 	bl	800238c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(5000);
 80013fe:	f241 3088 	movw	r0, #5000	; 0x1388
 8001402:	f001 f805 	bl	8002410 <HAL_Delay>
  GocRobot = -999;
 8001406:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <main+0xe0>)
 8001408:	4a33      	ldr	r2, [pc, #204]	; (80014d8 <main+0xe4>)
 800140a:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800140c:	f000 f87e 	bl	800150c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001410:	f000 f9b2 	bl	8001778 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001414:	f000 f930 	bl	8001678 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001418:	f000 f95a 	bl	80016d0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800141c:	f000 f982 	bl	8001724 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001420:	f000 f8de 	bl	80015e0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Receive_IT(&huart2, &uart1_ds, 1);
 8001424:	2201      	movs	r2, #1
 8001426:	492d      	ldr	r1, [pc, #180]	; (80014dc <main+0xe8>)
 8001428:	482d      	ldr	r0, [pc, #180]	; (80014e0 <main+0xec>)
 800142a:	f002 fd84 	bl	8003f36 <HAL_UART_Receive_IT>
  //Uart3 Connect to HC-12
  HAL_UART_Receive_IT(&huart3, (uint8_t*)UARTRX3_Buffer, 9);
 800142e:	2209      	movs	r2, #9
 8001430:	492c      	ldr	r1, [pc, #176]	; (80014e4 <main+0xf0>)
 8001432:	482d      	ldr	r0, [pc, #180]	; (80014e8 <main+0xf4>)
 8001434:	f002 fd7f 	bl	8003f36 <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001438:	4b2c      	ldr	r3, [pc, #176]	; (80014ec <main+0xf8>)
 800143a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800143e:	461d      	mov	r5, r3
 8001440:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001444:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001448:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800144c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f003 fd27 	bl	8004ea6 <osThreadCreate>
 8001458:	4603      	mov	r3, r0
 800145a:	4a25      	ldr	r2, [pc, #148]	; (80014f0 <main+0xfc>)
 800145c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, TaskBlinkLed, osPriorityIdle, 0, 128);
 800145e:	4b25      	ldr	r3, [pc, #148]	; (80014f4 <main+0x100>)
 8001460:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001464:	461d      	mov	r5, r3
 8001466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800146a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800146e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8001472:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f003 fd14 	bl	8004ea6 <osThreadCreate>
 800147e:	4603      	mov	r3, r0
 8001480:	4a1d      	ldr	r2, [pc, #116]	; (80014f8 <main+0x104>)
 8001482:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, TaskUART, osPriorityIdle, 0, 128);
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <main+0x108>)
 8001486:	f107 041c 	add.w	r4, r7, #28
 800148a:	461d      	mov	r5, r3
 800148c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800148e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001490:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001494:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f003 fd01 	bl	8004ea6 <osThreadCreate>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4a16      	ldr	r2, [pc, #88]	; (8001500 <main+0x10c>)
 80014a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_setting */
  osThreadDef(Task_setting, TaskXoayLaBan, osPriorityAboveNormal, 0, 128);
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <main+0x110>)
 80014ac:	463c      	mov	r4, r7
 80014ae:	461d      	mov	r5, r3
 80014b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_settingHandle = osThreadCreate(osThread(Task_setting), NULL);
 80014bc:	463b      	mov	r3, r7
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f003 fcf0 	bl	8004ea6 <osThreadCreate>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <main+0x114>)
 80014ca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80014cc:	f003 fce4 	bl	8004e98 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  ControlDriver(0, 0, 0, 0, 0);

  while (1)
 80014d0:	e7fe      	b.n	80014d0 <main+0xdc>
 80014d2:	bf00      	nop
 80014d4:	20000500 	.word	0x20000500
 80014d8:	fffffc19 	.word	0xfffffc19
 80014dc:	20000514 	.word	0x20000514
 80014e0:	200003e4 	.word	0x200003e4
 80014e4:	200004e8 	.word	0x200004e8
 80014e8:	20000428 	.word	0x20000428
 80014ec:	08006588 	.word	0x08006588
 80014f0:	2000046c 	.word	0x2000046c
 80014f4:	080065a4 	.word	0x080065a4
 80014f8:	20000470 	.word	0x20000470
 80014fc:	080065c0 	.word	0x080065c0
 8001500:	20000474 	.word	0x20000474
 8001504:	080065dc 	.word	0x080065dc
 8001508:	20000478 	.word	0x20000478

0800150c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b094      	sub	sp, #80	; 0x50
 8001510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001512:	f107 0320 	add.w	r3, r7, #32
 8001516:	2230      	movs	r2, #48	; 0x30
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f004 ff44 	bl	80063a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	4b28      	ldr	r3, [pc, #160]	; (80015d8 <SystemClock_Config+0xcc>)
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	4a27      	ldr	r2, [pc, #156]	; (80015d8 <SystemClock_Config+0xcc>)
 800153a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153e:	6413      	str	r3, [r2, #64]	; 0x40
 8001540:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <SystemClock_Config+0xcc>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800154c:	2300      	movs	r3, #0
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	4b22      	ldr	r3, [pc, #136]	; (80015dc <SystemClock_Config+0xd0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a21      	ldr	r2, [pc, #132]	; (80015dc <SystemClock_Config+0xd0>)
 8001556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <SystemClock_Config+0xd0>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001568:	2301      	movs	r3, #1
 800156a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800156c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001572:	2302      	movs	r3, #2
 8001574:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001576:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800157a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800157c:	2304      	movs	r3, #4
 800157e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001580:	23a8      	movs	r3, #168	; 0xa8
 8001582:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001584:	2302      	movs	r3, #2
 8001586:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001588:	2304      	movs	r3, #4
 800158a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800158c:	f107 0320 	add.w	r3, r7, #32
 8001590:	4618      	mov	r0, r3
 8001592:	f001 faa5 	bl	8002ae0 <HAL_RCC_OscConfig>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800159c:	f000 fce2 	bl	8001f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a0:	230f      	movs	r3, #15
 80015a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a4:	2302      	movs	r3, #2
 80015a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	2105      	movs	r1, #5
 80015be:	4618      	mov	r0, r3
 80015c0:	f001 fd06 	bl	8002fd0 <HAL_RCC_ClockConfig>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015ca:	f000 fccb 	bl	8001f64 <Error_Handler>
  }
}
 80015ce:	bf00      	nop
 80015d0:	3750      	adds	r7, #80	; 0x50
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40007000 	.word	0x40007000

080015e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015e6:	f107 0308 	add.w	r3, r7, #8
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f4:	463b      	mov	r3, r7
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015fc:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <MX_TIM2_Init+0x94>)
 80015fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001602:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001604:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <MX_TIM2_Init+0x94>)
 8001606:	2253      	movs	r2, #83	; 0x53
 8001608:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160a:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <MX_TIM2_Init+0x94>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001610:	4b18      	ldr	r3, [pc, #96]	; (8001674 <MX_TIM2_Init+0x94>)
 8001612:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001616:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001618:	4b16      	ldr	r3, [pc, #88]	; (8001674 <MX_TIM2_Init+0x94>)
 800161a:	2200      	movs	r2, #0
 800161c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <MX_TIM2_Init+0x94>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001624:	4813      	ldr	r0, [pc, #76]	; (8001674 <MX_TIM2_Init+0x94>)
 8001626:	f001 ff25 	bl	8003474 <HAL_TIM_Base_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001630:	f000 fc98 	bl	8001f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001638:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800163a:	f107 0308 	add.w	r3, r7, #8
 800163e:	4619      	mov	r1, r3
 8001640:	480c      	ldr	r0, [pc, #48]	; (8001674 <MX_TIM2_Init+0x94>)
 8001642:	f002 f8df 	bl	8003804 <HAL_TIM_ConfigClockSource>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800164c:	f000 fc8a 	bl	8001f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001650:	2300      	movs	r3, #0
 8001652:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001658:	463b      	mov	r3, r7
 800165a:	4619      	mov	r1, r3
 800165c:	4805      	ldr	r0, [pc, #20]	; (8001674 <MX_TIM2_Init+0x94>)
 800165e:	f002 fafb 	bl	8003c58 <HAL_TIMEx_MasterConfigSynchronization>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001668:	f000 fc7c 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000358 	.word	0x20000358

08001678 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <MX_USART1_UART_Init+0x50>)
 800167e:	4a13      	ldr	r2, [pc, #76]	; (80016cc <MX_USART1_UART_Init+0x54>)
 8001680:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MX_USART1_UART_Init+0x50>)
 8001684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001688:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <MX_USART1_UART_Init+0x50>)
 800168c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001690:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001692:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <MX_USART1_UART_Init+0x50>)
 8001694:	2200      	movs	r2, #0
 8001696:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <MX_USART1_UART_Init+0x50>)
 800169a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800169e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <MX_USART1_UART_Init+0x50>)
 80016a2:	220c      	movs	r2, #12
 80016a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <MX_USART1_UART_Init+0x50>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <MX_USART1_UART_Init+0x50>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_USART1_UART_Init+0x50>)
 80016b4:	f002 fb60 	bl	8003d78 <HAL_UART_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 80016be:	f000 fc51 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200003a0 	.word	0x200003a0
 80016cc:	40011000 	.word	0x40011000

080016d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_USART2_UART_Init+0x4c>)
 80016d6:	4a12      	ldr	r2, [pc, #72]	; (8001720 <MX_USART2_UART_Init+0x50>)
 80016d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <MX_USART2_UART_Init+0x4c>)
 80016dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_USART2_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <MX_USART2_UART_Init+0x4c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <MX_USART2_UART_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <MX_USART2_UART_Init+0x4c>)
 80016f6:	220c      	movs	r2, #12
 80016f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <MX_USART2_UART_Init+0x4c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <MX_USART2_UART_Init+0x4c>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_USART2_UART_Init+0x4c>)
 8001708:	f002 fb36 	bl	8003d78 <HAL_UART_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001712:	f000 fc27 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200003e4 	.word	0x200003e4
 8001720:	40004400 	.word	0x40004400

08001724 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <MX_USART3_UART_Init+0x4c>)
 800172a:	4a12      	ldr	r2, [pc, #72]	; (8001774 <MX_USART3_UART_Init+0x50>)
 800172c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <MX_USART3_UART_Init+0x4c>)
 8001730:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001734:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <MX_USART3_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <MX_USART3_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <MX_USART3_UART_Init+0x4c>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_USART3_UART_Init+0x4c>)
 800174a:	220c      	movs	r2, #12
 800174c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <MX_USART3_UART_Init+0x4c>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MX_USART3_UART_Init+0x4c>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <MX_USART3_UART_Init+0x4c>)
 800175c:	f002 fb0c 	bl	8003d78 <HAL_UART_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001766:	f000 fbfd 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000428 	.word	0x20000428
 8001774:	40004800 	.word	0x40004800

08001778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	4b30      	ldr	r3, [pc, #192]	; (8001854 <MX_GPIO_Init+0xdc>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a2f      	ldr	r2, [pc, #188]	; (8001854 <MX_GPIO_Init+0xdc>)
 8001798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <MX_GPIO_Init+0xdc>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	4b29      	ldr	r3, [pc, #164]	; (8001854 <MX_GPIO_Init+0xdc>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a28      	ldr	r2, [pc, #160]	; (8001854 <MX_GPIO_Init+0xdc>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b26      	ldr	r3, [pc, #152]	; (8001854 <MX_GPIO_Init+0xdc>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	4b22      	ldr	r3, [pc, #136]	; (8001854 <MX_GPIO_Init+0xdc>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a21      	ldr	r2, [pc, #132]	; (8001854 <MX_GPIO_Init+0xdc>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <MX_GPIO_Init+0xdc>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|CompassReset_Pin, GPIO_PIN_RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2112      	movs	r1, #18
 80017e6:	481c      	ldr	r0, [pc, #112]	; (8001858 <MX_GPIO_Init+0xe0>)
 80017e8:	f001 f946 	bl	8002a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RelayKhanCap_GPIO_Port, RelayKhanCap_Pin, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017f2:	481a      	ldr	r0, [pc, #104]	; (800185c <MX_GPIO_Init+0xe4>)
 80017f4:	f001 f940 	bl	8002a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin CompassReset_Pin */
  GPIO_InitStruct.Pin = LED_Pin|CompassReset_Pin;
 80017f8:	2312      	movs	r3, #18
 80017fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	4619      	mov	r1, r3
 800180e:	4812      	ldr	r0, [pc, #72]	; (8001858 <MX_GPIO_Init+0xe0>)
 8001810:	f000 ff96 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : CompassReady_Pin */
  GPIO_InitStruct.Pin = CompassReady_Pin;
 8001814:	2320      	movs	r3, #32
 8001816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001818:	2300      	movs	r3, #0
 800181a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CompassReady_GPIO_Port, &GPIO_InitStruct);
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	4619      	mov	r1, r3
 8001826:	480c      	ldr	r0, [pc, #48]	; (8001858 <MX_GPIO_Init+0xe0>)
 8001828:	f000 ff8a 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : RelayKhanCap_Pin */
  GPIO_InitStruct.Pin = RelayKhanCap_Pin;
 800182c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001830:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001832:	2301      	movs	r3, #1
 8001834:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RelayKhanCap_GPIO_Port, &GPIO_InitStruct);
 800183e:	f107 030c 	add.w	r3, r7, #12
 8001842:	4619      	mov	r1, r3
 8001844:	4805      	ldr	r0, [pc, #20]	; (800185c <MX_GPIO_Init+0xe4>)
 8001846:	f000 ff7b 	bl	8002740 <HAL_GPIO_Init>

}
 800184a:	bf00      	nop
 800184c:	3720      	adds	r7, #32
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	40020000 	.word	0x40020000
 800185c:	40020400 	.word	0x40020400

08001860 <StartDefaultTask>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
int dir3, i,i1;
void StartDefaultTask(void const * argument)
{
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af08      	add	r7, sp, #32
 8001866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  /*Nhấn nút F1*/
	  if(DataTayGame[7] == 128 && !DangThucThi){
 8001868:	4ba6      	ldr	r3, [pc, #664]	; (8001b04 <StartDefaultTask+0x2a4>)
 800186a:	79db      	ldrb	r3, [r3, #7]
 800186c:	2b80      	cmp	r3, #128	; 0x80
 800186e:	f040 80a8 	bne.w	80019c2 <StartDefaultTask+0x162>
 8001872:	4ba5      	ldr	r3, [pc, #660]	; (8001b08 <StartDefaultTask+0x2a8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	f040 80a3 	bne.w	80019c2 <StartDefaultTask+0x162>

		  ControlDriver(0, 1, 0, 90, 0, 1, 0, 90, 0, 1, 0, 90);
 800187c:	235a      	movs	r3, #90	; 0x5a
 800187e:	9307      	str	r3, [sp, #28]
 8001880:	2300      	movs	r3, #0
 8001882:	9306      	str	r3, [sp, #24]
 8001884:	2301      	movs	r3, #1
 8001886:	9305      	str	r3, [sp, #20]
 8001888:	2300      	movs	r3, #0
 800188a:	9304      	str	r3, [sp, #16]
 800188c:	235a      	movs	r3, #90	; 0x5a
 800188e:	9303      	str	r3, [sp, #12]
 8001890:	2300      	movs	r3, #0
 8001892:	9302      	str	r3, [sp, #8]
 8001894:	2301      	movs	r3, #1
 8001896:	9301      	str	r3, [sp, #4]
 8001898:	2300      	movs	r3, #0
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	235a      	movs	r3, #90	; 0x5a
 800189e:	2200      	movs	r2, #0
 80018a0:	2101      	movs	r1, #1
 80018a2:	2000      	movs	r0, #0
 80018a4:	f7ff fce6 	bl	8001274 <ControlDriver>
		  osDelay(1000);
 80018a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018ac:	f003 fb47 	bl	8004f3e <osDelay>
		  goc_target = 0;
 80018b0:	4b96      	ldr	r3, [pc, #600]	; (8001b0c <StartDefaultTask+0x2ac>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
		  i+=1;
 80018b6:	4b96      	ldr	r3, [pc, #600]	; (8001b10 <StartDefaultTask+0x2b0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	3301      	adds	r3, #1
 80018bc:	4a94      	ldr	r2, [pc, #592]	; (8001b10 <StartDefaultTask+0x2b0>)
 80018be:	6013      	str	r3, [r2, #0]
		  forward = i;
 80018c0:	4b93      	ldr	r3, [pc, #588]	; (8001b10 <StartDefaultTask+0x2b0>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a93      	ldr	r2, [pc, #588]	; (8001b14 <StartDefaultTask+0x2b4>)
 80018c6:	6013      	str	r3, [r2, #0]
		  RotatePid = 0;
 80018c8:	4b93      	ldr	r3, [pc, #588]	; (8001b18 <StartDefaultTask+0x2b8>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]

		  osDelay(3200);
 80018ce:	f44f 6048 	mov.w	r0, #3200	; 0xc80
 80018d2:	f003 fb34 	bl	8004f3e <osDelay>
		  forward = 0;
 80018d6:	4b8f      	ldr	r3, [pc, #572]	; (8001b14 <StartDefaultTask+0x2b4>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
		  RotatePid = 0;
 80018dc:	4b8e      	ldr	r3, [pc, #568]	; (8001b18 <StartDefaultTask+0x2b8>)
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
		  ControlDriver(0, dir3, 100, 90-1*e1, 50, dir3, 100, 90-1*e1,0, dir3, 100, 90+1*e1);
 80018e2:	4b8e      	ldr	r3, [pc, #568]	; (8001b1c <StartDefaultTask+0x2bc>)
 80018e4:	681c      	ldr	r4, [r3, #0]
 80018e6:	4b8e      	ldr	r3, [pc, #568]	; (8001b20 <StartDefaultTask+0x2c0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80018f0:	b29d      	uxth	r5, r3
 80018f2:	4b8a      	ldr	r3, [pc, #552]	; (8001b1c <StartDefaultTask+0x2bc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a8a      	ldr	r2, [pc, #552]	; (8001b20 <StartDefaultTask+0x2c0>)
 80018f8:	6812      	ldr	r2, [r2, #0]
 80018fa:	b292      	uxth	r2, r2
 80018fc:	f1c2 025a 	rsb	r2, r2, #90	; 0x5a
 8001900:	b292      	uxth	r2, r2
 8001902:	4986      	ldr	r1, [pc, #536]	; (8001b1c <StartDefaultTask+0x2bc>)
 8001904:	6809      	ldr	r1, [r1, #0]
 8001906:	4886      	ldr	r0, [pc, #536]	; (8001b20 <StartDefaultTask+0x2c0>)
 8001908:	6800      	ldr	r0, [r0, #0]
 800190a:	b280      	uxth	r0, r0
 800190c:	305a      	adds	r0, #90	; 0x5a
 800190e:	b280      	uxth	r0, r0
 8001910:	9007      	str	r0, [sp, #28]
 8001912:	2064      	movs	r0, #100	; 0x64
 8001914:	9006      	str	r0, [sp, #24]
 8001916:	9105      	str	r1, [sp, #20]
 8001918:	2100      	movs	r1, #0
 800191a:	9104      	str	r1, [sp, #16]
 800191c:	9203      	str	r2, [sp, #12]
 800191e:	2264      	movs	r2, #100	; 0x64
 8001920:	9202      	str	r2, [sp, #8]
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	2332      	movs	r3, #50	; 0x32
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	462b      	mov	r3, r5
 800192a:	2264      	movs	r2, #100	; 0x64
 800192c:	4621      	mov	r1, r4
 800192e:	2000      	movs	r0, #0
 8001930:	f7ff fca0 	bl	8001274 <ControlDriver>
		  osDelay(500);
 8001934:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001938:	f003 fb01 	bl	8004f3e <osDelay>
		 ControlDriver(0, dir3, 1000, 90, 0, dir3, 1000, 90,0, dir3, 1000, 90);
 800193c:	4b77      	ldr	r3, [pc, #476]	; (8001b1c <StartDefaultTask+0x2bc>)
 800193e:	6819      	ldr	r1, [r3, #0]
 8001940:	4b76      	ldr	r3, [pc, #472]	; (8001b1c <StartDefaultTask+0x2bc>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a75      	ldr	r2, [pc, #468]	; (8001b1c <StartDefaultTask+0x2bc>)
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	205a      	movs	r0, #90	; 0x5a
 800194a:	9007      	str	r0, [sp, #28]
 800194c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001950:	9006      	str	r0, [sp, #24]
 8001952:	9205      	str	r2, [sp, #20]
 8001954:	2200      	movs	r2, #0
 8001956:	9204      	str	r2, [sp, #16]
 8001958:	225a      	movs	r2, #90	; 0x5a
 800195a:	9203      	str	r2, [sp, #12]
 800195c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001960:	9202      	str	r2, [sp, #8]
 8001962:	9301      	str	r3, [sp, #4]
 8001964:	2300      	movs	r3, #0
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	235a      	movs	r3, #90	; 0x5a
 800196a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800196e:	2000      	movs	r0, #0
 8001970:	f7ff fc80 	bl	8001274 <ControlDriver>
		 osDelay(500);
 8001974:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001978:	f003 fae1 	bl	8004f3e <osDelay>
		 ControlDriver(0, 1, 0, 90, 0, 1, 0, 90,0, 1, 0, 90);
 800197c:	235a      	movs	r3, #90	; 0x5a
 800197e:	9307      	str	r3, [sp, #28]
 8001980:	2300      	movs	r3, #0
 8001982:	9306      	str	r3, [sp, #24]
 8001984:	2301      	movs	r3, #1
 8001986:	9305      	str	r3, [sp, #20]
 8001988:	2300      	movs	r3, #0
 800198a:	9304      	str	r3, [sp, #16]
 800198c:	235a      	movs	r3, #90	; 0x5a
 800198e:	9303      	str	r3, [sp, #12]
 8001990:	2300      	movs	r3, #0
 8001992:	9302      	str	r3, [sp, #8]
 8001994:	2301      	movs	r3, #1
 8001996:	9301      	str	r3, [sp, #4]
 8001998:	2300      	movs	r3, #0
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	235a      	movs	r3, #90	; 0x5a
 800199e:	2200      	movs	r2, #0
 80019a0:	2101      	movs	r1, #1
 80019a2:	2000      	movs	r0, #0
 80019a4:	f7ff fc66 	bl	8001274 <ControlDriver>
		 osDelay(1000);
 80019a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019ac:	f003 fac7 	bl	8004f3e <osDelay>
		 goc_target2 = 0;
 80019b0:	4b5c      	ldr	r3, [pc, #368]	; (8001b24 <StartDefaultTask+0x2c4>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
		 RotatePid = 1;
 80019b6:	4b58      	ldr	r3, [pc, #352]	; (8001b18 <StartDefaultTask+0x2b8>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	601a      	str	r2, [r3, #0]
		  DangThucThi = 1;
 80019bc:	4b52      	ldr	r3, [pc, #328]	; (8001b08 <StartDefaultTask+0x2a8>)
 80019be:	2201      	movs	r2, #1
 80019c0:	601a      	str	r2, [r3, #0]
	  }

////
	  /*Nhấn nút F2*/
	  if(DataTayGame[7] == 64 && !DangThucThi){
 80019c2:	4b50      	ldr	r3, [pc, #320]	; (8001b04 <StartDefaultTask+0x2a4>)
 80019c4:	79db      	ldrb	r3, [r3, #7]
 80019c6:	2b40      	cmp	r3, #64	; 0x40
 80019c8:	d13c      	bne.n	8001a44 <StartDefaultTask+0x1e4>
 80019ca:	4b4f      	ldr	r3, [pc, #316]	; (8001b08 <StartDefaultTask+0x2a8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d138      	bne.n	8001a44 <StartDefaultTask+0x1e4>
		  forward = 0;
 80019d2:	4b50      	ldr	r3, [pc, #320]	; (8001b14 <StartDefaultTask+0x2b4>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
		  RotatePid = 0;
 80019d8:	4b4f      	ldr	r3, [pc, #316]	; (8001b18 <StartDefaultTask+0x2b8>)
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
		  ControlDriver(3, 1, 0, 92, 3, 1, 0, 92, 3, 1, 0, 95);
 80019de:	235f      	movs	r3, #95	; 0x5f
 80019e0:	9307      	str	r3, [sp, #28]
 80019e2:	2300      	movs	r3, #0
 80019e4:	9306      	str	r3, [sp, #24]
 80019e6:	2301      	movs	r3, #1
 80019e8:	9305      	str	r3, [sp, #20]
 80019ea:	2303      	movs	r3, #3
 80019ec:	9304      	str	r3, [sp, #16]
 80019ee:	235c      	movs	r3, #92	; 0x5c
 80019f0:	9303      	str	r3, [sp, #12]
 80019f2:	2300      	movs	r3, #0
 80019f4:	9302      	str	r3, [sp, #8]
 80019f6:	2301      	movs	r3, #1
 80019f8:	9301      	str	r3, [sp, #4]
 80019fa:	2303      	movs	r3, #3
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	235c      	movs	r3, #92	; 0x5c
 8001a00:	2200      	movs	r2, #0
 8001a02:	2101      	movs	r1, #1
 8001a04:	2003      	movs	r0, #3
 8001a06:	f7ff fc35 	bl	8001274 <ControlDriver>
		  osDelay(3000);
 8001a0a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a0e:	f003 fa96 	bl	8004f3e <osDelay>
		  ControlDriver(0, 1, 0, 90, 0, 1, 0, 90, 0, 1, 0, 90);
 8001a12:	235a      	movs	r3, #90	; 0x5a
 8001a14:	9307      	str	r3, [sp, #28]
 8001a16:	2300      	movs	r3, #0
 8001a18:	9306      	str	r3, [sp, #24]
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	9305      	str	r3, [sp, #20]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	9304      	str	r3, [sp, #16]
 8001a22:	235a      	movs	r3, #90	; 0x5a
 8001a24:	9303      	str	r3, [sp, #12]
 8001a26:	2300      	movs	r3, #0
 8001a28:	9302      	str	r3, [sp, #8]
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	9301      	str	r3, [sp, #4]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	235a      	movs	r3, #90	; 0x5a
 8001a34:	2200      	movs	r2, #0
 8001a36:	2101      	movs	r1, #1
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f7ff fc1b 	bl	8001274 <ControlDriver>
	  	  DangThucThi = 1;
 8001a3e:	4b32      	ldr	r3, [pc, #200]	; (8001b08 <StartDefaultTask+0x2a8>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	601a      	str	r2, [r3, #0]
	  }
////
////	  /*Nhấn nút F3*/
		  if(DataTayGame[7] == 32 && !DangThucThi){
 8001a44:	4b2f      	ldr	r3, [pc, #188]	; (8001b04 <StartDefaultTask+0x2a4>)
 8001a46:	79db      	ldrb	r3, [r3, #7]
 8001a48:	2b20      	cmp	r3, #32
 8001a4a:	d123      	bne.n	8001a94 <StartDefaultTask+0x234>
 8001a4c:	4b2e      	ldr	r3, [pc, #184]	; (8001b08 <StartDefaultTask+0x2a8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d11f      	bne.n	8001a94 <StartDefaultTask+0x234>
			  forward = 0;
 8001a54:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <StartDefaultTask+0x2b4>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
			  RotatePid = 0;
 8001a5a:	4b2f      	ldr	r3, [pc, #188]	; (8001b18 <StartDefaultTask+0x2b8>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
			  ControlDriver(0, 1, 0, 60, 0, -1, 0, 120, 0, 1, 0, 180);
 8001a60:	23b4      	movs	r3, #180	; 0xb4
 8001a62:	9307      	str	r3, [sp, #28]
 8001a64:	2300      	movs	r3, #0
 8001a66:	9306      	str	r3, [sp, #24]
 8001a68:	2301      	movs	r3, #1
 8001a6a:	9305      	str	r3, [sp, #20]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9304      	str	r3, [sp, #16]
 8001a70:	2378      	movs	r3, #120	; 0x78
 8001a72:	9303      	str	r3, [sp, #12]
 8001a74:	2300      	movs	r3, #0
 8001a76:	9302      	str	r3, [sp, #8]
 8001a78:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	233c      	movs	r3, #60	; 0x3c
 8001a84:	2200      	movs	r2, #0
 8001a86:	2101      	movs	r1, #1
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f7ff fbf3 	bl	8001274 <ControlDriver>
			  DangThucThi = 1;
 8001a8e:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <StartDefaultTask+0x2a8>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	601a      	str	r2, [r3, #0]
		  }
////
//	  /*Nhấn nút F4*/
	  if(DataTayGame[7] == 16 && !DangThucThi){
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <StartDefaultTask+0x2a4>)
 8001a96:	79db      	ldrb	r3, [r3, #7]
 8001a98:	2b10      	cmp	r3, #16
 8001a9a:	d122      	bne.n	8001ae2 <StartDefaultTask+0x282>
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <StartDefaultTask+0x2a8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d11e      	bne.n	8001ae2 <StartDefaultTask+0x282>
		  forward = 0;
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <StartDefaultTask+0x2b4>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
		  RotatePid = 0;
 8001aaa:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <StartDefaultTask+0x2b8>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
		  ControlDriver(0, 1, 0, 90, 0, 1, 0, 90, 0, 1, 0, 90);
 8001ab0:	235a      	movs	r3, #90	; 0x5a
 8001ab2:	9307      	str	r3, [sp, #28]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9306      	str	r3, [sp, #24]
 8001ab8:	2301      	movs	r3, #1
 8001aba:	9305      	str	r3, [sp, #20]
 8001abc:	2300      	movs	r3, #0
 8001abe:	9304      	str	r3, [sp, #16]
 8001ac0:	235a      	movs	r3, #90	; 0x5a
 8001ac2:	9303      	str	r3, [sp, #12]
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	9302      	str	r3, [sp, #8]
 8001ac8:	2301      	movs	r3, #1
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	2300      	movs	r3, #0
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	235a      	movs	r3, #90	; 0x5a
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f7ff fbcc 	bl	8001274 <ControlDriver>
	  	  DangThucThi = 1;
 8001adc:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <StartDefaultTask+0x2a8>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]




	  /*Nhấn nút F5*/
	  if(DataTayGame[7] == 8 && !DangThucThi){
 8001ae2:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <StartDefaultTask+0x2a4>)
 8001ae4:	79db      	ldrb	r3, [r3, #7]
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d15f      	bne.n	8001baa <StartDefaultTask+0x34a>
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <StartDefaultTask+0x2a8>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d15b      	bne.n	8001baa <StartDefaultTask+0x34a>
		  	  	  forward = 0;
 8001af2:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <StartDefaultTask+0x2b4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
		  		  RotatePid = 0;
 8001af8:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <StartDefaultTask+0x2b8>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
		  		 ControlDriver(0, dir3, 2000, 90, 0, dir3, 2000, 90,0, dir3, 2000, 90);
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <StartDefaultTask+0x2bc>)
 8001b00:	6819      	ldr	r1, [r3, #0]
 8001b02:	e011      	b.n	8001b28 <StartDefaultTask+0x2c8>
 8001b04:	200004f4 	.word	0x200004f4
 8001b08:	20000504 	.word	0x20000504
 8001b0c:	2000047c 	.word	0x2000047c
 8001b10:	20000530 	.word	0x20000530
 8001b14:	20000484 	.word	0x20000484
 8001b18:	200004c8 	.word	0x200004c8
 8001b1c:	2000052c 	.word	0x2000052c
 8001b20:	2000048c 	.word	0x2000048c
 8001b24:	20000488 	.word	0x20000488
 8001b28:	4b48      	ldr	r3, [pc, #288]	; (8001c4c <StartDefaultTask+0x3ec>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a47      	ldr	r2, [pc, #284]	; (8001c4c <StartDefaultTask+0x3ec>)
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	205a      	movs	r0, #90	; 0x5a
 8001b32:	9007      	str	r0, [sp, #28]
 8001b34:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b38:	9006      	str	r0, [sp, #24]
 8001b3a:	9205      	str	r2, [sp, #20]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	9204      	str	r2, [sp, #16]
 8001b40:	225a      	movs	r2, #90	; 0x5a
 8001b42:	9203      	str	r2, [sp, #12]
 8001b44:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b48:	9202      	str	r2, [sp, #8]
 8001b4a:	9301      	str	r3, [sp, #4]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	235a      	movs	r3, #90	; 0x5a
 8001b52:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b56:	2000      	movs	r0, #0
 8001b58:	f7ff fb8c 	bl	8001274 <ControlDriver>
		  		 osDelay(400);
 8001b5c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001b60:	f003 f9ed 	bl	8004f3e <osDelay>
		  		 ControlDriver(0, 1, 0, 90, 0, 1, 0, 90,0, 1, 0, 90);
 8001b64:	235a      	movs	r3, #90	; 0x5a
 8001b66:	9307      	str	r3, [sp, #28]
 8001b68:	2300      	movs	r3, #0
 8001b6a:	9306      	str	r3, [sp, #24]
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	9305      	str	r3, [sp, #20]
 8001b70:	2300      	movs	r3, #0
 8001b72:	9304      	str	r3, [sp, #16]
 8001b74:	235a      	movs	r3, #90	; 0x5a
 8001b76:	9303      	str	r3, [sp, #12]
 8001b78:	2300      	movs	r3, #0
 8001b7a:	9302      	str	r3, [sp, #8]
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	2300      	movs	r3, #0
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	235a      	movs	r3, #90	; 0x5a
 8001b86:	2200      	movs	r2, #0
 8001b88:	2101      	movs	r1, #1
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f7ff fb72 	bl	8001274 <ControlDriver>
		  		 osDelay(1000);
 8001b90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b94:	f003 f9d3 	bl	8004f3e <osDelay>
		  		 goc_target2 = 0;
 8001b98:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <StartDefaultTask+0x3f0>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
		  		 RotatePid = 1;
 8001b9e:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <StartDefaultTask+0x3f4>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]
	  	  DangThucThi = 1;
 8001ba4:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <StartDefaultTask+0x3f8>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]
	  }
//
	  /*Nhấn nút F8*/
	  if(DataTayGame[7] == 4 && !DangThucThi){
 8001baa:	4b2c      	ldr	r3, [pc, #176]	; (8001c5c <StartDefaultTask+0x3fc>)
 8001bac:	79db      	ldrb	r3, [r3, #7]
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d141      	bne.n	8001c36 <StartDefaultTask+0x3d6>
 8001bb2:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <StartDefaultTask+0x3f8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d13d      	bne.n	8001c36 <StartDefaultTask+0x3d6>
		  i1+=1;
 8001bba:	4b29      	ldr	r3, [pc, #164]	; (8001c60 <StartDefaultTask+0x400>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	4a27      	ldr	r2, [pc, #156]	; (8001c60 <StartDefaultTask+0x400>)
 8001bc2:	6013      	str	r3, [r2, #0]
		  if((i1%2 == 0)&&(i1 != 0)){
 8001bc4:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <StartDefaultTask+0x400>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d107      	bne.n	8001be0 <StartDefaultTask+0x380>
 8001bd0:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <StartDefaultTask+0x400>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <StartDefaultTask+0x380>
			  goc_target2 = 0;
 8001bd8:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <StartDefaultTask+0x3f0>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	e009      	b.n	8001bf4 <StartDefaultTask+0x394>
		  }
		  else if(i1%2 != 0 ){
 8001be0:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <StartDefaultTask+0x400>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <StartDefaultTask+0x394>
			  goc_target2 = -35;
 8001bec:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <StartDefaultTask+0x3f0>)
 8001bee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001bf2:	601a      	str	r2, [r3, #0]
		  }

		  forward = 0;
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <StartDefaultTask+0x404>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
		  ControlDriver(0, 1, 0, 60, 0, -1, 0, 120, 0, 1, 0, 180);
 8001bfa:	23b4      	movs	r3, #180	; 0xb4
 8001bfc:	9307      	str	r3, [sp, #28]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	9306      	str	r3, [sp, #24]
 8001c02:	2301      	movs	r3, #1
 8001c04:	9305      	str	r3, [sp, #20]
 8001c06:	2300      	movs	r3, #0
 8001c08:	9304      	str	r3, [sp, #16]
 8001c0a:	2378      	movs	r3, #120	; 0x78
 8001c0c:	9303      	str	r3, [sp, #12]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	9302      	str	r3, [sp, #8]
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	2300      	movs	r3, #0
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	233c      	movs	r3, #60	; 0x3c
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2101      	movs	r1, #1
 8001c22:	2000      	movs	r0, #0
 8001c24:	f7ff fb26 	bl	8001274 <ControlDriver>
		  osDelay(1000);
 8001c28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c2c:	f003 f987 	bl	8004f3e <osDelay>
		  RotatePid = 1;
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <StartDefaultTask+0x3f4>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]
//		  ControlDriver(0, -1, 500, 60, 0, 1, 500, 120, 0, -1, 500, 180);
//
//		  DangThucThi = 1;
	  }

	  if(DataTayGame[7] == 0){
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <StartDefaultTask+0x3fc>)
 8001c38:	79db      	ldrb	r3, [r3, #7]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d102      	bne.n	8001c44 <StartDefaultTask+0x3e4>
		  DangThucThi = 0;
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <StartDefaultTask+0x3f8>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
	  }

	  osDelay(1);
 8001c44:	2001      	movs	r0, #1
 8001c46:	f003 f97a 	bl	8004f3e <osDelay>
	  if(DataTayGame[7] == 128 && !DangThucThi){
 8001c4a:	e60d      	b.n	8001868 <StartDefaultTask+0x8>
 8001c4c:	2000052c 	.word	0x2000052c
 8001c50:	20000488 	.word	0x20000488
 8001c54:	200004c8 	.word	0x200004c8
 8001c58:	20000504 	.word	0x20000504
 8001c5c:	200004f4 	.word	0x200004f4
 8001c60:	20000534 	.word	0x20000534
 8001c64:	20000484 	.word	0x20000484

08001c68 <TaskBlinkLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskBlinkLed */
void TaskBlinkLed(void const * argument)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
//	  System.CompassStatus = HAL_GPIO_ReadPin(CompassReady_GPIO_Port, CompassReady_Pin);
	  if(GocRobot != -999){
 8001c70:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <TaskBlinkLed+0x40>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <TaskBlinkLed+0x44>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d00a      	beq.n	8001c90 <TaskBlinkLed+0x28>
		  System.CompassStatus = 1;
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <TaskBlinkLed+0x48>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	605a      	str	r2, [r3, #4]
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001c80:	2102      	movs	r1, #2
 8001c82:	480c      	ldr	r0, [pc, #48]	; (8001cb4 <TaskBlinkLed+0x4c>)
 8001c84:	f000 ff11 	bl	8002aaa <HAL_GPIO_TogglePin>
		  osDelay(50);
 8001c88:	2032      	movs	r0, #50	; 0x32
 8001c8a:	f003 f958 	bl	8004f3e <osDelay>
 8001c8e:	e7ef      	b.n	8001c70 <TaskBlinkLed+0x8>
	  }
	  else {
		  System.CompassStatus = 0;
 8001c90:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <TaskBlinkLed+0x48>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	605a      	str	r2, [r3, #4]
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001c96:	2102      	movs	r1, #2
 8001c98:	4806      	ldr	r0, [pc, #24]	; (8001cb4 <TaskBlinkLed+0x4c>)
 8001c9a:	f000 ff06 	bl	8002aaa <HAL_GPIO_TogglePin>
		  osDelay(500);
 8001c9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ca2:	f003 f94c 	bl	8004f3e <osDelay>
	  if(GocRobot != -999){
 8001ca6:	e7e3      	b.n	8001c70 <TaskBlinkLed+0x8>
 8001ca8:	20000500 	.word	0x20000500
 8001cac:	fffffc19 	.word	0xfffffc19
 8001cb0:	200004e0 	.word	0x200004e0
 8001cb4:	40020000 	.word	0x40020000

08001cb8 <TaskUART>:
*/

char DebugStr[200];
/* USER CODE END Header_TaskUART */
void TaskUART(void const * argument)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	  snprintf(DebugStr, "{GocRobot: %d, U: %d, E: %d, EI: %d}", GocRobot, u, e, ei);
//	  HAL_UART_Transmit(&huart3, (uint8_t *) DebugStr, 199, 1000);
	  osDelay(100);
 8001cc0:	2064      	movs	r0, #100	; 0x64
 8001cc2:	f003 f93c 	bl	8004f3e <osDelay>
 8001cc6:	e7fb      	b.n	8001cc0 <TaskUART+0x8>

08001cc8 <TaskXoayLaBan>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskXoayLaBan */
void TaskXoayLaBan(void const * argument)
{
 8001cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cca:	b08b      	sub	sp, #44	; 0x2c
 8001ccc:	af08      	add	r7, sp, #32
 8001cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskXoayLaBan */
  /* Infinite loop */
  for(;;)
  {
	  if(forward % 2 != 0){
 8001cd0:	4b89      	ldr	r3, [pc, #548]	; (8001ef8 <TaskXoayLaBan+0x230>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d06d      	beq.n	8001db8 <TaskXoayLaBan+0xf0>
	  		  ControlDriver(0, -1, 400, (90-1.5*e1), 0, -1, 400, (90-1.5*e1), 0, -1, 400, (90+1.5*e1));
 8001cdc:	4b87      	ldr	r3, [pc, #540]	; (8001efc <TaskXoayLaBan+0x234>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fbc7 	bl	8000474 <__aeabi_i2d>
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	4b85      	ldr	r3, [pc, #532]	; (8001f00 <TaskXoayLaBan+0x238>)
 8001cec:	f7fe fc2c 	bl	8000548 <__aeabi_dmul>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	f04f 0000 	mov.w	r0, #0
 8001cf8:	4982      	ldr	r1, [pc, #520]	; (8001f04 <TaskXoayLaBan+0x23c>)
 8001cfa:	f7fe fa6d 	bl	80001d8 <__aeabi_dsub>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f7fe fee1 	bl	8000acc <__aeabi_d2uiz>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	b29d      	uxth	r5, r3
 8001d0e:	4b7b      	ldr	r3, [pc, #492]	; (8001efc <TaskXoayLaBan+0x234>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fbae 	bl	8000474 <__aeabi_i2d>
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	4b78      	ldr	r3, [pc, #480]	; (8001f00 <TaskXoayLaBan+0x238>)
 8001d1e:	f7fe fc13 	bl	8000548 <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	f04f 0000 	mov.w	r0, #0
 8001d2a:	4976      	ldr	r1, [pc, #472]	; (8001f04 <TaskXoayLaBan+0x23c>)
 8001d2c:	f7fe fa54 	bl	80001d8 <__aeabi_dsub>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4610      	mov	r0, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	f7fe fec8 	bl	8000acc <__aeabi_d2uiz>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	b29c      	uxth	r4, r3
 8001d40:	4b6e      	ldr	r3, [pc, #440]	; (8001efc <TaskXoayLaBan+0x234>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fb95 	bl	8000474 <__aeabi_i2d>
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	4b6c      	ldr	r3, [pc, #432]	; (8001f00 <TaskXoayLaBan+0x238>)
 8001d50:	f7fe fbfa 	bl	8000548 <__aeabi_dmul>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	4b68      	ldr	r3, [pc, #416]	; (8001f04 <TaskXoayLaBan+0x23c>)
 8001d62:	f7fe fa3b 	bl	80001dc <__adddf3>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f7fe fead 	bl	8000acc <__aeabi_d2uiz>
 8001d72:	4603      	mov	r3, r0
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	9307      	str	r3, [sp, #28]
 8001d78:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001d7c:	9306      	str	r3, [sp, #24]
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d82:	9305      	str	r3, [sp, #20]
 8001d84:	2300      	movs	r3, #0
 8001d86:	9304      	str	r3, [sp, #16]
 8001d88:	9403      	str	r4, [sp, #12]
 8001d8a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001d8e:	9302      	str	r3, [sp, #8]
 8001d90:	f04f 33ff 	mov.w	r3, #4294967295
 8001d94:	9301      	str	r3, [sp, #4]
 8001d96:	2300      	movs	r3, #0
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	462b      	mov	r3, r5
 8001d9c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001da0:	f04f 31ff 	mov.w	r1, #4294967295
 8001da4:	2000      	movs	r0, #0
 8001da6:	f7ff fa65 	bl	8001274 <ControlDriver>
	  		  dir3 = 1;
 8001daa:	4b57      	ldr	r3, [pc, #348]	; (8001f08 <TaskXoayLaBan+0x240>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	601a      	str	r2, [r3, #0]
	  		  osDelay(1);
 8001db0:	2001      	movs	r0, #1
 8001db2:	f003 f8c4 	bl	8004f3e <osDelay>
 8001db6:	e002      	b.n	8001dbe <TaskXoayLaBan+0xf6>
	  	  }
	  else{
		  osDelay(1);
 8001db8:	2001      	movs	r0, #1
 8001dba:	f003 f8c0 	bl	8004f3e <osDelay>
	  }
	  if(RotatePid == 1){
 8001dbe:	4b53      	ldr	r3, [pc, #332]	; (8001f0c <TaskXoayLaBan+0x244>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d11e      	bne.n	8001e04 <TaskXoayLaBan+0x13c>
		  ControlDriver(0, Dir2, pwm, 60, 2, -Dir2, pwm, 120, 2, Dir2, pwm, 180);
 8001dc6:	4b52      	ldr	r3, [pc, #328]	; (8001f10 <TaskXoayLaBan+0x248>)
 8001dc8:	681c      	ldr	r4, [r3, #0]
 8001dca:	4b52      	ldr	r3, [pc, #328]	; (8001f14 <TaskXoayLaBan+0x24c>)
 8001dcc:	881d      	ldrh	r5, [r3, #0]
 8001dce:	4b50      	ldr	r3, [pc, #320]	; (8001f10 <TaskXoayLaBan+0x248>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	425b      	negs	r3, r3
 8001dd4:	4a4f      	ldr	r2, [pc, #316]	; (8001f14 <TaskXoayLaBan+0x24c>)
 8001dd6:	8812      	ldrh	r2, [r2, #0]
 8001dd8:	494d      	ldr	r1, [pc, #308]	; (8001f10 <TaskXoayLaBan+0x248>)
 8001dda:	6809      	ldr	r1, [r1, #0]
 8001ddc:	484d      	ldr	r0, [pc, #308]	; (8001f14 <TaskXoayLaBan+0x24c>)
 8001dde:	8800      	ldrh	r0, [r0, #0]
 8001de0:	26b4      	movs	r6, #180	; 0xb4
 8001de2:	9607      	str	r6, [sp, #28]
 8001de4:	9006      	str	r0, [sp, #24]
 8001de6:	9105      	str	r1, [sp, #20]
 8001de8:	2102      	movs	r1, #2
 8001dea:	9104      	str	r1, [sp, #16]
 8001dec:	2178      	movs	r1, #120	; 0x78
 8001dee:	9103      	str	r1, [sp, #12]
 8001df0:	9202      	str	r2, [sp, #8]
 8001df2:	9301      	str	r3, [sp, #4]
 8001df4:	2302      	movs	r3, #2
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	233c      	movs	r3, #60	; 0x3c
 8001dfa:	462a      	mov	r2, r5
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f7ff fa38 	bl	8001274 <ControlDriver>
	  }
	  if((forward % 2 == 0)&&(forward != 0)){
 8001e04:	4b3c      	ldr	r3, [pc, #240]	; (8001ef8 <TaskXoayLaBan+0x230>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f47f af5f 	bne.w	8001cd0 <TaskXoayLaBan+0x8>
 8001e12:	4b39      	ldr	r3, [pc, #228]	; (8001ef8 <TaskXoayLaBan+0x230>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f43f af5a 	beq.w	8001cd0 <TaskXoayLaBan+0x8>
		  ControlDriver(0, 1, 400, (90+1.5*e1), 0, 1, 400, (90+1.5*e1), 0, 1, 400, (90-1.5*e1));
 8001e1c:	4b37      	ldr	r3, [pc, #220]	; (8001efc <TaskXoayLaBan+0x234>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fb27 	bl	8000474 <__aeabi_i2d>
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	4b35      	ldr	r3, [pc, #212]	; (8001f00 <TaskXoayLaBan+0x238>)
 8001e2c:	f7fe fb8c 	bl	8000548 <__aeabi_dmul>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4610      	mov	r0, r2
 8001e36:	4619      	mov	r1, r3
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	4b31      	ldr	r3, [pc, #196]	; (8001f04 <TaskXoayLaBan+0x23c>)
 8001e3e:	f7fe f9cd 	bl	80001dc <__adddf3>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f7fe fe3f 	bl	8000acc <__aeabi_d2uiz>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	b29d      	uxth	r5, r3
 8001e52:	4b2a      	ldr	r3, [pc, #168]	; (8001efc <TaskXoayLaBan+0x234>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fb0c 	bl	8000474 <__aeabi_i2d>
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <TaskXoayLaBan+0x238>)
 8001e62:	f7fe fb71 	bl	8000548 <__aeabi_dmul>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	4b24      	ldr	r3, [pc, #144]	; (8001f04 <TaskXoayLaBan+0x23c>)
 8001e74:	f7fe f9b2 	bl	80001dc <__adddf3>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f7fe fe24 	bl	8000acc <__aeabi_d2uiz>
 8001e84:	4603      	mov	r3, r0
 8001e86:	b29c      	uxth	r4, r3
 8001e88:	4b1c      	ldr	r3, [pc, #112]	; (8001efc <TaskXoayLaBan+0x234>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe faf1 	bl	8000474 <__aeabi_i2d>
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <TaskXoayLaBan+0x238>)
 8001e98:	f7fe fb56 	bl	8000548 <__aeabi_dmul>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	f04f 0000 	mov.w	r0, #0
 8001ea4:	4917      	ldr	r1, [pc, #92]	; (8001f04 <TaskXoayLaBan+0x23c>)
 8001ea6:	f7fe f997 	bl	80001d8 <__aeabi_dsub>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f7fe fe0b 	bl	8000acc <__aeabi_d2uiz>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	9307      	str	r3, [sp, #28]
 8001ebc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001ec0:	9306      	str	r3, [sp, #24]
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	9305      	str	r3, [sp, #20]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	9304      	str	r3, [sp, #16]
 8001eca:	9403      	str	r4, [sp, #12]
 8001ecc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001ed0:	9302      	str	r3, [sp, #8]
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	9301      	str	r3, [sp, #4]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	462b      	mov	r3, r5
 8001edc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f7ff f9c6 	bl	8001274 <ControlDriver>
		  dir3 = -1;
 8001ee8:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <TaskXoayLaBan+0x240>)
 8001eea:	f04f 32ff 	mov.w	r2, #4294967295
 8001eee:	601a      	str	r2, [r3, #0]
		  osDelay(1);
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	f003 f824 	bl	8004f3e <osDelay>
	  if(forward % 2 != 0){
 8001ef6:	e6eb      	b.n	8001cd0 <TaskXoayLaBan+0x8>
 8001ef8:	20000484 	.word	0x20000484
 8001efc:	2000048c 	.word	0x2000048c
 8001f00:	3ff80000 	.word	0x3ff80000
 8001f04:	40568000 	.word	0x40568000
 8001f08:	2000052c 	.word	0x2000052c
 8001f0c:	200004c8 	.word	0x200004c8
 8001f10:	200004cc 	.word	0x200004cc
 8001f14:	200004d0 	.word	0x200004d0

08001f18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d101      	bne.n	8001f2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f2a:	f000 fa51 	bl	80023d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  goc_hientai = GocRobot;
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001f34:	6013      	str	r3, [r2, #0]
  e1 = goc_target - goc_hientai;
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	4a07      	ldr	r2, [pc, #28]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001f42:	6013      	str	r3, [r2, #0]
  Pid_cal();
 8001f44:	f7fe ff80 	bl	8000e48 <Pid_cal>
  /* USER CODE END Callback 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40000800 	.word	0x40000800
 8001f54:	20000500 	.word	0x20000500
 8001f58:	20000480 	.word	0x20000480
 8001f5c:	2000047c 	.word	0x2000047c
 8001f60:	2000048c 	.word	0x2000048c

08001f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f68:	b672      	cpsid	i
}
 8001f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <Error_Handler+0x8>
	...

08001f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_MspInit+0x54>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	4a11      	ldr	r2, [pc, #68]	; (8001fc4 <HAL_MspInit+0x54>)
 8001f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f84:	6453      	str	r3, [r2, #68]	; 0x44
 8001f86:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <HAL_MspInit+0x54>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	603b      	str	r3, [r7, #0]
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_MspInit+0x54>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <HAL_MspInit+0x54>)
 8001f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_MspInit+0x54>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	210f      	movs	r1, #15
 8001fb2:	f06f 0001 	mvn.w	r0, #1
 8001fb6:	f000 fb07 	bl	80025c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800

08001fc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd8:	d10d      	bne.n	8001ff6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	4b09      	ldr	r3, [pc, #36]	; (8002004 <HAL_TIM_Base_MspInit+0x3c>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	4a08      	ldr	r2, [pc, #32]	; (8002004 <HAL_TIM_Base_MspInit+0x3c>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_TIM_Base_MspInit+0x3c>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800

08002008 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08e      	sub	sp, #56	; 0x38
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a58      	ldr	r2, [pc, #352]	; (8002188 <HAL_UART_MspInit+0x180>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d135      	bne.n	8002096 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]
 800202e:	4b57      	ldr	r3, [pc, #348]	; (800218c <HAL_UART_MspInit+0x184>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4a56      	ldr	r2, [pc, #344]	; (800218c <HAL_UART_MspInit+0x184>)
 8002034:	f043 0310 	orr.w	r3, r3, #16
 8002038:	6453      	str	r3, [r2, #68]	; 0x44
 800203a:	4b54      	ldr	r3, [pc, #336]	; (800218c <HAL_UART_MspInit+0x184>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	623b      	str	r3, [r7, #32]
 8002044:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	4b50      	ldr	r3, [pc, #320]	; (800218c <HAL_UART_MspInit+0x184>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a4f      	ldr	r2, [pc, #316]	; (800218c <HAL_UART_MspInit+0x184>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b4d      	ldr	r3, [pc, #308]	; (800218c <HAL_UART_MspInit+0x184>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	61fb      	str	r3, [r7, #28]
 8002060:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002062:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002070:	2303      	movs	r3, #3
 8002072:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002074:	2307      	movs	r3, #7
 8002076:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207c:	4619      	mov	r1, r3
 800207e:	4844      	ldr	r0, [pc, #272]	; (8002190 <HAL_UART_MspInit+0x188>)
 8002080:	f000 fb5e 	bl	8002740 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002084:	2200      	movs	r2, #0
 8002086:	2105      	movs	r1, #5
 8002088:	2025      	movs	r0, #37	; 0x25
 800208a:	f000 fa9d 	bl	80025c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800208e:	2025      	movs	r0, #37	; 0x25
 8002090:	f000 fab6 	bl	8002600 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002094:	e073      	b.n	800217e <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a3e      	ldr	r2, [pc, #248]	; (8002194 <HAL_UART_MspInit+0x18c>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d134      	bne.n	800210a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020a0:	2300      	movs	r3, #0
 80020a2:	61bb      	str	r3, [r7, #24]
 80020a4:	4b39      	ldr	r3, [pc, #228]	; (800218c <HAL_UART_MspInit+0x184>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	4a38      	ldr	r2, [pc, #224]	; (800218c <HAL_UART_MspInit+0x184>)
 80020aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ae:	6413      	str	r3, [r2, #64]	; 0x40
 80020b0:	4b36      	ldr	r3, [pc, #216]	; (800218c <HAL_UART_MspInit+0x184>)
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b8:	61bb      	str	r3, [r7, #24]
 80020ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	4b32      	ldr	r3, [pc, #200]	; (800218c <HAL_UART_MspInit+0x184>)
 80020c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c4:	4a31      	ldr	r2, [pc, #196]	; (800218c <HAL_UART_MspInit+0x184>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6313      	str	r3, [r2, #48]	; 0x30
 80020cc:	4b2f      	ldr	r3, [pc, #188]	; (800218c <HAL_UART_MspInit+0x184>)
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020d8:	230c      	movs	r3, #12
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e4:	2303      	movs	r3, #3
 80020e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020e8:	2307      	movs	r3, #7
 80020ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f0:	4619      	mov	r1, r3
 80020f2:	4827      	ldr	r0, [pc, #156]	; (8002190 <HAL_UART_MspInit+0x188>)
 80020f4:	f000 fb24 	bl	8002740 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2105      	movs	r1, #5
 80020fc:	2026      	movs	r0, #38	; 0x26
 80020fe:	f000 fa63 	bl	80025c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002102:	2026      	movs	r0, #38	; 0x26
 8002104:	f000 fa7c 	bl	8002600 <HAL_NVIC_EnableIRQ>
}
 8002108:	e039      	b.n	800217e <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART3)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a22      	ldr	r2, [pc, #136]	; (8002198 <HAL_UART_MspInit+0x190>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d134      	bne.n	800217e <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002114:	2300      	movs	r3, #0
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	4b1c      	ldr	r3, [pc, #112]	; (800218c <HAL_UART_MspInit+0x184>)
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	4a1b      	ldr	r2, [pc, #108]	; (800218c <HAL_UART_MspInit+0x184>)
 800211e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002122:	6413      	str	r3, [r2, #64]	; 0x40
 8002124:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_UART_MspInit+0x184>)
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002130:	2300      	movs	r3, #0
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	4b15      	ldr	r3, [pc, #84]	; (800218c <HAL_UART_MspInit+0x184>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	4a14      	ldr	r2, [pc, #80]	; (800218c <HAL_UART_MspInit+0x184>)
 800213a:	f043 0302 	orr.w	r3, r3, #2
 800213e:	6313      	str	r3, [r2, #48]	; 0x30
 8002140:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_UART_MspInit+0x184>)
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800214c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002152:	2302      	movs	r3, #2
 8002154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215a:	2303      	movs	r3, #3
 800215c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800215e:	2307      	movs	r3, #7
 8002160:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002166:	4619      	mov	r1, r3
 8002168:	480c      	ldr	r0, [pc, #48]	; (800219c <HAL_UART_MspInit+0x194>)
 800216a:	f000 fae9 	bl	8002740 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800216e:	2200      	movs	r2, #0
 8002170:	2105      	movs	r1, #5
 8002172:	2027      	movs	r0, #39	; 0x27
 8002174:	f000 fa28 	bl	80025c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002178:	2027      	movs	r0, #39	; 0x27
 800217a:	f000 fa41 	bl	8002600 <HAL_NVIC_EnableIRQ>
}
 800217e:	bf00      	nop
 8002180:	3738      	adds	r7, #56	; 0x38
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40011000 	.word	0x40011000
 800218c:	40023800 	.word	0x40023800
 8002190:	40020000 	.word	0x40020000
 8002194:	40004400 	.word	0x40004400
 8002198:	40004800 	.word	0x40004800
 800219c:	40020400 	.word	0x40020400

080021a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08e      	sub	sp, #56	; 0x38
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	4b33      	ldr	r3, [pc, #204]	; (8002284 <HAL_InitTick+0xe4>)
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	4a32      	ldr	r2, [pc, #200]	; (8002284 <HAL_InitTick+0xe4>)
 80021ba:	f043 0304 	orr.w	r3, r3, #4
 80021be:	6413      	str	r3, [r2, #64]	; 0x40
 80021c0:	4b30      	ldr	r3, [pc, #192]	; (8002284 <HAL_InitTick+0xe4>)
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021cc:	f107 0210 	add.w	r2, r7, #16
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	4611      	mov	r1, r2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f001 f91a 	bl	8003410 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80021e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d103      	bne.n	80021ee <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021e6:	f001 f8eb 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 80021ea:	6378      	str	r0, [r7, #52]	; 0x34
 80021ec:	e004      	b.n	80021f8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80021ee:	f001 f8e7 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 80021f2:	4603      	mov	r3, r0
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021fa:	4a23      	ldr	r2, [pc, #140]	; (8002288 <HAL_InitTick+0xe8>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	0c9b      	lsrs	r3, r3, #18
 8002202:	3b01      	subs	r3, #1
 8002204:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002206:	4b21      	ldr	r3, [pc, #132]	; (800228c <HAL_InitTick+0xec>)
 8002208:	4a21      	ldr	r2, [pc, #132]	; (8002290 <HAL_InitTick+0xf0>)
 800220a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800220c:	4b1f      	ldr	r3, [pc, #124]	; (800228c <HAL_InitTick+0xec>)
 800220e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002212:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002214:	4a1d      	ldr	r2, [pc, #116]	; (800228c <HAL_InitTick+0xec>)
 8002216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002218:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800221a:	4b1c      	ldr	r3, [pc, #112]	; (800228c <HAL_InitTick+0xec>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002220:	4b1a      	ldr	r3, [pc, #104]	; (800228c <HAL_InitTick+0xec>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002226:	4b19      	ldr	r3, [pc, #100]	; (800228c <HAL_InitTick+0xec>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800222c:	4817      	ldr	r0, [pc, #92]	; (800228c <HAL_InitTick+0xec>)
 800222e:	f001 f921 	bl	8003474 <HAL_TIM_Base_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002238:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800223c:	2b00      	cmp	r3, #0
 800223e:	d11b      	bne.n	8002278 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002240:	4812      	ldr	r0, [pc, #72]	; (800228c <HAL_InitTick+0xec>)
 8002242:	f001 f967 	bl	8003514 <HAL_TIM_Base_Start_IT>
 8002246:	4603      	mov	r3, r0
 8002248:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800224c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002250:	2b00      	cmp	r3, #0
 8002252:	d111      	bne.n	8002278 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002254:	201e      	movs	r0, #30
 8002256:	f000 f9d3 	bl	8002600 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b0f      	cmp	r3, #15
 800225e:	d808      	bhi.n	8002272 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002260:	2200      	movs	r2, #0
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	201e      	movs	r0, #30
 8002266:	f000 f9af 	bl	80025c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800226a:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <HAL_InitTick+0xf4>)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	e002      	b.n	8002278 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002278:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800227c:	4618      	mov	r0, r3
 800227e:	3738      	adds	r7, #56	; 0x38
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40023800 	.word	0x40023800
 8002288:	431bde83 	.word	0x431bde83
 800228c:	20000538 	.word	0x20000538
 8002290:	40000800 	.word	0x40000800
 8002294:	20000014 	.word	0x20000014

08002298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800229c:	e7fe      	b.n	800229c <NMI_Handler+0x4>

0800229e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a2:	e7fe      	b.n	80022a2 <HardFault_Handler+0x4>

080022a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a8:	e7fe      	b.n	80022a8 <MemManage_Handler+0x4>

080022aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ae:	e7fe      	b.n	80022ae <BusFault_Handler+0x4>

080022b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b4:	e7fe      	b.n	80022b4 <UsageFault_Handler+0x4>

080022b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80022c8:	4802      	ldr	r0, [pc, #8]	; (80022d4 <TIM4_IRQHandler+0x10>)
 80022ca:	f001 f993 	bl	80035f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000538 	.word	0x20000538

080022d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <USART1_IRQHandler+0x10>)
 80022de:	f001 fe5b 	bl	8003f98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200003a0 	.word	0x200003a0

080022ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022f0:	4802      	ldr	r0, [pc, #8]	; (80022fc <USART2_IRQHandler+0x10>)
 80022f2:	f001 fe51 	bl	8003f98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200003e4 	.word	0x200003e4

08002300 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <USART3_IRQHandler+0x10>)
 8002306:	f001 fe47 	bl	8003f98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000428 	.word	0x20000428

08002314 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <SystemInit+0x20>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231e:	4a05      	ldr	r2, [pc, #20]	; (8002334 <SystemInit+0x20>)
 8002320:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002324:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}/**
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002338:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002370 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800233c:	480d      	ldr	r0, [pc, #52]	; (8002374 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800233e:	490e      	ldr	r1, [pc, #56]	; (8002378 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002340:	4a0e      	ldr	r2, [pc, #56]	; (800237c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002344:	e002      	b.n	800234c <LoopCopyDataInit>

08002346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800234a:	3304      	adds	r3, #4

0800234c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800234c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800234e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002350:	d3f9      	bcc.n	8002346 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002352:	4a0b      	ldr	r2, [pc, #44]	; (8002380 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002354:	4c0b      	ldr	r4, [pc, #44]	; (8002384 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002358:	e001      	b.n	800235e <LoopFillZerobss>

0800235a <FillZerobss>:
FillZerobss:
  str  r3, [r2]
 800235a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800235c:	3204      	adds	r2, #4

0800235e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800235e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002360:	d3fb      	bcc.n	800235a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002362:	f7ff ffd7 	bl	8002314 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002366:	f003 fff9 	bl	800635c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800236a:	f7ff f843 	bl	80013f4 <main>
  bx  lr    
 800236e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002370:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002378:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800237c:	08006688 	.word	0x08006688
  ldr r2, =_sbss
 8002380:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002384:	200042e0 	.word	0x200042e0

08002388 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002388:	e7fe      	b.n	8002388 <ADC_IRQHandler>
	...

0800238c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002390:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <HAL_Init+0x40>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a0d      	ldr	r2, [pc, #52]	; (80023cc <HAL_Init+0x40>)
 8002396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800239a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800239c:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <HAL_Init+0x40>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <HAL_Init+0x40>)
 80023a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023a8:	4b08      	ldr	r3, [pc, #32]	; (80023cc <HAL_Init+0x40>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a07      	ldr	r2, [pc, #28]	; (80023cc <HAL_Init+0x40>)
 80023ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b4:	2003      	movs	r0, #3
 80023b6:	f000 f8fc 	bl	80025b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ba:	200f      	movs	r0, #15
 80023bc:	f7ff fef0 	bl	80021a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023c0:	f7ff fdd6 	bl	8001f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40023c00 	.word	0x40023c00

080023d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_IncTick+0x20>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_IncTick+0x24>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4413      	add	r3, r2
 80023e0:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <HAL_IncTick+0x24>)
 80023e2:	6013      	str	r3, [r2, #0]
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	20000018 	.word	0x20000018
 80023f4:	20000580 	.word	0x20000580

080023f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return uwTick;
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <HAL_GetTick+0x14>)
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000580 	.word	0x20000580

08002410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002418:	f7ff ffee 	bl	80023f8 <HAL_GetTick>
 800241c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002428:	d005      	beq.n	8002436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800242a:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <HAL_Delay+0x44>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4413      	add	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002436:	bf00      	nop
 8002438:	f7ff ffde 	bl	80023f8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	429a      	cmp	r2, r3
 8002446:	d8f7      	bhi.n	8002438 <HAL_Delay+0x28>
  {
  }
}
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000018 	.word	0x20000018

08002458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002474:	4013      	ands	r3, r2
 8002476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800248a:	4a04      	ldr	r2, [pc, #16]	; (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	60d3      	str	r3, [r2, #12]
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <__NVIC_GetPriorityGrouping+0x18>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	0a1b      	lsrs	r3, r3, #8
 80024aa:	f003 0307 	and.w	r3, r3, #7
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	db0b      	blt.n	80024e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	f003 021f 	and.w	r2, r3, #31
 80024d4:	4907      	ldr	r1, [pc, #28]	; (80024f4 <__NVIC_EnableIRQ+0x38>)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	2001      	movs	r0, #1
 80024de:	fa00 f202 	lsl.w	r2, r0, r2
 80024e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	e000e100 	.word	0xe000e100

080024f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	6039      	str	r1, [r7, #0]
 8002502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	2b00      	cmp	r3, #0
 800250a:	db0a      	blt.n	8002522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	490c      	ldr	r1, [pc, #48]	; (8002544 <__NVIC_SetPriority+0x4c>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	0112      	lsls	r2, r2, #4
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	440b      	add	r3, r1
 800251c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002520:	e00a      	b.n	8002538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	4908      	ldr	r1, [pc, #32]	; (8002548 <__NVIC_SetPriority+0x50>)
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	3b04      	subs	r3, #4
 8002530:	0112      	lsls	r2, r2, #4
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	440b      	add	r3, r1
 8002536:	761a      	strb	r2, [r3, #24]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000e100 	.word	0xe000e100
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	; 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f1c3 0307 	rsb	r3, r3, #7
 8002566:	2b04      	cmp	r3, #4
 8002568:	bf28      	it	cs
 800256a:	2304      	movcs	r3, #4
 800256c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3304      	adds	r3, #4
 8002572:	2b06      	cmp	r3, #6
 8002574:	d902      	bls.n	800257c <NVIC_EncodePriority+0x30>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3b03      	subs	r3, #3
 800257a:	e000      	b.n	800257e <NVIC_EncodePriority+0x32>
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	f04f 32ff 	mov.w	r2, #4294967295
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	401a      	ands	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002594:	f04f 31ff 	mov.w	r1, #4294967295
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	43d9      	mvns	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	4313      	orrs	r3, r2
         );
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3724      	adds	r7, #36	; 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff ff4c 	bl	8002458 <__NVIC_SetPriorityGrouping>
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025da:	f7ff ff61 	bl	80024a0 <__NVIC_GetPriorityGrouping>
 80025de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	68b9      	ldr	r1, [r7, #8]
 80025e4:	6978      	ldr	r0, [r7, #20]
 80025e6:	f7ff ffb1 	bl	800254c <NVIC_EncodePriority>
 80025ea:	4602      	mov	r2, r0
 80025ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025f0:	4611      	mov	r1, r2
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff ff80 	bl	80024f8 <__NVIC_SetPriority>
}
 80025f8:	bf00      	nop
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff ff54 	bl	80024bc <__NVIC_EnableIRQ>
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002628:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800262a:	f7ff fee5 	bl	80023f8 <HAL_GetTick>
 800262e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d008      	beq.n	800264e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2280      	movs	r2, #128	; 0x80
 8002640:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e052      	b.n	80026f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0216 	bic.w	r2, r2, #22
 800265c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	695a      	ldr	r2, [r3, #20]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800266c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	2b00      	cmp	r3, #0
 8002674:	d103      	bne.n	800267e <HAL_DMA_Abort+0x62>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800267a:	2b00      	cmp	r3, #0
 800267c:	d007      	beq.n	800268e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0208 	bic.w	r2, r2, #8
 800268c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0201 	bic.w	r2, r2, #1
 800269c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800269e:	e013      	b.n	80026c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026a0:	f7ff feaa 	bl	80023f8 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b05      	cmp	r3, #5
 80026ac:	d90c      	bls.n	80026c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2220      	movs	r2, #32
 80026b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2203      	movs	r2, #3
 80026b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e015      	b.n	80026f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1e4      	bne.n	80026a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026da:	223f      	movs	r2, #63	; 0x3f
 80026dc:	409a      	lsls	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d004      	beq.n	800271a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2280      	movs	r2, #128	; 0x80
 8002714:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e00c      	b.n	8002734 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2205      	movs	r2, #5
 800271e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0201 	bic.w	r2, r2, #1
 8002730:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002740:	b480      	push	{r7}
 8002742:	b089      	sub	sp, #36	; 0x24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800274e:	2300      	movs	r3, #0
 8002750:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	e16b      	b.n	8002a34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800275c:	2201      	movs	r2, #1
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	4013      	ands	r3, r2
 800276e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	429a      	cmp	r2, r3
 8002776:	f040 815a 	bne.w	8002a2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	2b01      	cmp	r3, #1
 8002784:	d005      	beq.n	8002792 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800278e:	2b02      	cmp	r3, #2
 8002790:	d130      	bne.n	80027f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	2203      	movs	r2, #3
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027c8:	2201      	movs	r2, #1
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	091b      	lsrs	r3, r3, #4
 80027de:	f003 0201 	and.w	r2, r3, #1
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d017      	beq.n	8002830 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	2203      	movs	r2, #3
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d123      	bne.n	8002884 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	08da      	lsrs	r2, r3, #3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3208      	adds	r2, #8
 8002844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002848:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	220f      	movs	r2, #15
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	08da      	lsrs	r2, r3, #3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3208      	adds	r2, #8
 800287e:	69b9      	ldr	r1, [r7, #24]
 8002880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	2203      	movs	r2, #3
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 0203 	and.w	r2, r3, #3
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 80b4 	beq.w	8002a2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	4b60      	ldr	r3, [pc, #384]	; (8002a4c <HAL_GPIO_Init+0x30c>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	4a5f      	ldr	r2, [pc, #380]	; (8002a4c <HAL_GPIO_Init+0x30c>)
 80028d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d4:	6453      	str	r3, [r2, #68]	; 0x44
 80028d6:	4b5d      	ldr	r3, [pc, #372]	; (8002a4c <HAL_GPIO_Init+0x30c>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028e2:	4a5b      	ldr	r2, [pc, #364]	; (8002a50 <HAL_GPIO_Init+0x310>)
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	089b      	lsrs	r3, r3, #2
 80028e8:	3302      	adds	r3, #2
 80028ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	220f      	movs	r2, #15
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4013      	ands	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a52      	ldr	r2, [pc, #328]	; (8002a54 <HAL_GPIO_Init+0x314>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d02b      	beq.n	8002966 <HAL_GPIO_Init+0x226>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a51      	ldr	r2, [pc, #324]	; (8002a58 <HAL_GPIO_Init+0x318>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d025      	beq.n	8002962 <HAL_GPIO_Init+0x222>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a50      	ldr	r2, [pc, #320]	; (8002a5c <HAL_GPIO_Init+0x31c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d01f      	beq.n	800295e <HAL_GPIO_Init+0x21e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4f      	ldr	r2, [pc, #316]	; (8002a60 <HAL_GPIO_Init+0x320>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d019      	beq.n	800295a <HAL_GPIO_Init+0x21a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4e      	ldr	r2, [pc, #312]	; (8002a64 <HAL_GPIO_Init+0x324>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d013      	beq.n	8002956 <HAL_GPIO_Init+0x216>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4d      	ldr	r2, [pc, #308]	; (8002a68 <HAL_GPIO_Init+0x328>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d00d      	beq.n	8002952 <HAL_GPIO_Init+0x212>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4c      	ldr	r2, [pc, #304]	; (8002a6c <HAL_GPIO_Init+0x32c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d007      	beq.n	800294e <HAL_GPIO_Init+0x20e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a4b      	ldr	r2, [pc, #300]	; (8002a70 <HAL_GPIO_Init+0x330>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d101      	bne.n	800294a <HAL_GPIO_Init+0x20a>
 8002946:	2307      	movs	r3, #7
 8002948:	e00e      	b.n	8002968 <HAL_GPIO_Init+0x228>
 800294a:	2308      	movs	r3, #8
 800294c:	e00c      	b.n	8002968 <HAL_GPIO_Init+0x228>
 800294e:	2306      	movs	r3, #6
 8002950:	e00a      	b.n	8002968 <HAL_GPIO_Init+0x228>
 8002952:	2305      	movs	r3, #5
 8002954:	e008      	b.n	8002968 <HAL_GPIO_Init+0x228>
 8002956:	2304      	movs	r3, #4
 8002958:	e006      	b.n	8002968 <HAL_GPIO_Init+0x228>
 800295a:	2303      	movs	r3, #3
 800295c:	e004      	b.n	8002968 <HAL_GPIO_Init+0x228>
 800295e:	2302      	movs	r3, #2
 8002960:	e002      	b.n	8002968 <HAL_GPIO_Init+0x228>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_GPIO_Init+0x228>
 8002966:	2300      	movs	r3, #0
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	f002 0203 	and.w	r2, r2, #3
 800296e:	0092      	lsls	r2, r2, #2
 8002970:	4093      	lsls	r3, r2
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002978:	4935      	ldr	r1, [pc, #212]	; (8002a50 <HAL_GPIO_Init+0x310>)
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	089b      	lsrs	r3, r3, #2
 800297e:	3302      	adds	r3, #2
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002986:	4b3b      	ldr	r3, [pc, #236]	; (8002a74 <HAL_GPIO_Init+0x334>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	43db      	mvns	r3, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029aa:	4a32      	ldr	r2, [pc, #200]	; (8002a74 <HAL_GPIO_Init+0x334>)
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029b0:	4b30      	ldr	r3, [pc, #192]	; (8002a74 <HAL_GPIO_Init+0x334>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029d4:	4a27      	ldr	r2, [pc, #156]	; (8002a74 <HAL_GPIO_Init+0x334>)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029da:	4b26      	ldr	r3, [pc, #152]	; (8002a74 <HAL_GPIO_Init+0x334>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029fe:	4a1d      	ldr	r2, [pc, #116]	; (8002a74 <HAL_GPIO_Init+0x334>)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a04:	4b1b      	ldr	r3, [pc, #108]	; (8002a74 <HAL_GPIO_Init+0x334>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a28:	4a12      	ldr	r2, [pc, #72]	; (8002a74 <HAL_GPIO_Init+0x334>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3301      	adds	r3, #1
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	2b0f      	cmp	r3, #15
 8002a38:	f67f ae90 	bls.w	800275c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	bf00      	nop
 8002a40:	3724      	adds	r7, #36	; 0x24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40013800 	.word	0x40013800
 8002a54:	40020000 	.word	0x40020000
 8002a58:	40020400 	.word	0x40020400
 8002a5c:	40020800 	.word	0x40020800
 8002a60:	40020c00 	.word	0x40020c00
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40021400 	.word	0x40021400
 8002a6c:	40021800 	.word	0x40021800
 8002a70:	40021c00 	.word	0x40021c00
 8002a74:	40013c00 	.word	0x40013c00

08002a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	807b      	strh	r3, [r7, #2]
 8002a84:	4613      	mov	r3, r2
 8002a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a88:	787b      	ldrb	r3, [r7, #1]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a8e:	887a      	ldrh	r2, [r7, #2]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a94:	e003      	b.n	8002a9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a96:	887b      	ldrh	r3, [r7, #2]
 8002a98:	041a      	lsls	r2, r3, #16
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	619a      	str	r2, [r3, #24]
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b085      	sub	sp, #20
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002abc:	887a      	ldrh	r2, [r7, #2]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	041a      	lsls	r2, r3, #16
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	43d9      	mvns	r1, r3
 8002ac8:	887b      	ldrh	r3, [r7, #2]
 8002aca:	400b      	ands	r3, r1
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	619a      	str	r2, [r3, #24]
}
 8002ad2:	bf00      	nop
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
	...

08002ae0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e267      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d075      	beq.n	8002bea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002afe:	4b88      	ldr	r3, [pc, #544]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d00c      	beq.n	8002b24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b0a:	4b85      	ldr	r3, [pc, #532]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d112      	bne.n	8002b3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b16:	4b82      	ldr	r3, [pc, #520]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b22:	d10b      	bne.n	8002b3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b24:	4b7e      	ldr	r3, [pc, #504]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d05b      	beq.n	8002be8 <HAL_RCC_OscConfig+0x108>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d157      	bne.n	8002be8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e242      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b44:	d106      	bne.n	8002b54 <HAL_RCC_OscConfig+0x74>
 8002b46:	4b76      	ldr	r3, [pc, #472]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a75      	ldr	r2, [pc, #468]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	e01d      	b.n	8002b90 <HAL_RCC_OscConfig+0xb0>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b5c:	d10c      	bne.n	8002b78 <HAL_RCC_OscConfig+0x98>
 8002b5e:	4b70      	ldr	r3, [pc, #448]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a6f      	ldr	r2, [pc, #444]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	4b6d      	ldr	r3, [pc, #436]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a6c      	ldr	r2, [pc, #432]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	e00b      	b.n	8002b90 <HAL_RCC_OscConfig+0xb0>
 8002b78:	4b69      	ldr	r3, [pc, #420]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a68      	ldr	r2, [pc, #416]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b82:	6013      	str	r3, [r2, #0]
 8002b84:	4b66      	ldr	r3, [pc, #408]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a65      	ldr	r2, [pc, #404]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d013      	beq.n	8002bc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b98:	f7ff fc2e 	bl	80023f8 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ba0:	f7ff fc2a 	bl	80023f8 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b64      	cmp	r3, #100	; 0x64
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e207      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb2:	4b5b      	ldr	r3, [pc, #364]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f0      	beq.n	8002ba0 <HAL_RCC_OscConfig+0xc0>
 8002bbe:	e014      	b.n	8002bea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc0:	f7ff fc1a 	bl	80023f8 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc8:	f7ff fc16 	bl	80023f8 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b64      	cmp	r3, #100	; 0x64
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e1f3      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bda:	4b51      	ldr	r3, [pc, #324]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0xe8>
 8002be6:	e000      	b.n	8002bea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d063      	beq.n	8002cbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bf6:	4b4a      	ldr	r3, [pc, #296]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00b      	beq.n	8002c1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c02:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d11c      	bne.n	8002c48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c0e:	4b44      	ldr	r3, [pc, #272]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d116      	bne.n	8002c48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c1a:	4b41      	ldr	r3, [pc, #260]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d005      	beq.n	8002c32 <HAL_RCC_OscConfig+0x152>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d001      	beq.n	8002c32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e1c7      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c32:	4b3b      	ldr	r3, [pc, #236]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4937      	ldr	r1, [pc, #220]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c46:	e03a      	b.n	8002cbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d020      	beq.n	8002c92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c50:	4b34      	ldr	r3, [pc, #208]	; (8002d24 <HAL_RCC_OscConfig+0x244>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c56:	f7ff fbcf 	bl	80023f8 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c5e:	f7ff fbcb 	bl	80023f8 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e1a8      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c70:	4b2b      	ldr	r3, [pc, #172]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7c:	4b28      	ldr	r3, [pc, #160]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	4925      	ldr	r1, [pc, #148]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	600b      	str	r3, [r1, #0]
 8002c90:	e015      	b.n	8002cbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c92:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <HAL_RCC_OscConfig+0x244>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7ff fbae 	bl	80023f8 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ca0:	f7ff fbaa 	bl	80023f8 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e187      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb2:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d036      	beq.n	8002d38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d016      	beq.n	8002d00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cd2:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <HAL_RCC_OscConfig+0x248>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd8:	f7ff fb8e 	bl	80023f8 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ce0:	f7ff fb8a 	bl	80023f8 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e167      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x200>
 8002cfe:	e01b      	b.n	8002d38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d00:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <HAL_RCC_OscConfig+0x248>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d06:	f7ff fb77 	bl	80023f8 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d0c:	e00e      	b.n	8002d2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d0e:	f7ff fb73 	bl	80023f8 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d907      	bls.n	8002d2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e150      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
 8002d20:	40023800 	.word	0x40023800
 8002d24:	42470000 	.word	0x42470000
 8002d28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d2c:	4b88      	ldr	r3, [pc, #544]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1ea      	bne.n	8002d0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 8097 	beq.w	8002e74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d46:	2300      	movs	r3, #0
 8002d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d4a:	4b81      	ldr	r3, [pc, #516]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10f      	bne.n	8002d76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	4b7d      	ldr	r3, [pc, #500]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	4a7c      	ldr	r2, [pc, #496]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d64:	6413      	str	r3, [r2, #64]	; 0x40
 8002d66:	4b7a      	ldr	r3, [pc, #488]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d72:	2301      	movs	r3, #1
 8002d74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d76:	4b77      	ldr	r3, [pc, #476]	; (8002f54 <HAL_RCC_OscConfig+0x474>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d118      	bne.n	8002db4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d82:	4b74      	ldr	r3, [pc, #464]	; (8002f54 <HAL_RCC_OscConfig+0x474>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a73      	ldr	r2, [pc, #460]	; (8002f54 <HAL_RCC_OscConfig+0x474>)
 8002d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d8e:	f7ff fb33 	bl	80023f8 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d96:	f7ff fb2f 	bl	80023f8 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e10c      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da8:	4b6a      	ldr	r3, [pc, #424]	; (8002f54 <HAL_RCC_OscConfig+0x474>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d106      	bne.n	8002dca <HAL_RCC_OscConfig+0x2ea>
 8002dbc:	4b64      	ldr	r3, [pc, #400]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc0:	4a63      	ldr	r2, [pc, #396]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc8:	e01c      	b.n	8002e04 <HAL_RCC_OscConfig+0x324>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b05      	cmp	r3, #5
 8002dd0:	d10c      	bne.n	8002dec <HAL_RCC_OscConfig+0x30c>
 8002dd2:	4b5f      	ldr	r3, [pc, #380]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd6:	4a5e      	ldr	r2, [pc, #376]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	f043 0304 	orr.w	r3, r3, #4
 8002ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dde:	4b5c      	ldr	r3, [pc, #368]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de2:	4a5b      	ldr	r2, [pc, #364]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dea:	e00b      	b.n	8002e04 <HAL_RCC_OscConfig+0x324>
 8002dec:	4b58      	ldr	r3, [pc, #352]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df0:	4a57      	ldr	r2, [pc, #348]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002df2:	f023 0301 	bic.w	r3, r3, #1
 8002df6:	6713      	str	r3, [r2, #112]	; 0x70
 8002df8:	4b55      	ldr	r3, [pc, #340]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfc:	4a54      	ldr	r2, [pc, #336]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002dfe:	f023 0304 	bic.w	r3, r3, #4
 8002e02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d015      	beq.n	8002e38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0c:	f7ff faf4 	bl	80023f8 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e12:	e00a      	b.n	8002e2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e14:	f7ff faf0 	bl	80023f8 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e0cb      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2a:	4b49      	ldr	r3, [pc, #292]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0ee      	beq.n	8002e14 <HAL_RCC_OscConfig+0x334>
 8002e36:	e014      	b.n	8002e62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e38:	f7ff fade 	bl	80023f8 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e3e:	e00a      	b.n	8002e56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e40:	f7ff fada 	bl	80023f8 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e0b5      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e56:	4b3e      	ldr	r3, [pc, #248]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1ee      	bne.n	8002e40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e62:	7dfb      	ldrb	r3, [r7, #23]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d105      	bne.n	8002e74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e68:	4b39      	ldr	r3, [pc, #228]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	4a38      	ldr	r2, [pc, #224]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80a1 	beq.w	8002fc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e7e:	4b34      	ldr	r3, [pc, #208]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d05c      	beq.n	8002f44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d141      	bne.n	8002f16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e92:	4b31      	ldr	r3, [pc, #196]	; (8002f58 <HAL_RCC_OscConfig+0x478>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7ff faae 	bl	80023f8 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea0:	f7ff faaa 	bl	80023f8 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e087      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb2:	4b27      	ldr	r3, [pc, #156]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69da      	ldr	r2, [r3, #28]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	019b      	lsls	r3, r3, #6
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	085b      	lsrs	r3, r3, #1
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	041b      	lsls	r3, r3, #16
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	061b      	lsls	r3, r3, #24
 8002ee2:	491b      	ldr	r1, [pc, #108]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee8:	4b1b      	ldr	r3, [pc, #108]	; (8002f58 <HAL_RCC_OscConfig+0x478>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eee:	f7ff fa83 	bl	80023f8 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef6:	f7ff fa7f 	bl	80023f8 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e05c      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f08:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x416>
 8002f14:	e054      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <HAL_RCC_OscConfig+0x478>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7ff fa6c 	bl	80023f8 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f24:	f7ff fa68 	bl	80023f8 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e045      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f36:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <HAL_RCC_OscConfig+0x470>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x444>
 8002f42:	e03d      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d107      	bne.n	8002f5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e038      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
 8002f50:	40023800 	.word	0x40023800
 8002f54:	40007000 	.word	0x40007000
 8002f58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f5c:	4b1b      	ldr	r3, [pc, #108]	; (8002fcc <HAL_RCC_OscConfig+0x4ec>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d028      	beq.n	8002fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d121      	bne.n	8002fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d11a      	bne.n	8002fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d111      	bne.n	8002fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa2:	085b      	lsrs	r3, r3, #1
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d107      	bne.n	8002fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40023800 	.word	0x40023800

08002fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0cc      	b.n	800317e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe4:	4b68      	ldr	r3, [pc, #416]	; (8003188 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d90c      	bls.n	800300c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff2:	4b65      	ldr	r3, [pc, #404]	; (8003188 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffa:	4b63      	ldr	r3, [pc, #396]	; (8003188 <HAL_RCC_ClockConfig+0x1b8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d001      	beq.n	800300c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0b8      	b.n	800317e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d020      	beq.n	800305a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003024:	4b59      	ldr	r3, [pc, #356]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	4a58      	ldr	r2, [pc, #352]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800302e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800303c:	4b53      	ldr	r3, [pc, #332]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	4a52      	ldr	r2, [pc, #328]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003046:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003048:	4b50      	ldr	r3, [pc, #320]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	494d      	ldr	r1, [pc, #308]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	4313      	orrs	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d044      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d107      	bne.n	800307e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306e:	4b47      	ldr	r3, [pc, #284]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d119      	bne.n	80030ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e07f      	b.n	800317e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d003      	beq.n	800308e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800308a:	2b03      	cmp	r3, #3
 800308c:	d107      	bne.n	800309e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308e:	4b3f      	ldr	r3, [pc, #252]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e06f      	b.n	800317e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309e:	4b3b      	ldr	r3, [pc, #236]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e067      	b.n	800317e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ae:	4b37      	ldr	r3, [pc, #220]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f023 0203 	bic.w	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	4934      	ldr	r1, [pc, #208]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030c0:	f7ff f99a 	bl	80023f8 <HAL_GetTick>
 80030c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c6:	e00a      	b.n	80030de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c8:	f7ff f996 	bl	80023f8 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e04f      	b.n	800317e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030de:	4b2b      	ldr	r3, [pc, #172]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 020c 	and.w	r2, r3, #12
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d1eb      	bne.n	80030c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030f0:	4b25      	ldr	r3, [pc, #148]	; (8003188 <HAL_RCC_ClockConfig+0x1b8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d20c      	bcs.n	8003118 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fe:	4b22      	ldr	r3, [pc, #136]	; (8003188 <HAL_RCC_ClockConfig+0x1b8>)
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003106:	4b20      	ldr	r3, [pc, #128]	; (8003188 <HAL_RCC_ClockConfig+0x1b8>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d001      	beq.n	8003118 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e032      	b.n	800317e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d008      	beq.n	8003136 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003124:	4b19      	ldr	r3, [pc, #100]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	4916      	ldr	r1, [pc, #88]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	4313      	orrs	r3, r2
 8003134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d009      	beq.n	8003156 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003142:	4b12      	ldr	r3, [pc, #72]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	490e      	ldr	r1, [pc, #56]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	4313      	orrs	r3, r2
 8003154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003156:	f000 f821 	bl	800319c <HAL_RCC_GetSysClockFreq>
 800315a:	4602      	mov	r2, r0
 800315c:	4b0b      	ldr	r3, [pc, #44]	; (800318c <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	091b      	lsrs	r3, r3, #4
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	490a      	ldr	r1, [pc, #40]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8003168:	5ccb      	ldrb	r3, [r1, r3]
 800316a:	fa22 f303 	lsr.w	r3, r2, r3
 800316e:	4a09      	ldr	r2, [pc, #36]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003172:	4b09      	ldr	r3, [pc, #36]	; (8003198 <HAL_RCC_ClockConfig+0x1c8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff f812 	bl	80021a0 <HAL_InitTick>

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40023c00 	.word	0x40023c00
 800318c:	40023800 	.word	0x40023800
 8003190:	08006600 	.word	0x08006600
 8003194:	20000010 	.word	0x20000010
 8003198:	20000014 	.word	0x20000014

0800319c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800319c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031a0:	b094      	sub	sp, #80	; 0x50
 80031a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	647b      	str	r3, [r7, #68]	; 0x44
 80031a8:	2300      	movs	r3, #0
 80031aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031ac:	2300      	movs	r3, #0
 80031ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031b4:	4b79      	ldr	r3, [pc, #484]	; (800339c <HAL_RCC_GetSysClockFreq+0x200>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 030c 	and.w	r3, r3, #12
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d00d      	beq.n	80031dc <HAL_RCC_GetSysClockFreq+0x40>
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	f200 80e1 	bhi.w	8003388 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0x34>
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d003      	beq.n	80031d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80031ce:	e0db      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031d0:	4b73      	ldr	r3, [pc, #460]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80031d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80031d4:	e0db      	b.n	800338e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031d6:	4b73      	ldr	r3, [pc, #460]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80031d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031da:	e0d8      	b.n	800338e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031dc:	4b6f      	ldr	r3, [pc, #444]	; (800339c <HAL_RCC_GetSysClockFreq+0x200>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031e6:	4b6d      	ldr	r3, [pc, #436]	; (800339c <HAL_RCC_GetSysClockFreq+0x200>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d063      	beq.n	80032ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031f2:	4b6a      	ldr	r3, [pc, #424]	; (800339c <HAL_RCC_GetSysClockFreq+0x200>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	099b      	lsrs	r3, r3, #6
 80031f8:	2200      	movs	r2, #0
 80031fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80031fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003204:	633b      	str	r3, [r7, #48]	; 0x30
 8003206:	2300      	movs	r3, #0
 8003208:	637b      	str	r3, [r7, #52]	; 0x34
 800320a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800320e:	4622      	mov	r2, r4
 8003210:	462b      	mov	r3, r5
 8003212:	f04f 0000 	mov.w	r0, #0
 8003216:	f04f 0100 	mov.w	r1, #0
 800321a:	0159      	lsls	r1, r3, #5
 800321c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003220:	0150      	lsls	r0, r2, #5
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4621      	mov	r1, r4
 8003228:	1a51      	subs	r1, r2, r1
 800322a:	6139      	str	r1, [r7, #16]
 800322c:	4629      	mov	r1, r5
 800322e:	eb63 0301 	sbc.w	r3, r3, r1
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003240:	4659      	mov	r1, fp
 8003242:	018b      	lsls	r3, r1, #6
 8003244:	4651      	mov	r1, sl
 8003246:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800324a:	4651      	mov	r1, sl
 800324c:	018a      	lsls	r2, r1, #6
 800324e:	4651      	mov	r1, sl
 8003250:	ebb2 0801 	subs.w	r8, r2, r1
 8003254:	4659      	mov	r1, fp
 8003256:	eb63 0901 	sbc.w	r9, r3, r1
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003266:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800326a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800326e:	4690      	mov	r8, r2
 8003270:	4699      	mov	r9, r3
 8003272:	4623      	mov	r3, r4
 8003274:	eb18 0303 	adds.w	r3, r8, r3
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	462b      	mov	r3, r5
 800327c:	eb49 0303 	adc.w	r3, r9, r3
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800328e:	4629      	mov	r1, r5
 8003290:	024b      	lsls	r3, r1, #9
 8003292:	4621      	mov	r1, r4
 8003294:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003298:	4621      	mov	r1, r4
 800329a:	024a      	lsls	r2, r1, #9
 800329c:	4610      	mov	r0, r2
 800329e:	4619      	mov	r1, r3
 80032a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a2:	2200      	movs	r2, #0
 80032a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032ac:	f7fd fc2e 	bl	8000b0c <__aeabi_uldivmod>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	4613      	mov	r3, r2
 80032b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b8:	e058      	b.n	800336c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ba:	4b38      	ldr	r3, [pc, #224]	; (800339c <HAL_RCC_GetSysClockFreq+0x200>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	099b      	lsrs	r3, r3, #6
 80032c0:	2200      	movs	r2, #0
 80032c2:	4618      	mov	r0, r3
 80032c4:	4611      	mov	r1, r2
 80032c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032ca:	623b      	str	r3, [r7, #32]
 80032cc:	2300      	movs	r3, #0
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
 80032d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032d4:	4642      	mov	r2, r8
 80032d6:	464b      	mov	r3, r9
 80032d8:	f04f 0000 	mov.w	r0, #0
 80032dc:	f04f 0100 	mov.w	r1, #0
 80032e0:	0159      	lsls	r1, r3, #5
 80032e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032e6:	0150      	lsls	r0, r2, #5
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4641      	mov	r1, r8
 80032ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80032f2:	4649      	mov	r1, r9
 80032f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	f04f 0300 	mov.w	r3, #0
 8003300:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003304:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003308:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800330c:	ebb2 040a 	subs.w	r4, r2, sl
 8003310:	eb63 050b 	sbc.w	r5, r3, fp
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	00eb      	lsls	r3, r5, #3
 800331e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003322:	00e2      	lsls	r2, r4, #3
 8003324:	4614      	mov	r4, r2
 8003326:	461d      	mov	r5, r3
 8003328:	4643      	mov	r3, r8
 800332a:	18e3      	adds	r3, r4, r3
 800332c:	603b      	str	r3, [r7, #0]
 800332e:	464b      	mov	r3, r9
 8003330:	eb45 0303 	adc.w	r3, r5, r3
 8003334:	607b      	str	r3, [r7, #4]
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003342:	4629      	mov	r1, r5
 8003344:	028b      	lsls	r3, r1, #10
 8003346:	4621      	mov	r1, r4
 8003348:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800334c:	4621      	mov	r1, r4
 800334e:	028a      	lsls	r2, r1, #10
 8003350:	4610      	mov	r0, r2
 8003352:	4619      	mov	r1, r3
 8003354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003356:	2200      	movs	r2, #0
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	61fa      	str	r2, [r7, #28]
 800335c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003360:	f7fd fbd4 	bl	8000b0c <__aeabi_uldivmod>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4613      	mov	r3, r2
 800336a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_GetSysClockFreq+0x200>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	0c1b      	lsrs	r3, r3, #16
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	3301      	adds	r3, #1
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800337c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800337e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003380:	fbb2 f3f3 	udiv	r3, r2, r3
 8003384:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003386:	e002      	b.n	800338e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003388:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800338a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800338c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800338e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003390:	4618      	mov	r0, r3
 8003392:	3750      	adds	r7, #80	; 0x50
 8003394:	46bd      	mov	sp, r7
 8003396:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800339a:	bf00      	nop
 800339c:	40023800 	.word	0x40023800
 80033a0:	00f42400 	.word	0x00f42400
 80033a4:	007a1200 	.word	0x007a1200

080033a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ac:	4b03      	ldr	r3, [pc, #12]	; (80033bc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ae:	681b      	ldr	r3, [r3, #0]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	20000010 	.word	0x20000010

080033c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033c4:	f7ff fff0 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	0a9b      	lsrs	r3, r3, #10
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	4903      	ldr	r1, [pc, #12]	; (80033e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033d6:	5ccb      	ldrb	r3, [r1, r3]
 80033d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40023800 	.word	0x40023800
 80033e4:	08006610 	.word	0x08006610

080033e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033ec:	f7ff ffdc 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 80033f0:	4602      	mov	r2, r0
 80033f2:	4b05      	ldr	r3, [pc, #20]	; (8003408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	0b5b      	lsrs	r3, r3, #13
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	4903      	ldr	r1, [pc, #12]	; (800340c <HAL_RCC_GetPCLK2Freq+0x24>)
 80033fe:	5ccb      	ldrb	r3, [r1, r3]
 8003400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003404:	4618      	mov	r0, r3
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40023800 	.word	0x40023800
 800340c:	08006610 	.word	0x08006610

08003410 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	220f      	movs	r2, #15
 800341e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003420:	4b12      	ldr	r3, [pc, #72]	; (800346c <HAL_RCC_GetClockConfig+0x5c>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0203 	and.w	r2, r3, #3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800342c:	4b0f      	ldr	r3, [pc, #60]	; (800346c <HAL_RCC_GetClockConfig+0x5c>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <HAL_RCC_GetClockConfig+0x5c>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003444:	4b09      	ldr	r3, [pc, #36]	; (800346c <HAL_RCC_GetClockConfig+0x5c>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	08db      	lsrs	r3, r3, #3
 800344a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003452:	4b07      	ldr	r3, [pc, #28]	; (8003470 <HAL_RCC_GetClockConfig+0x60>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0207 	and.w	r2, r3, #7
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	601a      	str	r2, [r3, #0]
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	40023c00 	.word	0x40023c00

08003474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e041      	b.n	800350a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fe fd94 	bl	8001fc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4619      	mov	r1, r3
 80034b2:	4610      	mov	r0, r2
 80034b4:	f000 fa96 	bl	80039e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b01      	cmp	r3, #1
 8003526:	d001      	beq.n	800352c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e04e      	b.n	80035ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a23      	ldr	r2, [pc, #140]	; (80035d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d022      	beq.n	8003594 <HAL_TIM_Base_Start_IT+0x80>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003556:	d01d      	beq.n	8003594 <HAL_TIM_Base_Start_IT+0x80>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a1f      	ldr	r2, [pc, #124]	; (80035dc <HAL_TIM_Base_Start_IT+0xc8>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d018      	beq.n	8003594 <HAL_TIM_Base_Start_IT+0x80>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1e      	ldr	r2, [pc, #120]	; (80035e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d013      	beq.n	8003594 <HAL_TIM_Base_Start_IT+0x80>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a1c      	ldr	r2, [pc, #112]	; (80035e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00e      	beq.n	8003594 <HAL_TIM_Base_Start_IT+0x80>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a1b      	ldr	r2, [pc, #108]	; (80035e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d009      	beq.n	8003594 <HAL_TIM_Base_Start_IT+0x80>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a19      	ldr	r2, [pc, #100]	; (80035ec <HAL_TIM_Base_Start_IT+0xd8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d004      	beq.n	8003594 <HAL_TIM_Base_Start_IT+0x80>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a18      	ldr	r2, [pc, #96]	; (80035f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d111      	bne.n	80035b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b06      	cmp	r3, #6
 80035a4:	d010      	beq.n	80035c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0201 	orr.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b6:	e007      	b.n	80035c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3714      	adds	r7, #20
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40010000 	.word	0x40010000
 80035dc:	40000400 	.word	0x40000400
 80035e0:	40000800 	.word	0x40000800
 80035e4:	40000c00 	.word	0x40000c00
 80035e8:	40010400 	.word	0x40010400
 80035ec:	40014000 	.word	0x40014000
 80035f0:	40001800 	.word	0x40001800

080035f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b02      	cmp	r3, #2
 8003608:	d122      	bne.n	8003650 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b02      	cmp	r3, #2
 8003616:	d11b      	bne.n	8003650 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f06f 0202 	mvn.w	r2, #2
 8003620:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f9b5 	bl	80039a6 <HAL_TIM_IC_CaptureCallback>
 800363c:	e005      	b.n	800364a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f9a7 	bl	8003992 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f9b8 	bl	80039ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	2b04      	cmp	r3, #4
 800365c:	d122      	bne.n	80036a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b04      	cmp	r3, #4
 800366a:	d11b      	bne.n	80036a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f06f 0204 	mvn.w	r2, #4
 8003674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2202      	movs	r2, #2
 800367a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f98b 	bl	80039a6 <HAL_TIM_IC_CaptureCallback>
 8003690:	e005      	b.n	800369e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f97d 	bl	8003992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f98e 	bl	80039ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d122      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f003 0308 	and.w	r3, r3, #8
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d11b      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f06f 0208 	mvn.w	r2, #8
 80036c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2204      	movs	r2, #4
 80036ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f961 	bl	80039a6 <HAL_TIM_IC_CaptureCallback>
 80036e4:	e005      	b.n	80036f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f953 	bl	8003992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f964 	bl	80039ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f003 0310 	and.w	r3, r3, #16
 8003702:	2b10      	cmp	r3, #16
 8003704:	d122      	bne.n	800374c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b10      	cmp	r3, #16
 8003712:	d11b      	bne.n	800374c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0210 	mvn.w	r2, #16
 800371c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2208      	movs	r2, #8
 8003722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f937 	bl	80039a6 <HAL_TIM_IC_CaptureCallback>
 8003738:	e005      	b.n	8003746 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f929 	bl	8003992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f93a 	bl	80039ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b01      	cmp	r3, #1
 8003758:	d10e      	bne.n	8003778 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b01      	cmp	r3, #1
 8003766:	d107      	bne.n	8003778 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0201 	mvn.w	r2, #1
 8003770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7fe fbd0 	bl	8001f18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003782:	2b80      	cmp	r3, #128	; 0x80
 8003784:	d10e      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003790:	2b80      	cmp	r3, #128	; 0x80
 8003792:	d107      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800379c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fae0 	bl	8003d64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ae:	2b40      	cmp	r3, #64	; 0x40
 80037b0:	d10e      	bne.n	80037d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037bc:	2b40      	cmp	r3, #64	; 0x40
 80037be:	d107      	bne.n	80037d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f8ff 	bl	80039ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f003 0320 	and.w	r3, r3, #32
 80037da:	2b20      	cmp	r3, #32
 80037dc:	d10e      	bne.n	80037fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d107      	bne.n	80037fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f06f 0220 	mvn.w	r2, #32
 80037f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 faaa 	bl	8003d50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037fc:	bf00      	nop
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800380e:	2300      	movs	r3, #0
 8003810:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_TIM_ConfigClockSource+0x1c>
 800381c:	2302      	movs	r3, #2
 800381e:	e0b4      	b.n	800398a <HAL_TIM_ConfigClockSource+0x186>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2202      	movs	r2, #2
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800383e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003846:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003858:	d03e      	beq.n	80038d8 <HAL_TIM_ConfigClockSource+0xd4>
 800385a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800385e:	f200 8087 	bhi.w	8003970 <HAL_TIM_ConfigClockSource+0x16c>
 8003862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003866:	f000 8086 	beq.w	8003976 <HAL_TIM_ConfigClockSource+0x172>
 800386a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800386e:	d87f      	bhi.n	8003970 <HAL_TIM_ConfigClockSource+0x16c>
 8003870:	2b70      	cmp	r3, #112	; 0x70
 8003872:	d01a      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0xa6>
 8003874:	2b70      	cmp	r3, #112	; 0x70
 8003876:	d87b      	bhi.n	8003970 <HAL_TIM_ConfigClockSource+0x16c>
 8003878:	2b60      	cmp	r3, #96	; 0x60
 800387a:	d050      	beq.n	800391e <HAL_TIM_ConfigClockSource+0x11a>
 800387c:	2b60      	cmp	r3, #96	; 0x60
 800387e:	d877      	bhi.n	8003970 <HAL_TIM_ConfigClockSource+0x16c>
 8003880:	2b50      	cmp	r3, #80	; 0x50
 8003882:	d03c      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0xfa>
 8003884:	2b50      	cmp	r3, #80	; 0x50
 8003886:	d873      	bhi.n	8003970 <HAL_TIM_ConfigClockSource+0x16c>
 8003888:	2b40      	cmp	r3, #64	; 0x40
 800388a:	d058      	beq.n	800393e <HAL_TIM_ConfigClockSource+0x13a>
 800388c:	2b40      	cmp	r3, #64	; 0x40
 800388e:	d86f      	bhi.n	8003970 <HAL_TIM_ConfigClockSource+0x16c>
 8003890:	2b30      	cmp	r3, #48	; 0x30
 8003892:	d064      	beq.n	800395e <HAL_TIM_ConfigClockSource+0x15a>
 8003894:	2b30      	cmp	r3, #48	; 0x30
 8003896:	d86b      	bhi.n	8003970 <HAL_TIM_ConfigClockSource+0x16c>
 8003898:	2b20      	cmp	r3, #32
 800389a:	d060      	beq.n	800395e <HAL_TIM_ConfigClockSource+0x15a>
 800389c:	2b20      	cmp	r3, #32
 800389e:	d867      	bhi.n	8003970 <HAL_TIM_ConfigClockSource+0x16c>
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d05c      	beq.n	800395e <HAL_TIM_ConfigClockSource+0x15a>
 80038a4:	2b10      	cmp	r3, #16
 80038a6:	d05a      	beq.n	800395e <HAL_TIM_ConfigClockSource+0x15a>
 80038a8:	e062      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	6899      	ldr	r1, [r3, #8]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f000 f9ad 	bl	8003c18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	609a      	str	r2, [r3, #8]
      break;
 80038d6:	e04f      	b.n	8003978 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6818      	ldr	r0, [r3, #0]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	6899      	ldr	r1, [r3, #8]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f000 f996 	bl	8003c18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038fa:	609a      	str	r2, [r3, #8]
      break;
 80038fc:	e03c      	b.n	8003978 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	6859      	ldr	r1, [r3, #4]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	461a      	mov	r2, r3
 800390c:	f000 f90a 	bl	8003b24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2150      	movs	r1, #80	; 0x50
 8003916:	4618      	mov	r0, r3
 8003918:	f000 f963 	bl	8003be2 <TIM_ITRx_SetConfig>
      break;
 800391c:	e02c      	b.n	8003978 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	6859      	ldr	r1, [r3, #4]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	461a      	mov	r2, r3
 800392c:	f000 f929 	bl	8003b82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2160      	movs	r1, #96	; 0x60
 8003936:	4618      	mov	r0, r3
 8003938:	f000 f953 	bl	8003be2 <TIM_ITRx_SetConfig>
      break;
 800393c:	e01c      	b.n	8003978 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	6859      	ldr	r1, [r3, #4]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	461a      	mov	r2, r3
 800394c:	f000 f8ea 	bl	8003b24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2140      	movs	r1, #64	; 0x40
 8003956:	4618      	mov	r0, r3
 8003958:	f000 f943 	bl	8003be2 <TIM_ITRx_SetConfig>
      break;
 800395c:	e00c      	b.n	8003978 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4619      	mov	r1, r3
 8003968:	4610      	mov	r0, r2
 800396a:	f000 f93a 	bl	8003be2 <TIM_ITRx_SetConfig>
      break;
 800396e:	e003      	b.n	8003978 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	73fb      	strb	r3, [r7, #15]
      break;
 8003974:	e000      	b.n	8003978 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003976:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003988:	7bfb      	ldrb	r3, [r7, #15]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
	...

080039e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a40      	ldr	r2, [pc, #256]	; (8003af8 <TIM_Base_SetConfig+0x114>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d013      	beq.n	8003a24 <TIM_Base_SetConfig+0x40>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a02:	d00f      	beq.n	8003a24 <TIM_Base_SetConfig+0x40>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a3d      	ldr	r2, [pc, #244]	; (8003afc <TIM_Base_SetConfig+0x118>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00b      	beq.n	8003a24 <TIM_Base_SetConfig+0x40>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a3c      	ldr	r2, [pc, #240]	; (8003b00 <TIM_Base_SetConfig+0x11c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d007      	beq.n	8003a24 <TIM_Base_SetConfig+0x40>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a3b      	ldr	r2, [pc, #236]	; (8003b04 <TIM_Base_SetConfig+0x120>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d003      	beq.n	8003a24 <TIM_Base_SetConfig+0x40>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a3a      	ldr	r2, [pc, #232]	; (8003b08 <TIM_Base_SetConfig+0x124>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d108      	bne.n	8003a36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a2f      	ldr	r2, [pc, #188]	; (8003af8 <TIM_Base_SetConfig+0x114>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d02b      	beq.n	8003a96 <TIM_Base_SetConfig+0xb2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a44:	d027      	beq.n	8003a96 <TIM_Base_SetConfig+0xb2>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a2c      	ldr	r2, [pc, #176]	; (8003afc <TIM_Base_SetConfig+0x118>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d023      	beq.n	8003a96 <TIM_Base_SetConfig+0xb2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a2b      	ldr	r2, [pc, #172]	; (8003b00 <TIM_Base_SetConfig+0x11c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d01f      	beq.n	8003a96 <TIM_Base_SetConfig+0xb2>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a2a      	ldr	r2, [pc, #168]	; (8003b04 <TIM_Base_SetConfig+0x120>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d01b      	beq.n	8003a96 <TIM_Base_SetConfig+0xb2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a29      	ldr	r2, [pc, #164]	; (8003b08 <TIM_Base_SetConfig+0x124>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d017      	beq.n	8003a96 <TIM_Base_SetConfig+0xb2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a28      	ldr	r2, [pc, #160]	; (8003b0c <TIM_Base_SetConfig+0x128>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d013      	beq.n	8003a96 <TIM_Base_SetConfig+0xb2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a27      	ldr	r2, [pc, #156]	; (8003b10 <TIM_Base_SetConfig+0x12c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00f      	beq.n	8003a96 <TIM_Base_SetConfig+0xb2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a26      	ldr	r2, [pc, #152]	; (8003b14 <TIM_Base_SetConfig+0x130>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00b      	beq.n	8003a96 <TIM_Base_SetConfig+0xb2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a25      	ldr	r2, [pc, #148]	; (8003b18 <TIM_Base_SetConfig+0x134>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d007      	beq.n	8003a96 <TIM_Base_SetConfig+0xb2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a24      	ldr	r2, [pc, #144]	; (8003b1c <TIM_Base_SetConfig+0x138>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d003      	beq.n	8003a96 <TIM_Base_SetConfig+0xb2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a23      	ldr	r2, [pc, #140]	; (8003b20 <TIM_Base_SetConfig+0x13c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d108      	bne.n	8003aa8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a0a      	ldr	r2, [pc, #40]	; (8003af8 <TIM_Base_SetConfig+0x114>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d003      	beq.n	8003adc <TIM_Base_SetConfig+0xf8>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a0c      	ldr	r2, [pc, #48]	; (8003b08 <TIM_Base_SetConfig+0x124>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d103      	bne.n	8003ae4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	615a      	str	r2, [r3, #20]
}
 8003aea:	bf00      	nop
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40010000 	.word	0x40010000
 8003afc:	40000400 	.word	0x40000400
 8003b00:	40000800 	.word	0x40000800
 8003b04:	40000c00 	.word	0x40000c00
 8003b08:	40010400 	.word	0x40010400
 8003b0c:	40014000 	.word	0x40014000
 8003b10:	40014400 	.word	0x40014400
 8003b14:	40014800 	.word	0x40014800
 8003b18:	40001800 	.word	0x40001800
 8003b1c:	40001c00 	.word	0x40001c00
 8003b20:	40002000 	.word	0x40002000

08003b24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	f023 0201 	bic.w	r2, r3, #1
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f023 030a 	bic.w	r3, r3, #10
 8003b60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	621a      	str	r2, [r3, #32]
}
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b087      	sub	sp, #28
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	f023 0210 	bic.w	r2, r3, #16
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	031b      	lsls	r3, r3, #12
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	621a      	str	r2, [r3, #32]
}
 8003bd6:	bf00      	nop
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b085      	sub	sp, #20
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f043 0307 	orr.w	r3, r3, #7
 8003c04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	609a      	str	r2, [r3, #8]
}
 8003c0c:	bf00      	nop
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	021a      	lsls	r2, r3, #8
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	609a      	str	r2, [r3, #8]
}
 8003c4c:	bf00      	nop
 8003c4e:	371c      	adds	r7, #28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e05a      	b.n	8003d26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a21      	ldr	r2, [pc, #132]	; (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d022      	beq.n	8003cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cbc:	d01d      	beq.n	8003cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1d      	ldr	r2, [pc, #116]	; (8003d38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d018      	beq.n	8003cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1b      	ldr	r2, [pc, #108]	; (8003d3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d013      	beq.n	8003cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a1a      	ldr	r2, [pc, #104]	; (8003d40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00e      	beq.n	8003cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a18      	ldr	r2, [pc, #96]	; (8003d44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d009      	beq.n	8003cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a17      	ldr	r2, [pc, #92]	; (8003d48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d004      	beq.n	8003cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a15      	ldr	r2, [pc, #84]	; (8003d4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d10c      	bne.n	8003d14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	40010000 	.word	0x40010000
 8003d38:	40000400 	.word	0x40000400
 8003d3c:	40000800 	.word	0x40000800
 8003d40:	40000c00 	.word	0x40000c00
 8003d44:	40010400 	.word	0x40010400
 8003d48:	40014000 	.word	0x40014000
 8003d4c:	40001800 	.word	0x40001800

08003d50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e03f      	b.n	8003e0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fe f932 	bl	8002008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2224      	movs	r2, #36	; 0x24
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 fddf 	bl	8004980 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695a      	ldr	r2, [r3, #20]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003de0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003df0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b08a      	sub	sp, #40	; 0x28
 8003e16:	af02      	add	r7, sp, #8
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	603b      	str	r3, [r7, #0]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b20      	cmp	r3, #32
 8003e30:	d17c      	bne.n	8003f2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <HAL_UART_Transmit+0x2c>
 8003e38:	88fb      	ldrh	r3, [r7, #6]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e075      	b.n	8003f2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_UART_Transmit+0x3e>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e06e      	b.n	8003f2e <HAL_UART_Transmit+0x11c>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2221      	movs	r2, #33	; 0x21
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e66:	f7fe fac7 	bl	80023f8 <HAL_GetTick>
 8003e6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	88fa      	ldrh	r2, [r7, #6]
 8003e70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	88fa      	ldrh	r2, [r7, #6]
 8003e76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e80:	d108      	bne.n	8003e94 <HAL_UART_Transmit+0x82>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d104      	bne.n	8003e94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	61bb      	str	r3, [r7, #24]
 8003e92:	e003      	b.n	8003e9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ea4:	e02a      	b.n	8003efc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2200      	movs	r2, #0
 8003eae:	2180      	movs	r1, #128	; 0x80
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 fb1f 	bl	80044f4 <UART_WaitOnFlagUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e036      	b.n	8003f2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10b      	bne.n	8003ede <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ed4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	3302      	adds	r3, #2
 8003eda:	61bb      	str	r3, [r7, #24]
 8003edc:	e007      	b.n	8003eee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	781a      	ldrb	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	3301      	adds	r3, #1
 8003eec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1cf      	bne.n	8003ea6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2140      	movs	r1, #64	; 0x40
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 faef 	bl	80044f4 <UART_WaitOnFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e006      	b.n	8003f2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	e000      	b.n	8003f2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f2c:	2302      	movs	r3, #2
  }
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3720      	adds	r7, #32
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b084      	sub	sp, #16
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	4613      	mov	r3, r2
 8003f42:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b20      	cmp	r3, #32
 8003f4e:	d11d      	bne.n	8003f8c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <HAL_UART_Receive_IT+0x26>
 8003f56:	88fb      	ldrh	r3, [r7, #6]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e016      	b.n	8003f8e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d101      	bne.n	8003f6e <HAL_UART_Receive_IT+0x38>
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	e00f      	b.n	8003f8e <HAL_UART_Receive_IT+0x58>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f7c:	88fb      	ldrh	r3, [r7, #6]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	68b9      	ldr	r1, [r7, #8]
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 fb24 	bl	80045d0 <UART_Start_Receive_IT>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	e000      	b.n	8003f8e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003f8c:	2302      	movs	r3, #2
  }
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b0ba      	sub	sp, #232	; 0xe8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003fd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10f      	bne.n	8003ffe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d009      	beq.n	8003ffe <HAL_UART_IRQHandler+0x66>
 8003fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fee:	f003 0320 	and.w	r3, r3, #32
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fc07 	bl	800480a <UART_Receive_IT>
      return;
 8003ffc:	e256      	b.n	80044ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ffe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 80de 	beq.w	80041c4 <HAL_UART_IRQHandler+0x22c>
 8004008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d106      	bne.n	8004022 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004018:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80d1 	beq.w	80041c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00b      	beq.n	8004046 <HAL_UART_IRQHandler+0xae>
 800402e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004036:	2b00      	cmp	r3, #0
 8004038:	d005      	beq.n	8004046 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	f043 0201 	orr.w	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00b      	beq.n	800406a <HAL_UART_IRQHandler+0xd2>
 8004052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d005      	beq.n	800406a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f043 0202 	orr.w	r2, r3, #2
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800406a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00b      	beq.n	800408e <HAL_UART_IRQHandler+0xf6>
 8004076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d005      	beq.n	800408e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	f043 0204 	orr.w	r2, r3, #4
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800408e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004092:	f003 0308 	and.w	r3, r3, #8
 8004096:	2b00      	cmp	r3, #0
 8004098:	d011      	beq.n	80040be <HAL_UART_IRQHandler+0x126>
 800409a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d105      	bne.n	80040b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	f043 0208 	orr.w	r2, r3, #8
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 81ed 	beq.w	80044a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_UART_IRQHandler+0x14e>
 80040d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 fb92 	bl	800480a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f0:	2b40      	cmp	r3, #64	; 0x40
 80040f2:	bf0c      	ite	eq
 80040f4:	2301      	moveq	r3, #1
 80040f6:	2300      	movne	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d103      	bne.n	8004112 <HAL_UART_IRQHandler+0x17a>
 800410a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800410e:	2b00      	cmp	r3, #0
 8004110:	d04f      	beq.n	80041b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fa9a 	bl	800464c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004122:	2b40      	cmp	r3, #64	; 0x40
 8004124:	d141      	bne.n	80041aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	3314      	adds	r3, #20
 800412c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004130:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004134:	e853 3f00 	ldrex	r3, [r3]
 8004138:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800413c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004144:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3314      	adds	r3, #20
 800414e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004152:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004156:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800415e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800416a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1d9      	bne.n	8004126 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004176:	2b00      	cmp	r3, #0
 8004178:	d013      	beq.n	80041a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	4a7d      	ldr	r2, [pc, #500]	; (8004374 <HAL_UART_IRQHandler+0x3dc>)
 8004180:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004186:	4618      	mov	r0, r3
 8004188:	f7fe fab8 	bl	80026fc <HAL_DMA_Abort_IT>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d016      	beq.n	80041c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800419c:	4610      	mov	r0, r2
 800419e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a0:	e00e      	b.n	80041c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f990 	bl	80044c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a8:	e00a      	b.n	80041c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f98c 	bl	80044c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b0:	e006      	b.n	80041c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f988 	bl	80044c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80041be:	e170      	b.n	80044a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c0:	bf00      	nop
    return;
 80041c2:	e16e      	b.n	80044a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	f040 814a 	bne.w	8004462 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d2:	f003 0310 	and.w	r3, r3, #16
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 8143 	beq.w	8004462 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80041dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041e0:	f003 0310 	and.w	r3, r3, #16
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 813c 	beq.w	8004462 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041ea:	2300      	movs	r3, #0
 80041ec:	60bb      	str	r3, [r7, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	60bb      	str	r3, [r7, #8]
 80041fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420a:	2b40      	cmp	r3, #64	; 0x40
 800420c:	f040 80b4 	bne.w	8004378 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800421c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8140 	beq.w	80044a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800422a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800422e:	429a      	cmp	r2, r3
 8004230:	f080 8139 	bcs.w	80044a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800423a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004246:	f000 8088 	beq.w	800435a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	330c      	adds	r3, #12
 8004250:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004254:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004260:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004264:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004268:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	330c      	adds	r3, #12
 8004272:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004276:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800427a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004282:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004286:	e841 2300 	strex	r3, r2, [r1]
 800428a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800428e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1d9      	bne.n	800424a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3314      	adds	r3, #20
 800429c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80042a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042a8:	f023 0301 	bic.w	r3, r3, #1
 80042ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3314      	adds	r3, #20
 80042b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80042be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80042c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80042c6:	e841 2300 	strex	r3, r2, [r1]
 80042ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80042cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1e1      	bne.n	8004296 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3314      	adds	r3, #20
 80042d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80042e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3314      	adds	r3, #20
 80042f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80042f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80042f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80042fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042fe:	e841 2300 	strex	r3, r2, [r1]
 8004302:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004304:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e3      	bne.n	80042d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	330c      	adds	r3, #12
 800431e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004322:	e853 3f00 	ldrex	r3, [r3]
 8004326:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800432a:	f023 0310 	bic.w	r3, r3, #16
 800432e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	330c      	adds	r3, #12
 8004338:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800433c:	65ba      	str	r2, [r7, #88]	; 0x58
 800433e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004340:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004342:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004344:	e841 2300 	strex	r3, r2, [r1]
 8004348:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800434a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1e3      	bne.n	8004318 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004354:	4618      	mov	r0, r3
 8004356:	f7fe f961 	bl	800261c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004362:	b29b      	uxth	r3, r3
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	b29b      	uxth	r3, r3
 8004368:	4619      	mov	r1, r3
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f8b6 	bl	80044dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004370:	e099      	b.n	80044a6 <HAL_UART_IRQHandler+0x50e>
 8004372:	bf00      	nop
 8004374:	08004713 	.word	0x08004713
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004380:	b29b      	uxth	r3, r3
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 808b 	beq.w	80044aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004394:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 8086 	beq.w	80044aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	330c      	adds	r3, #12
 80043a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a8:	e853 3f00 	ldrex	r3, [r3]
 80043ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	330c      	adds	r3, #12
 80043be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80043c2:	647a      	str	r2, [r7, #68]	; 0x44
 80043c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043ca:	e841 2300 	strex	r3, r2, [r1]
 80043ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1e3      	bne.n	800439e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3314      	adds	r3, #20
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	e853 3f00 	ldrex	r3, [r3]
 80043e4:	623b      	str	r3, [r7, #32]
   return(result);
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	f023 0301 	bic.w	r3, r3, #1
 80043ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3314      	adds	r3, #20
 80043f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80043fa:	633a      	str	r2, [r7, #48]	; 0x30
 80043fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004402:	e841 2300 	strex	r3, r2, [r1]
 8004406:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1e3      	bne.n	80043d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2220      	movs	r2, #32
 8004412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	330c      	adds	r3, #12
 8004422:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	e853 3f00 	ldrex	r3, [r3]
 800442a:	60fb      	str	r3, [r7, #12]
   return(result);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0310 	bic.w	r3, r3, #16
 8004432:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	330c      	adds	r3, #12
 800443c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004440:	61fa      	str	r2, [r7, #28]
 8004442:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004444:	69b9      	ldr	r1, [r7, #24]
 8004446:	69fa      	ldr	r2, [r7, #28]
 8004448:	e841 2300 	strex	r3, r2, [r1]
 800444c:	617b      	str	r3, [r7, #20]
   return(result);
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1e3      	bne.n	800441c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004454:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004458:	4619      	mov	r1, r3
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f83e 	bl	80044dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004460:	e023      	b.n	80044aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446a:	2b00      	cmp	r3, #0
 800446c:	d009      	beq.n	8004482 <HAL_UART_IRQHandler+0x4ea>
 800446e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f95d 	bl	800473a <UART_Transmit_IT>
    return;
 8004480:	e014      	b.n	80044ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00e      	beq.n	80044ac <HAL_UART_IRQHandler+0x514>
 800448e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004496:	2b00      	cmp	r3, #0
 8004498:	d008      	beq.n	80044ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f99d 	bl	80047da <UART_EndTransmit_IT>
    return;
 80044a0:	e004      	b.n	80044ac <HAL_UART_IRQHandler+0x514>
    return;
 80044a2:	bf00      	nop
 80044a4:	e002      	b.n	80044ac <HAL_UART_IRQHandler+0x514>
      return;
 80044a6:	bf00      	nop
 80044a8:	e000      	b.n	80044ac <HAL_UART_IRQHandler+0x514>
      return;
 80044aa:	bf00      	nop
  }
}
 80044ac:	37e8      	adds	r7, #232	; 0xe8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop

080044b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b090      	sub	sp, #64	; 0x40
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	603b      	str	r3, [r7, #0]
 8004500:	4613      	mov	r3, r2
 8004502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004504:	e050      	b.n	80045a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450c:	d04c      	beq.n	80045a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800450e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004510:	2b00      	cmp	r3, #0
 8004512:	d007      	beq.n	8004524 <UART_WaitOnFlagUntilTimeout+0x30>
 8004514:	f7fd ff70 	bl	80023f8 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004520:	429a      	cmp	r2, r3
 8004522:	d241      	bcs.n	80045a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	330c      	adds	r3, #12
 800452a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452e:	e853 3f00 	ldrex	r3, [r3]
 8004532:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800453a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	330c      	adds	r3, #12
 8004542:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004544:	637a      	str	r2, [r7, #52]	; 0x34
 8004546:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004548:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800454a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800454c:	e841 2300 	strex	r3, r2, [r1]
 8004550:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e5      	bne.n	8004524 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3314      	adds	r3, #20
 800455e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	e853 3f00 	ldrex	r3, [r3]
 8004566:	613b      	str	r3, [r7, #16]
   return(result);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f023 0301 	bic.w	r3, r3, #1
 800456e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3314      	adds	r3, #20
 8004576:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004578:	623a      	str	r2, [r7, #32]
 800457a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457c:	69f9      	ldr	r1, [r7, #28]
 800457e:	6a3a      	ldr	r2, [r7, #32]
 8004580:	e841 2300 	strex	r3, r2, [r1]
 8004584:	61bb      	str	r3, [r7, #24]
   return(result);
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e5      	bne.n	8004558 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e00f      	b.n	80045c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	4013      	ands	r3, r2
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	bf0c      	ite	eq
 80045b8:	2301      	moveq	r3, #1
 80045ba:	2300      	movne	r3, #0
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	461a      	mov	r2, r3
 80045c0:	79fb      	ldrb	r3, [r7, #7]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d09f      	beq.n	8004506 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3740      	adds	r7, #64	; 0x40
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	4613      	mov	r3, r2
 80045dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	88fa      	ldrh	r2, [r7, #6]
 80045e8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	88fa      	ldrh	r2, [r7, #6]
 80045ee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2222      	movs	r2, #34	; 0x22
 80045fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d007      	beq.n	800461e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800461c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695a      	ldr	r2, [r3, #20]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f042 0201 	orr.w	r2, r2, #1
 800462c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f042 0220 	orr.w	r2, r2, #32
 800463c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800464c:	b480      	push	{r7}
 800464e:	b095      	sub	sp, #84	; 0x54
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	330c      	adds	r3, #12
 800465a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465e:	e853 3f00 	ldrex	r3, [r3]
 8004662:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004666:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800466a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	330c      	adds	r3, #12
 8004672:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004674:	643a      	str	r2, [r7, #64]	; 0x40
 8004676:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004678:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800467a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800467c:	e841 2300 	strex	r3, r2, [r1]
 8004680:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1e5      	bne.n	8004654 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3314      	adds	r3, #20
 800468e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	e853 3f00 	ldrex	r3, [r3]
 8004696:	61fb      	str	r3, [r7, #28]
   return(result);
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f023 0301 	bic.w	r3, r3, #1
 800469e:	64bb      	str	r3, [r7, #72]	; 0x48
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3314      	adds	r3, #20
 80046a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046b0:	e841 2300 	strex	r3, r2, [r1]
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1e5      	bne.n	8004688 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d119      	bne.n	80046f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	330c      	adds	r3, #12
 80046ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	e853 3f00 	ldrex	r3, [r3]
 80046d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f023 0310 	bic.w	r3, r3, #16
 80046da:	647b      	str	r3, [r7, #68]	; 0x44
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	330c      	adds	r3, #12
 80046e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046e4:	61ba      	str	r2, [r7, #24]
 80046e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e8:	6979      	ldr	r1, [r7, #20]
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	e841 2300 	strex	r3, r2, [r1]
 80046f0:	613b      	str	r3, [r7, #16]
   return(result);
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1e5      	bne.n	80046c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004706:	bf00      	nop
 8004708:	3754      	adds	r7, #84	; 0x54
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f7ff fecb 	bl	80044c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004732:	bf00      	nop
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800473a:	b480      	push	{r7}
 800473c:	b085      	sub	sp, #20
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b21      	cmp	r3, #33	; 0x21
 800474c:	d13e      	bne.n	80047cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004756:	d114      	bne.n	8004782 <UART_Transmit_IT+0x48>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d110      	bne.n	8004782 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004774:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	1c9a      	adds	r2, r3, #2
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	621a      	str	r2, [r3, #32]
 8004780:	e008      	b.n	8004794 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	1c59      	adds	r1, r3, #1
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6211      	str	r1, [r2, #32]
 800478c:	781a      	ldrb	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004798:	b29b      	uxth	r3, r3
 800479a:	3b01      	subs	r3, #1
 800479c:	b29b      	uxth	r3, r3
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	4619      	mov	r1, r3
 80047a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10f      	bne.n	80047c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	e000      	b.n	80047ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047cc:	2302      	movs	r3, #2
  }
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b082      	sub	sp, #8
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7ff fe5a 	bl	80044b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b08c      	sub	sp, #48	; 0x30
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b22      	cmp	r3, #34	; 0x22
 800481c:	f040 80ab 	bne.w	8004976 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004828:	d117      	bne.n	800485a <UART_Receive_IT+0x50>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d113      	bne.n	800485a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004832:	2300      	movs	r3, #0
 8004834:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	b29b      	uxth	r3, r3
 8004844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004848:	b29a      	uxth	r2, r3
 800484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004852:	1c9a      	adds	r2, r3, #2
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	629a      	str	r2, [r3, #40]	; 0x28
 8004858:	e026      	b.n	80048a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004860:	2300      	movs	r3, #0
 8004862:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486c:	d007      	beq.n	800487e <UART_Receive_IT+0x74>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10a      	bne.n	800488c <UART_Receive_IT+0x82>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d106      	bne.n	800488c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	b2da      	uxtb	r2, r3
 8004886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004888:	701a      	strb	r2, [r3, #0]
 800488a:	e008      	b.n	800489e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004898:	b2da      	uxtb	r2, r3
 800489a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	4619      	mov	r1, r3
 80048b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d15a      	bne.n	8004972 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0220 	bic.w	r2, r2, #32
 80048ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68da      	ldr	r2, [r3, #12]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695a      	ldr	r2, [r3, #20]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0201 	bic.w	r2, r2, #1
 80048ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d135      	bne.n	8004968 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	330c      	adds	r3, #12
 8004908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	e853 3f00 	ldrex	r3, [r3]
 8004910:	613b      	str	r3, [r7, #16]
   return(result);
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f023 0310 	bic.w	r3, r3, #16
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	330c      	adds	r3, #12
 8004920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004922:	623a      	str	r2, [r7, #32]
 8004924:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004926:	69f9      	ldr	r1, [r7, #28]
 8004928:	6a3a      	ldr	r2, [r7, #32]
 800492a:	e841 2300 	strex	r3, r2, [r1]
 800492e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1e5      	bne.n	8004902 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0310 	and.w	r3, r3, #16
 8004940:	2b10      	cmp	r3, #16
 8004942:	d10a      	bne.n	800495a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800495e:	4619      	mov	r1, r3
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7ff fdbb 	bl	80044dc <HAL_UARTEx_RxEventCallback>
 8004966:	e002      	b.n	800496e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7fc fbfd 	bl	8001168 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800496e:	2300      	movs	r3, #0
 8004970:	e002      	b.n	8004978 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	e000      	b.n	8004978 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004976:	2302      	movs	r3, #2
  }
}
 8004978:	4618      	mov	r0, r3
 800497a:	3730      	adds	r7, #48	; 0x30
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004984:	b0c0      	sub	sp, #256	; 0x100
 8004986:	af00      	add	r7, sp, #0
 8004988:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800498c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499c:	68d9      	ldr	r1, [r3, #12]
 800499e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	ea40 0301 	orr.w	r3, r0, r1
 80049a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ae:	689a      	ldr	r2, [r3, #8]
 80049b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	431a      	orrs	r2, r3
 80049b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	431a      	orrs	r2, r3
 80049c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049d8:	f021 010c 	bic.w	r1, r1, #12
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049e6:	430b      	orrs	r3, r1
 80049e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fa:	6999      	ldr	r1, [r3, #24]
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	ea40 0301 	orr.w	r3, r0, r1
 8004a06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	4b8f      	ldr	r3, [pc, #572]	; (8004c4c <UART_SetConfig+0x2cc>)
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d005      	beq.n	8004a20 <UART_SetConfig+0xa0>
 8004a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	4b8d      	ldr	r3, [pc, #564]	; (8004c50 <UART_SetConfig+0x2d0>)
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d104      	bne.n	8004a2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a20:	f7fe fce2 	bl	80033e8 <HAL_RCC_GetPCLK2Freq>
 8004a24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a28:	e003      	b.n	8004a32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a2a:	f7fe fcc9 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 8004a2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a3c:	f040 810c 	bne.w	8004c58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a44:	2200      	movs	r2, #0
 8004a46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a52:	4622      	mov	r2, r4
 8004a54:	462b      	mov	r3, r5
 8004a56:	1891      	adds	r1, r2, r2
 8004a58:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a5a:	415b      	adcs	r3, r3
 8004a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a62:	4621      	mov	r1, r4
 8004a64:	eb12 0801 	adds.w	r8, r2, r1
 8004a68:	4629      	mov	r1, r5
 8004a6a:	eb43 0901 	adc.w	r9, r3, r1
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a82:	4690      	mov	r8, r2
 8004a84:	4699      	mov	r9, r3
 8004a86:	4623      	mov	r3, r4
 8004a88:	eb18 0303 	adds.w	r3, r8, r3
 8004a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a90:	462b      	mov	r3, r5
 8004a92:	eb49 0303 	adc.w	r3, r9, r3
 8004a96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004aa6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004aaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004aae:	460b      	mov	r3, r1
 8004ab0:	18db      	adds	r3, r3, r3
 8004ab2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	eb42 0303 	adc.w	r3, r2, r3
 8004aba:	657b      	str	r3, [r7, #84]	; 0x54
 8004abc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ac0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ac4:	f7fc f822 	bl	8000b0c <__aeabi_uldivmod>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4b61      	ldr	r3, [pc, #388]	; (8004c54 <UART_SetConfig+0x2d4>)
 8004ace:	fba3 2302 	umull	r2, r3, r3, r2
 8004ad2:	095b      	lsrs	r3, r3, #5
 8004ad4:	011c      	lsls	r4, r3, #4
 8004ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ada:	2200      	movs	r2, #0
 8004adc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ae0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ae4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ae8:	4642      	mov	r2, r8
 8004aea:	464b      	mov	r3, r9
 8004aec:	1891      	adds	r1, r2, r2
 8004aee:	64b9      	str	r1, [r7, #72]	; 0x48
 8004af0:	415b      	adcs	r3, r3
 8004af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004af4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004af8:	4641      	mov	r1, r8
 8004afa:	eb12 0a01 	adds.w	sl, r2, r1
 8004afe:	4649      	mov	r1, r9
 8004b00:	eb43 0b01 	adc.w	fp, r3, r1
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b18:	4692      	mov	sl, r2
 8004b1a:	469b      	mov	fp, r3
 8004b1c:	4643      	mov	r3, r8
 8004b1e:	eb1a 0303 	adds.w	r3, sl, r3
 8004b22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b26:	464b      	mov	r3, r9
 8004b28:	eb4b 0303 	adc.w	r3, fp, r3
 8004b2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b44:	460b      	mov	r3, r1
 8004b46:	18db      	adds	r3, r3, r3
 8004b48:	643b      	str	r3, [r7, #64]	; 0x40
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	eb42 0303 	adc.w	r3, r2, r3
 8004b50:	647b      	str	r3, [r7, #68]	; 0x44
 8004b52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b5a:	f7fb ffd7 	bl	8000b0c <__aeabi_uldivmod>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	4611      	mov	r1, r2
 8004b64:	4b3b      	ldr	r3, [pc, #236]	; (8004c54 <UART_SetConfig+0x2d4>)
 8004b66:	fba3 2301 	umull	r2, r3, r3, r1
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	2264      	movs	r2, #100	; 0x64
 8004b6e:	fb02 f303 	mul.w	r3, r2, r3
 8004b72:	1acb      	subs	r3, r1, r3
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b7a:	4b36      	ldr	r3, [pc, #216]	; (8004c54 <UART_SetConfig+0x2d4>)
 8004b7c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b80:	095b      	lsrs	r3, r3, #5
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b88:	441c      	add	r4, r3
 8004b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b9c:	4642      	mov	r2, r8
 8004b9e:	464b      	mov	r3, r9
 8004ba0:	1891      	adds	r1, r2, r2
 8004ba2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ba4:	415b      	adcs	r3, r3
 8004ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ba8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bac:	4641      	mov	r1, r8
 8004bae:	1851      	adds	r1, r2, r1
 8004bb0:	6339      	str	r1, [r7, #48]	; 0x30
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	414b      	adcs	r3, r1
 8004bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004bc4:	4659      	mov	r1, fp
 8004bc6:	00cb      	lsls	r3, r1, #3
 8004bc8:	4651      	mov	r1, sl
 8004bca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bce:	4651      	mov	r1, sl
 8004bd0:	00ca      	lsls	r2, r1, #3
 8004bd2:	4610      	mov	r0, r2
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	4642      	mov	r2, r8
 8004bda:	189b      	adds	r3, r3, r2
 8004bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004be0:	464b      	mov	r3, r9
 8004be2:	460a      	mov	r2, r1
 8004be4:	eb42 0303 	adc.w	r3, r2, r3
 8004be8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bf8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004bfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c00:	460b      	mov	r3, r1
 8004c02:	18db      	adds	r3, r3, r3
 8004c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c06:	4613      	mov	r3, r2
 8004c08:	eb42 0303 	adc.w	r3, r2, r3
 8004c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c16:	f7fb ff79 	bl	8000b0c <__aeabi_uldivmod>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	; (8004c54 <UART_SetConfig+0x2d4>)
 8004c20:	fba3 1302 	umull	r1, r3, r3, r2
 8004c24:	095b      	lsrs	r3, r3, #5
 8004c26:	2164      	movs	r1, #100	; 0x64
 8004c28:	fb01 f303 	mul.w	r3, r1, r3
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	3332      	adds	r3, #50	; 0x32
 8004c32:	4a08      	ldr	r2, [pc, #32]	; (8004c54 <UART_SetConfig+0x2d4>)
 8004c34:	fba2 2303 	umull	r2, r3, r2, r3
 8004c38:	095b      	lsrs	r3, r3, #5
 8004c3a:	f003 0207 	and.w	r2, r3, #7
 8004c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4422      	add	r2, r4
 8004c46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c48:	e105      	b.n	8004e56 <UART_SetConfig+0x4d6>
 8004c4a:	bf00      	nop
 8004c4c:	40011000 	.word	0x40011000
 8004c50:	40011400 	.word	0x40011400
 8004c54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c6a:	4642      	mov	r2, r8
 8004c6c:	464b      	mov	r3, r9
 8004c6e:	1891      	adds	r1, r2, r2
 8004c70:	6239      	str	r1, [r7, #32]
 8004c72:	415b      	adcs	r3, r3
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
 8004c76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c7a:	4641      	mov	r1, r8
 8004c7c:	1854      	adds	r4, r2, r1
 8004c7e:	4649      	mov	r1, r9
 8004c80:	eb43 0501 	adc.w	r5, r3, r1
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	00eb      	lsls	r3, r5, #3
 8004c8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c92:	00e2      	lsls	r2, r4, #3
 8004c94:	4614      	mov	r4, r2
 8004c96:	461d      	mov	r5, r3
 8004c98:	4643      	mov	r3, r8
 8004c9a:	18e3      	adds	r3, r4, r3
 8004c9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ca0:	464b      	mov	r3, r9
 8004ca2:	eb45 0303 	adc.w	r3, r5, r3
 8004ca6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004cc6:	4629      	mov	r1, r5
 8004cc8:	008b      	lsls	r3, r1, #2
 8004cca:	4621      	mov	r1, r4
 8004ccc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	008a      	lsls	r2, r1, #2
 8004cd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004cd8:	f7fb ff18 	bl	8000b0c <__aeabi_uldivmod>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4b60      	ldr	r3, [pc, #384]	; (8004e64 <UART_SetConfig+0x4e4>)
 8004ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	011c      	lsls	r4, r3, #4
 8004cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cf4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004cf8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004cfc:	4642      	mov	r2, r8
 8004cfe:	464b      	mov	r3, r9
 8004d00:	1891      	adds	r1, r2, r2
 8004d02:	61b9      	str	r1, [r7, #24]
 8004d04:	415b      	adcs	r3, r3
 8004d06:	61fb      	str	r3, [r7, #28]
 8004d08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d0c:	4641      	mov	r1, r8
 8004d0e:	1851      	adds	r1, r2, r1
 8004d10:	6139      	str	r1, [r7, #16]
 8004d12:	4649      	mov	r1, r9
 8004d14:	414b      	adcs	r3, r1
 8004d16:	617b      	str	r3, [r7, #20]
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	f04f 0300 	mov.w	r3, #0
 8004d20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d24:	4659      	mov	r1, fp
 8004d26:	00cb      	lsls	r3, r1, #3
 8004d28:	4651      	mov	r1, sl
 8004d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d2e:	4651      	mov	r1, sl
 8004d30:	00ca      	lsls	r2, r1, #3
 8004d32:	4610      	mov	r0, r2
 8004d34:	4619      	mov	r1, r3
 8004d36:	4603      	mov	r3, r0
 8004d38:	4642      	mov	r2, r8
 8004d3a:	189b      	adds	r3, r3, r2
 8004d3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d40:	464b      	mov	r3, r9
 8004d42:	460a      	mov	r2, r1
 8004d44:	eb42 0303 	adc.w	r3, r2, r3
 8004d48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d64:	4649      	mov	r1, r9
 8004d66:	008b      	lsls	r3, r1, #2
 8004d68:	4641      	mov	r1, r8
 8004d6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d6e:	4641      	mov	r1, r8
 8004d70:	008a      	lsls	r2, r1, #2
 8004d72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d76:	f7fb fec9 	bl	8000b0c <__aeabi_uldivmod>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4b39      	ldr	r3, [pc, #228]	; (8004e64 <UART_SetConfig+0x4e4>)
 8004d80:	fba3 1302 	umull	r1, r3, r3, r2
 8004d84:	095b      	lsrs	r3, r3, #5
 8004d86:	2164      	movs	r1, #100	; 0x64
 8004d88:	fb01 f303 	mul.w	r3, r1, r3
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	3332      	adds	r3, #50	; 0x32
 8004d92:	4a34      	ldr	r2, [pc, #208]	; (8004e64 <UART_SetConfig+0x4e4>)
 8004d94:	fba2 2303 	umull	r2, r3, r2, r3
 8004d98:	095b      	lsrs	r3, r3, #5
 8004d9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d9e:	441c      	add	r4, r3
 8004da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004da4:	2200      	movs	r2, #0
 8004da6:	673b      	str	r3, [r7, #112]	; 0x70
 8004da8:	677a      	str	r2, [r7, #116]	; 0x74
 8004daa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004dae:	4642      	mov	r2, r8
 8004db0:	464b      	mov	r3, r9
 8004db2:	1891      	adds	r1, r2, r2
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	415b      	adcs	r3, r3
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dbe:	4641      	mov	r1, r8
 8004dc0:	1851      	adds	r1, r2, r1
 8004dc2:	6039      	str	r1, [r7, #0]
 8004dc4:	4649      	mov	r1, r9
 8004dc6:	414b      	adcs	r3, r1
 8004dc8:	607b      	str	r3, [r7, #4]
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	f04f 0300 	mov.w	r3, #0
 8004dd2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004dd6:	4659      	mov	r1, fp
 8004dd8:	00cb      	lsls	r3, r1, #3
 8004dda:	4651      	mov	r1, sl
 8004ddc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004de0:	4651      	mov	r1, sl
 8004de2:	00ca      	lsls	r2, r1, #3
 8004de4:	4610      	mov	r0, r2
 8004de6:	4619      	mov	r1, r3
 8004de8:	4603      	mov	r3, r0
 8004dea:	4642      	mov	r2, r8
 8004dec:	189b      	adds	r3, r3, r2
 8004dee:	66bb      	str	r3, [r7, #104]	; 0x68
 8004df0:	464b      	mov	r3, r9
 8004df2:	460a      	mov	r2, r1
 8004df4:	eb42 0303 	adc.w	r3, r2, r3
 8004df8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	663b      	str	r3, [r7, #96]	; 0x60
 8004e04:	667a      	str	r2, [r7, #100]	; 0x64
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e12:	4649      	mov	r1, r9
 8004e14:	008b      	lsls	r3, r1, #2
 8004e16:	4641      	mov	r1, r8
 8004e18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e1c:	4641      	mov	r1, r8
 8004e1e:	008a      	lsls	r2, r1, #2
 8004e20:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e24:	f7fb fe72 	bl	8000b0c <__aeabi_uldivmod>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4b0d      	ldr	r3, [pc, #52]	; (8004e64 <UART_SetConfig+0x4e4>)
 8004e2e:	fba3 1302 	umull	r1, r3, r3, r2
 8004e32:	095b      	lsrs	r3, r3, #5
 8004e34:	2164      	movs	r1, #100	; 0x64
 8004e36:	fb01 f303 	mul.w	r3, r1, r3
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	011b      	lsls	r3, r3, #4
 8004e3e:	3332      	adds	r3, #50	; 0x32
 8004e40:	4a08      	ldr	r2, [pc, #32]	; (8004e64 <UART_SetConfig+0x4e4>)
 8004e42:	fba2 2303 	umull	r2, r3, r2, r3
 8004e46:	095b      	lsrs	r3, r3, #5
 8004e48:	f003 020f 	and.w	r2, r3, #15
 8004e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4422      	add	r2, r4
 8004e54:	609a      	str	r2, [r3, #8]
}
 8004e56:	bf00      	nop
 8004e58:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e62:	bf00      	nop
 8004e64:	51eb851f 	.word	0x51eb851f

08004e68 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	4603      	mov	r3, r0
 8004e70:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004e72:	2300      	movs	r3, #0
 8004e74:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004e76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e7a:	2b84      	cmp	r3, #132	; 0x84
 8004e7c:	d005      	beq.n	8004e8a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004e7e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4413      	add	r3, r2
 8004e86:	3303      	adds	r3, #3
 8004e88:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004e9c:	f000 faf6 	bl	800548c <vTaskStartScheduler>
  
  return osOK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004ea6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ea8:	b089      	sub	sp, #36	; 0x24
 8004eaa:	af04      	add	r7, sp, #16
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d020      	beq.n	8004efa <osThreadCreate+0x54>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d01c      	beq.n	8004efa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685c      	ldr	r4, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681d      	ldr	r5, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691e      	ldr	r6, [r3, #16]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff ffc8 	bl	8004e68 <makeFreeRtosPriority>
 8004ed8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ee2:	9202      	str	r2, [sp, #8]
 8004ee4:	9301      	str	r3, [sp, #4]
 8004ee6:	9100      	str	r1, [sp, #0]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	4632      	mov	r2, r6
 8004eec:	4629      	mov	r1, r5
 8004eee:	4620      	mov	r0, r4
 8004ef0:	f000 f8ed 	bl	80050ce <xTaskCreateStatic>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	e01c      	b.n	8004f34 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685c      	ldr	r4, [r3, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f06:	b29e      	uxth	r6, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff ffaa 	bl	8004e68 <makeFreeRtosPriority>
 8004f14:	4602      	mov	r2, r0
 8004f16:	f107 030c 	add.w	r3, r7, #12
 8004f1a:	9301      	str	r3, [sp, #4]
 8004f1c:	9200      	str	r2, [sp, #0]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	4632      	mov	r2, r6
 8004f22:	4629      	mov	r1, r5
 8004f24:	4620      	mov	r0, r4
 8004f26:	f000 f92f 	bl	8005188 <xTaskCreate>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d001      	beq.n	8004f34 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004f30:	2300      	movs	r3, #0
 8004f32:	e000      	b.n	8004f36 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004f34:	68fb      	ldr	r3, [r7, #12]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f3e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b084      	sub	sp, #16
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <osDelay+0x16>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	e000      	b.n	8004f56 <osDelay+0x18>
 8004f54:	2301      	movs	r3, #1
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 fa64 	bl	8005424 <vTaskDelay>
  
  return osOK;
 8004f5c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f103 0208 	add.w	r2, r3, #8
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f7e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f103 0208 	add.w	r2, r3, #8
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f103 0208 	add.w	r2, r3, #8
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	689a      	ldr	r2, [r3, #8]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	601a      	str	r2, [r3, #0]
}
 8004ffc:	bf00      	nop
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501e:	d103      	bne.n	8005028 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	e00c      	b.n	8005042 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3308      	adds	r3, #8
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	e002      	b.n	8005036 <vListInsert+0x2e>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	429a      	cmp	r2, r3
 8005040:	d2f6      	bcs.n	8005030 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	601a      	str	r2, [r3, #0]
}
 800506e:	bf00      	nop
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800507a:	b480      	push	{r7}
 800507c:	b085      	sub	sp, #20
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6892      	ldr	r2, [r2, #8]
 8005090:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6852      	ldr	r2, [r2, #4]
 800509a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d103      	bne.n	80050ae <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	1e5a      	subs	r2, r3, #1
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b08e      	sub	sp, #56	; 0x38
 80050d2:	af04      	add	r7, sp, #16
 80050d4:	60f8      	str	r0, [r7, #12]
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	607a      	str	r2, [r7, #4]
 80050da:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10a      	bne.n	80050f8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80050f4:	bf00      	nop
 80050f6:	e7fe      	b.n	80050f6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80050f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10a      	bne.n	8005114 <xTaskCreateStatic+0x46>
	__asm volatile
 80050fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	61fb      	str	r3, [r7, #28]
}
 8005110:	bf00      	nop
 8005112:	e7fe      	b.n	8005112 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005114:	23b4      	movs	r3, #180	; 0xb4
 8005116:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	2bb4      	cmp	r3, #180	; 0xb4
 800511c:	d00a      	beq.n	8005134 <xTaskCreateStatic+0x66>
	__asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	61bb      	str	r3, [r7, #24]
}
 8005130:	bf00      	nop
 8005132:	e7fe      	b.n	8005132 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005134:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01e      	beq.n	800517a <xTaskCreateStatic+0xac>
 800513c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513e:	2b00      	cmp	r3, #0
 8005140:	d01b      	beq.n	800517a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005144:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800514a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	2202      	movs	r2, #2
 8005150:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005154:	2300      	movs	r3, #0
 8005156:	9303      	str	r3, [sp, #12]
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	9302      	str	r3, [sp, #8]
 800515c:	f107 0314 	add.w	r3, r7, #20
 8005160:	9301      	str	r3, [sp, #4]
 8005162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	68b9      	ldr	r1, [r7, #8]
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 f851 	bl	8005214 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005172:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005174:	f000 f8ec 	bl	8005350 <prvAddNewTaskToReadyList>
 8005178:	e001      	b.n	800517e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800517a:	2300      	movs	r3, #0
 800517c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800517e:	697b      	ldr	r3, [r7, #20]
	}
 8005180:	4618      	mov	r0, r3
 8005182:	3728      	adds	r7, #40	; 0x28
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005188:	b580      	push	{r7, lr}
 800518a:	b08c      	sub	sp, #48	; 0x30
 800518c:	af04      	add	r7, sp, #16
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	603b      	str	r3, [r7, #0]
 8005194:	4613      	mov	r3, r2
 8005196:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005198:	88fb      	ldrh	r3, [r7, #6]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4618      	mov	r0, r3
 800519e:	f000 fef3 	bl	8005f88 <pvPortMalloc>
 80051a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00e      	beq.n	80051c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80051aa:	20b4      	movs	r0, #180	; 0xb4
 80051ac:	f000 feec 	bl	8005f88 <pvPortMalloc>
 80051b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	631a      	str	r2, [r3, #48]	; 0x30
 80051be:	e005      	b.n	80051cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051c0:	6978      	ldr	r0, [r7, #20]
 80051c2:	f000 ffad 	bl	8006120 <vPortFree>
 80051c6:	e001      	b.n	80051cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051c8:	2300      	movs	r3, #0
 80051ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d017      	beq.n	8005202 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051da:	88fa      	ldrh	r2, [r7, #6]
 80051dc:	2300      	movs	r3, #0
 80051de:	9303      	str	r3, [sp, #12]
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	9302      	str	r3, [sp, #8]
 80051e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e6:	9301      	str	r3, [sp, #4]
 80051e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	68b9      	ldr	r1, [r7, #8]
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 f80f 	bl	8005214 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051f6:	69f8      	ldr	r0, [r7, #28]
 80051f8:	f000 f8aa 	bl	8005350 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051fc:	2301      	movs	r3, #1
 80051fe:	61bb      	str	r3, [r7, #24]
 8005200:	e002      	b.n	8005208 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005202:	f04f 33ff 	mov.w	r3, #4294967295
 8005206:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005208:	69bb      	ldr	r3, [r7, #24]
	}
 800520a:	4618      	mov	r0, r3
 800520c:	3720      	adds	r7, #32
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b088      	sub	sp, #32
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
 8005220:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800522c:	3b01      	subs	r3, #1
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	f023 0307 	bic.w	r3, r3, #7
 800523a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <prvInitialiseNewTask+0x48>
	__asm volatile
 8005246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524a:	f383 8811 	msr	BASEPRI, r3
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	617b      	str	r3, [r7, #20]
}
 8005258:	bf00      	nop
 800525a:	e7fe      	b.n	800525a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d01f      	beq.n	80052a2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005262:	2300      	movs	r3, #0
 8005264:	61fb      	str	r3, [r7, #28]
 8005266:	e012      	b.n	800528e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	4413      	add	r3, r2
 800526e:	7819      	ldrb	r1, [r3, #0]
 8005270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	4413      	add	r3, r2
 8005276:	3334      	adds	r3, #52	; 0x34
 8005278:	460a      	mov	r2, r1
 800527a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	4413      	add	r3, r2
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d006      	beq.n	8005296 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	3301      	adds	r3, #1
 800528c:	61fb      	str	r3, [r7, #28]
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	2b0f      	cmp	r3, #15
 8005292:	d9e9      	bls.n	8005268 <prvInitialiseNewTask+0x54>
 8005294:	e000      	b.n	8005298 <prvInitialiseNewTask+0x84>
			{
				break;
 8005296:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052a0:	e003      	b.n	80052aa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80052a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ac:	2b06      	cmp	r3, #6
 80052ae:	d901      	bls.n	80052b4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052b0:	2306      	movs	r3, #6
 80052b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052be:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80052c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c2:	2200      	movs	r2, #0
 80052c4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c8:	3304      	adds	r3, #4
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff fe6b 	bl	8004fa6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d2:	3318      	adds	r3, #24
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff fe66 	bl	8004fa6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e2:	f1c3 0207 	rsb	r2, r3, #7
 80052e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f2:	2200      	movs	r2, #0
 80052f4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005302:	334c      	adds	r3, #76	; 0x4c
 8005304:	2260      	movs	r2, #96	; 0x60
 8005306:	2100      	movs	r1, #0
 8005308:	4618      	mov	r0, r3
 800530a:	f001 f84d 	bl	80063a8 <memset>
 800530e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005310:	4a0c      	ldr	r2, [pc, #48]	; (8005344 <prvInitialiseNewTask+0x130>)
 8005312:	651a      	str	r2, [r3, #80]	; 0x50
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	4a0c      	ldr	r2, [pc, #48]	; (8005348 <prvInitialiseNewTask+0x134>)
 8005318:	655a      	str	r2, [r3, #84]	; 0x54
 800531a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531c:	4a0b      	ldr	r2, [pc, #44]	; (800534c <prvInitialiseNewTask+0x138>)
 800531e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	68f9      	ldr	r1, [r7, #12]
 8005324:	69b8      	ldr	r0, [r7, #24]
 8005326:	f000 fc1f 	bl	8005b68 <pxPortInitialiseStack>
 800532a:	4602      	mov	r2, r0
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800533a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800533c:	bf00      	nop
 800533e:	3720      	adds	r7, #32
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	08006638 	.word	0x08006638
 8005348:	08006658 	.word	0x08006658
 800534c:	08006618 	.word	0x08006618

08005350 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005358:	f000 fd34 	bl	8005dc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800535c:	4b2a      	ldr	r3, [pc, #168]	; (8005408 <prvAddNewTaskToReadyList+0xb8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3301      	adds	r3, #1
 8005362:	4a29      	ldr	r2, [pc, #164]	; (8005408 <prvAddNewTaskToReadyList+0xb8>)
 8005364:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005366:	4b29      	ldr	r3, [pc, #164]	; (800540c <prvAddNewTaskToReadyList+0xbc>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d109      	bne.n	8005382 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800536e:	4a27      	ldr	r2, [pc, #156]	; (800540c <prvAddNewTaskToReadyList+0xbc>)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005374:	4b24      	ldr	r3, [pc, #144]	; (8005408 <prvAddNewTaskToReadyList+0xb8>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d110      	bne.n	800539e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800537c:	f000 facc 	bl	8005918 <prvInitialiseTaskLists>
 8005380:	e00d      	b.n	800539e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005382:	4b23      	ldr	r3, [pc, #140]	; (8005410 <prvAddNewTaskToReadyList+0xc0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d109      	bne.n	800539e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800538a:	4b20      	ldr	r3, [pc, #128]	; (800540c <prvAddNewTaskToReadyList+0xbc>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005394:	429a      	cmp	r2, r3
 8005396:	d802      	bhi.n	800539e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005398:	4a1c      	ldr	r2, [pc, #112]	; (800540c <prvAddNewTaskToReadyList+0xbc>)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800539e:	4b1d      	ldr	r3, [pc, #116]	; (8005414 <prvAddNewTaskToReadyList+0xc4>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3301      	adds	r3, #1
 80053a4:	4a1b      	ldr	r2, [pc, #108]	; (8005414 <prvAddNewTaskToReadyList+0xc4>)
 80053a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ac:	2201      	movs	r2, #1
 80053ae:	409a      	lsls	r2, r3
 80053b0:	4b19      	ldr	r3, [pc, #100]	; (8005418 <prvAddNewTaskToReadyList+0xc8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	4a18      	ldr	r2, [pc, #96]	; (8005418 <prvAddNewTaskToReadyList+0xc8>)
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053be:	4613      	mov	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4a15      	ldr	r2, [pc, #84]	; (800541c <prvAddNewTaskToReadyList+0xcc>)
 80053c8:	441a      	add	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	3304      	adds	r3, #4
 80053ce:	4619      	mov	r1, r3
 80053d0:	4610      	mov	r0, r2
 80053d2:	f7ff fdf5 	bl	8004fc0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053d6:	f000 fd25 	bl	8005e24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053da:	4b0d      	ldr	r3, [pc, #52]	; (8005410 <prvAddNewTaskToReadyList+0xc0>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00e      	beq.n	8005400 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053e2:	4b0a      	ldr	r3, [pc, #40]	; (800540c <prvAddNewTaskToReadyList+0xbc>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d207      	bcs.n	8005400 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053f0:	4b0b      	ldr	r3, [pc, #44]	; (8005420 <prvAddNewTaskToReadyList+0xd0>)
 80053f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005400:	bf00      	nop
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	20000684 	.word	0x20000684
 800540c:	20000584 	.word	0x20000584
 8005410:	20000690 	.word	0x20000690
 8005414:	200006a0 	.word	0x200006a0
 8005418:	2000068c 	.word	0x2000068c
 800541c:	20000588 	.word	0x20000588
 8005420:	e000ed04 	.word	0xe000ed04

08005424 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800542c:	2300      	movs	r3, #0
 800542e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d017      	beq.n	8005466 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005436:	4b13      	ldr	r3, [pc, #76]	; (8005484 <vTaskDelay+0x60>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <vTaskDelay+0x30>
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	60bb      	str	r3, [r7, #8]
}
 8005450:	bf00      	nop
 8005452:	e7fe      	b.n	8005452 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005454:	f000 f884 	bl	8005560 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005458:	2100      	movs	r1, #0
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fb1e 	bl	8005a9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005460:	f000 f88c 	bl	800557c <xTaskResumeAll>
 8005464:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d107      	bne.n	800547c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800546c:	4b06      	ldr	r3, [pc, #24]	; (8005488 <vTaskDelay+0x64>)
 800546e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800547c:	bf00      	nop
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	200006ac 	.word	0x200006ac
 8005488:	e000ed04 	.word	0xe000ed04

0800548c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08a      	sub	sp, #40	; 0x28
 8005490:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005492:	2300      	movs	r3, #0
 8005494:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005496:	2300      	movs	r3, #0
 8005498:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800549a:	463a      	mov	r2, r7
 800549c:	1d39      	adds	r1, r7, #4
 800549e:	f107 0308 	add.w	r3, r7, #8
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fb fcb4 	bl	8000e10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054a8:	6839      	ldr	r1, [r7, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	9202      	str	r2, [sp, #8]
 80054b0:	9301      	str	r3, [sp, #4]
 80054b2:	2300      	movs	r3, #0
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	2300      	movs	r3, #0
 80054b8:	460a      	mov	r2, r1
 80054ba:	4921      	ldr	r1, [pc, #132]	; (8005540 <vTaskStartScheduler+0xb4>)
 80054bc:	4821      	ldr	r0, [pc, #132]	; (8005544 <vTaskStartScheduler+0xb8>)
 80054be:	f7ff fe06 	bl	80050ce <xTaskCreateStatic>
 80054c2:	4603      	mov	r3, r0
 80054c4:	4a20      	ldr	r2, [pc, #128]	; (8005548 <vTaskStartScheduler+0xbc>)
 80054c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80054c8:	4b1f      	ldr	r3, [pc, #124]	; (8005548 <vTaskStartScheduler+0xbc>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054d0:	2301      	movs	r3, #1
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	e001      	b.n	80054da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054d6:	2300      	movs	r3, #0
 80054d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d11b      	bne.n	8005518 <vTaskStartScheduler+0x8c>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	613b      	str	r3, [r7, #16]
}
 80054f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80054f4:	4b15      	ldr	r3, [pc, #84]	; (800554c <vTaskStartScheduler+0xc0>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	334c      	adds	r3, #76	; 0x4c
 80054fa:	4a15      	ldr	r2, [pc, #84]	; (8005550 <vTaskStartScheduler+0xc4>)
 80054fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054fe:	4b15      	ldr	r3, [pc, #84]	; (8005554 <vTaskStartScheduler+0xc8>)
 8005500:	f04f 32ff 	mov.w	r2, #4294967295
 8005504:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005506:	4b14      	ldr	r3, [pc, #80]	; (8005558 <vTaskStartScheduler+0xcc>)
 8005508:	2201      	movs	r2, #1
 800550a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800550c:	4b13      	ldr	r3, [pc, #76]	; (800555c <vTaskStartScheduler+0xd0>)
 800550e:	2200      	movs	r2, #0
 8005510:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005512:	f000 fbb5 	bl	8005c80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005516:	e00e      	b.n	8005536 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551e:	d10a      	bne.n	8005536 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	60fb      	str	r3, [r7, #12]
}
 8005532:	bf00      	nop
 8005534:	e7fe      	b.n	8005534 <vTaskStartScheduler+0xa8>
}
 8005536:	bf00      	nop
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	080065f8 	.word	0x080065f8
 8005544:	080058e9 	.word	0x080058e9
 8005548:	200006a8 	.word	0x200006a8
 800554c:	20000584 	.word	0x20000584
 8005550:	20000020 	.word	0x20000020
 8005554:	200006a4 	.word	0x200006a4
 8005558:	20000690 	.word	0x20000690
 800555c:	20000688 	.word	0x20000688

08005560 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005564:	4b04      	ldr	r3, [pc, #16]	; (8005578 <vTaskSuspendAll+0x18>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	3301      	adds	r3, #1
 800556a:	4a03      	ldr	r2, [pc, #12]	; (8005578 <vTaskSuspendAll+0x18>)
 800556c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800556e:	bf00      	nop
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	200006ac 	.word	0x200006ac

0800557c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005582:	2300      	movs	r3, #0
 8005584:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005586:	2300      	movs	r3, #0
 8005588:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800558a:	4b41      	ldr	r3, [pc, #260]	; (8005690 <xTaskResumeAll+0x114>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10a      	bne.n	80055a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8005592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005596:	f383 8811 	msr	BASEPRI, r3
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	603b      	str	r3, [r7, #0]
}
 80055a4:	bf00      	nop
 80055a6:	e7fe      	b.n	80055a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80055a8:	f000 fc0c 	bl	8005dc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055ac:	4b38      	ldr	r3, [pc, #224]	; (8005690 <xTaskResumeAll+0x114>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	4a37      	ldr	r2, [pc, #220]	; (8005690 <xTaskResumeAll+0x114>)
 80055b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055b6:	4b36      	ldr	r3, [pc, #216]	; (8005690 <xTaskResumeAll+0x114>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d161      	bne.n	8005682 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055be:	4b35      	ldr	r3, [pc, #212]	; (8005694 <xTaskResumeAll+0x118>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d05d      	beq.n	8005682 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055c6:	e02e      	b.n	8005626 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055c8:	4b33      	ldr	r3, [pc, #204]	; (8005698 <xTaskResumeAll+0x11c>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	3318      	adds	r3, #24
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff fd50 	bl	800507a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	3304      	adds	r3, #4
 80055de:	4618      	mov	r0, r3
 80055e0:	f7ff fd4b 	bl	800507a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e8:	2201      	movs	r2, #1
 80055ea:	409a      	lsls	r2, r3
 80055ec:	4b2b      	ldr	r3, [pc, #172]	; (800569c <xTaskResumeAll+0x120>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	4a2a      	ldr	r2, [pc, #168]	; (800569c <xTaskResumeAll+0x120>)
 80055f4:	6013      	str	r3, [r2, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055fa:	4613      	mov	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4a27      	ldr	r2, [pc, #156]	; (80056a0 <xTaskResumeAll+0x124>)
 8005604:	441a      	add	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3304      	adds	r3, #4
 800560a:	4619      	mov	r1, r3
 800560c:	4610      	mov	r0, r2
 800560e:	f7ff fcd7 	bl	8004fc0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005616:	4b23      	ldr	r3, [pc, #140]	; (80056a4 <xTaskResumeAll+0x128>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561c:	429a      	cmp	r2, r3
 800561e:	d302      	bcc.n	8005626 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005620:	4b21      	ldr	r3, [pc, #132]	; (80056a8 <xTaskResumeAll+0x12c>)
 8005622:	2201      	movs	r2, #1
 8005624:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005626:	4b1c      	ldr	r3, [pc, #112]	; (8005698 <xTaskResumeAll+0x11c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1cc      	bne.n	80055c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d001      	beq.n	8005638 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005634:	f000 fa12 	bl	8005a5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005638:	4b1c      	ldr	r3, [pc, #112]	; (80056ac <xTaskResumeAll+0x130>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d010      	beq.n	8005666 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005644:	f000 f836 	bl	80056b4 <xTaskIncrementTick>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800564e:	4b16      	ldr	r3, [pc, #88]	; (80056a8 <xTaskResumeAll+0x12c>)
 8005650:	2201      	movs	r2, #1
 8005652:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3b01      	subs	r3, #1
 8005658:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1f1      	bne.n	8005644 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005660:	4b12      	ldr	r3, [pc, #72]	; (80056ac <xTaskResumeAll+0x130>)
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005666:	4b10      	ldr	r3, [pc, #64]	; (80056a8 <xTaskResumeAll+0x12c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d009      	beq.n	8005682 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800566e:	2301      	movs	r3, #1
 8005670:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005672:	4b0f      	ldr	r3, [pc, #60]	; (80056b0 <xTaskResumeAll+0x134>)
 8005674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005682:	f000 fbcf 	bl	8005e24 <vPortExitCritical>

	return xAlreadyYielded;
 8005686:	68bb      	ldr	r3, [r7, #8]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	200006ac 	.word	0x200006ac
 8005694:	20000684 	.word	0x20000684
 8005698:	20000644 	.word	0x20000644
 800569c:	2000068c 	.word	0x2000068c
 80056a0:	20000588 	.word	0x20000588
 80056a4:	20000584 	.word	0x20000584
 80056a8:	20000698 	.word	0x20000698
 80056ac:	20000694 	.word	0x20000694
 80056b0:	e000ed04 	.word	0xe000ed04

080056b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056ba:	2300      	movs	r3, #0
 80056bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056be:	4b4e      	ldr	r3, [pc, #312]	; (80057f8 <xTaskIncrementTick+0x144>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f040 808e 	bne.w	80057e4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056c8:	4b4c      	ldr	r3, [pc, #304]	; (80057fc <xTaskIncrementTick+0x148>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3301      	adds	r3, #1
 80056ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056d0:	4a4a      	ldr	r2, [pc, #296]	; (80057fc <xTaskIncrementTick+0x148>)
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d120      	bne.n	800571e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80056dc:	4b48      	ldr	r3, [pc, #288]	; (8005800 <xTaskIncrementTick+0x14c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <xTaskIncrementTick+0x48>
	__asm volatile
 80056e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	603b      	str	r3, [r7, #0]
}
 80056f8:	bf00      	nop
 80056fa:	e7fe      	b.n	80056fa <xTaskIncrementTick+0x46>
 80056fc:	4b40      	ldr	r3, [pc, #256]	; (8005800 <xTaskIncrementTick+0x14c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	4b40      	ldr	r3, [pc, #256]	; (8005804 <xTaskIncrementTick+0x150>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a3e      	ldr	r2, [pc, #248]	; (8005800 <xTaskIncrementTick+0x14c>)
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	4a3e      	ldr	r2, [pc, #248]	; (8005804 <xTaskIncrementTick+0x150>)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	4b3d      	ldr	r3, [pc, #244]	; (8005808 <xTaskIncrementTick+0x154>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3301      	adds	r3, #1
 8005716:	4a3c      	ldr	r2, [pc, #240]	; (8005808 <xTaskIncrementTick+0x154>)
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	f000 f99f 	bl	8005a5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800571e:	4b3b      	ldr	r3, [pc, #236]	; (800580c <xTaskIncrementTick+0x158>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	429a      	cmp	r2, r3
 8005726:	d348      	bcc.n	80057ba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005728:	4b35      	ldr	r3, [pc, #212]	; (8005800 <xTaskIncrementTick+0x14c>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d104      	bne.n	800573c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005732:	4b36      	ldr	r3, [pc, #216]	; (800580c <xTaskIncrementTick+0x158>)
 8005734:	f04f 32ff 	mov.w	r2, #4294967295
 8005738:	601a      	str	r2, [r3, #0]
					break;
 800573a:	e03e      	b.n	80057ba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800573c:	4b30      	ldr	r3, [pc, #192]	; (8005800 <xTaskIncrementTick+0x14c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	429a      	cmp	r2, r3
 8005752:	d203      	bcs.n	800575c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005754:	4a2d      	ldr	r2, [pc, #180]	; (800580c <xTaskIncrementTick+0x158>)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800575a:	e02e      	b.n	80057ba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	3304      	adds	r3, #4
 8005760:	4618      	mov	r0, r3
 8005762:	f7ff fc8a 	bl	800507a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576a:	2b00      	cmp	r3, #0
 800576c:	d004      	beq.n	8005778 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	3318      	adds	r3, #24
 8005772:	4618      	mov	r0, r3
 8005774:	f7ff fc81 	bl	800507a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577c:	2201      	movs	r2, #1
 800577e:	409a      	lsls	r2, r3
 8005780:	4b23      	ldr	r3, [pc, #140]	; (8005810 <xTaskIncrementTick+0x15c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4313      	orrs	r3, r2
 8005786:	4a22      	ldr	r2, [pc, #136]	; (8005810 <xTaskIncrementTick+0x15c>)
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800578e:	4613      	mov	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4a1f      	ldr	r2, [pc, #124]	; (8005814 <xTaskIncrementTick+0x160>)
 8005798:	441a      	add	r2, r3
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	3304      	adds	r3, #4
 800579e:	4619      	mov	r1, r3
 80057a0:	4610      	mov	r0, r2
 80057a2:	f7ff fc0d 	bl	8004fc0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057aa:	4b1b      	ldr	r3, [pc, #108]	; (8005818 <xTaskIncrementTick+0x164>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d3b9      	bcc.n	8005728 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80057b4:	2301      	movs	r3, #1
 80057b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057b8:	e7b6      	b.n	8005728 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057ba:	4b17      	ldr	r3, [pc, #92]	; (8005818 <xTaskIncrementTick+0x164>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c0:	4914      	ldr	r1, [pc, #80]	; (8005814 <xTaskIncrementTick+0x160>)
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	440b      	add	r3, r1
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d901      	bls.n	80057d6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80057d2:	2301      	movs	r3, #1
 80057d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80057d6:	4b11      	ldr	r3, [pc, #68]	; (800581c <xTaskIncrementTick+0x168>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d007      	beq.n	80057ee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80057de:	2301      	movs	r3, #1
 80057e0:	617b      	str	r3, [r7, #20]
 80057e2:	e004      	b.n	80057ee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80057e4:	4b0e      	ldr	r3, [pc, #56]	; (8005820 <xTaskIncrementTick+0x16c>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3301      	adds	r3, #1
 80057ea:	4a0d      	ldr	r2, [pc, #52]	; (8005820 <xTaskIncrementTick+0x16c>)
 80057ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80057ee:	697b      	ldr	r3, [r7, #20]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3718      	adds	r7, #24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	200006ac 	.word	0x200006ac
 80057fc:	20000688 	.word	0x20000688
 8005800:	2000063c 	.word	0x2000063c
 8005804:	20000640 	.word	0x20000640
 8005808:	2000069c 	.word	0x2000069c
 800580c:	200006a4 	.word	0x200006a4
 8005810:	2000068c 	.word	0x2000068c
 8005814:	20000588 	.word	0x20000588
 8005818:	20000584 	.word	0x20000584
 800581c:	20000698 	.word	0x20000698
 8005820:	20000694 	.word	0x20000694

08005824 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800582a:	4b29      	ldr	r3, [pc, #164]	; (80058d0 <vTaskSwitchContext+0xac>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005832:	4b28      	ldr	r3, [pc, #160]	; (80058d4 <vTaskSwitchContext+0xb0>)
 8005834:	2201      	movs	r2, #1
 8005836:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005838:	e044      	b.n	80058c4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800583a:	4b26      	ldr	r3, [pc, #152]	; (80058d4 <vTaskSwitchContext+0xb0>)
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005840:	4b25      	ldr	r3, [pc, #148]	; (80058d8 <vTaskSwitchContext+0xb4>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	fab3 f383 	clz	r3, r3
 800584c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800584e:	7afb      	ldrb	r3, [r7, #11]
 8005850:	f1c3 031f 	rsb	r3, r3, #31
 8005854:	617b      	str	r3, [r7, #20]
 8005856:	4921      	ldr	r1, [pc, #132]	; (80058dc <vTaskSwitchContext+0xb8>)
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	4613      	mov	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4413      	add	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	440b      	add	r3, r1
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10a      	bne.n	8005880 <vTaskSwitchContext+0x5c>
	__asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	607b      	str	r3, [r7, #4]
}
 800587c:	bf00      	nop
 800587e:	e7fe      	b.n	800587e <vTaskSwitchContext+0x5a>
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	4613      	mov	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4a14      	ldr	r2, [pc, #80]	; (80058dc <vTaskSwitchContext+0xb8>)
 800588c:	4413      	add	r3, r2
 800588e:	613b      	str	r3, [r7, #16]
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	605a      	str	r2, [r3, #4]
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	3308      	adds	r3, #8
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d104      	bne.n	80058b0 <vTaskSwitchContext+0x8c>
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	605a      	str	r2, [r3, #4]
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	4a0a      	ldr	r2, [pc, #40]	; (80058e0 <vTaskSwitchContext+0xbc>)
 80058b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058ba:	4b09      	ldr	r3, [pc, #36]	; (80058e0 <vTaskSwitchContext+0xbc>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	334c      	adds	r3, #76	; 0x4c
 80058c0:	4a08      	ldr	r2, [pc, #32]	; (80058e4 <vTaskSwitchContext+0xc0>)
 80058c2:	6013      	str	r3, [r2, #0]
}
 80058c4:	bf00      	nop
 80058c6:	371c      	adds	r7, #28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	200006ac 	.word	0x200006ac
 80058d4:	20000698 	.word	0x20000698
 80058d8:	2000068c 	.word	0x2000068c
 80058dc:	20000588 	.word	0x20000588
 80058e0:	20000584 	.word	0x20000584
 80058e4:	20000020 	.word	0x20000020

080058e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80058f0:	f000 f852 	bl	8005998 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80058f4:	4b06      	ldr	r3, [pc, #24]	; (8005910 <prvIdleTask+0x28>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d9f9      	bls.n	80058f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80058fc:	4b05      	ldr	r3, [pc, #20]	; (8005914 <prvIdleTask+0x2c>)
 80058fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005902:	601a      	str	r2, [r3, #0]
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800590c:	e7f0      	b.n	80058f0 <prvIdleTask+0x8>
 800590e:	bf00      	nop
 8005910:	20000588 	.word	0x20000588
 8005914:	e000ed04 	.word	0xe000ed04

08005918 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800591e:	2300      	movs	r3, #0
 8005920:	607b      	str	r3, [r7, #4]
 8005922:	e00c      	b.n	800593e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4a12      	ldr	r2, [pc, #72]	; (8005978 <prvInitialiseTaskLists+0x60>)
 8005930:	4413      	add	r3, r2
 8005932:	4618      	mov	r0, r3
 8005934:	f7ff fb17 	bl	8004f66 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	3301      	adds	r3, #1
 800593c:	607b      	str	r3, [r7, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b06      	cmp	r3, #6
 8005942:	d9ef      	bls.n	8005924 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005944:	480d      	ldr	r0, [pc, #52]	; (800597c <prvInitialiseTaskLists+0x64>)
 8005946:	f7ff fb0e 	bl	8004f66 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800594a:	480d      	ldr	r0, [pc, #52]	; (8005980 <prvInitialiseTaskLists+0x68>)
 800594c:	f7ff fb0b 	bl	8004f66 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005950:	480c      	ldr	r0, [pc, #48]	; (8005984 <prvInitialiseTaskLists+0x6c>)
 8005952:	f7ff fb08 	bl	8004f66 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005956:	480c      	ldr	r0, [pc, #48]	; (8005988 <prvInitialiseTaskLists+0x70>)
 8005958:	f7ff fb05 	bl	8004f66 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800595c:	480b      	ldr	r0, [pc, #44]	; (800598c <prvInitialiseTaskLists+0x74>)
 800595e:	f7ff fb02 	bl	8004f66 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005962:	4b0b      	ldr	r3, [pc, #44]	; (8005990 <prvInitialiseTaskLists+0x78>)
 8005964:	4a05      	ldr	r2, [pc, #20]	; (800597c <prvInitialiseTaskLists+0x64>)
 8005966:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005968:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <prvInitialiseTaskLists+0x7c>)
 800596a:	4a05      	ldr	r2, [pc, #20]	; (8005980 <prvInitialiseTaskLists+0x68>)
 800596c:	601a      	str	r2, [r3, #0]
}
 800596e:	bf00      	nop
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	20000588 	.word	0x20000588
 800597c:	20000614 	.word	0x20000614
 8005980:	20000628 	.word	0x20000628
 8005984:	20000644 	.word	0x20000644
 8005988:	20000658 	.word	0x20000658
 800598c:	20000670 	.word	0x20000670
 8005990:	2000063c 	.word	0x2000063c
 8005994:	20000640 	.word	0x20000640

08005998 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800599e:	e019      	b.n	80059d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059a0:	f000 fa10 	bl	8005dc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059a4:	4b10      	ldr	r3, [pc, #64]	; (80059e8 <prvCheckTasksWaitingTermination+0x50>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	3304      	adds	r3, #4
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff fb62 	bl	800507a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059b6:	4b0d      	ldr	r3, [pc, #52]	; (80059ec <prvCheckTasksWaitingTermination+0x54>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	4a0b      	ldr	r2, [pc, #44]	; (80059ec <prvCheckTasksWaitingTermination+0x54>)
 80059be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059c0:	4b0b      	ldr	r3, [pc, #44]	; (80059f0 <prvCheckTasksWaitingTermination+0x58>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3b01      	subs	r3, #1
 80059c6:	4a0a      	ldr	r2, [pc, #40]	; (80059f0 <prvCheckTasksWaitingTermination+0x58>)
 80059c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059ca:	f000 fa2b 	bl	8005e24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f810 	bl	80059f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059d4:	4b06      	ldr	r3, [pc, #24]	; (80059f0 <prvCheckTasksWaitingTermination+0x58>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e1      	bne.n	80059a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80059dc:	bf00      	nop
 80059de:	bf00      	nop
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	20000658 	.word	0x20000658
 80059ec:	20000684 	.word	0x20000684
 80059f0:	2000066c 	.word	0x2000066c

080059f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	334c      	adds	r3, #76	; 0x4c
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 fce7 	bl	80063d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d108      	bne.n	8005a22 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 fb83 	bl	8006120 <vPortFree>
				vPortFree( pxTCB );
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fb80 	bl	8006120 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a20:	e018      	b.n	8005a54 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d103      	bne.n	8005a34 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fb77 	bl	8006120 <vPortFree>
	}
 8005a32:	e00f      	b.n	8005a54 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d00a      	beq.n	8005a54 <prvDeleteTCB+0x60>
	__asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	60fb      	str	r3, [r7, #12]
}
 8005a50:	bf00      	nop
 8005a52:	e7fe      	b.n	8005a52 <prvDeleteTCB+0x5e>
	}
 8005a54:	bf00      	nop
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a62:	4b0c      	ldr	r3, [pc, #48]	; (8005a94 <prvResetNextTaskUnblockTime+0x38>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d104      	bne.n	8005a76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a6c:	4b0a      	ldr	r3, [pc, #40]	; (8005a98 <prvResetNextTaskUnblockTime+0x3c>)
 8005a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a74:	e008      	b.n	8005a88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a76:	4b07      	ldr	r3, [pc, #28]	; (8005a94 <prvResetNextTaskUnblockTime+0x38>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	4a04      	ldr	r2, [pc, #16]	; (8005a98 <prvResetNextTaskUnblockTime+0x3c>)
 8005a86:	6013      	str	r3, [r2, #0]
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	2000063c 	.word	0x2000063c
 8005a98:	200006a4 	.word	0x200006a4

08005a9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005aa6:	4b29      	ldr	r3, [pc, #164]	; (8005b4c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005aac:	4b28      	ldr	r3, [pc, #160]	; (8005b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7ff fae1 	bl	800507a <uxListRemove>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10b      	bne.n	8005ad6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005abe:	4b24      	ldr	r3, [pc, #144]	; (8005b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aca:	43da      	mvns	r2, r3
 8005acc:	4b21      	ldr	r3, [pc, #132]	; (8005b54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	4a20      	ldr	r2, [pc, #128]	; (8005b54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ad4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005adc:	d10a      	bne.n	8005af4 <prvAddCurrentTaskToDelayedList+0x58>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d007      	beq.n	8005af4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ae4:	4b1a      	ldr	r3, [pc, #104]	; (8005b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3304      	adds	r3, #4
 8005aea:	4619      	mov	r1, r3
 8005aec:	481a      	ldr	r0, [pc, #104]	; (8005b58 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005aee:	f7ff fa67 	bl	8004fc0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005af2:	e026      	b.n	8005b42 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4413      	add	r3, r2
 8005afa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005afc:	4b14      	ldr	r3, [pc, #80]	; (8005b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d209      	bcs.n	8005b20 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b0c:	4b13      	ldr	r3, [pc, #76]	; (8005b5c <prvAddCurrentTaskToDelayedList+0xc0>)
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	4b0f      	ldr	r3, [pc, #60]	; (8005b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3304      	adds	r3, #4
 8005b16:	4619      	mov	r1, r3
 8005b18:	4610      	mov	r0, r2
 8005b1a:	f7ff fa75 	bl	8005008 <vListInsert>
}
 8005b1e:	e010      	b.n	8005b42 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b20:	4b0f      	ldr	r3, [pc, #60]	; (8005b60 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	4b0a      	ldr	r3, [pc, #40]	; (8005b50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	f7ff fa6b 	bl	8005008 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b32:	4b0c      	ldr	r3, [pc, #48]	; (8005b64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d202      	bcs.n	8005b42 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005b3c:	4a09      	ldr	r2, [pc, #36]	; (8005b64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	6013      	str	r3, [r2, #0]
}
 8005b42:	bf00      	nop
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20000688 	.word	0x20000688
 8005b50:	20000584 	.word	0x20000584
 8005b54:	2000068c 	.word	0x2000068c
 8005b58:	20000670 	.word	0x20000670
 8005b5c:	20000640 	.word	0x20000640
 8005b60:	2000063c 	.word	0x2000063c
 8005b64:	200006a4 	.word	0x200006a4

08005b68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	3b04      	subs	r3, #4
 8005b78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	3b04      	subs	r3, #4
 8005b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f023 0201 	bic.w	r2, r3, #1
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	3b04      	subs	r3, #4
 8005b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b98:	4a0c      	ldr	r2, [pc, #48]	; (8005bcc <pxPortInitialiseStack+0x64>)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	3b14      	subs	r3, #20
 8005ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3b04      	subs	r3, #4
 8005bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f06f 0202 	mvn.w	r2, #2
 8005bb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	3b20      	subs	r3, #32
 8005bbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	08005bd1 	.word	0x08005bd1

08005bd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005bda:	4b12      	ldr	r3, [pc, #72]	; (8005c24 <prvTaskExitError+0x54>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be2:	d00a      	beq.n	8005bfa <prvTaskExitError+0x2a>
	__asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	60fb      	str	r3, [r7, #12]
}
 8005bf6:	bf00      	nop
 8005bf8:	e7fe      	b.n	8005bf8 <prvTaskExitError+0x28>
	__asm volatile
 8005bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	60bb      	str	r3, [r7, #8]
}
 8005c0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c0e:	bf00      	nop
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0fc      	beq.n	8005c10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c16:	bf00      	nop
 8005c18:	bf00      	nop
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	2000001c 	.word	0x2000001c
	...

08005c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c30:	4b07      	ldr	r3, [pc, #28]	; (8005c50 <pxCurrentTCBConst2>)
 8005c32:	6819      	ldr	r1, [r3, #0]
 8005c34:	6808      	ldr	r0, [r1, #0]
 8005c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c3a:	f380 8809 	msr	PSP, r0
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f04f 0000 	mov.w	r0, #0
 8005c46:	f380 8811 	msr	BASEPRI, r0
 8005c4a:	4770      	bx	lr
 8005c4c:	f3af 8000 	nop.w

08005c50 <pxCurrentTCBConst2>:
 8005c50:	20000584 	.word	0x20000584
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c54:	bf00      	nop
 8005c56:	bf00      	nop

08005c58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c58:	4808      	ldr	r0, [pc, #32]	; (8005c7c <prvPortStartFirstTask+0x24>)
 8005c5a:	6800      	ldr	r0, [r0, #0]
 8005c5c:	6800      	ldr	r0, [r0, #0]
 8005c5e:	f380 8808 	msr	MSP, r0
 8005c62:	f04f 0000 	mov.w	r0, #0
 8005c66:	f380 8814 	msr	CONTROL, r0
 8005c6a:	b662      	cpsie	i
 8005c6c:	b661      	cpsie	f
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	df00      	svc	0
 8005c78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c7a:	bf00      	nop
 8005c7c:	e000ed08 	.word	0xe000ed08

08005c80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c86:	4b46      	ldr	r3, [pc, #280]	; (8005da0 <xPortStartScheduler+0x120>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a46      	ldr	r2, [pc, #280]	; (8005da4 <xPortStartScheduler+0x124>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d10a      	bne.n	8005ca6 <xPortStartScheduler+0x26>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	613b      	str	r3, [r7, #16]
}
 8005ca2:	bf00      	nop
 8005ca4:	e7fe      	b.n	8005ca4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ca6:	4b3e      	ldr	r3, [pc, #248]	; (8005da0 <xPortStartScheduler+0x120>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a3f      	ldr	r2, [pc, #252]	; (8005da8 <xPortStartScheduler+0x128>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d10a      	bne.n	8005cc6 <xPortStartScheduler+0x46>
	__asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	60fb      	str	r3, [r7, #12]
}
 8005cc2:	bf00      	nop
 8005cc4:	e7fe      	b.n	8005cc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005cc6:	4b39      	ldr	r3, [pc, #228]	; (8005dac <xPortStartScheduler+0x12c>)
 8005cc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	22ff      	movs	r2, #255	; 0xff
 8005cd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ce0:	78fb      	ldrb	r3, [r7, #3]
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	4b31      	ldr	r3, [pc, #196]	; (8005db0 <xPortStartScheduler+0x130>)
 8005cec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005cee:	4b31      	ldr	r3, [pc, #196]	; (8005db4 <xPortStartScheduler+0x134>)
 8005cf0:	2207      	movs	r2, #7
 8005cf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cf4:	e009      	b.n	8005d0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005cf6:	4b2f      	ldr	r3, [pc, #188]	; (8005db4 <xPortStartScheduler+0x134>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	4a2d      	ldr	r2, [pc, #180]	; (8005db4 <xPortStartScheduler+0x134>)
 8005cfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d00:	78fb      	ldrb	r3, [r7, #3]
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d0a:	78fb      	ldrb	r3, [r7, #3]
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d12:	2b80      	cmp	r3, #128	; 0x80
 8005d14:	d0ef      	beq.n	8005cf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d16:	4b27      	ldr	r3, [pc, #156]	; (8005db4 <xPortStartScheduler+0x134>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f1c3 0307 	rsb	r3, r3, #7
 8005d1e:	2b04      	cmp	r3, #4
 8005d20:	d00a      	beq.n	8005d38 <xPortStartScheduler+0xb8>
	__asm volatile
 8005d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	60bb      	str	r3, [r7, #8]
}
 8005d34:	bf00      	nop
 8005d36:	e7fe      	b.n	8005d36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d38:	4b1e      	ldr	r3, [pc, #120]	; (8005db4 <xPortStartScheduler+0x134>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	021b      	lsls	r3, r3, #8
 8005d3e:	4a1d      	ldr	r2, [pc, #116]	; (8005db4 <xPortStartScheduler+0x134>)
 8005d40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d42:	4b1c      	ldr	r3, [pc, #112]	; (8005db4 <xPortStartScheduler+0x134>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d4a:	4a1a      	ldr	r2, [pc, #104]	; (8005db4 <xPortStartScheduler+0x134>)
 8005d4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d56:	4b18      	ldr	r3, [pc, #96]	; (8005db8 <xPortStartScheduler+0x138>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a17      	ldr	r2, [pc, #92]	; (8005db8 <xPortStartScheduler+0x138>)
 8005d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d62:	4b15      	ldr	r3, [pc, #84]	; (8005db8 <xPortStartScheduler+0x138>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a14      	ldr	r2, [pc, #80]	; (8005db8 <xPortStartScheduler+0x138>)
 8005d68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d6e:	f000 f8dd 	bl	8005f2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d72:	4b12      	ldr	r3, [pc, #72]	; (8005dbc <xPortStartScheduler+0x13c>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d78:	f000 f8fc 	bl	8005f74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d7c:	4b10      	ldr	r3, [pc, #64]	; (8005dc0 <xPortStartScheduler+0x140>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a0f      	ldr	r2, [pc, #60]	; (8005dc0 <xPortStartScheduler+0x140>)
 8005d82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d88:	f7ff ff66 	bl	8005c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d8c:	f7ff fd4a 	bl	8005824 <vTaskSwitchContext>
	prvTaskExitError();
 8005d90:	f7ff ff1e 	bl	8005bd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3718      	adds	r7, #24
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	e000ed00 	.word	0xe000ed00
 8005da4:	410fc271 	.word	0x410fc271
 8005da8:	410fc270 	.word	0x410fc270
 8005dac:	e000e400 	.word	0xe000e400
 8005db0:	200006b0 	.word	0x200006b0
 8005db4:	200006b4 	.word	0x200006b4
 8005db8:	e000ed20 	.word	0xe000ed20
 8005dbc:	2000001c 	.word	0x2000001c
 8005dc0:	e000ef34 	.word	0xe000ef34

08005dc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
	__asm volatile
 8005dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	607b      	str	r3, [r7, #4]
}
 8005ddc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005dde:	4b0f      	ldr	r3, [pc, #60]	; (8005e1c <vPortEnterCritical+0x58>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	3301      	adds	r3, #1
 8005de4:	4a0d      	ldr	r2, [pc, #52]	; (8005e1c <vPortEnterCritical+0x58>)
 8005de6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005de8:	4b0c      	ldr	r3, [pc, #48]	; (8005e1c <vPortEnterCritical+0x58>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d10f      	bne.n	8005e10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005df0:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <vPortEnterCritical+0x5c>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <vPortEnterCritical+0x4c>
	__asm volatile
 8005dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfe:	f383 8811 	msr	BASEPRI, r3
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	603b      	str	r3, [r7, #0]
}
 8005e0c:	bf00      	nop
 8005e0e:	e7fe      	b.n	8005e0e <vPortEnterCritical+0x4a>
	}
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	2000001c 	.word	0x2000001c
 8005e20:	e000ed04 	.word	0xe000ed04

08005e24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e2a:	4b12      	ldr	r3, [pc, #72]	; (8005e74 <vPortExitCritical+0x50>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10a      	bne.n	8005e48 <vPortExitCritical+0x24>
	__asm volatile
 8005e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	607b      	str	r3, [r7, #4]
}
 8005e44:	bf00      	nop
 8005e46:	e7fe      	b.n	8005e46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005e48:	4b0a      	ldr	r3, [pc, #40]	; (8005e74 <vPortExitCritical+0x50>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	4a09      	ldr	r2, [pc, #36]	; (8005e74 <vPortExitCritical+0x50>)
 8005e50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e52:	4b08      	ldr	r3, [pc, #32]	; (8005e74 <vPortExitCritical+0x50>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d105      	bne.n	8005e66 <vPortExitCritical+0x42>
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	2000001c 	.word	0x2000001c
	...

08005e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e80:	f3ef 8009 	mrs	r0, PSP
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	4b15      	ldr	r3, [pc, #84]	; (8005ee0 <pxCurrentTCBConst>)
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	f01e 0f10 	tst.w	lr, #16
 8005e90:	bf08      	it	eq
 8005e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e9a:	6010      	str	r0, [r2, #0]
 8005e9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ea4:	f380 8811 	msr	BASEPRI, r0
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f7ff fcb8 	bl	8005824 <vTaskSwitchContext>
 8005eb4:	f04f 0000 	mov.w	r0, #0
 8005eb8:	f380 8811 	msr	BASEPRI, r0
 8005ebc:	bc09      	pop	{r0, r3}
 8005ebe:	6819      	ldr	r1, [r3, #0]
 8005ec0:	6808      	ldr	r0, [r1, #0]
 8005ec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec6:	f01e 0f10 	tst.w	lr, #16
 8005eca:	bf08      	it	eq
 8005ecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ed0:	f380 8809 	msr	PSP, r0
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	f3af 8000 	nop.w

08005ee0 <pxCurrentTCBConst>:
 8005ee0:	20000584 	.word	0x20000584
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ee4:	bf00      	nop
 8005ee6:	bf00      	nop

08005ee8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
	__asm volatile
 8005eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	607b      	str	r3, [r7, #4]
}
 8005f00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f02:	f7ff fbd7 	bl	80056b4 <xTaskIncrementTick>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f0c:	4b06      	ldr	r3, [pc, #24]	; (8005f28 <SysTick_Handler+0x40>)
 8005f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	2300      	movs	r3, #0
 8005f16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	f383 8811 	msr	BASEPRI, r3
}
 8005f1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f20:	bf00      	nop
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	e000ed04 	.word	0xe000ed04

08005f2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f30:	4b0b      	ldr	r3, [pc, #44]	; (8005f60 <vPortSetupTimerInterrupt+0x34>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f36:	4b0b      	ldr	r3, [pc, #44]	; (8005f64 <vPortSetupTimerInterrupt+0x38>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f3c:	4b0a      	ldr	r3, [pc, #40]	; (8005f68 <vPortSetupTimerInterrupt+0x3c>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a0a      	ldr	r2, [pc, #40]	; (8005f6c <vPortSetupTimerInterrupt+0x40>)
 8005f42:	fba2 2303 	umull	r2, r3, r2, r3
 8005f46:	099b      	lsrs	r3, r3, #6
 8005f48:	4a09      	ldr	r2, [pc, #36]	; (8005f70 <vPortSetupTimerInterrupt+0x44>)
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f4e:	4b04      	ldr	r3, [pc, #16]	; (8005f60 <vPortSetupTimerInterrupt+0x34>)
 8005f50:	2207      	movs	r2, #7
 8005f52:	601a      	str	r2, [r3, #0]
}
 8005f54:	bf00      	nop
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	e000e010 	.word	0xe000e010
 8005f64:	e000e018 	.word	0xe000e018
 8005f68:	20000010 	.word	0x20000010
 8005f6c:	10624dd3 	.word	0x10624dd3
 8005f70:	e000e014 	.word	0xe000e014

08005f74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f84 <vPortEnableVFP+0x10>
 8005f78:	6801      	ldr	r1, [r0, #0]
 8005f7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f7e:	6001      	str	r1, [r0, #0]
 8005f80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f82:	bf00      	nop
 8005f84:	e000ed88 	.word	0xe000ed88

08005f88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08a      	sub	sp, #40	; 0x28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f90:	2300      	movs	r3, #0
 8005f92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f94:	f7ff fae4 	bl	8005560 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f98:	4b5b      	ldr	r3, [pc, #364]	; (8006108 <pvPortMalloc+0x180>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fa0:	f000 f920 	bl	80061e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fa4:	4b59      	ldr	r3, [pc, #356]	; (800610c <pvPortMalloc+0x184>)
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4013      	ands	r3, r2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f040 8093 	bne.w	80060d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d01d      	beq.n	8005ff4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005fb8:	2208      	movs	r2, #8
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f003 0307 	and.w	r3, r3, #7
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d014      	beq.n	8005ff4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f023 0307 	bic.w	r3, r3, #7
 8005fd0:	3308      	adds	r3, #8
 8005fd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f003 0307 	and.w	r3, r3, #7
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00a      	beq.n	8005ff4 <pvPortMalloc+0x6c>
	__asm volatile
 8005fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	617b      	str	r3, [r7, #20]
}
 8005ff0:	bf00      	nop
 8005ff2:	e7fe      	b.n	8005ff2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d06e      	beq.n	80060d8 <pvPortMalloc+0x150>
 8005ffa:	4b45      	ldr	r3, [pc, #276]	; (8006110 <pvPortMalloc+0x188>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	429a      	cmp	r2, r3
 8006002:	d869      	bhi.n	80060d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006004:	4b43      	ldr	r3, [pc, #268]	; (8006114 <pvPortMalloc+0x18c>)
 8006006:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006008:	4b42      	ldr	r3, [pc, #264]	; (8006114 <pvPortMalloc+0x18c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800600e:	e004      	b.n	800601a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	429a      	cmp	r2, r3
 8006022:	d903      	bls.n	800602c <pvPortMalloc+0xa4>
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1f1      	bne.n	8006010 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800602c:	4b36      	ldr	r3, [pc, #216]	; (8006108 <pvPortMalloc+0x180>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006032:	429a      	cmp	r2, r3
 8006034:	d050      	beq.n	80060d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2208      	movs	r2, #8
 800603c:	4413      	add	r3, r2
 800603e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	1ad2      	subs	r2, r2, r3
 8006050:	2308      	movs	r3, #8
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	429a      	cmp	r2, r3
 8006056:	d91f      	bls.n	8006098 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4413      	add	r3, r2
 800605e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	f003 0307 	and.w	r3, r3, #7
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00a      	beq.n	8006080 <pvPortMalloc+0xf8>
	__asm volatile
 800606a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606e:	f383 8811 	msr	BASEPRI, r3
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	613b      	str	r3, [r7, #16]
}
 800607c:	bf00      	nop
 800607e:	e7fe      	b.n	800607e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	1ad2      	subs	r2, r2, r3
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006092:	69b8      	ldr	r0, [r7, #24]
 8006094:	f000 f908 	bl	80062a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006098:	4b1d      	ldr	r3, [pc, #116]	; (8006110 <pvPortMalloc+0x188>)
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	4a1b      	ldr	r2, [pc, #108]	; (8006110 <pvPortMalloc+0x188>)
 80060a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060a6:	4b1a      	ldr	r3, [pc, #104]	; (8006110 <pvPortMalloc+0x188>)
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	4b1b      	ldr	r3, [pc, #108]	; (8006118 <pvPortMalloc+0x190>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d203      	bcs.n	80060ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060b2:	4b17      	ldr	r3, [pc, #92]	; (8006110 <pvPortMalloc+0x188>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a18      	ldr	r2, [pc, #96]	; (8006118 <pvPortMalloc+0x190>)
 80060b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	4b13      	ldr	r3, [pc, #76]	; (800610c <pvPortMalloc+0x184>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	431a      	orrs	r2, r3
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	2200      	movs	r2, #0
 80060cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80060ce:	4b13      	ldr	r3, [pc, #76]	; (800611c <pvPortMalloc+0x194>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3301      	adds	r3, #1
 80060d4:	4a11      	ldr	r2, [pc, #68]	; (800611c <pvPortMalloc+0x194>)
 80060d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060d8:	f7ff fa50 	bl	800557c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	f003 0307 	and.w	r3, r3, #7
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <pvPortMalloc+0x174>
	__asm volatile
 80060e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ea:	f383 8811 	msr	BASEPRI, r3
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	60fb      	str	r3, [r7, #12]
}
 80060f8:	bf00      	nop
 80060fa:	e7fe      	b.n	80060fa <pvPortMalloc+0x172>
	return pvReturn;
 80060fc:	69fb      	ldr	r3, [r7, #28]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3728      	adds	r7, #40	; 0x28
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	200042c0 	.word	0x200042c0
 800610c:	200042d4 	.word	0x200042d4
 8006110:	200042c4 	.word	0x200042c4
 8006114:	200042b8 	.word	0x200042b8
 8006118:	200042c8 	.word	0x200042c8
 800611c:	200042cc 	.word	0x200042cc

08006120 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d04d      	beq.n	80061ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006132:	2308      	movs	r3, #8
 8006134:	425b      	negs	r3, r3
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	4413      	add	r3, r2
 800613a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	4b24      	ldr	r3, [pc, #144]	; (80061d8 <vPortFree+0xb8>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4013      	ands	r3, r2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10a      	bne.n	8006164 <vPortFree+0x44>
	__asm volatile
 800614e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	60fb      	str	r3, [r7, #12]
}
 8006160:	bf00      	nop
 8006162:	e7fe      	b.n	8006162 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00a      	beq.n	8006182 <vPortFree+0x62>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	60bb      	str	r3, [r7, #8]
}
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	4b14      	ldr	r3, [pc, #80]	; (80061d8 <vPortFree+0xb8>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4013      	ands	r3, r2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d01e      	beq.n	80061ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d11a      	bne.n	80061ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	4b0e      	ldr	r3, [pc, #56]	; (80061d8 <vPortFree+0xb8>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	43db      	mvns	r3, r3
 80061a2:	401a      	ands	r2, r3
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061a8:	f7ff f9da 	bl	8005560 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	4b0a      	ldr	r3, [pc, #40]	; (80061dc <vPortFree+0xbc>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4413      	add	r3, r2
 80061b6:	4a09      	ldr	r2, [pc, #36]	; (80061dc <vPortFree+0xbc>)
 80061b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061ba:	6938      	ldr	r0, [r7, #16]
 80061bc:	f000 f874 	bl	80062a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80061c0:	4b07      	ldr	r3, [pc, #28]	; (80061e0 <vPortFree+0xc0>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3301      	adds	r3, #1
 80061c6:	4a06      	ldr	r2, [pc, #24]	; (80061e0 <vPortFree+0xc0>)
 80061c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80061ca:	f7ff f9d7 	bl	800557c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061ce:	bf00      	nop
 80061d0:	3718      	adds	r7, #24
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	200042d4 	.word	0x200042d4
 80061dc:	200042c4 	.word	0x200042c4
 80061e0:	200042d0 	.word	0x200042d0

080061e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80061ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061f0:	4b27      	ldr	r3, [pc, #156]	; (8006290 <prvHeapInit+0xac>)
 80061f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f003 0307 	and.w	r3, r3, #7
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00c      	beq.n	8006218 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	3307      	adds	r3, #7
 8006202:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f023 0307 	bic.w	r3, r3, #7
 800620a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	4a1f      	ldr	r2, [pc, #124]	; (8006290 <prvHeapInit+0xac>)
 8006214:	4413      	add	r3, r2
 8006216:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800621c:	4a1d      	ldr	r2, [pc, #116]	; (8006294 <prvHeapInit+0xb0>)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006222:	4b1c      	ldr	r3, [pc, #112]	; (8006294 <prvHeapInit+0xb0>)
 8006224:	2200      	movs	r2, #0
 8006226:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	4413      	add	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006230:	2208      	movs	r2, #8
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	1a9b      	subs	r3, r3, r2
 8006236:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 0307 	bic.w	r3, r3, #7
 800623e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4a15      	ldr	r2, [pc, #84]	; (8006298 <prvHeapInit+0xb4>)
 8006244:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006246:	4b14      	ldr	r3, [pc, #80]	; (8006298 <prvHeapInit+0xb4>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2200      	movs	r2, #0
 800624c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800624e:	4b12      	ldr	r3, [pc, #72]	; (8006298 <prvHeapInit+0xb4>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2200      	movs	r2, #0
 8006254:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	1ad2      	subs	r2, r2, r3
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006264:	4b0c      	ldr	r3, [pc, #48]	; (8006298 <prvHeapInit+0xb4>)
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	4a0a      	ldr	r2, [pc, #40]	; (800629c <prvHeapInit+0xb8>)
 8006272:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	4a09      	ldr	r2, [pc, #36]	; (80062a0 <prvHeapInit+0xbc>)
 800627a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800627c:	4b09      	ldr	r3, [pc, #36]	; (80062a4 <prvHeapInit+0xc0>)
 800627e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006282:	601a      	str	r2, [r3, #0]
}
 8006284:	bf00      	nop
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	200006b8 	.word	0x200006b8
 8006294:	200042b8 	.word	0x200042b8
 8006298:	200042c0 	.word	0x200042c0
 800629c:	200042c8 	.word	0x200042c8
 80062a0:	200042c4 	.word	0x200042c4
 80062a4:	200042d4 	.word	0x200042d4

080062a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062b0:	4b28      	ldr	r3, [pc, #160]	; (8006354 <prvInsertBlockIntoFreeList+0xac>)
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	e002      	b.n	80062bc <prvInsertBlockIntoFreeList+0x14>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d8f7      	bhi.n	80062b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	4413      	add	r3, r2
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d108      	bne.n	80062ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	441a      	add	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	441a      	add	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d118      	bne.n	8006330 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	4b15      	ldr	r3, [pc, #84]	; (8006358 <prvInsertBlockIntoFreeList+0xb0>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	429a      	cmp	r2, r3
 8006308:	d00d      	beq.n	8006326 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	441a      	add	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	e008      	b.n	8006338 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006326:	4b0c      	ldr	r3, [pc, #48]	; (8006358 <prvInsertBlockIntoFreeList+0xb0>)
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	e003      	b.n	8006338 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	429a      	cmp	r2, r3
 800633e:	d002      	beq.n	8006346 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006346:	bf00      	nop
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	200042b8 	.word	0x200042b8
 8006358:	200042c0 	.word	0x200042c0

0800635c <__libc_init_array>:
 800635c:	b570      	push	{r4, r5, r6, lr}
 800635e:	4d0d      	ldr	r5, [pc, #52]	; (8006394 <__libc_init_array+0x38>)
 8006360:	4c0d      	ldr	r4, [pc, #52]	; (8006398 <__libc_init_array+0x3c>)
 8006362:	1b64      	subs	r4, r4, r5
 8006364:	10a4      	asrs	r4, r4, #2
 8006366:	2600      	movs	r6, #0
 8006368:	42a6      	cmp	r6, r4
 800636a:	d109      	bne.n	8006380 <__libc_init_array+0x24>
 800636c:	4d0b      	ldr	r5, [pc, #44]	; (800639c <__libc_init_array+0x40>)
 800636e:	4c0c      	ldr	r4, [pc, #48]	; (80063a0 <__libc_init_array+0x44>)
 8006370:	f000 f8e4 	bl	800653c <_init>
 8006374:	1b64      	subs	r4, r4, r5
 8006376:	10a4      	asrs	r4, r4, #2
 8006378:	2600      	movs	r6, #0
 800637a:	42a6      	cmp	r6, r4
 800637c:	d105      	bne.n	800638a <__libc_init_array+0x2e>
 800637e:	bd70      	pop	{r4, r5, r6, pc}
 8006380:	f855 3b04 	ldr.w	r3, [r5], #4
 8006384:	4798      	blx	r3
 8006386:	3601      	adds	r6, #1
 8006388:	e7ee      	b.n	8006368 <__libc_init_array+0xc>
 800638a:	f855 3b04 	ldr.w	r3, [r5], #4
 800638e:	4798      	blx	r3
 8006390:	3601      	adds	r6, #1
 8006392:	e7f2      	b.n	800637a <__libc_init_array+0x1e>
 8006394:	08006680 	.word	0x08006680
 8006398:	08006680 	.word	0x08006680
 800639c:	08006680 	.word	0x08006680
 80063a0:	08006684 	.word	0x08006684

080063a4 <__retarget_lock_acquire_recursive>:
 80063a4:	4770      	bx	lr

080063a6 <__retarget_lock_release_recursive>:
 80063a6:	4770      	bx	lr

080063a8 <memset>:
 80063a8:	4402      	add	r2, r0
 80063aa:	4603      	mov	r3, r0
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d100      	bne.n	80063b2 <memset+0xa>
 80063b0:	4770      	bx	lr
 80063b2:	f803 1b01 	strb.w	r1, [r3], #1
 80063b6:	e7f9      	b.n	80063ac <memset+0x4>

080063b8 <cleanup_glue>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	460c      	mov	r4, r1
 80063bc:	6809      	ldr	r1, [r1, #0]
 80063be:	4605      	mov	r5, r0
 80063c0:	b109      	cbz	r1, 80063c6 <cleanup_glue+0xe>
 80063c2:	f7ff fff9 	bl	80063b8 <cleanup_glue>
 80063c6:	4621      	mov	r1, r4
 80063c8:	4628      	mov	r0, r5
 80063ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063ce:	f000 b869 	b.w	80064a4 <_free_r>
	...

080063d4 <_reclaim_reent>:
 80063d4:	4b2c      	ldr	r3, [pc, #176]	; (8006488 <_reclaim_reent+0xb4>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4283      	cmp	r3, r0
 80063da:	b570      	push	{r4, r5, r6, lr}
 80063dc:	4604      	mov	r4, r0
 80063de:	d051      	beq.n	8006484 <_reclaim_reent+0xb0>
 80063e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80063e2:	b143      	cbz	r3, 80063f6 <_reclaim_reent+0x22>
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d14a      	bne.n	8006480 <_reclaim_reent+0xac>
 80063ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063ec:	6819      	ldr	r1, [r3, #0]
 80063ee:	b111      	cbz	r1, 80063f6 <_reclaim_reent+0x22>
 80063f0:	4620      	mov	r0, r4
 80063f2:	f000 f857 	bl	80064a4 <_free_r>
 80063f6:	6961      	ldr	r1, [r4, #20]
 80063f8:	b111      	cbz	r1, 8006400 <_reclaim_reent+0x2c>
 80063fa:	4620      	mov	r0, r4
 80063fc:	f000 f852 	bl	80064a4 <_free_r>
 8006400:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006402:	b111      	cbz	r1, 800640a <_reclaim_reent+0x36>
 8006404:	4620      	mov	r0, r4
 8006406:	f000 f84d 	bl	80064a4 <_free_r>
 800640a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800640c:	b111      	cbz	r1, 8006414 <_reclaim_reent+0x40>
 800640e:	4620      	mov	r0, r4
 8006410:	f000 f848 	bl	80064a4 <_free_r>
 8006414:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006416:	b111      	cbz	r1, 800641e <_reclaim_reent+0x4a>
 8006418:	4620      	mov	r0, r4
 800641a:	f000 f843 	bl	80064a4 <_free_r>
 800641e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006420:	b111      	cbz	r1, 8006428 <_reclaim_reent+0x54>
 8006422:	4620      	mov	r0, r4
 8006424:	f000 f83e 	bl	80064a4 <_free_r>
 8006428:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800642a:	b111      	cbz	r1, 8006432 <_reclaim_reent+0x5e>
 800642c:	4620      	mov	r0, r4
 800642e:	f000 f839 	bl	80064a4 <_free_r>
 8006432:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006434:	b111      	cbz	r1, 800643c <_reclaim_reent+0x68>
 8006436:	4620      	mov	r0, r4
 8006438:	f000 f834 	bl	80064a4 <_free_r>
 800643c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800643e:	b111      	cbz	r1, 8006446 <_reclaim_reent+0x72>
 8006440:	4620      	mov	r0, r4
 8006442:	f000 f82f 	bl	80064a4 <_free_r>
 8006446:	69a3      	ldr	r3, [r4, #24]
 8006448:	b1e3      	cbz	r3, 8006484 <_reclaim_reent+0xb0>
 800644a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800644c:	4620      	mov	r0, r4
 800644e:	4798      	blx	r3
 8006450:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006452:	b1b9      	cbz	r1, 8006484 <_reclaim_reent+0xb0>
 8006454:	4620      	mov	r0, r4
 8006456:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800645a:	f7ff bfad 	b.w	80063b8 <cleanup_glue>
 800645e:	5949      	ldr	r1, [r1, r5]
 8006460:	b941      	cbnz	r1, 8006474 <_reclaim_reent+0xa0>
 8006462:	3504      	adds	r5, #4
 8006464:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006466:	2d80      	cmp	r5, #128	; 0x80
 8006468:	68d9      	ldr	r1, [r3, #12]
 800646a:	d1f8      	bne.n	800645e <_reclaim_reent+0x8a>
 800646c:	4620      	mov	r0, r4
 800646e:	f000 f819 	bl	80064a4 <_free_r>
 8006472:	e7ba      	b.n	80063ea <_reclaim_reent+0x16>
 8006474:	680e      	ldr	r6, [r1, #0]
 8006476:	4620      	mov	r0, r4
 8006478:	f000 f814 	bl	80064a4 <_free_r>
 800647c:	4631      	mov	r1, r6
 800647e:	e7ef      	b.n	8006460 <_reclaim_reent+0x8c>
 8006480:	2500      	movs	r5, #0
 8006482:	e7ef      	b.n	8006464 <_reclaim_reent+0x90>
 8006484:	bd70      	pop	{r4, r5, r6, pc}
 8006486:	bf00      	nop
 8006488:	20000020 	.word	0x20000020

0800648c <__malloc_lock>:
 800648c:	4801      	ldr	r0, [pc, #4]	; (8006494 <__malloc_lock+0x8>)
 800648e:	f7ff bf89 	b.w	80063a4 <__retarget_lock_acquire_recursive>
 8006492:	bf00      	nop
 8006494:	200042d8 	.word	0x200042d8

08006498 <__malloc_unlock>:
 8006498:	4801      	ldr	r0, [pc, #4]	; (80064a0 <__malloc_unlock+0x8>)
 800649a:	f7ff bf84 	b.w	80063a6 <__retarget_lock_release_recursive>
 800649e:	bf00      	nop
 80064a0:	200042d8 	.word	0x200042d8

080064a4 <_free_r>:
 80064a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064a6:	2900      	cmp	r1, #0
 80064a8:	d044      	beq.n	8006534 <_free_r+0x90>
 80064aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064ae:	9001      	str	r0, [sp, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f1a1 0404 	sub.w	r4, r1, #4
 80064b6:	bfb8      	it	lt
 80064b8:	18e4      	addlt	r4, r4, r3
 80064ba:	f7ff ffe7 	bl	800648c <__malloc_lock>
 80064be:	4a1e      	ldr	r2, [pc, #120]	; (8006538 <_free_r+0x94>)
 80064c0:	9801      	ldr	r0, [sp, #4]
 80064c2:	6813      	ldr	r3, [r2, #0]
 80064c4:	b933      	cbnz	r3, 80064d4 <_free_r+0x30>
 80064c6:	6063      	str	r3, [r4, #4]
 80064c8:	6014      	str	r4, [r2, #0]
 80064ca:	b003      	add	sp, #12
 80064cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064d0:	f7ff bfe2 	b.w	8006498 <__malloc_unlock>
 80064d4:	42a3      	cmp	r3, r4
 80064d6:	d908      	bls.n	80064ea <_free_r+0x46>
 80064d8:	6825      	ldr	r5, [r4, #0]
 80064da:	1961      	adds	r1, r4, r5
 80064dc:	428b      	cmp	r3, r1
 80064de:	bf01      	itttt	eq
 80064e0:	6819      	ldreq	r1, [r3, #0]
 80064e2:	685b      	ldreq	r3, [r3, #4]
 80064e4:	1949      	addeq	r1, r1, r5
 80064e6:	6021      	streq	r1, [r4, #0]
 80064e8:	e7ed      	b.n	80064c6 <_free_r+0x22>
 80064ea:	461a      	mov	r2, r3
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	b10b      	cbz	r3, 80064f4 <_free_r+0x50>
 80064f0:	42a3      	cmp	r3, r4
 80064f2:	d9fa      	bls.n	80064ea <_free_r+0x46>
 80064f4:	6811      	ldr	r1, [r2, #0]
 80064f6:	1855      	adds	r5, r2, r1
 80064f8:	42a5      	cmp	r5, r4
 80064fa:	d10b      	bne.n	8006514 <_free_r+0x70>
 80064fc:	6824      	ldr	r4, [r4, #0]
 80064fe:	4421      	add	r1, r4
 8006500:	1854      	adds	r4, r2, r1
 8006502:	42a3      	cmp	r3, r4
 8006504:	6011      	str	r1, [r2, #0]
 8006506:	d1e0      	bne.n	80064ca <_free_r+0x26>
 8006508:	681c      	ldr	r4, [r3, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	6053      	str	r3, [r2, #4]
 800650e:	4421      	add	r1, r4
 8006510:	6011      	str	r1, [r2, #0]
 8006512:	e7da      	b.n	80064ca <_free_r+0x26>
 8006514:	d902      	bls.n	800651c <_free_r+0x78>
 8006516:	230c      	movs	r3, #12
 8006518:	6003      	str	r3, [r0, #0]
 800651a:	e7d6      	b.n	80064ca <_free_r+0x26>
 800651c:	6825      	ldr	r5, [r4, #0]
 800651e:	1961      	adds	r1, r4, r5
 8006520:	428b      	cmp	r3, r1
 8006522:	bf04      	itt	eq
 8006524:	6819      	ldreq	r1, [r3, #0]
 8006526:	685b      	ldreq	r3, [r3, #4]
 8006528:	6063      	str	r3, [r4, #4]
 800652a:	bf04      	itt	eq
 800652c:	1949      	addeq	r1, r1, r5
 800652e:	6021      	streq	r1, [r4, #0]
 8006530:	6054      	str	r4, [r2, #4]
 8006532:	e7ca      	b.n	80064ca <_free_r+0x26>
 8006534:	b003      	add	sp, #12
 8006536:	bd30      	pop	{r4, r5, pc}
 8006538:	200042dc 	.word	0x200042dc

0800653c <_init>:
 800653c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653e:	bf00      	nop
 8006540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006542:	bc08      	pop	{r3}
 8006544:	469e      	mov	lr, r3
 8006546:	4770      	bx	lr

08006548 <_fini>:
 8006548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654a:	bf00      	nop
 800654c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800654e:	bc08      	pop	{r3}
 8006550:	469e      	mov	lr, r3
 8006552:	4770      	bx	lr
