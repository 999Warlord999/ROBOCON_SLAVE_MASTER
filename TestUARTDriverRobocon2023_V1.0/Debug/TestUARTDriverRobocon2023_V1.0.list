
TestUARTDriverRobocon2023_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055d0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080056e0  080056e0  000156e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800575c  0800575c  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  0800575c  0800575c  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800575c  0800575c  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800575c  0800575c  0001575c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005760  08005760  00015760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08005764  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011a0  20000030  08005794  00020030  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200011d0  08005794  000211d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010154  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a1  00000000  00000000  000301ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  00032b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  00033c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f2c  00000000  00000000  00034c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113de  00000000  00000000  0004db94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091a36  00000000  00000000  0005ef72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f09a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004830  00000000  00000000  000f09f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000030 	.word	0x20000030
 800012c:	00000000 	.word	0x00000000
 8000130:	080056c8 	.word	0x080056c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000034 	.word	0x20000034
 800014c:	080056c8 	.word	0x080056c8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4a06      	ldr	r2, [pc, #24]	; (8000a74 <vApplicationGetIdleTaskMemory+0x28>)
 8000a5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2280      	movs	r2, #128	; 0x80
 8000a68:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a6a:	bf00      	nop
 8000a6c:	3714      	adds	r7, #20
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	2000004c 	.word	0x2000004c
 8000a78:	200000a0 	.word	0x200000a0

08000a7c <HAL_UART_RxCpltCallback>:


char UARTRX1_Buffer[17];
char DataMain[17];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a75      	ldr	r2, [pc, #468]	; (8000c60 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	f040 80e4 	bne.w	8000c58 <HAL_UART_RxCpltCallback+0x1dc>
		HAL_UART_Receive_IT(&huart1, (uint8_t*)UARTRX1_Buffer, 17);
 8000a90:	2211      	movs	r2, #17
 8000a92:	4974      	ldr	r1, [pc, #464]	; (8000c64 <HAL_UART_RxCpltCallback+0x1e8>)
 8000a94:	4874      	ldr	r0, [pc, #464]	; (8000c68 <HAL_UART_RxCpltCallback+0x1ec>)
 8000a96:	f003 f806 	bl	8003aa6 <HAL_UART_Receive_IT>

		int ViTriData = -1;
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9e:	617b      	str	r3, [r7, #20]
		for(int i = 0; i <= 16; ++i){
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	e00a      	b.n	8000abc <HAL_UART_RxCpltCallback+0x40>
			if(UARTRX1_Buffer[i] == 149){
 8000aa6:	4a6f      	ldr	r2, [pc, #444]	; (8000c64 <HAL_UART_RxCpltCallback+0x1e8>)
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	4413      	add	r3, r2
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b95      	cmp	r3, #149	; 0x95
 8000ab0:	d101      	bne.n	8000ab6 <HAL_UART_RxCpltCallback+0x3a>
				ViTriData = i;
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	617b      	str	r3, [r7, #20]
		for(int i = 0; i <= 16; ++i){
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	2b10      	cmp	r3, #16
 8000ac0:	ddf1      	ble.n	8000aa6 <HAL_UART_RxCpltCallback+0x2a>
			}
		}

		if(ViTriData != -1){
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac8:	d019      	beq.n	8000afe <HAL_UART_RxCpltCallback+0x82>
			int cnt = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
			while(cnt < 17){
 8000ace:	e013      	b.n	8000af8 <HAL_UART_RxCpltCallback+0x7c>
				DataMain[cnt] = UARTRX1_Buffer[ViTriData];
 8000ad0:	4a64      	ldr	r2, [pc, #400]	; (8000c64 <HAL_UART_RxCpltCallback+0x1e8>)
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	7819      	ldrb	r1, [r3, #0]
 8000ad8:	4a64      	ldr	r2, [pc, #400]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	4413      	add	r3, r2
 8000ade:	460a      	mov	r2, r1
 8000ae0:	701a      	strb	r2, [r3, #0]
				++ViTriData;
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
				if(ViTriData == 17){
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	2b11      	cmp	r3, #17
 8000aec:	d101      	bne.n	8000af2 <HAL_UART_RxCpltCallback+0x76>
					ViTriData = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
				}
				++cnt;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	3301      	adds	r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
			while(cnt < 17){
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b10      	cmp	r3, #16
 8000afc:	dde8      	ble.n	8000ad0 <HAL_UART_RxCpltCallback+0x54>
			}
		}

		if(BoardID == 1){
 8000afe:	4b5c      	ldr	r3, [pc, #368]	; (8000c70 <HAL_UART_RxCpltCallback+0x1f4>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d135      	bne.n	8000b72 <HAL_UART_RxCpltCallback+0xf6>
			Mode = (DataMain[1] >> 1) & 3;
 8000b06:	4b59      	ldr	r3, [pc, #356]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000b08:	785b      	ldrb	r3, [r3, #1]
 8000b0a:	085b      	lsrs	r3, r3, #1
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	f003 0303 	and.w	r3, r3, #3
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b57      	ldr	r3, [pc, #348]	; (8000c74 <HAL_UART_RxCpltCallback+0x1f8>)
 8000b16:	701a      	strb	r2, [r3, #0]
			if((DataMain[1] & 1) == 0){
 8000b18:	4b54      	ldr	r3, [pc, #336]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000b1a:	785b      	ldrb	r3, [r3, #1]
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d104      	bne.n	8000b2e <HAL_UART_RxCpltCallback+0xb2>
				Dir = -1;
 8000b24:	4b54      	ldr	r3, [pc, #336]	; (8000c78 <HAL_UART_RxCpltCallback+0x1fc>)
 8000b26:	f04f 32ff 	mov.w	r2, #4294967295
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	e008      	b.n	8000b40 <HAL_UART_RxCpltCallback+0xc4>
			}
			else if((DataMain[1] & 1) == 1){
 8000b2e:	4b4f      	ldr	r3, [pc, #316]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000b30:	785b      	ldrb	r3, [r3, #1]
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d002      	beq.n	8000b40 <HAL_UART_RxCpltCallback+0xc4>
				Dir = 1;
 8000b3a:	4b4f      	ldr	r3, [pc, #316]	; (8000c78 <HAL_UART_RxCpltCallback+0x1fc>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	601a      	str	r2, [r3, #0]
			}

			Speed = DataMain[2] << 8 | DataMain[3];
 8000b40:	4b4a      	ldr	r3, [pc, #296]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000b42:	789b      	ldrb	r3, [r3, #2]
 8000b44:	021b      	lsls	r3, r3, #8
 8000b46:	b21a      	sxth	r2, r3
 8000b48:	4b48      	ldr	r3, [pc, #288]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000b4a:	78db      	ldrb	r3, [r3, #3]
 8000b4c:	b21b      	sxth	r3, r3
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	b21b      	sxth	r3, r3
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	4b49      	ldr	r3, [pc, #292]	; (8000c7c <HAL_UART_RxCpltCallback+0x200>)
 8000b56:	801a      	strh	r2, [r3, #0]
			Rotate = DataMain[4] << 8 | DataMain[5];
 8000b58:	4b44      	ldr	r3, [pc, #272]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000b5a:	791b      	ldrb	r3, [r3, #4]
 8000b5c:	021b      	lsls	r3, r3, #8
 8000b5e:	b21a      	sxth	r2, r3
 8000b60:	4b42      	ldr	r3, [pc, #264]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000b62:	795b      	ldrb	r3, [r3, #5]
 8000b64:	b21b      	sxth	r3, r3
 8000b66:	4313      	orrs	r3, r2
 8000b68:	b21b      	sxth	r3, r3
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	4b44      	ldr	r3, [pc, #272]	; (8000c80 <HAL_UART_RxCpltCallback+0x204>)
 8000b6e:	801a      	strh	r2, [r3, #0]

			Speed = DataMain[12] << 8 | DataMain[13];
			Rotate = DataMain[14] << 8 | DataMain[15];
		}
	}
}
 8000b70:	e072      	b.n	8000c58 <HAL_UART_RxCpltCallback+0x1dc>
		else if(BoardID == 2){
 8000b72:	4b3f      	ldr	r3, [pc, #252]	; (8000c70 <HAL_UART_RxCpltCallback+0x1f4>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d135      	bne.n	8000be6 <HAL_UART_RxCpltCallback+0x16a>
			Mode = (DataMain[6] >> 1) & 3;
 8000b7a:	4b3c      	ldr	r3, [pc, #240]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000b7c:	799b      	ldrb	r3, [r3, #6]
 8000b7e:	085b      	lsrs	r3, r3, #1
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	f003 0303 	and.w	r3, r3, #3
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	4b3a      	ldr	r3, [pc, #232]	; (8000c74 <HAL_UART_RxCpltCallback+0x1f8>)
 8000b8a:	701a      	strb	r2, [r3, #0]
			if((DataMain[6] & 1) == 0){
 8000b8c:	4b37      	ldr	r3, [pc, #220]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000b8e:	799b      	ldrb	r3, [r3, #6]
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d104      	bne.n	8000ba2 <HAL_UART_RxCpltCallback+0x126>
				Dir = -1;
 8000b98:	4b37      	ldr	r3, [pc, #220]	; (8000c78 <HAL_UART_RxCpltCallback+0x1fc>)
 8000b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	e008      	b.n	8000bb4 <HAL_UART_RxCpltCallback+0x138>
			else if((DataMain[6] & 1) == 1){
 8000ba2:	4b32      	ldr	r3, [pc, #200]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000ba4:	799b      	ldrb	r3, [r3, #6]
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d002      	beq.n	8000bb4 <HAL_UART_RxCpltCallback+0x138>
				Dir = 1;
 8000bae:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <HAL_UART_RxCpltCallback+0x1fc>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]
			Speed = DataMain[7] << 8 | DataMain[8];
 8000bb4:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000bb6:	79db      	ldrb	r3, [r3, #7]
 8000bb8:	021b      	lsls	r3, r3, #8
 8000bba:	b21a      	sxth	r2, r3
 8000bbc:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000bbe:	7a1b      	ldrb	r3, [r3, #8]
 8000bc0:	b21b      	sxth	r3, r3
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	b21b      	sxth	r3, r3
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	4b2c      	ldr	r3, [pc, #176]	; (8000c7c <HAL_UART_RxCpltCallback+0x200>)
 8000bca:	801a      	strh	r2, [r3, #0]
			Rotate = DataMain[9] << 8 | DataMain[10];
 8000bcc:	4b27      	ldr	r3, [pc, #156]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000bce:	7a5b      	ldrb	r3, [r3, #9]
 8000bd0:	021b      	lsls	r3, r3, #8
 8000bd2:	b21a      	sxth	r2, r3
 8000bd4:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000bd6:	7a9b      	ldrb	r3, [r3, #10]
 8000bd8:	b21b      	sxth	r3, r3
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	b21b      	sxth	r3, r3
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <HAL_UART_RxCpltCallback+0x204>)
 8000be2:	801a      	strh	r2, [r3, #0]
}
 8000be4:	e038      	b.n	8000c58 <HAL_UART_RxCpltCallback+0x1dc>
		else if(BoardID == 3){
 8000be6:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <HAL_UART_RxCpltCallback+0x1f4>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b03      	cmp	r3, #3
 8000bec:	d134      	bne.n	8000c58 <HAL_UART_RxCpltCallback+0x1dc>
			Mode = (DataMain[11] >> 1) & 3;
 8000bee:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000bf0:	7adb      	ldrb	r3, [r3, #11]
 8000bf2:	085b      	lsrs	r3, r3, #1
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	f003 0303 	and.w	r3, r3, #3
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <HAL_UART_RxCpltCallback+0x1f8>)
 8000bfe:	701a      	strb	r2, [r3, #0]
			if((DataMain[11] & 1) == 0){
 8000c00:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000c02:	7adb      	ldrb	r3, [r3, #11]
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d104      	bne.n	8000c16 <HAL_UART_RxCpltCallback+0x19a>
				Dir = -1;
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <HAL_UART_RxCpltCallback+0x1fc>)
 8000c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	e008      	b.n	8000c28 <HAL_UART_RxCpltCallback+0x1ac>
			else if((DataMain[11] & 1) == 1){
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000c18:	7adb      	ldrb	r3, [r3, #11]
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d002      	beq.n	8000c28 <HAL_UART_RxCpltCallback+0x1ac>
				Dir = 1;
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_UART_RxCpltCallback+0x1fc>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	601a      	str	r2, [r3, #0]
			Speed = DataMain[12] << 8 | DataMain[13];
 8000c28:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000c2a:	7b1b      	ldrb	r3, [r3, #12]
 8000c2c:	021b      	lsls	r3, r3, #8
 8000c2e:	b21a      	sxth	r2, r3
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000c32:	7b5b      	ldrb	r3, [r3, #13]
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	4313      	orrs	r3, r2
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <HAL_UART_RxCpltCallback+0x200>)
 8000c3e:	801a      	strh	r2, [r3, #0]
			Rotate = DataMain[14] << 8 | DataMain[15];
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000c42:	7b9b      	ldrb	r3, [r3, #14]
 8000c44:	021b      	lsls	r3, r3, #8
 8000c46:	b21a      	sxth	r2, r3
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000c4a:	7bdb      	ldrb	r3, [r3, #15]
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <HAL_UART_RxCpltCallback+0x204>)
 8000c56:	801a      	strh	r2, [r3, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40013800 	.word	0x40013800
 8000c64:	20000400 	.word	0x20000400
 8000c68:	20000330 	.word	0x20000330
 8000c6c:	20000414 	.word	0x20000414
 8000c70:	2000037c 	.word	0x2000037c
 8000c74:	20000380 	.word	0x20000380
 8000c78:	20000384 	.word	0x20000384
 8000c7c:	20000388 	.word	0x20000388
 8000c80:	2000038a 	.word	0x2000038a

08000c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c84:	b5b0      	push	{r4, r5, r7, lr}
 8000c86:	b08e      	sub	sp, #56	; 0x38
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8a:	f000 ff89 	bl	8001ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8e:	f000 f859 	bl	8000d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c92:	f000 f995 	bl	8000fc0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000c96:	f000 f969 	bl	8000f6c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000c9a:	f000 f899 	bl	8000dd0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c9e:	f000 f917 	bl	8000ed0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8000ca2:	2108      	movs	r1, #8
 8000ca4:	481e      	ldr	r0, [pc, #120]	; (8000d20 <main+0x9c>)
 8000ca6:	f002 f84d 	bl	8002d44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8000caa:	210c      	movs	r1, #12
 8000cac:	481c      	ldr	r0, [pc, #112]	; (8000d20 <main+0x9c>)
 8000cae:	f002 f849 	bl	8002d44 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000cb2:	481c      	ldr	r0, [pc, #112]	; (8000d24 <main+0xa0>)
 8000cb4:	f001 ff9c 	bl	8002bf0 <HAL_TIM_Base_Start_IT>
  BoardID = ID;
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <main+0xa4>)
 8000cba:	2203      	movs	r2, #3
 8000cbc:	601a      	str	r2, [r3, #0]
  while(HAL_UART_Receive_IT(&huart1, (uint8_t*)UARTRX1_Buffer, 17)!=HAL_OK){};
 8000cbe:	bf00      	nop
 8000cc0:	2211      	movs	r2, #17
 8000cc2:	491a      	ldr	r1, [pc, #104]	; (8000d2c <main+0xa8>)
 8000cc4:	481a      	ldr	r0, [pc, #104]	; (8000d30 <main+0xac>)
 8000cc6:	f002 feee 	bl	8003aa6 <HAL_UART_Receive_IT>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d1f7      	bne.n	8000cc0 <main+0x3c>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskPos */
  osThreadDef(TaskPos, Task_Pos, osPriorityNormal, 0, 128);
 8000cd0:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <main+0xb0>)
 8000cd2:	f107 041c 	add.w	r4, r7, #28
 8000cd6:	461d      	mov	r5, r3
 8000cd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cdc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ce0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskPosHandle = osThreadCreate(osThread(TaskPos), NULL);
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f003 fb08 	bl	8004300 <osThreadCreate>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	4a11      	ldr	r2, [pc, #68]	; (8000d38 <main+0xb4>)
 8000cf4:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskSpeed */
  osThreadDef(TaskSpeed, Task_Speed, osPriorityAboveNormal, 0, 128);
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <main+0xb8>)
 8000cf8:	463c      	mov	r4, r7
 8000cfa:	461d      	mov	r5, r3
 8000cfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskSpeedHandle = osThreadCreate(osThread(TaskSpeed), NULL);
 8000d08:	463b      	mov	r3, r7
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f003 faf7 	bl	8004300 <osThreadCreate>
 8000d12:	4603      	mov	r3, r0
 8000d14:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <main+0xbc>)
 8000d16:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d18:	f003 faeb 	bl	80042f2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <main+0x98>
 8000d1e:	bf00      	nop
 8000d20:	200002a0 	.word	0x200002a0
 8000d24:	200002e8 	.word	0x200002e8
 8000d28:	2000037c 	.word	0x2000037c
 8000d2c:	20000400 	.word	0x20000400
 8000d30:	20000330 	.word	0x20000330
 8000d34:	080056f4 	.word	0x080056f4
 8000d38:	20000374 	.word	0x20000374
 8000d3c:	08005710 	.word	0x08005710
 8000d40:	20000378 	.word	0x20000378

08000d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b090      	sub	sp, #64	; 0x40
 8000d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4a:	f107 0318 	add.w	r3, r7, #24
 8000d4e:	2228      	movs	r2, #40	; 0x28
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f004 fcb0 	bl	80056b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d66:	2301      	movs	r3, #1
 8000d68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d74:	2301      	movs	r3, #1
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d82:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d88:	f107 0318 	add.w	r3, r7, #24
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f001 fa95 	bl	80022bc <HAL_RCC_OscConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d98:	f000 fd1a 	bl	80017d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da0:	2302      	movs	r3, #2
 8000da2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2102      	movs	r1, #2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f001 fd02 	bl	80027c0 <HAL_RCC_ClockConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000dc2:	f000 fd05 	bl	80017d0 <Error_Handler>
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	3740      	adds	r7, #64	; 0x40
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08e      	sub	sp, #56	; 0x38
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de4:	f107 0320 	add.w	r3, r7, #32
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
 8000dfc:	615a      	str	r2, [r3, #20]
 8000dfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e00:	4b32      	ldr	r3, [pc, #200]	; (8000ecc <MX_TIM2_Init+0xfc>)
 8000e02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000e08:	4b30      	ldr	r3, [pc, #192]	; (8000ecc <MX_TIM2_Init+0xfc>)
 8000e0a:	2247      	movs	r2, #71	; 0x47
 8000e0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ecc <MX_TIM2_Init+0xfc>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000e14:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <MX_TIM2_Init+0xfc>)
 8000e16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <MX_TIM2_Init+0xfc>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e22:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <MX_TIM2_Init+0xfc>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e28:	4828      	ldr	r0, [pc, #160]	; (8000ecc <MX_TIM2_Init+0xfc>)
 8000e2a:	f001 fe91 	bl	8002b50 <HAL_TIM_Base_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000e34:	f000 fccc 	bl	80017d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e42:	4619      	mov	r1, r3
 8000e44:	4821      	ldr	r0, [pc, #132]	; (8000ecc <MX_TIM2_Init+0xfc>)
 8000e46:	f002 f9e5 	bl	8003214 <HAL_TIM_ConfigClockSource>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000e50:	f000 fcbe 	bl	80017d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e54:	481d      	ldr	r0, [pc, #116]	; (8000ecc <MX_TIM2_Init+0xfc>)
 8000e56:	f001 ff1d 	bl	8002c94 <HAL_TIM_PWM_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000e60:	f000 fcb6 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e64:	2300      	movs	r3, #0
 8000e66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e6c:	f107 0320 	add.w	r3, r7, #32
 8000e70:	4619      	mov	r1, r3
 8000e72:	4816      	ldr	r0, [pc, #88]	; (8000ecc <MX_TIM2_Init+0xfc>)
 8000e74:	f002 fd5a 	bl	800392c <HAL_TIMEx_MasterConfigSynchronization>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000e7e:	f000 fca7 	bl	80017d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e82:	2360      	movs	r3, #96	; 0x60
 8000e84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2208      	movs	r2, #8
 8000e96:	4619      	mov	r1, r3
 8000e98:	480c      	ldr	r0, [pc, #48]	; (8000ecc <MX_TIM2_Init+0xfc>)
 8000e9a:	f002 f8fd 	bl	8003098 <HAL_TIM_PWM_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000ea4:	f000 fc94 	bl	80017d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	220c      	movs	r2, #12
 8000eac:	4619      	mov	r1, r3
 8000eae:	4807      	ldr	r0, [pc, #28]	; (8000ecc <MX_TIM2_Init+0xfc>)
 8000eb0:	f002 f8f2 	bl	8003098 <HAL_TIM_PWM_ConfigChannel>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000eba:	f000 fc89 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ebe:	4803      	ldr	r0, [pc, #12]	; (8000ecc <MX_TIM2_Init+0xfc>)
 8000ec0:	f000 fcfc 	bl	80018bc <HAL_TIM_MspPostInit>

}
 8000ec4:	bf00      	nop
 8000ec6:	3738      	adds	r7, #56	; 0x38
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	200002a0 	.word	0x200002a0

08000ed0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000eec:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000eee:	4a1e      	ldr	r2, [pc, #120]	; (8000f68 <MX_TIM3_Init+0x98>)
 8000ef0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000ef4:	2247      	movs	r2, #71	; 0x47
 8000ef6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000f00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f06:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f12:	4814      	ldr	r0, [pc, #80]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000f14:	f001 fe1c 	bl	8002b50 <HAL_TIM_Base_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000f1e:	f000 fc57 	bl	80017d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480d      	ldr	r0, [pc, #52]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000f30:	f002 f970 	bl	8003214 <HAL_TIM_ConfigClockSource>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000f3a:	f000 fc49 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f46:	463b      	mov	r3, r7
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4806      	ldr	r0, [pc, #24]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000f4c:	f002 fcee 	bl	800392c <HAL_TIMEx_MasterConfigSynchronization>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000f56:	f000 fc3b 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200002e8 	.word	0x200002e8
 8000f68:	40000400 	.word	0x40000400

08000f6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f72:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <MX_USART1_UART_Init+0x50>)
 8000f74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f92:	220c      	movs	r2, #12
 8000f94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000fa4:	f002 fd32 	bl	8003a0c <HAL_UART_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fae:	f000 fc0f 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000330 	.word	0x20000330
 8000fbc:	40013800 	.word	0x40013800

08000fc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd4:	4b38      	ldr	r3, [pc, #224]	; (80010b8 <MX_GPIO_Init+0xf8>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a37      	ldr	r2, [pc, #220]	; (80010b8 <MX_GPIO_Init+0xf8>)
 8000fda:	f043 0320 	orr.w	r3, r3, #32
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b35      	ldr	r3, [pc, #212]	; (80010b8 <MX_GPIO_Init+0xf8>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0320 	and.w	r3, r3, #32
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fec:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <MX_GPIO_Init+0xf8>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <MX_GPIO_Init+0xf8>)
 8000ff2:	f043 0304 	orr.w	r3, r3, #4
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b2f      	ldr	r3, [pc, #188]	; (80010b8 <MX_GPIO_Init+0xf8>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001004:	4b2c      	ldr	r3, [pc, #176]	; (80010b8 <MX_GPIO_Init+0xf8>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a2b      	ldr	r2, [pc, #172]	; (80010b8 <MX_GPIO_Init+0xf8>)
 800100a:	f043 0308 	orr.w	r3, r3, #8
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <MX_GPIO_Init+0xf8>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0308 	and.w	r3, r3, #8
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_Pin|STEP_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2130      	movs	r1, #48	; 0x30
 8001020:	4826      	ldr	r0, [pc, #152]	; (80010bc <MX_GPIO_Init+0xfc>)
 8001022:	f001 f91a 	bl	800225a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR_Pin STEP_Pin */
  GPIO_InitStruct.Pin = DIR_Pin|STEP_Pin;
 8001026:	2330      	movs	r3, #48	; 0x30
 8001028:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102a:	2301      	movs	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2302      	movs	r3, #2
 8001034:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	4619      	mov	r1, r3
 800103c:	481f      	ldr	r0, [pc, #124]	; (80010bc <MX_GPIO_Init+0xfc>)
 800103e:	f000 ff71 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_DC1_Pin */
  GPIO_InitStruct.Pin = ENC_DC1_Pin;
 8001042:	2302      	movs	r3, #2
 8001044:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104a:	2301      	movs	r3, #1
 800104c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENC_DC1_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 0310 	add.w	r3, r7, #16
 8001052:	4619      	mov	r1, r3
 8001054:	481a      	ldr	r0, [pc, #104]	; (80010c0 <MX_GPIO_Init+0x100>)
 8001056:	f000 ff65 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_DC2_Pin */
  GPIO_InitStruct.Pin = ENC_DC2_Pin;
 800105a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800105e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001060:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <MX_GPIO_Init+0x104>)
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001064:	2301      	movs	r3, #1
 8001066:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENC_DC2_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	4619      	mov	r1, r3
 800106e:	4814      	ldr	r0, [pc, #80]	; (80010c0 <MX_GPIO_Init+0x100>)
 8001070:	f000 ff58 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : HOME_Pin */
  GPIO_InitStruct.Pin = HOME_Pin;
 8001074:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001078:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800107a:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <MX_GPIO_Init+0x104>)
 800107c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107e:	2301      	movs	r3, #1
 8001080:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HOME_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 0310 	add.w	r3, r7, #16
 8001086:	4619      	mov	r1, r3
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <MX_GPIO_Init+0xfc>)
 800108a:	f000 ff4b 	bl	8001f24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2105      	movs	r1, #5
 8001092:	2017      	movs	r0, #23
 8001094:	f000 fe6b 	bl	8001d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001098:	2017      	movs	r0, #23
 800109a:	f000 fe84 	bl	8001da6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2105      	movs	r1, #5
 80010a2:	2028      	movs	r0, #40	; 0x28
 80010a4:	f000 fe63 	bl	8001d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010a8:	2028      	movs	r0, #40	; 0x28
 80010aa:	f000 fe7c 	bl	8001da6 <HAL_NVIC_EnableIRQ>

}
 80010ae:	bf00      	nop
 80010b0:	3720      	adds	r7, #32
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010800 	.word	0x40010800
 80010c0:	40010c00 	.word	0x40010c00
 80010c4:	10110000 	.word	0x10110000

080010c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	80fb      	strh	r3, [r7, #6]
	//Encoder DC-SPEED
	if (GPIO_Pin == ENC_DC2_Pin){
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010d8:	d111      	bne.n	80010fe <HAL_GPIO_EXTI_Callback+0x36>
		if (HAL_GPIO_ReadPin(ENC_DC1_GPIO_Port,ENC_DC1_Pin) == 0) {count1++;}
 80010da:	2102      	movs	r1, #2
 80010dc:	480d      	ldr	r0, [pc, #52]	; (8001114 <HAL_GPIO_EXTI_Callback+0x4c>)
 80010de:	f001 f8a5 	bl	800222c <HAL_GPIO_ReadPin>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d105      	bne.n	80010f4 <HAL_GPIO_EXTI_Callback+0x2c>
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_GPIO_EXTI_Callback+0x50>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <HAL_GPIO_EXTI_Callback+0x50>)
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e004      	b.n	80010fe <HAL_GPIO_EXTI_Callback+0x36>
		else {count1--;}
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <HAL_GPIO_EXTI_Callback+0x50>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3b01      	subs	r3, #1
 80010fa:	4a07      	ldr	r2, [pc, #28]	; (8001118 <HAL_GPIO_EXTI_Callback+0x50>)
 80010fc:	6013      	str	r3, [r2, #0]
	}
	if(GPIO_Pin == HOME_Pin){
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001104:	d102      	bne.n	800110c <HAL_GPIO_EXTI_Callback+0x44>
			home = 1;
 8001106:	4b05      	ldr	r3, [pc, #20]	; (800111c <HAL_GPIO_EXTI_Callback+0x54>)
 8001108:	2201      	movs	r2, #1
 800110a:	601a      	str	r2, [r3, #0]
		}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40010c00 	.word	0x40010c00
 8001118:	2000038c 	.word	0x2000038c
 800111c:	20000390 	.word	0x20000390

08001120 <driveStep>:
int vPos;
void driveStep(){
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
	int n =0;
 8001126:	2300      	movs	r3, #0
 8001128:	603b      	str	r3, [r7, #0]

	if(angle > 1000){angle = currentAngle;}
 800112a:	4b2d      	ldr	r3, [pc, #180]	; (80011e0 <driveStep+0xc0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001132:	dd03      	ble.n	800113c <driveStep+0x1c>
 8001134:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <driveStep+0xc4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a29      	ldr	r2, [pc, #164]	; (80011e0 <driveStep+0xc0>)
 800113a:	6013      	str	r3, [r2, #0]
		if( currentAngle != angle ){
 800113c:	4b29      	ldr	r3, [pc, #164]	; (80011e4 <driveStep+0xc4>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b27      	ldr	r3, [pc, #156]	; (80011e0 <driveStep+0xc0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d047      	beq.n	80011d8 <driveStep+0xb8>
//			vPos = 0;
			if( currentAngle < angle){
 8001148:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <driveStep+0xc4>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <driveStep+0xc0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	da0e      	bge.n	8001172 <driveStep+0x52>
				HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 1);
 8001154:	2201      	movs	r2, #1
 8001156:	2110      	movs	r1, #16
 8001158:	4823      	ldr	r0, [pc, #140]	; (80011e8 <driveStep+0xc8>)
 800115a:	f001 f87e 	bl	800225a <HAL_GPIO_WritePin>
				n = angle - currentAngle;
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <driveStep+0xc0>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <driveStep+0xc4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	603b      	str	r3, [r7, #0]
				numstep = n;
 800116a:	4a20      	ldr	r2, [pc, #128]	; (80011ec <driveStep+0xcc>)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	e013      	b.n	800119a <driveStep+0x7a>
			}
			else if( currentAngle > angle){
 8001172:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <driveStep+0xc4>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <driveStep+0xc0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	429a      	cmp	r2, r3
 800117c:	dd0d      	ble.n	800119a <driveStep+0x7a>
				HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2110      	movs	r1, #16
 8001182:	4819      	ldr	r0, [pc, #100]	; (80011e8 <driveStep+0xc8>)
 8001184:	f001 f869 	bl	800225a <HAL_GPIO_WritePin>
				n = currentAngle - angle;
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <driveStep+0xc4>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <driveStep+0xc0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	603b      	str	r3, [r7, #0]
				numstep = n;
 8001194:	4a15      	ldr	r2, [pc, #84]	; (80011ec <driveStep+0xcc>)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	6013      	str	r3, [r2, #0]
			}
			for(int x = 0; x < numstep; x++) {
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	e012      	b.n	80011c6 <driveStep+0xa6>
//				if ((x > 3/5*numstep)&&(x<4/5*numstep)){delay = 2;}
//				else if (x>4/5*numstep)  delay = 3;
//				else delay = 1;
				HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 1);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2120      	movs	r1, #32
 80011a4:	4810      	ldr	r0, [pc, #64]	; (80011e8 <driveStep+0xc8>)
 80011a6:	f001 f858 	bl	800225a <HAL_GPIO_WritePin>
				osDelay(1);
 80011aa:	2001      	movs	r0, #1
 80011ac:	f003 f8f4 	bl	8004398 <osDelay>
				HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2120      	movs	r1, #32
 80011b4:	480c      	ldr	r0, [pc, #48]	; (80011e8 <driveStep+0xc8>)
 80011b6:	f001 f850 	bl	800225a <HAL_GPIO_WritePin>
				osDelay(1);
 80011ba:	2001      	movs	r0, #1
 80011bc:	f003 f8ec 	bl	8004398 <osDelay>
			for(int x = 0; x < numstep; x++) {
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3301      	adds	r3, #1
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <driveStep+0xcc>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	dbe7      	blt.n	80011a0 <driveStep+0x80>
			}

			currentAngle = angle;
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <driveStep+0xc0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a03      	ldr	r2, [pc, #12]	; (80011e4 <driveStep+0xc4>)
 80011d6:	6013      	str	r3, [r2, #0]
////				  home = 1;
//				  angle = intial_Rotate;
//				  currentAngle = intial_Rotate;
//			  }
////	vPos = 1;
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200003fc 	.word	0x200003fc
 80011e4:	200003f4 	.word	0x200003f4
 80011e8:	40010800 	.word	0x40010800
 80011ec:	200003f8 	.word	0x200003f8

080011f0 <findHome>:
int stp;
void findHome(){// Tim lai nha
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
		Rotate = intial_Rotate;
 80011f4:	4b30      	ldr	r3, [pc, #192]	; (80012b8 <findHome+0xc8>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	4b30      	ldr	r3, [pc, #192]	; (80012bc <findHome+0xcc>)
 80011fc:	801a      	strh	r2, [r3, #0]
		angle = intial_Rotate;
 80011fe:	4b2e      	ldr	r3, [pc, #184]	; (80012b8 <findHome+0xc8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a2f      	ldr	r2, [pc, #188]	; (80012c0 <findHome+0xd0>)
 8001204:	6013      	str	r3, [r2, #0]
		currentAngle = intial_Rotate;
 8001206:	4b2c      	ldr	r3, [pc, #176]	; (80012b8 <findHome+0xc8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a2e      	ldr	r2, [pc, #184]	; (80012c4 <findHome+0xd4>)
 800120c:	6013      	str	r3, [r2, #0]

		for (stp = 0;stp<300*3;stp++){
 800120e:	4b2e      	ldr	r3, [pc, #184]	; (80012c8 <findHome+0xd8>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	e01d      	b.n	8001252 <findHome+0x62>
			HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 1);
 8001216:	2201      	movs	r2, #1
 8001218:	2110      	movs	r1, #16
 800121a:	482c      	ldr	r0, [pc, #176]	; (80012cc <findHome+0xdc>)
 800121c:	f001 f81d 	bl	800225a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 1);
 8001220:	2201      	movs	r2, #1
 8001222:	2120      	movs	r1, #32
 8001224:	4829      	ldr	r0, [pc, #164]	; (80012cc <findHome+0xdc>)
 8001226:	f001 f818 	bl	800225a <HAL_GPIO_WritePin>
			osDelay(1);
 800122a:	2001      	movs	r0, #1
 800122c:	f003 f8b4 	bl	8004398 <osDelay>
			HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	2120      	movs	r1, #32
 8001234:	4825      	ldr	r0, [pc, #148]	; (80012cc <findHome+0xdc>)
 8001236:	f001 f810 	bl	800225a <HAL_GPIO_WritePin>
			osDelay(1);
 800123a:	2001      	movs	r0, #1
 800123c:	f003 f8ac 	bl	8004398 <osDelay>
			if (home == 1)break;
 8001240:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <findHome+0xe0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d00a      	beq.n	800125e <findHome+0x6e>
		for (stp = 0;stp<300*3;stp++){
 8001248:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <findHome+0xd8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	4a1e      	ldr	r2, [pc, #120]	; (80012c8 <findHome+0xd8>)
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <findHome+0xd8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800125a:	dbdc      	blt.n	8001216 <findHome+0x26>
 800125c:	e000      	b.n	8001260 <findHome+0x70>
			if (home == 1)break;
 800125e:	bf00      	nop
		}
		for (stp = 0;stp<400*3;stp++){
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <findHome+0xd8>)
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	e01d      	b.n	80012a4 <findHome+0xb4>
			HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2110      	movs	r1, #16
 800126c:	4817      	ldr	r0, [pc, #92]	; (80012cc <findHome+0xdc>)
 800126e:	f000 fff4 	bl	800225a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 1);
 8001272:	2201      	movs	r2, #1
 8001274:	2120      	movs	r1, #32
 8001276:	4815      	ldr	r0, [pc, #84]	; (80012cc <findHome+0xdc>)
 8001278:	f000 ffef 	bl	800225a <HAL_GPIO_WritePin>
			osDelay(1);
 800127c:	2001      	movs	r0, #1
 800127e:	f003 f88b 	bl	8004398 <osDelay>
			HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2120      	movs	r1, #32
 8001286:	4811      	ldr	r0, [pc, #68]	; (80012cc <findHome+0xdc>)
 8001288:	f000 ffe7 	bl	800225a <HAL_GPIO_WritePin>
			osDelay(1);
 800128c:	2001      	movs	r0, #1
 800128e:	f003 f883 	bl	8004398 <osDelay>
			if (home == 1)break;
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <findHome+0xe0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d00a      	beq.n	80012b0 <findHome+0xc0>
		for (stp = 0;stp<400*3;stp++){
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <findHome+0xd8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	3301      	adds	r3, #1
 80012a0:	4a09      	ldr	r2, [pc, #36]	; (80012c8 <findHome+0xd8>)
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <findHome+0xd8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80012ac:	dbdc      	blt.n	8001268 <findHome+0x78>
		}



}
 80012ae:	e000      	b.n	80012b2 <findHome+0xc2>
			if (home == 1)break;
 80012b0:	bf00      	nop
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000000 	.word	0x20000000
 80012bc:	2000038a 	.word	0x2000038a
 80012c0:	200003fc 	.word	0x200003fc
 80012c4:	200003f4 	.word	0x200003f4
 80012c8:	20000428 	.word	0x20000428
 80012cc:	40010800 	.word	0x40010800
 80012d0:	20000390 	.word	0x20000390
 80012d4:	00000000 	.word	0x00000000

080012d8 <calculatePIDSpeed>:
//
//	}
//}
double pre1;
double ui1max = 1000;
void calculatePIDSpeed(){
 80012d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012dc:	af00      	add	r7, sp, #0

	e1 = v_target - v1; // tinh toan loi ty le
 80012de:	4b66      	ldr	r3, [pc, #408]	; (8001478 <calculatePIDSpeed+0x1a0>)
 80012e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012e4:	4b65      	ldr	r3, [pc, #404]	; (800147c <calculatePIDSpeed+0x1a4>)
 80012e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ea:	f7fe ff35 	bl	8000158 <__aeabi_dsub>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4963      	ldr	r1, [pc, #396]	; (8001480 <calculatePIDSpeed+0x1a8>)
 80012f4:	e9c1 2300 	strd	r2, r3, [r1]

	up1 = kp1*e1;
 80012f8:	4b62      	ldr	r3, [pc, #392]	; (8001484 <calculatePIDSpeed+0x1ac>)
 80012fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012fe:	4b60      	ldr	r3, [pc, #384]	; (8001480 <calculatePIDSpeed+0x1a8>)
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	f7ff f8e0 	bl	80004c8 <__aeabi_dmul>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	495e      	ldr	r1, [pc, #376]	; (8001488 <calculatePIDSpeed+0x1b0>)
 800130e:	e9c1 2300 	strd	r2, r3, [r1]
	ui1 = ui_p1 + ki1*e1*0.001;
 8001312:	4b5e      	ldr	r3, [pc, #376]	; (800148c <calculatePIDSpeed+0x1b4>)
 8001314:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001318:	4b59      	ldr	r3, [pc, #356]	; (8001480 <calculatePIDSpeed+0x1a8>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f7ff f8d3 	bl	80004c8 <__aeabi_dmul>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	a34f      	add	r3, pc, #316	; (adr r3, 8001468 <calculatePIDSpeed+0x190>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f8ca 	bl	80004c8 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4610      	mov	r0, r2
 800133a:	4619      	mov	r1, r3
 800133c:	4b54      	ldr	r3, [pc, #336]	; (8001490 <calculatePIDSpeed+0x1b8>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	f7fe ff0b 	bl	800015c <__adddf3>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4952      	ldr	r1, [pc, #328]	; (8001494 <calculatePIDSpeed+0x1bc>)
 800134c:	e9c1 2300 	strd	r2, r3, [r1]
	if (ui1>ui1max)ui1 = ui1max;
 8001350:	4b50      	ldr	r3, [pc, #320]	; (8001494 <calculatePIDSpeed+0x1bc>)
 8001352:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001356:	4b50      	ldr	r3, [pc, #320]	; (8001498 <calculatePIDSpeed+0x1c0>)
 8001358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135c:	f7ff fb44 	bl	80009e8 <__aeabi_dcmpgt>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d006      	beq.n	8001374 <calculatePIDSpeed+0x9c>
 8001366:	4b4c      	ldr	r3, [pc, #304]	; (8001498 <calculatePIDSpeed+0x1c0>)
 8001368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136c:	4949      	ldr	r1, [pc, #292]	; (8001494 <calculatePIDSpeed+0x1bc>)
 800136e:	e9c1 2300 	strd	r2, r3, [r1]
 8001372:	e018      	b.n	80013a6 <calculatePIDSpeed+0xce>
	else if(ui1<-ui1max)ui1 = -ui1max;
 8001374:	4b48      	ldr	r3, [pc, #288]	; (8001498 <calculatePIDSpeed+0x1c0>)
 8001376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137a:	4690      	mov	r8, r2
 800137c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001380:	4b44      	ldr	r3, [pc, #272]	; (8001494 <calculatePIDSpeed+0x1bc>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	4640      	mov	r0, r8
 8001388:	4649      	mov	r1, r9
 800138a:	f7ff fb2d 	bl	80009e8 <__aeabi_dcmpgt>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d008      	beq.n	80013a6 <calculatePIDSpeed+0xce>
 8001394:	4b40      	ldr	r3, [pc, #256]	; (8001498 <calculatePIDSpeed+0x1c0>)
 8001396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139a:	4614      	mov	r4, r2
 800139c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80013a0:	4b3c      	ldr	r3, [pc, #240]	; (8001494 <calculatePIDSpeed+0x1bc>)
 80013a2:	e9c3 4500 	strd	r4, r5, [r3]
	u1 = up1  + ui1; //Tinh tong bo dieu khien
 80013a6:	4b38      	ldr	r3, [pc, #224]	; (8001488 <calculatePIDSpeed+0x1b0>)
 80013a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ac:	4b39      	ldr	r3, [pc, #228]	; (8001494 <calculatePIDSpeed+0x1bc>)
 80013ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b2:	f7fe fed3 	bl	800015c <__adddf3>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4938      	ldr	r1, [pc, #224]	; (800149c <calculatePIDSpeed+0x1c4>)
 80013bc:	e9c1 2300 	strd	r2, r3, [r1]
	pre1 = e1;
 80013c0:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <calculatePIDSpeed+0x1a8>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	4936      	ldr	r1, [pc, #216]	; (80014a0 <calculatePIDSpeed+0x1c8>)
 80013c8:	e9c1 2300 	strd	r2, r3, [r1]
	ui_p1 = ui1;
 80013cc:	4b31      	ldr	r3, [pc, #196]	; (8001494 <calculatePIDSpeed+0x1bc>)
 80013ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d2:	492f      	ldr	r1, [pc, #188]	; (8001490 <calculatePIDSpeed+0x1b8>)
 80013d4:	e9c1 2300 	strd	r2, r3, [r1]


	if(u1 < 0) dir = 1; //bien doi chiue vong quay
 80013d8:	4b30      	ldr	r3, [pc, #192]	; (800149c <calculatePIDSpeed+0x1c4>)
 80013da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	f04f 0300 	mov.w	r3, #0
 80013e6:	f7ff fae1 	bl	80009ac <__aeabi_dcmplt>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <calculatePIDSpeed+0x120>
 80013f0:	4b2c      	ldr	r3, [pc, #176]	; (80014a4 <calculatePIDSpeed+0x1cc>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	e003      	b.n	8001400 <calculatePIDSpeed+0x128>
	else dir = -1;
 80013f8:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <calculatePIDSpeed+0x1cc>)
 80013fa:	f04f 32ff 	mov.w	r2, #4294967295
 80013fe:	601a      	str	r2, [r3, #0]


	if(u1>1000)u1 =1000;
 8001400:	4b26      	ldr	r3, [pc, #152]	; (800149c <calculatePIDSpeed+0x1c4>)
 8001402:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <calculatePIDSpeed+0x1d0>)
 800140c:	f7ff faec 	bl	80009e8 <__aeabi_dcmpgt>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d006      	beq.n	8001424 <calculatePIDSpeed+0x14c>
 8001416:	4921      	ldr	r1, [pc, #132]	; (800149c <calculatePIDSpeed+0x1c4>)
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	4b22      	ldr	r3, [pc, #136]	; (80014a8 <calculatePIDSpeed+0x1d0>)
 800141e:	e9c1 2300 	strd	r2, r3, [r1]
 8001422:	e010      	b.n	8001446 <calculatePIDSpeed+0x16e>
	else if (u1<-1000)u1 =-1000;
 8001424:	4b1d      	ldr	r3, [pc, #116]	; (800149c <calculatePIDSpeed+0x1c4>)
 8001426:	e9d3 0100 	ldrd	r0, r1, [r3]
 800142a:	a311      	add	r3, pc, #68	; (adr r3, 8001470 <calculatePIDSpeed+0x198>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	f7ff fabc 	bl	80009ac <__aeabi_dcmplt>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d005      	beq.n	8001446 <calculatePIDSpeed+0x16e>
 800143a:	4918      	ldr	r1, [pc, #96]	; (800149c <calculatePIDSpeed+0x1c4>)
 800143c:	a30c      	add	r3, pc, #48	; (adr r3, 8001470 <calculatePIDSpeed+0x198>)
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	e9c1 2300 	strd	r2, r3, [r1]
	pwm = abs(u1);//Bao hoa xung cap
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <calculatePIDSpeed+0x1c4>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	4610      	mov	r0, r2
 800144e:	4619      	mov	r1, r3
 8001450:	f7ff fad4 	bl	80009fc <__aeabi_d2iz>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	bfb8      	it	lt
 800145a:	425b      	neglt	r3, r3
 800145c:	4a13      	ldr	r2, [pc, #76]	; (80014ac <calculatePIDSpeed+0x1d4>)
 800145e:	6013      	str	r3, [r2, #0]
}
 8001460:	bf00      	nop
 8001462:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001466:	bf00      	nop
 8001468:	d2f1a9fc 	.word	0xd2f1a9fc
 800146c:	3f50624d 	.word	0x3f50624d
 8001470:	00000000 	.word	0x00000000
 8001474:	c08f4000 	.word	0xc08f4000
 8001478:	200003b8 	.word	0x200003b8
 800147c:	200003a0 	.word	0x200003a0
 8001480:	20000398 	.word	0x20000398
 8001484:	20000008 	.word	0x20000008
 8001488:	200003c8 	.word	0x200003c8
 800148c:	20000010 	.word	0x20000010
 8001490:	200003d8 	.word	0x200003d8
 8001494:	200003d0 	.word	0x200003d0
 8001498:	20000018 	.word	0x20000018
 800149c:	200003c0 	.word	0x200003c0
 80014a0:	20000430 	.word	0x20000430
 80014a4:	200003e0 	.word	0x200003e0
 80014a8:	408f4000 	.word	0x408f4000
 80014ac:	200003e4 	.word	0x200003e4

080014b0 <ControlMotor>:
//Ham dam bao cap duong nguon xung pwm
void ControlMotor(int ChannelA, int ChannelB){
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 1000-ChannelA);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <ControlMotor+0x2c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 1000-ChannelB);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <ControlMotor+0x2c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	200002a0 	.word	0x200002a0

080014e0 <driveSpeed>:
//Ham cap xung cho dong co
void driveSpeed(int dir , int pwmVal){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
	if (dir == -1){
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f0:	d104      	bne.n	80014fc <driveSpeed+0x1c>
		ControlMotor(pwmVal,0);
 80014f2:	2100      	movs	r1, #0
 80014f4:	6838      	ldr	r0, [r7, #0]
 80014f6:	f7ff ffdb 	bl	80014b0 <ControlMotor>
		ControlMotor(0,pwmVal);
	}
	else{
		ControlMotor(0,0);
	}
}
 80014fa:	e00b      	b.n	8001514 <driveSpeed+0x34>
	else if (dir == 1){
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d104      	bne.n	800150c <driveSpeed+0x2c>
		ControlMotor(0,pwmVal);
 8001502:	6839      	ldr	r1, [r7, #0]
 8001504:	2000      	movs	r0, #0
 8001506:	f7ff ffd3 	bl	80014b0 <ControlMotor>
}
 800150a:	e003      	b.n	8001514 <driveSpeed+0x34>
		ControlMotor(0,0);
 800150c:	2100      	movs	r1, #0
 800150e:	2000      	movs	r0, #0
 8001510:	f7ff ffce 	bl	80014b0 <ControlMotor>
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <Task_Pos>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_Pos */
void Task_Pos(void const * argument)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (Mode == 3){
 8001524:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <Task_Pos+0x74>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b03      	cmp	r3, #3
 800152a:	d109      	bne.n	8001540 <Task_Pos+0x24>
	  	  home = 0;
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <Task_Pos+0x78>)
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
	  	  osDelay(3000);
 8001532:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001536:	f002 ff2f 	bl	8004398 <osDelay>
	  	  Mode = 4;
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <Task_Pos+0x74>)
 800153c:	2204      	movs	r2, #4
 800153e:	701a      	strb	r2, [r3, #0]
	    }
	  if (HAL_GPIO_ReadPin(HOME_GPIO_Port, HOME_Pin) == 1){
 8001540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001544:	4814      	ldr	r0, [pc, #80]	; (8001598 <Task_Pos+0x7c>)
 8001546:	f000 fe71 	bl	800222c <HAL_GPIO_ReadPin>
 800154a:	4603      	mov	r3, r0
 800154c:	2b01      	cmp	r3, #1
 800154e:	d102      	bne.n	8001556 <Task_Pos+0x3a>
			  home = 1;
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <Task_Pos+0x78>)
 8001552:	2201      	movs	r2, #1
 8001554:	601a      	str	r2, [r3, #0]
		  }
	  if (home == 0){
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <Task_Pos+0x78>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d102      	bne.n	8001564 <Task_Pos+0x48>
			findHome();
 800155e:	f7ff fe47 	bl	80011f0 <findHome>
 8001562:	e011      	b.n	8001588 <Task_Pos+0x6c>


		}
		else if((home == 1)&&(Mode != 3)){
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <Task_Pos+0x78>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d10d      	bne.n	8001588 <Task_Pos+0x6c>
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <Task_Pos+0x74>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b03      	cmp	r3, #3
 8001572:	d009      	beq.n	8001588 <Task_Pos+0x6c>

			angle = Rotate;
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <Task_Pos+0x80>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <Task_Pos+0x84>)
 800157c:	601a      	str	r2, [r3, #0]
			driveStep();
 800157e:	f7ff fdcf 	bl	8001120 <driveStep>
			osDelay(1);
 8001582:	2001      	movs	r0, #1
 8001584:	f002 ff08 	bl	8004398 <osDelay>
		}
    osDelay(1);
 8001588:	2001      	movs	r0, #1
 800158a:	f002 ff05 	bl	8004398 <osDelay>
	  if (Mode == 3){
 800158e:	e7c9      	b.n	8001524 <Task_Pos+0x8>
 8001590:	20000380 	.word	0x20000380
 8001594:	20000390 	.word	0x20000390
 8001598:	40010800 	.word	0x40010800
 800159c:	2000038a 	.word	0x2000038a
 80015a0:	200003fc 	.word	0x200003fc

080015a4 <Task_Speed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Speed */
void Task_Speed(void const * argument)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


  	  if (Mode != preMode){
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <Task_Speed+0x90>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b21      	ldr	r3, [pc, #132]	; (8001638 <Task_Speed+0x94>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d005      	beq.n	80015c6 <Task_Speed+0x22>
  		 count1 = 0;
 80015ba:	4b20      	ldr	r3, [pc, #128]	; (800163c <Task_Speed+0x98>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
  		 precount1 = 0;
 80015c0:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <Task_Speed+0x9c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
  	  }
  	  if((Mode == 1)||(Mode == 2)){
 80015c6:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <Task_Speed+0x90>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d003      	beq.n	80015d6 <Task_Speed+0x32>
 80015ce:	4b19      	ldr	r3, [pc, #100]	; (8001634 <Task_Speed+0x90>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d108      	bne.n	80015e8 <Task_Speed+0x44>
  		driveSpeed(-dir,pwm);
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <Task_Speed+0xa0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	425b      	negs	r3, r3
 80015dc:	4a1a      	ldr	r2, [pc, #104]	; (8001648 <Task_Speed+0xa4>)
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	4611      	mov	r1, r2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff7c 	bl	80014e0 <driveSpeed>
  	  }
  	  if(Mode == 0){
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <Task_Speed+0x90>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d103      	bne.n	80015f8 <Task_Speed+0x54>
  		driveSpeed(0,0);
 80015f0:	2100      	movs	r1, #0
 80015f2:	2000      	movs	r0, #0
 80015f4:	f7ff ff74 	bl	80014e0 <driveSpeed>
  	  }
  	  if (Mode != preMode){ui_p1 = 0;
 80015f8:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <Task_Speed+0x90>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <Task_Speed+0x94>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d00d      	beq.n	8001622 <Task_Speed+0x7e>
 8001606:	4911      	ldr	r1, [pc, #68]	; (800164c <Task_Speed+0xa8>)
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	e9c1 2300 	strd	r2, r3, [r1]
  	  	  	  	  	  	   ui1 = 0;}
 8001614:	490e      	ldr	r1, [pc, #56]	; (8001650 <Task_Speed+0xac>)
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	f04f 0300 	mov.w	r3, #0
 800161e:	e9c1 2300 	strd	r2, r3, [r1]
  	  preMode = Mode;
 8001622:	4b04      	ldr	r3, [pc, #16]	; (8001634 <Task_Speed+0x90>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	461a      	mov	r2, r3
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <Task_Speed+0x94>)
 800162a:	601a      	str	r2, [r3, #0]
    osDelay(1);
 800162c:	2001      	movs	r0, #1
 800162e:	f002 feb3 	bl	8004398 <osDelay>
  	  if (Mode != preMode){
 8001632:	e7bb      	b.n	80015ac <Task_Speed+0x8>
 8001634:	20000380 	.word	0x20000380
 8001638:	200003f0 	.word	0x200003f0
 800163c:	2000038c 	.word	0x2000038c
 8001640:	20000394 	.word	0x20000394
 8001644:	200003e0 	.word	0x200003e0
 8001648:	200003e4 	.word	0x200003e4
 800164c:	200003d8 	.word	0x200003d8
 8001650:	200003d0 	.word	0x200003d0
 8001654:	00000000 	.word	0x00000000

08001658 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001658:	b5b0      	push	{r4, r5, r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a4c      	ldr	r2, [pc, #304]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d101      	bne.n	800166e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800166a:	f000 faaf 	bl	8001bcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	pos = count1 - precount1;
 800166e:	4b4b      	ldr	r3, [pc, #300]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4b4b      	ldr	r3, [pc, #300]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe febb 	bl	80003f4 <__aeabi_i2d>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4948      	ldr	r1, [pc, #288]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001684:	e9c1 2300 	strd	r2, r3, [r1]
	v1 = ((pos/0.001)/100)*60; //�?ổi vận tốc qua rpm,(Vận tốc ảo)
 8001688:	4b46      	ldr	r3, [pc, #280]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800168a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800168e:	a33c      	add	r3, pc, #240	; (adr r3, 8001780 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	f7ff f842 	bl	800071c <__aeabi_ddiv>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	4b40      	ldr	r3, [pc, #256]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80016a6:	f7ff f839 	bl	800071c <__aeabi_ddiv>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	4b3d      	ldr	r3, [pc, #244]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x154>)
 80016b8:	f7fe ff06 	bl	80004c8 <__aeabi_dmul>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	493b      	ldr	r1, [pc, #236]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80016c2:	e9c1 2300 	strd	r2, r3, [r1]
	v1Filt = 0.854 * v1Filt + 0.0728 * v1 + 0.0728 * v1Prev;//Bo loc van toc thong thap
 80016c6:	4b3b      	ldr	r3, [pc, #236]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80016c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016cc:	a32e      	add	r3, pc, #184	; (adr r3, 8001788 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	f7fe fef9 	bl	80004c8 <__aeabi_dmul>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4614      	mov	r4, r2
 80016dc:	461d      	mov	r5, r3
 80016de:	4b34      	ldr	r3, [pc, #208]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80016e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016e4:	a32a      	add	r3, pc, #168	; (adr r3, 8001790 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe feed 	bl	80004c8 <__aeabi_dmul>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4620      	mov	r0, r4
 80016f4:	4629      	mov	r1, r5
 80016f6:	f7fe fd31 	bl	800015c <__adddf3>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4614      	mov	r4, r2
 8001700:	461d      	mov	r5, r3
 8001702:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001704:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001708:	a321      	add	r3, pc, #132	; (adr r3, 8001790 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170e:	f7fe fedb 	bl	80004c8 <__aeabi_dmul>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4620      	mov	r0, r4
 8001718:	4629      	mov	r1, r5
 800171a:	f7fe fd1f 	bl	800015c <__adddf3>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4924      	ldr	r1, [pc, #144]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001724:	e9c1 2300 	strd	r2, r3, [r1]
	v1Prev = v1; //cập nhật biến V1
 8001728:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	4922      	ldr	r1, [pc, #136]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001730:	e9c1 2300 	strd	r2, r3, [r1]
	precount1 = count1;
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a19      	ldr	r2, [pc, #100]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800173a:	6013      	str	r3, [r2, #0]

	 if(((Mode == 2 )||(Mode == 1))&&(home == 1)){
 800173c:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x164>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d003      	beq.n	800174c <HAL_TIM_PeriodElapsedCallback+0xf4>
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d114      	bne.n	8001776 <HAL_TIM_PeriodElapsedCallback+0x11e>
 800174c:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d110      	bne.n	8001776 <HAL_TIM_PeriodElapsedCallback+0x11e>
	  		v_target  = Dir*Speed;
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	fb02 f303 	mul.w	r3, r2, r3
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fe46 	bl	80003f4 <__aeabi_i2d>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4917      	ldr	r1, [pc, #92]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x174>)
 800176e:	e9c1 2300 	strd	r2, r3, [r1]
			calculatePIDSpeed();
 8001772:	f7ff fdb1 	bl	80012d8 <calculatePIDSpeed>
	  	  }

  /* USER CODE END Callback 1 */
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bdb0      	pop	{r4, r5, r7, pc}
 800177e:	bf00      	nop
 8001780:	d2f1a9fc 	.word	0xd2f1a9fc
 8001784:	3f50624d 	.word	0x3f50624d
 8001788:	ced91687 	.word	0xced91687
 800178c:	3feb53f7 	.word	0x3feb53f7
 8001790:	532617c2 	.word	0x532617c2
 8001794:	3fb2a305 	.word	0x3fb2a305
 8001798:	40000800 	.word	0x40000800
 800179c:	2000038c 	.word	0x2000038c
 80017a0:	20000394 	.word	0x20000394
 80017a4:	200003e8 	.word	0x200003e8
 80017a8:	40590000 	.word	0x40590000
 80017ac:	404e0000 	.word	0x404e0000
 80017b0:	200003a0 	.word	0x200003a0
 80017b4:	200003a8 	.word	0x200003a8
 80017b8:	200003b0 	.word	0x200003b0
 80017bc:	20000380 	.word	0x20000380
 80017c0:	20000390 	.word	0x20000390
 80017c4:	20000388 	.word	0x20000388
 80017c8:	20000384 	.word	0x20000384
 80017cc:	200003b8 	.word	0x200003b8

080017d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d4:	b672      	cpsid	i
}
 80017d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <Error_Handler+0x8>
	...

080017dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <HAL_MspInit+0x68>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	4a17      	ldr	r2, [pc, #92]	; (8001844 <HAL_MspInit+0x68>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6193      	str	r3, [r2, #24]
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <HAL_MspInit+0x68>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_MspInit+0x68>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4a11      	ldr	r2, [pc, #68]	; (8001844 <HAL_MspInit+0x68>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001804:	61d3      	str	r3, [r2, #28]
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <HAL_MspInit+0x68>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	210f      	movs	r1, #15
 8001816:	f06f 0001 	mvn.w	r0, #1
 800181a:	f000 faa8 	bl	8001d6e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800181e:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <HAL_MspInit+0x6c>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	4a04      	ldr	r2, [pc, #16]	; (8001848 <HAL_MspInit+0x6c>)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40021000 	.word	0x40021000
 8001848:	40010000 	.word	0x40010000

0800184c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800185c:	d10c      	bne.n	8001878 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <HAL_TIM_Base_MspInit+0x68>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <HAL_TIM_Base_MspInit+0x68>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	61d3      	str	r3, [r2, #28]
 800186a:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_TIM_Base_MspInit+0x68>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001876:	e018      	b.n	80018aa <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <HAL_TIM_Base_MspInit+0x6c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d113      	bne.n	80018aa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001882:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <HAL_TIM_Base_MspInit+0x68>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <HAL_TIM_Base_MspInit+0x68>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	61d3      	str	r3, [r2, #28]
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_TIM_Base_MspInit+0x68>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2105      	movs	r1, #5
 800189e:	201d      	movs	r0, #29
 80018a0:	f000 fa65 	bl	8001d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018a4:	201d      	movs	r0, #29
 80018a6:	f000 fa7e 	bl	8001da6 <HAL_NVIC_EnableIRQ>
}
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40000400 	.word	0x40000400

080018bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018da:	d117      	bne.n	800190c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018dc:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <HAL_TIM_MspPostInit+0x58>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	4a0c      	ldr	r2, [pc, #48]	; (8001914 <HAL_TIM_MspPostInit+0x58>)
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	6193      	str	r3, [r2, #24]
 80018e8:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <HAL_TIM_MspPostInit+0x58>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018f4:	230c      	movs	r3, #12
 80018f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2302      	movs	r3, #2
 80018fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001900:	f107 0310 	add.w	r3, r7, #16
 8001904:	4619      	mov	r1, r3
 8001906:	4804      	ldr	r0, [pc, #16]	; (8001918 <HAL_TIM_MspPostInit+0x5c>)
 8001908:	f000 fb0c 	bl	8001f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800190c:	bf00      	nop
 800190e:	3720      	adds	r7, #32
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000
 8001918:	40010800 	.word	0x40010800

0800191c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0310 	add.w	r3, r7, #16
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a20      	ldr	r2, [pc, #128]	; (80019b8 <HAL_UART_MspInit+0x9c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d139      	bne.n	80019b0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800193c:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <HAL_UART_MspInit+0xa0>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	4a1e      	ldr	r2, [pc, #120]	; (80019bc <HAL_UART_MspInit+0xa0>)
 8001942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001946:	6193      	str	r3, [r2, #24]
 8001948:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <HAL_UART_MspInit+0xa0>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <HAL_UART_MspInit+0xa0>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	4a18      	ldr	r2, [pc, #96]	; (80019bc <HAL_UART_MspInit+0xa0>)
 800195a:	f043 0304 	orr.w	r3, r3, #4
 800195e:	6193      	str	r3, [r2, #24]
 8001960:	4b16      	ldr	r3, [pc, #88]	; (80019bc <HAL_UART_MspInit+0xa0>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800196c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001970:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001976:	2303      	movs	r3, #3
 8001978:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197a:	f107 0310 	add.w	r3, r7, #16
 800197e:	4619      	mov	r1, r3
 8001980:	480f      	ldr	r0, [pc, #60]	; (80019c0 <HAL_UART_MspInit+0xa4>)
 8001982:	f000 facf 	bl	8001f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800198a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001994:	f107 0310 	add.w	r3, r7, #16
 8001998:	4619      	mov	r1, r3
 800199a:	4809      	ldr	r0, [pc, #36]	; (80019c0 <HAL_UART_MspInit+0xa4>)
 800199c:	f000 fac2 	bl	8001f24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2105      	movs	r1, #5
 80019a4:	2025      	movs	r0, #37	; 0x25
 80019a6:	f000 f9e2 	bl	8001d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019aa:	2025      	movs	r0, #37	; 0x25
 80019ac:	f000 f9fb 	bl	8001da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019b0:	bf00      	nop
 80019b2:	3720      	adds	r7, #32
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40013800 	.word	0x40013800
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40010800 	.word	0x40010800

080019c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08e      	sub	sp, #56	; 0x38
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80019da:	4b34      	ldr	r3, [pc, #208]	; (8001aac <HAL_InitTick+0xe8>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	4a33      	ldr	r2, [pc, #204]	; (8001aac <HAL_InitTick+0xe8>)
 80019e0:	f043 0304 	orr.w	r3, r3, #4
 80019e4:	61d3      	str	r3, [r2, #28]
 80019e6:	4b31      	ldr	r3, [pc, #196]	; (8001aac <HAL_InitTick+0xe8>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019f2:	f107 0210 	add.w	r2, r7, #16
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f001 f859 	bl	8002ab4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a02:	6a3b      	ldr	r3, [r7, #32]
 8001a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d103      	bne.n	8001a14 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a0c:	f001 f82a 	bl	8002a64 <HAL_RCC_GetPCLK1Freq>
 8001a10:	6378      	str	r0, [r7, #52]	; 0x34
 8001a12:	e004      	b.n	8001a1e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a14:	f001 f826 	bl	8002a64 <HAL_RCC_GetPCLK1Freq>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a20:	4a23      	ldr	r2, [pc, #140]	; (8001ab0 <HAL_InitTick+0xec>)
 8001a22:	fba2 2303 	umull	r2, r3, r2, r3
 8001a26:	0c9b      	lsrs	r3, r3, #18
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001a2c:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <HAL_InitTick+0xf0>)
 8001a2e:	4a22      	ldr	r2, [pc, #136]	; (8001ab8 <HAL_InitTick+0xf4>)
 8001a30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001a32:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <HAL_InitTick+0xf0>)
 8001a34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a38:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001a3a:	4a1e      	ldr	r2, [pc, #120]	; (8001ab4 <HAL_InitTick+0xf0>)
 8001a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001a40:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <HAL_InitTick+0xf0>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a46:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <HAL_InitTick+0xf0>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <HAL_InitTick+0xf0>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001a52:	4818      	ldr	r0, [pc, #96]	; (8001ab4 <HAL_InitTick+0xf0>)
 8001a54:	f001 f87c 	bl	8002b50 <HAL_TIM_Base_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001a5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d11b      	bne.n	8001a9e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001a66:	4813      	ldr	r0, [pc, #76]	; (8001ab4 <HAL_InitTick+0xf0>)
 8001a68:	f001 f8c2 	bl	8002bf0 <HAL_TIM_Base_Start_IT>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001a72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d111      	bne.n	8001a9e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a7a:	201e      	movs	r0, #30
 8001a7c:	f000 f993 	bl	8001da6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b0f      	cmp	r3, #15
 8001a84:	d808      	bhi.n	8001a98 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001a86:	2200      	movs	r2, #0
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	201e      	movs	r0, #30
 8001a8c:	f000 f96f 	bl	8001d6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a90:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <HAL_InitTick+0xf8>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	e002      	b.n	8001a9e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3738      	adds	r7, #56	; 0x38
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	431bde83 	.word	0x431bde83
 8001ab4:	20000438 	.word	0x20000438
 8001ab8:	40000800 	.word	0x40000800
 8001abc:	20000024 	.word	0x20000024

08001ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <NMI_Handler+0x4>

08001ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aca:	e7fe      	b.n	8001aca <HardFault_Handler+0x4>

08001acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <MemManage_Handler+0x4>

08001ad2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad6:	e7fe      	b.n	8001ad6 <BusFault_Handler+0x4>

08001ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <UsageFault_Handler+0x4>

08001ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr

08001aea <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HOME_Pin);
 8001aee:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001af2:	f000 fbcb 	bl	800228c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <TIM3_IRQHandler+0x10>)
 8001b02:	f001 f9c1 	bl	8002e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200002e8 	.word	0x200002e8

08001b10 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <TIM4_IRQHandler+0x10>)
 8001b16:	f001 f9b7 	bl	8002e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000438 	.word	0x20000438

08001b24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b28:	4802      	ldr	r0, [pc, #8]	; (8001b34 <USART1_IRQHandler+0x10>)
 8001b2a:	f001 ffed 	bl	8003b08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000330 	.word	0x20000330

08001b38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_DC2_Pin);
 8001b3c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b40:	f000 fba4 	bl	800228c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b54:	480c      	ldr	r0, [pc, #48]	; (8001b88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b56:	490d      	ldr	r1, [pc, #52]	; (8001b8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b58:	4a0d      	ldr	r2, [pc, #52]	; (8001b90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b5c:	e002      	b.n	8001b64 <LoopCopyDataInit>

08001b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b62:	3304      	adds	r3, #4

08001b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b68:	d3f9      	bcc.n	8001b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b6c:	4c0a      	ldr	r4, [pc, #40]	; (8001b98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b70:	e001      	b.n	8001b76 <LoopFillZerobss>

08001b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b74:	3204      	adds	r2, #4

08001b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b78:	d3fb      	bcc.n	8001b72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b7a:	f7ff ffe5 	bl	8001b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b7e:	f003 fd77 	bl	8005670 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b82:	f7ff f87f 	bl	8000c84 <main>
  bx lr
 8001b86:	4770      	bx	lr
  ldr r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b8c:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001b90:	08005764 	.word	0x08005764
  ldr r2, =_sbss
 8001b94:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001b98:	200011d0 	.word	0x200011d0

08001b9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b9c:	e7fe      	b.n	8001b9c <ADC1_2_IRQHandler>
	...

08001ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <HAL_Init+0x28>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a07      	ldr	r2, [pc, #28]	; (8001bc8 <HAL_Init+0x28>)
 8001baa:	f043 0310 	orr.w	r3, r3, #16
 8001bae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb0:	2003      	movs	r0, #3
 8001bb2:	f000 f8d1 	bl	8001d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb6:	200f      	movs	r0, #15
 8001bb8:	f7ff ff04 	bl	80019c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bbc:	f7ff fe0e 	bl	80017dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40022000 	.word	0x40022000

08001bcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_IncTick+0x1c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_IncTick+0x20>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	4a03      	ldr	r2, [pc, #12]	; (8001bec <HAL_IncTick+0x20>)
 8001bde:	6013      	str	r3, [r2, #0]
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	20000028 	.word	0x20000028
 8001bec:	20000480 	.word	0x20000480

08001bf0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf4:	4b02      	ldr	r3, [pc, #8]	; (8001c00 <HAL_GetTick+0x10>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr
 8001c00:	20000480 	.word	0x20000480

08001c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c20:	4013      	ands	r3, r2
 8001c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c36:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	60d3      	str	r3, [r2, #12]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c50:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <__NVIC_GetPriorityGrouping+0x18>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	f003 0307 	and.w	r3, r3, #7
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	db0b      	blt.n	8001c92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	f003 021f 	and.w	r2, r3, #31
 8001c80:	4906      	ldr	r1, [pc, #24]	; (8001c9c <__NVIC_EnableIRQ+0x34>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	095b      	lsrs	r3, r3, #5
 8001c88:	2001      	movs	r0, #1
 8001c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	e000e100 	.word	0xe000e100

08001ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	6039      	str	r1, [r7, #0]
 8001caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	db0a      	blt.n	8001cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	490c      	ldr	r1, [pc, #48]	; (8001cec <__NVIC_SetPriority+0x4c>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	0112      	lsls	r2, r2, #4
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc8:	e00a      	b.n	8001ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4908      	ldr	r1, [pc, #32]	; (8001cf0 <__NVIC_SetPriority+0x50>)
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	3b04      	subs	r3, #4
 8001cd8:	0112      	lsls	r2, r2, #4
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	440b      	add	r3, r1
 8001cde:	761a      	strb	r2, [r3, #24]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000e100 	.word	0xe000e100
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b089      	sub	sp, #36	; 0x24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f1c3 0307 	rsb	r3, r3, #7
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	bf28      	it	cs
 8001d12:	2304      	movcs	r3, #4
 8001d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	2b06      	cmp	r3, #6
 8001d1c:	d902      	bls.n	8001d24 <NVIC_EncodePriority+0x30>
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3b03      	subs	r3, #3
 8001d22:	e000      	b.n	8001d26 <NVIC_EncodePriority+0x32>
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d28:	f04f 32ff 	mov.w	r2, #4294967295
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43da      	mvns	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	401a      	ands	r2, r3
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	fa01 f303 	lsl.w	r3, r1, r3
 8001d46:	43d9      	mvns	r1, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	4313      	orrs	r3, r2
         );
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3724      	adds	r7, #36	; 0x24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff ff4f 	bl	8001c04 <__NVIC_SetPriorityGrouping>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b086      	sub	sp, #24
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	4603      	mov	r3, r0
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d80:	f7ff ff64 	bl	8001c4c <__NVIC_GetPriorityGrouping>
 8001d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	68b9      	ldr	r1, [r7, #8]
 8001d8a:	6978      	ldr	r0, [r7, #20]
 8001d8c:	f7ff ffb2 	bl	8001cf4 <NVIC_EncodePriority>
 8001d90:	4602      	mov	r2, r0
 8001d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d96:	4611      	mov	r1, r2
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff81 	bl	8001ca0 <__NVIC_SetPriority>
}
 8001d9e:	bf00      	nop
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	4603      	mov	r3, r0
 8001dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff57 	bl	8001c68 <__NVIC_EnableIRQ>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b085      	sub	sp, #20
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d008      	beq.n	8001dea <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2204      	movs	r2, #4
 8001ddc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e020      	b.n	8001e2c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 020e 	bic.w	r2, r2, #14
 8001df8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0201 	bic.w	r2, r2, #1
 8001e08:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e12:	2101      	movs	r1, #1
 8001e14:	fa01 f202 	lsl.w	r2, r1, r2
 8001e18:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d005      	beq.n	8001e5a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2204      	movs	r2, #4
 8001e52:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
 8001e58:	e051      	b.n	8001efe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 020e 	bic.w	r2, r2, #14
 8001e68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0201 	bic.w	r2, r2, #1
 8001e78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a22      	ldr	r2, [pc, #136]	; (8001f08 <HAL_DMA_Abort_IT+0xd0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d029      	beq.n	8001ed8 <HAL_DMA_Abort_IT+0xa0>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a20      	ldr	r2, [pc, #128]	; (8001f0c <HAL_DMA_Abort_IT+0xd4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d022      	beq.n	8001ed4 <HAL_DMA_Abort_IT+0x9c>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a1f      	ldr	r2, [pc, #124]	; (8001f10 <HAL_DMA_Abort_IT+0xd8>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d01a      	beq.n	8001ece <HAL_DMA_Abort_IT+0x96>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a1d      	ldr	r2, [pc, #116]	; (8001f14 <HAL_DMA_Abort_IT+0xdc>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d012      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x90>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1c      	ldr	r2, [pc, #112]	; (8001f18 <HAL_DMA_Abort_IT+0xe0>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d00a      	beq.n	8001ec2 <HAL_DMA_Abort_IT+0x8a>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a1a      	ldr	r2, [pc, #104]	; (8001f1c <HAL_DMA_Abort_IT+0xe4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d102      	bne.n	8001ebc <HAL_DMA_Abort_IT+0x84>
 8001eb6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001eba:	e00e      	b.n	8001eda <HAL_DMA_Abort_IT+0xa2>
 8001ebc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ec0:	e00b      	b.n	8001eda <HAL_DMA_Abort_IT+0xa2>
 8001ec2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ec6:	e008      	b.n	8001eda <HAL_DMA_Abort_IT+0xa2>
 8001ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ecc:	e005      	b.n	8001eda <HAL_DMA_Abort_IT+0xa2>
 8001ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ed2:	e002      	b.n	8001eda <HAL_DMA_Abort_IT+0xa2>
 8001ed4:	2310      	movs	r3, #16
 8001ed6:	e000      	b.n	8001eda <HAL_DMA_Abort_IT+0xa2>
 8001ed8:	2301      	movs	r3, #1
 8001eda:	4a11      	ldr	r2, [pc, #68]	; (8001f20 <HAL_DMA_Abort_IT+0xe8>)
 8001edc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	4798      	blx	r3
    } 
  }
  return status;
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40020008 	.word	0x40020008
 8001f0c:	4002001c 	.word	0x4002001c
 8001f10:	40020030 	.word	0x40020030
 8001f14:	40020044 	.word	0x40020044
 8001f18:	40020058 	.word	0x40020058
 8001f1c:	4002006c 	.word	0x4002006c
 8001f20:	40020000 	.word	0x40020000

08001f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b08b      	sub	sp, #44	; 0x2c
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f32:	2300      	movs	r3, #0
 8001f34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f36:	e169      	b.n	800220c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f38:	2201      	movs	r2, #1
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	69fa      	ldr	r2, [r7, #28]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	f040 8158 	bne.w	8002206 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4a9a      	ldr	r2, [pc, #616]	; (80021c4 <HAL_GPIO_Init+0x2a0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d05e      	beq.n	800201e <HAL_GPIO_Init+0xfa>
 8001f60:	4a98      	ldr	r2, [pc, #608]	; (80021c4 <HAL_GPIO_Init+0x2a0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d875      	bhi.n	8002052 <HAL_GPIO_Init+0x12e>
 8001f66:	4a98      	ldr	r2, [pc, #608]	; (80021c8 <HAL_GPIO_Init+0x2a4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d058      	beq.n	800201e <HAL_GPIO_Init+0xfa>
 8001f6c:	4a96      	ldr	r2, [pc, #600]	; (80021c8 <HAL_GPIO_Init+0x2a4>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d86f      	bhi.n	8002052 <HAL_GPIO_Init+0x12e>
 8001f72:	4a96      	ldr	r2, [pc, #600]	; (80021cc <HAL_GPIO_Init+0x2a8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d052      	beq.n	800201e <HAL_GPIO_Init+0xfa>
 8001f78:	4a94      	ldr	r2, [pc, #592]	; (80021cc <HAL_GPIO_Init+0x2a8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d869      	bhi.n	8002052 <HAL_GPIO_Init+0x12e>
 8001f7e:	4a94      	ldr	r2, [pc, #592]	; (80021d0 <HAL_GPIO_Init+0x2ac>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d04c      	beq.n	800201e <HAL_GPIO_Init+0xfa>
 8001f84:	4a92      	ldr	r2, [pc, #584]	; (80021d0 <HAL_GPIO_Init+0x2ac>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d863      	bhi.n	8002052 <HAL_GPIO_Init+0x12e>
 8001f8a:	4a92      	ldr	r2, [pc, #584]	; (80021d4 <HAL_GPIO_Init+0x2b0>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d046      	beq.n	800201e <HAL_GPIO_Init+0xfa>
 8001f90:	4a90      	ldr	r2, [pc, #576]	; (80021d4 <HAL_GPIO_Init+0x2b0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d85d      	bhi.n	8002052 <HAL_GPIO_Init+0x12e>
 8001f96:	2b12      	cmp	r3, #18
 8001f98:	d82a      	bhi.n	8001ff0 <HAL_GPIO_Init+0xcc>
 8001f9a:	2b12      	cmp	r3, #18
 8001f9c:	d859      	bhi.n	8002052 <HAL_GPIO_Init+0x12e>
 8001f9e:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <HAL_GPIO_Init+0x80>)
 8001fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa4:	0800201f 	.word	0x0800201f
 8001fa8:	08001ff9 	.word	0x08001ff9
 8001fac:	0800200b 	.word	0x0800200b
 8001fb0:	0800204d 	.word	0x0800204d
 8001fb4:	08002053 	.word	0x08002053
 8001fb8:	08002053 	.word	0x08002053
 8001fbc:	08002053 	.word	0x08002053
 8001fc0:	08002053 	.word	0x08002053
 8001fc4:	08002053 	.word	0x08002053
 8001fc8:	08002053 	.word	0x08002053
 8001fcc:	08002053 	.word	0x08002053
 8001fd0:	08002053 	.word	0x08002053
 8001fd4:	08002053 	.word	0x08002053
 8001fd8:	08002053 	.word	0x08002053
 8001fdc:	08002053 	.word	0x08002053
 8001fe0:	08002053 	.word	0x08002053
 8001fe4:	08002053 	.word	0x08002053
 8001fe8:	08002001 	.word	0x08002001
 8001fec:	08002015 	.word	0x08002015
 8001ff0:	4a79      	ldr	r2, [pc, #484]	; (80021d8 <HAL_GPIO_Init+0x2b4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d013      	beq.n	800201e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ff6:	e02c      	b.n	8002052 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	623b      	str	r3, [r7, #32]
          break;
 8001ffe:	e029      	b.n	8002054 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	3304      	adds	r3, #4
 8002006:	623b      	str	r3, [r7, #32]
          break;
 8002008:	e024      	b.n	8002054 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	3308      	adds	r3, #8
 8002010:	623b      	str	r3, [r7, #32]
          break;
 8002012:	e01f      	b.n	8002054 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	330c      	adds	r3, #12
 800201a:	623b      	str	r3, [r7, #32]
          break;
 800201c:	e01a      	b.n	8002054 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d102      	bne.n	800202c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002026:	2304      	movs	r3, #4
 8002028:	623b      	str	r3, [r7, #32]
          break;
 800202a:	e013      	b.n	8002054 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d105      	bne.n	8002040 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002034:	2308      	movs	r3, #8
 8002036:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69fa      	ldr	r2, [r7, #28]
 800203c:	611a      	str	r2, [r3, #16]
          break;
 800203e:	e009      	b.n	8002054 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002040:	2308      	movs	r3, #8
 8002042:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69fa      	ldr	r2, [r7, #28]
 8002048:	615a      	str	r2, [r3, #20]
          break;
 800204a:	e003      	b.n	8002054 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800204c:	2300      	movs	r3, #0
 800204e:	623b      	str	r3, [r7, #32]
          break;
 8002050:	e000      	b.n	8002054 <HAL_GPIO_Init+0x130>
          break;
 8002052:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	2bff      	cmp	r3, #255	; 0xff
 8002058:	d801      	bhi.n	800205e <HAL_GPIO_Init+0x13a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	e001      	b.n	8002062 <HAL_GPIO_Init+0x13e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3304      	adds	r3, #4
 8002062:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	2bff      	cmp	r3, #255	; 0xff
 8002068:	d802      	bhi.n	8002070 <HAL_GPIO_Init+0x14c>
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	e002      	b.n	8002076 <HAL_GPIO_Init+0x152>
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	3b08      	subs	r3, #8
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	210f      	movs	r1, #15
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	fa01 f303 	lsl.w	r3, r1, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	401a      	ands	r2, r3
 8002088:	6a39      	ldr	r1, [r7, #32]
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	fa01 f303 	lsl.w	r3, r1, r3
 8002090:	431a      	orrs	r2, r3
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 80b1 	beq.w	8002206 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020a4:	4b4d      	ldr	r3, [pc, #308]	; (80021dc <HAL_GPIO_Init+0x2b8>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	4a4c      	ldr	r2, [pc, #304]	; (80021dc <HAL_GPIO_Init+0x2b8>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	6193      	str	r3, [r2, #24]
 80020b0:	4b4a      	ldr	r3, [pc, #296]	; (80021dc <HAL_GPIO_Init+0x2b8>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020bc:	4a48      	ldr	r2, [pc, #288]	; (80021e0 <HAL_GPIO_Init+0x2bc>)
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	089b      	lsrs	r3, r3, #2
 80020c2:	3302      	adds	r3, #2
 80020c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	220f      	movs	r2, #15
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4013      	ands	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a40      	ldr	r2, [pc, #256]	; (80021e4 <HAL_GPIO_Init+0x2c0>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d013      	beq.n	8002110 <HAL_GPIO_Init+0x1ec>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a3f      	ldr	r2, [pc, #252]	; (80021e8 <HAL_GPIO_Init+0x2c4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d00d      	beq.n	800210c <HAL_GPIO_Init+0x1e8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a3e      	ldr	r2, [pc, #248]	; (80021ec <HAL_GPIO_Init+0x2c8>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d007      	beq.n	8002108 <HAL_GPIO_Init+0x1e4>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a3d      	ldr	r2, [pc, #244]	; (80021f0 <HAL_GPIO_Init+0x2cc>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d101      	bne.n	8002104 <HAL_GPIO_Init+0x1e0>
 8002100:	2303      	movs	r3, #3
 8002102:	e006      	b.n	8002112 <HAL_GPIO_Init+0x1ee>
 8002104:	2304      	movs	r3, #4
 8002106:	e004      	b.n	8002112 <HAL_GPIO_Init+0x1ee>
 8002108:	2302      	movs	r3, #2
 800210a:	e002      	b.n	8002112 <HAL_GPIO_Init+0x1ee>
 800210c:	2301      	movs	r3, #1
 800210e:	e000      	b.n	8002112 <HAL_GPIO_Init+0x1ee>
 8002110:	2300      	movs	r3, #0
 8002112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002114:	f002 0203 	and.w	r2, r2, #3
 8002118:	0092      	lsls	r2, r2, #2
 800211a:	4093      	lsls	r3, r2
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	4313      	orrs	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002122:	492f      	ldr	r1, [pc, #188]	; (80021e0 <HAL_GPIO_Init+0x2bc>)
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	089b      	lsrs	r3, r3, #2
 8002128:	3302      	adds	r3, #2
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d006      	beq.n	800214a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800213c:	4b2d      	ldr	r3, [pc, #180]	; (80021f4 <HAL_GPIO_Init+0x2d0>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	492c      	ldr	r1, [pc, #176]	; (80021f4 <HAL_GPIO_Init+0x2d0>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	600b      	str	r3, [r1, #0]
 8002148:	e006      	b.n	8002158 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800214a:	4b2a      	ldr	r3, [pc, #168]	; (80021f4 <HAL_GPIO_Init+0x2d0>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	43db      	mvns	r3, r3
 8002152:	4928      	ldr	r1, [pc, #160]	; (80021f4 <HAL_GPIO_Init+0x2d0>)
 8002154:	4013      	ands	r3, r2
 8002156:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d006      	beq.n	8002172 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002164:	4b23      	ldr	r3, [pc, #140]	; (80021f4 <HAL_GPIO_Init+0x2d0>)
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	4922      	ldr	r1, [pc, #136]	; (80021f4 <HAL_GPIO_Init+0x2d0>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	604b      	str	r3, [r1, #4]
 8002170:	e006      	b.n	8002180 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002172:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <HAL_GPIO_Init+0x2d0>)
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	43db      	mvns	r3, r3
 800217a:	491e      	ldr	r1, [pc, #120]	; (80021f4 <HAL_GPIO_Init+0x2d0>)
 800217c:	4013      	ands	r3, r2
 800217e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d006      	beq.n	800219a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800218c:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_GPIO_Init+0x2d0>)
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	4918      	ldr	r1, [pc, #96]	; (80021f4 <HAL_GPIO_Init+0x2d0>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	608b      	str	r3, [r1, #8]
 8002198:	e006      	b.n	80021a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800219a:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <HAL_GPIO_Init+0x2d0>)
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	4914      	ldr	r1, [pc, #80]	; (80021f4 <HAL_GPIO_Init+0x2d0>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d021      	beq.n	80021f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021b4:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <HAL_GPIO_Init+0x2d0>)
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	490e      	ldr	r1, [pc, #56]	; (80021f4 <HAL_GPIO_Init+0x2d0>)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	60cb      	str	r3, [r1, #12]
 80021c0:	e021      	b.n	8002206 <HAL_GPIO_Init+0x2e2>
 80021c2:	bf00      	nop
 80021c4:	10320000 	.word	0x10320000
 80021c8:	10310000 	.word	0x10310000
 80021cc:	10220000 	.word	0x10220000
 80021d0:	10210000 	.word	0x10210000
 80021d4:	10120000 	.word	0x10120000
 80021d8:	10110000 	.word	0x10110000
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40010000 	.word	0x40010000
 80021e4:	40010800 	.word	0x40010800
 80021e8:	40010c00 	.word	0x40010c00
 80021ec:	40011000 	.word	0x40011000
 80021f0:	40011400 	.word	0x40011400
 80021f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_GPIO_Init+0x304>)
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	43db      	mvns	r3, r3
 8002200:	4909      	ldr	r1, [pc, #36]	; (8002228 <HAL_GPIO_Init+0x304>)
 8002202:	4013      	ands	r3, r2
 8002204:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	3301      	adds	r3, #1
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	fa22 f303 	lsr.w	r3, r2, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	f47f ae8e 	bne.w	8001f38 <HAL_GPIO_Init+0x14>
  }
}
 800221c:	bf00      	nop
 800221e:	bf00      	nop
 8002220:	372c      	adds	r7, #44	; 0x2c
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	40010400 	.word	0x40010400

0800222c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	887b      	ldrh	r3, [r7, #2]
 800223e:	4013      	ands	r3, r2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d002      	beq.n	800224a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
 8002248:	e001      	b.n	800224e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800224a:	2300      	movs	r3, #0
 800224c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800224e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr

0800225a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	460b      	mov	r3, r1
 8002264:	807b      	strh	r3, [r7, #2]
 8002266:	4613      	mov	r3, r2
 8002268:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800226a:	787b      	ldrb	r3, [r7, #1]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002270:	887a      	ldrh	r2, [r7, #2]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002276:	e003      	b.n	8002280 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002278:	887b      	ldrh	r3, [r7, #2]
 800227a:	041a      	lsls	r2, r3, #16
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	611a      	str	r2, [r3, #16]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
	...

0800228c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002298:	695a      	ldr	r2, [r3, #20]
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	4013      	ands	r3, r2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d006      	beq.n	80022b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022a2:	4a05      	ldr	r2, [pc, #20]	; (80022b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022a4:	88fb      	ldrh	r3, [r7, #6]
 80022a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe ff0c 	bl	80010c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40010400 	.word	0x40010400

080022bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e272      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 8087 	beq.w	80023ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022dc:	4b92      	ldr	r3, [pc, #584]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d00c      	beq.n	8002302 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022e8:	4b8f      	ldr	r3, [pc, #572]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 030c 	and.w	r3, r3, #12
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d112      	bne.n	800231a <HAL_RCC_OscConfig+0x5e>
 80022f4:	4b8c      	ldr	r3, [pc, #560]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002300:	d10b      	bne.n	800231a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002302:	4b89      	ldr	r3, [pc, #548]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d06c      	beq.n	80023e8 <HAL_RCC_OscConfig+0x12c>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d168      	bne.n	80023e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e24c      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002322:	d106      	bne.n	8002332 <HAL_RCC_OscConfig+0x76>
 8002324:	4b80      	ldr	r3, [pc, #512]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a7f      	ldr	r2, [pc, #508]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 800232a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	e02e      	b.n	8002390 <HAL_RCC_OscConfig+0xd4>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10c      	bne.n	8002354 <HAL_RCC_OscConfig+0x98>
 800233a:	4b7b      	ldr	r3, [pc, #492]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a7a      	ldr	r2, [pc, #488]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 8002340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	4b78      	ldr	r3, [pc, #480]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a77      	ldr	r2, [pc, #476]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 800234c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e01d      	b.n	8002390 <HAL_RCC_OscConfig+0xd4>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800235c:	d10c      	bne.n	8002378 <HAL_RCC_OscConfig+0xbc>
 800235e:	4b72      	ldr	r3, [pc, #456]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a71      	ldr	r2, [pc, #452]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 8002364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	4b6f      	ldr	r3, [pc, #444]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a6e      	ldr	r2, [pc, #440]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 8002370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	e00b      	b.n	8002390 <HAL_RCC_OscConfig+0xd4>
 8002378:	4b6b      	ldr	r3, [pc, #428]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a6a      	ldr	r2, [pc, #424]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 800237e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	4b68      	ldr	r3, [pc, #416]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a67      	ldr	r2, [pc, #412]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 800238a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800238e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d013      	beq.n	80023c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7ff fc2a 	bl	8001bf0 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a0:	f7ff fc26 	bl	8001bf0 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b64      	cmp	r3, #100	; 0x64
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e200      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	4b5d      	ldr	r3, [pc, #372]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0xe4>
 80023be:	e014      	b.n	80023ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7ff fc16 	bl	8001bf0 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c8:	f7ff fc12 	bl	8001bf0 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	; 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e1ec      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023da:	4b53      	ldr	r3, [pc, #332]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x10c>
 80023e6:	e000      	b.n	80023ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d063      	beq.n	80024be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023f6:	4b4c      	ldr	r3, [pc, #304]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00b      	beq.n	800241a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002402:	4b49      	ldr	r3, [pc, #292]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b08      	cmp	r3, #8
 800240c:	d11c      	bne.n	8002448 <HAL_RCC_OscConfig+0x18c>
 800240e:	4b46      	ldr	r3, [pc, #280]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d116      	bne.n	8002448 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241a:	4b43      	ldr	r3, [pc, #268]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d005      	beq.n	8002432 <HAL_RCC_OscConfig+0x176>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d001      	beq.n	8002432 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e1c0      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002432:	4b3d      	ldr	r3, [pc, #244]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4939      	ldr	r1, [pc, #228]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002446:	e03a      	b.n	80024be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d020      	beq.n	8002492 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002450:	4b36      	ldr	r3, [pc, #216]	; (800252c <HAL_RCC_OscConfig+0x270>)
 8002452:	2201      	movs	r2, #1
 8002454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002456:	f7ff fbcb 	bl	8001bf0 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800245e:	f7ff fbc7 	bl	8001bf0 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e1a1      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002470:	4b2d      	ldr	r3, [pc, #180]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0f0      	beq.n	800245e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247c:	4b2a      	ldr	r3, [pc, #168]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4927      	ldr	r1, [pc, #156]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 800248c:	4313      	orrs	r3, r2
 800248e:	600b      	str	r3, [r1, #0]
 8002490:	e015      	b.n	80024be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002492:	4b26      	ldr	r3, [pc, #152]	; (800252c <HAL_RCC_OscConfig+0x270>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7ff fbaa 	bl	8001bf0 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a0:	f7ff fba6 	bl	8001bf0 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e180      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b2:	4b1d      	ldr	r3, [pc, #116]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d03a      	beq.n	8002540 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d019      	beq.n	8002506 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d2:	4b17      	ldr	r3, [pc, #92]	; (8002530 <HAL_RCC_OscConfig+0x274>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d8:	f7ff fb8a 	bl	8001bf0 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e0:	f7ff fb86 	bl	8001bf0 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e160      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f2:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024fe:	2001      	movs	r0, #1
 8002500:	f000 fb08 	bl	8002b14 <RCC_Delay>
 8002504:	e01c      	b.n	8002540 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_RCC_OscConfig+0x274>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250c:	f7ff fb70 	bl	8001bf0 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002512:	e00f      	b.n	8002534 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002514:	f7ff fb6c 	bl	8001bf0 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d908      	bls.n	8002534 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e146      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
 8002526:	bf00      	nop
 8002528:	40021000 	.word	0x40021000
 800252c:	42420000 	.word	0x42420000
 8002530:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002534:	4b92      	ldr	r3, [pc, #584]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1e9      	bne.n	8002514 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 80a6 	beq.w	800269a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002552:	4b8b      	ldr	r3, [pc, #556]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10d      	bne.n	800257a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800255e:	4b88      	ldr	r3, [pc, #544]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	4a87      	ldr	r2, [pc, #540]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002568:	61d3      	str	r3, [r2, #28]
 800256a:	4b85      	ldr	r3, [pc, #532]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002576:	2301      	movs	r3, #1
 8002578:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257a:	4b82      	ldr	r3, [pc, #520]	; (8002784 <HAL_RCC_OscConfig+0x4c8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d118      	bne.n	80025b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002586:	4b7f      	ldr	r3, [pc, #508]	; (8002784 <HAL_RCC_OscConfig+0x4c8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a7e      	ldr	r2, [pc, #504]	; (8002784 <HAL_RCC_OscConfig+0x4c8>)
 800258c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002592:	f7ff fb2d 	bl	8001bf0 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259a:	f7ff fb29 	bl	8001bf0 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b64      	cmp	r3, #100	; 0x64
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e103      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ac:	4b75      	ldr	r3, [pc, #468]	; (8002784 <HAL_RCC_OscConfig+0x4c8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d106      	bne.n	80025ce <HAL_RCC_OscConfig+0x312>
 80025c0:	4b6f      	ldr	r3, [pc, #444]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	4a6e      	ldr	r2, [pc, #440]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	6213      	str	r3, [r2, #32]
 80025cc:	e02d      	b.n	800262a <HAL_RCC_OscConfig+0x36e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCC_OscConfig+0x334>
 80025d6:	4b6a      	ldr	r3, [pc, #424]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	4a69      	ldr	r2, [pc, #420]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	f023 0301 	bic.w	r3, r3, #1
 80025e0:	6213      	str	r3, [r2, #32]
 80025e2:	4b67      	ldr	r3, [pc, #412]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	4a66      	ldr	r2, [pc, #408]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	f023 0304 	bic.w	r3, r3, #4
 80025ec:	6213      	str	r3, [r2, #32]
 80025ee:	e01c      	b.n	800262a <HAL_RCC_OscConfig+0x36e>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	2b05      	cmp	r3, #5
 80025f6:	d10c      	bne.n	8002612 <HAL_RCC_OscConfig+0x356>
 80025f8:	4b61      	ldr	r3, [pc, #388]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	4a60      	ldr	r2, [pc, #384]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 80025fe:	f043 0304 	orr.w	r3, r3, #4
 8002602:	6213      	str	r3, [r2, #32]
 8002604:	4b5e      	ldr	r3, [pc, #376]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	4a5d      	ldr	r2, [pc, #372]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6213      	str	r3, [r2, #32]
 8002610:	e00b      	b.n	800262a <HAL_RCC_OscConfig+0x36e>
 8002612:	4b5b      	ldr	r3, [pc, #364]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	4a5a      	ldr	r2, [pc, #360]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002618:	f023 0301 	bic.w	r3, r3, #1
 800261c:	6213      	str	r3, [r2, #32]
 800261e:	4b58      	ldr	r3, [pc, #352]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	4a57      	ldr	r2, [pc, #348]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002624:	f023 0304 	bic.w	r3, r3, #4
 8002628:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d015      	beq.n	800265e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002632:	f7ff fadd 	bl	8001bf0 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002638:	e00a      	b.n	8002650 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800263a:	f7ff fad9 	bl	8001bf0 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	f241 3288 	movw	r2, #5000	; 0x1388
 8002648:	4293      	cmp	r3, r2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e0b1      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002650:	4b4b      	ldr	r3, [pc, #300]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0ee      	beq.n	800263a <HAL_RCC_OscConfig+0x37e>
 800265c:	e014      	b.n	8002688 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265e:	f7ff fac7 	bl	8001bf0 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002664:	e00a      	b.n	800267c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002666:	f7ff fac3 	bl	8001bf0 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	f241 3288 	movw	r2, #5000	; 0x1388
 8002674:	4293      	cmp	r3, r2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e09b      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800267c:	4b40      	ldr	r3, [pc, #256]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1ee      	bne.n	8002666 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002688:	7dfb      	ldrb	r3, [r7, #23]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d105      	bne.n	800269a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800268e:	4b3c      	ldr	r3, [pc, #240]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	4a3b      	ldr	r2, [pc, #236]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002698:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 8087 	beq.w	80027b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026a4:	4b36      	ldr	r3, [pc, #216]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 030c 	and.w	r3, r3, #12
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d061      	beq.n	8002774 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d146      	bne.n	8002746 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b8:	4b33      	ldr	r3, [pc, #204]	; (8002788 <HAL_RCC_OscConfig+0x4cc>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026be:	f7ff fa97 	bl	8001bf0 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c6:	f7ff fa93 	bl	8001bf0 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e06d      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d8:	4b29      	ldr	r3, [pc, #164]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f0      	bne.n	80026c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ec:	d108      	bne.n	8002700 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026ee:	4b24      	ldr	r3, [pc, #144]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	4921      	ldr	r1, [pc, #132]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002700:	4b1f      	ldr	r3, [pc, #124]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a19      	ldr	r1, [r3, #32]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	430b      	orrs	r3, r1
 8002712:	491b      	ldr	r1, [pc, #108]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	4313      	orrs	r3, r2
 8002716:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002718:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <HAL_RCC_OscConfig+0x4cc>)
 800271a:	2201      	movs	r2, #1
 800271c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271e:	f7ff fa67 	bl	8001bf0 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002726:	f7ff fa63 	bl	8001bf0 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e03d      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002738:	4b11      	ldr	r3, [pc, #68]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x46a>
 8002744:	e035      	b.n	80027b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <HAL_RCC_OscConfig+0x4cc>)
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7ff fa50 	bl	8001bf0 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002754:	f7ff fa4c 	bl	8001bf0 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e026      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_OscConfig+0x498>
 8002772:	e01e      	b.n	80027b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d107      	bne.n	800278c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e019      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
 8002780:	40021000 	.word	0x40021000
 8002784:	40007000 	.word	0x40007000
 8002788:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_RCC_OscConfig+0x500>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	429a      	cmp	r2, r3
 800279e:	d106      	bne.n	80027ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d001      	beq.n	80027b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40021000 	.word	0x40021000

080027c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0d0      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027d4:	4b6a      	ldr	r3, [pc, #424]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d910      	bls.n	8002804 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e2:	4b67      	ldr	r3, [pc, #412]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 0207 	bic.w	r2, r3, #7
 80027ea:	4965      	ldr	r1, [pc, #404]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b63      	ldr	r3, [pc, #396]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0b8      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d020      	beq.n	8002852 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800281c:	4b59      	ldr	r3, [pc, #356]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	4a58      	ldr	r2, [pc, #352]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002822:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002826:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002834:	4b53      	ldr	r3, [pc, #332]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a52      	ldr	r2, [pc, #328]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800283e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002840:	4b50      	ldr	r3, [pc, #320]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	494d      	ldr	r1, [pc, #308]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d040      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d107      	bne.n	8002876 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	4b47      	ldr	r3, [pc, #284]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d115      	bne.n	800289e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e07f      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d107      	bne.n	800288e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287e:	4b41      	ldr	r3, [pc, #260]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d109      	bne.n	800289e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e073      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288e:	4b3d      	ldr	r3, [pc, #244]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e06b      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289e:	4b39      	ldr	r3, [pc, #228]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f023 0203 	bic.w	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	4936      	ldr	r1, [pc, #216]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028b0:	f7ff f99e 	bl	8001bf0 <HAL_GetTick>
 80028b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b6:	e00a      	b.n	80028ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b8:	f7ff f99a 	bl	8001bf0 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e053      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ce:	4b2d      	ldr	r3, [pc, #180]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 020c 	and.w	r2, r3, #12
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	429a      	cmp	r2, r3
 80028de:	d1eb      	bne.n	80028b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028e0:	4b27      	ldr	r3, [pc, #156]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d210      	bcs.n	8002910 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ee:	4b24      	ldr	r3, [pc, #144]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 0207 	bic.w	r2, r3, #7
 80028f6:	4922      	ldr	r1, [pc, #136]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b20      	ldr	r3, [pc, #128]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e032      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800291c:	4b19      	ldr	r3, [pc, #100]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	4916      	ldr	r1, [pc, #88]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800292a:	4313      	orrs	r3, r2
 800292c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800293a:	4b12      	ldr	r3, [pc, #72]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	490e      	ldr	r1, [pc, #56]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	4313      	orrs	r3, r2
 800294c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800294e:	f000 f821 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 8002952:	4602      	mov	r2, r0
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	490a      	ldr	r1, [pc, #40]	; (8002988 <HAL_RCC_ClockConfig+0x1c8>)
 8002960:	5ccb      	ldrb	r3, [r1, r3]
 8002962:	fa22 f303 	lsr.w	r3, r2, r3
 8002966:	4a09      	ldr	r2, [pc, #36]	; (800298c <HAL_RCC_ClockConfig+0x1cc>)
 8002968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <HAL_RCC_ClockConfig+0x1d0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff f828 	bl	80019c4 <HAL_InitTick>

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40022000 	.word	0x40022000
 8002984:	40021000 	.word	0x40021000
 8002988:	08005744 	.word	0x08005744
 800298c:	20000020 	.word	0x20000020
 8002990:	20000024 	.word	0x20000024

08002994 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002994:	b490      	push	{r4, r7}
 8002996:	b08a      	sub	sp, #40	; 0x28
 8002998:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800299a:	4b29      	ldr	r3, [pc, #164]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xac>)
 800299c:	1d3c      	adds	r4, r7, #4
 800299e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029a4:	f240 2301 	movw	r3, #513	; 0x201
 80029a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
 80029ae:	2300      	movs	r3, #0
 80029b0:	61bb      	str	r3, [r7, #24]
 80029b2:	2300      	movs	r3, #0
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029be:	4b21      	ldr	r3, [pc, #132]	; (8002a44 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d002      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x40>
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d003      	beq.n	80029da <HAL_RCC_GetSysClockFreq+0x46>
 80029d2:	e02b      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029d4:	4b1c      	ldr	r3, [pc, #112]	; (8002a48 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029d6:	623b      	str	r3, [r7, #32]
      break;
 80029d8:	e02b      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	0c9b      	lsrs	r3, r3, #18
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	3328      	adds	r3, #40	; 0x28
 80029e4:	443b      	add	r3, r7
 80029e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029ea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d012      	beq.n	8002a1c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029f6:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	0c5b      	lsrs	r3, r3, #17
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	3328      	adds	r3, #40	; 0x28
 8002a02:	443b      	add	r3, r7
 8002a04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a08:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	4a0e      	ldr	r2, [pc, #56]	; (8002a48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a0e:	fb03 f202 	mul.w	r2, r3, r2
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1a:	e004      	b.n	8002a26 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	4a0b      	ldr	r2, [pc, #44]	; (8002a4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a20:	fb02 f303 	mul.w	r3, r2, r3
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	623b      	str	r3, [r7, #32]
      break;
 8002a2a:	e002      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a2e:	623b      	str	r3, [r7, #32]
      break;
 8002a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a32:	6a3b      	ldr	r3, [r7, #32]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3728      	adds	r7, #40	; 0x28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc90      	pop	{r4, r7}
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	0800572c 	.word	0x0800572c
 8002a44:	40021000 	.word	0x40021000
 8002a48:	007a1200 	.word	0x007a1200
 8002a4c:	003d0900 	.word	0x003d0900

08002a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a54:	4b02      	ldr	r3, [pc, #8]	; (8002a60 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a56:	681b      	ldr	r3, [r3, #0]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr
 8002a60:	20000020 	.word	0x20000020

08002a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a68:	f7ff fff2 	bl	8002a50 <HAL_RCC_GetHCLKFreq>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	0a1b      	lsrs	r3, r3, #8
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	4903      	ldr	r1, [pc, #12]	; (8002a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a7a:	5ccb      	ldrb	r3, [r1, r3]
 8002a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40021000 	.word	0x40021000
 8002a88:	08005754 	.word	0x08005754

08002a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a90:	f7ff ffde 	bl	8002a50 <HAL_RCC_GetHCLKFreq>
 8002a94:	4602      	mov	r2, r0
 8002a96:	4b05      	ldr	r3, [pc, #20]	; (8002aac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	0adb      	lsrs	r3, r3, #11
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	4903      	ldr	r1, [pc, #12]	; (8002ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aa2:	5ccb      	ldrb	r3, [r1, r3]
 8002aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	08005754 	.word	0x08005754

08002ab4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	220f      	movs	r2, #15
 8002ac2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ac4:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <HAL_RCC_GetClockConfig+0x58>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0203 	and.w	r2, r3, #3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ad0:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <HAL_RCC_GetClockConfig+0x58>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002adc:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <HAL_RCC_GetClockConfig+0x58>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002ae8:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <HAL_RCC_GetClockConfig+0x58>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	08db      	lsrs	r3, r3, #3
 8002aee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_RCC_GetClockConfig+0x5c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0207 	and.w	r2, r3, #7
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40022000 	.word	0x40022000

08002b14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b1c:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <RCC_Delay+0x34>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a0a      	ldr	r2, [pc, #40]	; (8002b4c <RCC_Delay+0x38>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	0a5b      	lsrs	r3, r3, #9
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	fb02 f303 	mul.w	r3, r2, r3
 8002b2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b30:	bf00      	nop
  }
  while (Delay --);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	1e5a      	subs	r2, r3, #1
 8002b36:	60fa      	str	r2, [r7, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f9      	bne.n	8002b30 <RCC_Delay+0x1c>
}
 8002b3c:	bf00      	nop
 8002b3e:	bf00      	nop
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr
 8002b48:	20000020 	.word	0x20000020
 8002b4c:	10624dd3 	.word	0x10624dd3

08002b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e041      	b.n	8002be6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fe fe68 	bl	800184c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4610      	mov	r0, r2
 8002b90:	f000 fc28 	bl	80033e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d001      	beq.n	8002c08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e03a      	b.n	8002c7e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0201 	orr.w	r2, r2, #1
 8002c1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a18      	ldr	r2, [pc, #96]	; (8002c88 <HAL_TIM_Base_Start_IT+0x98>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d00e      	beq.n	8002c48 <HAL_TIM_Base_Start_IT+0x58>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c32:	d009      	beq.n	8002c48 <HAL_TIM_Base_Start_IT+0x58>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a14      	ldr	r2, [pc, #80]	; (8002c8c <HAL_TIM_Base_Start_IT+0x9c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d004      	beq.n	8002c48 <HAL_TIM_Base_Start_IT+0x58>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a13      	ldr	r2, [pc, #76]	; (8002c90 <HAL_TIM_Base_Start_IT+0xa0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d111      	bne.n	8002c6c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2b06      	cmp	r3, #6
 8002c58:	d010      	beq.n	8002c7c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0201 	orr.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c6a:	e007      	b.n	8002c7c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0201 	orr.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr
 8002c88:	40012c00 	.word	0x40012c00
 8002c8c:	40000400 	.word	0x40000400
 8002c90:	40000800 	.word	0x40000800

08002c94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e041      	b.n	8002d2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f839 	bl	8002d32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3304      	adds	r3, #4
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	f000 fb86 	bl	80033e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d109      	bne.n	8002d68 <HAL_TIM_PWM_Start+0x24>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	bf14      	ite	ne
 8002d60:	2301      	movne	r3, #1
 8002d62:	2300      	moveq	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	e022      	b.n	8002dae <HAL_TIM_PWM_Start+0x6a>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d109      	bne.n	8002d82 <HAL_TIM_PWM_Start+0x3e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	bf14      	ite	ne
 8002d7a:	2301      	movne	r3, #1
 8002d7c:	2300      	moveq	r3, #0
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	e015      	b.n	8002dae <HAL_TIM_PWM_Start+0x6a>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d109      	bne.n	8002d9c <HAL_TIM_PWM_Start+0x58>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	bf14      	ite	ne
 8002d94:	2301      	movne	r3, #1
 8002d96:	2300      	moveq	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	e008      	b.n	8002dae <HAL_TIM_PWM_Start+0x6a>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	bf14      	ite	ne
 8002da8:	2301      	movne	r3, #1
 8002daa:	2300      	moveq	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e05e      	b.n	8002e74 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d104      	bne.n	8002dc6 <HAL_TIM_PWM_Start+0x82>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dc4:	e013      	b.n	8002dee <HAL_TIM_PWM_Start+0xaa>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d104      	bne.n	8002dd6 <HAL_TIM_PWM_Start+0x92>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dd4:	e00b      	b.n	8002dee <HAL_TIM_PWM_Start+0xaa>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d104      	bne.n	8002de6 <HAL_TIM_PWM_Start+0xa2>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002de4:	e003      	b.n	8002dee <HAL_TIM_PWM_Start+0xaa>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2202      	movs	r2, #2
 8002dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2201      	movs	r2, #1
 8002df4:	6839      	ldr	r1, [r7, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fd74 	bl	80038e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a1e      	ldr	r2, [pc, #120]	; (8002e7c <HAL_TIM_PWM_Start+0x138>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d107      	bne.n	8002e16 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a18      	ldr	r2, [pc, #96]	; (8002e7c <HAL_TIM_PWM_Start+0x138>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00e      	beq.n	8002e3e <HAL_TIM_PWM_Start+0xfa>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e28:	d009      	beq.n	8002e3e <HAL_TIM_PWM_Start+0xfa>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <HAL_TIM_PWM_Start+0x13c>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d004      	beq.n	8002e3e <HAL_TIM_PWM_Start+0xfa>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a12      	ldr	r2, [pc, #72]	; (8002e84 <HAL_TIM_PWM_Start+0x140>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d111      	bne.n	8002e62 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2b06      	cmp	r3, #6
 8002e4e:	d010      	beq.n	8002e72 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e60:	e007      	b.n	8002e72 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f042 0201 	orr.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40012c00 	.word	0x40012c00
 8002e80:	40000400 	.word	0x40000400
 8002e84:	40000800 	.word	0x40000800

08002e88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d122      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d11b      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f06f 0202 	mvn.w	r2, #2
 8002eb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fa6f 	bl	80033ae <HAL_TIM_IC_CaptureCallback>
 8002ed0:	e005      	b.n	8002ede <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fa62 	bl	800339c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 fa71 	bl	80033c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f003 0304 	and.w	r3, r3, #4
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d122      	bne.n	8002f38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d11b      	bne.n	8002f38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f06f 0204 	mvn.w	r2, #4
 8002f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fa45 	bl	80033ae <HAL_TIM_IC_CaptureCallback>
 8002f24:	e005      	b.n	8002f32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fa38 	bl	800339c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 fa47 	bl	80033c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b08      	cmp	r3, #8
 8002f44:	d122      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d11b      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f06f 0208 	mvn.w	r2, #8
 8002f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2204      	movs	r2, #4
 8002f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fa1b 	bl	80033ae <HAL_TIM_IC_CaptureCallback>
 8002f78:	e005      	b.n	8002f86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fa0e 	bl	800339c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 fa1d 	bl	80033c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b10      	cmp	r3, #16
 8002f98:	d122      	bne.n	8002fe0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b10      	cmp	r3, #16
 8002fa6:	d11b      	bne.n	8002fe0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f06f 0210 	mvn.w	r2, #16
 8002fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2208      	movs	r2, #8
 8002fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f9f1 	bl	80033ae <HAL_TIM_IC_CaptureCallback>
 8002fcc:	e005      	b.n	8002fda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f9e4 	bl	800339c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f9f3 	bl	80033c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d10e      	bne.n	800300c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d107      	bne.n	800300c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f06f 0201 	mvn.w	r2, #1
 8003004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fe fb26 	bl	8001658 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003016:	2b80      	cmp	r3, #128	; 0x80
 8003018:	d10e      	bne.n	8003038 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003024:	2b80      	cmp	r3, #128	; 0x80
 8003026:	d107      	bne.n	8003038 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fce1 	bl	80039fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003042:	2b40      	cmp	r3, #64	; 0x40
 8003044:	d10e      	bne.n	8003064 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003050:	2b40      	cmp	r3, #64	; 0x40
 8003052:	d107      	bne.n	8003064 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800305c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f9b7 	bl	80033d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b20      	cmp	r3, #32
 8003070:	d10e      	bne.n	8003090 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0320 	and.w	r3, r3, #32
 800307c:	2b20      	cmp	r3, #32
 800307e:	d107      	bne.n	8003090 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0220 	mvn.w	r2, #32
 8003088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fcac 	bl	80039e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003090:	bf00      	nop
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e0ac      	b.n	800320c <HAL_TIM_PWM_ConfigChannel+0x174>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b0c      	cmp	r3, #12
 80030be:	f200 809f 	bhi.w	8003200 <HAL_TIM_PWM_ConfigChannel+0x168>
 80030c2:	a201      	add	r2, pc, #4	; (adr r2, 80030c8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80030c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c8:	080030fd 	.word	0x080030fd
 80030cc:	08003201 	.word	0x08003201
 80030d0:	08003201 	.word	0x08003201
 80030d4:	08003201 	.word	0x08003201
 80030d8:	0800313d 	.word	0x0800313d
 80030dc:	08003201 	.word	0x08003201
 80030e0:	08003201 	.word	0x08003201
 80030e4:	08003201 	.word	0x08003201
 80030e8:	0800317f 	.word	0x0800317f
 80030ec:	08003201 	.word	0x08003201
 80030f0:	08003201 	.word	0x08003201
 80030f4:	08003201 	.word	0x08003201
 80030f8:	080031bf 	.word	0x080031bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f9d0 	bl	80034a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699a      	ldr	r2, [r3, #24]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0208 	orr.w	r2, r2, #8
 8003116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699a      	ldr	r2, [r3, #24]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0204 	bic.w	r2, r2, #4
 8003126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6999      	ldr	r1, [r3, #24]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	691a      	ldr	r2, [r3, #16]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	619a      	str	r2, [r3, #24]
      break;
 800313a:	e062      	b.n	8003202 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68b9      	ldr	r1, [r7, #8]
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fa16 	bl	8003574 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699a      	ldr	r2, [r3, #24]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6999      	ldr	r1, [r3, #24]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	021a      	lsls	r2, r3, #8
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	619a      	str	r2, [r3, #24]
      break;
 800317c:	e041      	b.n	8003202 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68b9      	ldr	r1, [r7, #8]
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fa5f 	bl	8003648 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69da      	ldr	r2, [r3, #28]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f042 0208 	orr.w	r2, r2, #8
 8003198:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	69da      	ldr	r2, [r3, #28]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0204 	bic.w	r2, r2, #4
 80031a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	69d9      	ldr	r1, [r3, #28]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	61da      	str	r2, [r3, #28]
      break;
 80031bc:	e021      	b.n	8003202 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 faa9 	bl	800371c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69da      	ldr	r2, [r3, #28]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69da      	ldr	r2, [r3, #28]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69d9      	ldr	r1, [r3, #28]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	021a      	lsls	r2, r3, #8
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	61da      	str	r2, [r3, #28]
      break;
 80031fe:	e000      	b.n	8003202 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003200:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003224:	2b01      	cmp	r3, #1
 8003226:	d101      	bne.n	800322c <HAL_TIM_ConfigClockSource+0x18>
 8003228:	2302      	movs	r3, #2
 800322a:	e0b3      	b.n	8003394 <HAL_TIM_ConfigClockSource+0x180>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800324a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003252:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003264:	d03e      	beq.n	80032e4 <HAL_TIM_ConfigClockSource+0xd0>
 8003266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800326a:	f200 8087 	bhi.w	800337c <HAL_TIM_ConfigClockSource+0x168>
 800326e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003272:	f000 8085 	beq.w	8003380 <HAL_TIM_ConfigClockSource+0x16c>
 8003276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800327a:	d87f      	bhi.n	800337c <HAL_TIM_ConfigClockSource+0x168>
 800327c:	2b70      	cmp	r3, #112	; 0x70
 800327e:	d01a      	beq.n	80032b6 <HAL_TIM_ConfigClockSource+0xa2>
 8003280:	2b70      	cmp	r3, #112	; 0x70
 8003282:	d87b      	bhi.n	800337c <HAL_TIM_ConfigClockSource+0x168>
 8003284:	2b60      	cmp	r3, #96	; 0x60
 8003286:	d050      	beq.n	800332a <HAL_TIM_ConfigClockSource+0x116>
 8003288:	2b60      	cmp	r3, #96	; 0x60
 800328a:	d877      	bhi.n	800337c <HAL_TIM_ConfigClockSource+0x168>
 800328c:	2b50      	cmp	r3, #80	; 0x50
 800328e:	d03c      	beq.n	800330a <HAL_TIM_ConfigClockSource+0xf6>
 8003290:	2b50      	cmp	r3, #80	; 0x50
 8003292:	d873      	bhi.n	800337c <HAL_TIM_ConfigClockSource+0x168>
 8003294:	2b40      	cmp	r3, #64	; 0x40
 8003296:	d058      	beq.n	800334a <HAL_TIM_ConfigClockSource+0x136>
 8003298:	2b40      	cmp	r3, #64	; 0x40
 800329a:	d86f      	bhi.n	800337c <HAL_TIM_ConfigClockSource+0x168>
 800329c:	2b30      	cmp	r3, #48	; 0x30
 800329e:	d064      	beq.n	800336a <HAL_TIM_ConfigClockSource+0x156>
 80032a0:	2b30      	cmp	r3, #48	; 0x30
 80032a2:	d86b      	bhi.n	800337c <HAL_TIM_ConfigClockSource+0x168>
 80032a4:	2b20      	cmp	r3, #32
 80032a6:	d060      	beq.n	800336a <HAL_TIM_ConfigClockSource+0x156>
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	d867      	bhi.n	800337c <HAL_TIM_ConfigClockSource+0x168>
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d05c      	beq.n	800336a <HAL_TIM_ConfigClockSource+0x156>
 80032b0:	2b10      	cmp	r3, #16
 80032b2:	d05a      	beq.n	800336a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80032b4:	e062      	b.n	800337c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6818      	ldr	r0, [r3, #0]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	6899      	ldr	r1, [r3, #8]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f000 faee 	bl	80038a6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	609a      	str	r2, [r3, #8]
      break;
 80032e2:	e04e      	b.n	8003382 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	6899      	ldr	r1, [r3, #8]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f000 fad7 	bl	80038a6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003306:	609a      	str	r2, [r3, #8]
      break;
 8003308:	e03b      	b.n	8003382 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	6859      	ldr	r1, [r3, #4]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	461a      	mov	r2, r3
 8003318:	f000 fa4e 	bl	80037b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2150      	movs	r1, #80	; 0x50
 8003322:	4618      	mov	r0, r3
 8003324:	f000 faa5 	bl	8003872 <TIM_ITRx_SetConfig>
      break;
 8003328:	e02b      	b.n	8003382 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	6859      	ldr	r1, [r3, #4]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	461a      	mov	r2, r3
 8003338:	f000 fa6c 	bl	8003814 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2160      	movs	r1, #96	; 0x60
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fa95 	bl	8003872 <TIM_ITRx_SetConfig>
      break;
 8003348:	e01b      	b.n	8003382 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	6859      	ldr	r1, [r3, #4]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	461a      	mov	r2, r3
 8003358:	f000 fa2e 	bl	80037b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2140      	movs	r1, #64	; 0x40
 8003362:	4618      	mov	r0, r3
 8003364:	f000 fa85 	bl	8003872 <TIM_ITRx_SetConfig>
      break;
 8003368:	e00b      	b.n	8003382 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4619      	mov	r1, r3
 8003374:	4610      	mov	r0, r2
 8003376:	f000 fa7c 	bl	8003872 <TIM_ITRx_SetConfig>
        break;
 800337a:	e002      	b.n	8003382 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800337c:	bf00      	nop
 800337e:	e000      	b.n	8003382 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003380:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr

080033ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr

080033c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr

080033d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr

080033e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a29      	ldr	r2, [pc, #164]	; (800349c <TIM_Base_SetConfig+0xb8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d00b      	beq.n	8003414 <TIM_Base_SetConfig+0x30>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003402:	d007      	beq.n	8003414 <TIM_Base_SetConfig+0x30>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a26      	ldr	r2, [pc, #152]	; (80034a0 <TIM_Base_SetConfig+0xbc>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d003      	beq.n	8003414 <TIM_Base_SetConfig+0x30>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a25      	ldr	r2, [pc, #148]	; (80034a4 <TIM_Base_SetConfig+0xc0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d108      	bne.n	8003426 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4313      	orrs	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a1c      	ldr	r2, [pc, #112]	; (800349c <TIM_Base_SetConfig+0xb8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00b      	beq.n	8003446 <TIM_Base_SetConfig+0x62>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003434:	d007      	beq.n	8003446 <TIM_Base_SetConfig+0x62>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a19      	ldr	r2, [pc, #100]	; (80034a0 <TIM_Base_SetConfig+0xbc>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d003      	beq.n	8003446 <TIM_Base_SetConfig+0x62>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a18      	ldr	r2, [pc, #96]	; (80034a4 <TIM_Base_SetConfig+0xc0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d108      	bne.n	8003458 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800344c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4313      	orrs	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a07      	ldr	r2, [pc, #28]	; (800349c <TIM_Base_SetConfig+0xb8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d103      	bne.n	800348c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	615a      	str	r2, [r3, #20]
}
 8003492:	bf00      	nop
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr
 800349c:	40012c00 	.word	0x40012c00
 80034a0:	40000400 	.word	0x40000400
 80034a4:	40000800 	.word	0x40000800

080034a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	f023 0201 	bic.w	r2, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 0303 	bic.w	r3, r3, #3
 80034de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f023 0302 	bic.w	r3, r3, #2
 80034f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a1c      	ldr	r2, [pc, #112]	; (8003570 <TIM_OC1_SetConfig+0xc8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d10c      	bne.n	800351e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f023 0308 	bic.w	r3, r3, #8
 800350a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	4313      	orrs	r3, r2
 8003514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f023 0304 	bic.w	r3, r3, #4
 800351c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a13      	ldr	r2, [pc, #76]	; (8003570 <TIM_OC1_SetConfig+0xc8>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d111      	bne.n	800354a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800352c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	621a      	str	r2, [r3, #32]
}
 8003564:	bf00      	nop
 8003566:	371c      	adds	r7, #28
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40012c00 	.word	0x40012c00

08003574 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	f023 0210 	bic.w	r2, r3, #16
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	021b      	lsls	r3, r3, #8
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f023 0320 	bic.w	r3, r3, #32
 80035be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a1d      	ldr	r2, [pc, #116]	; (8003644 <TIM_OC2_SetConfig+0xd0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d10d      	bne.n	80035f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a14      	ldr	r2, [pc, #80]	; (8003644 <TIM_OC2_SetConfig+0xd0>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d113      	bne.n	8003620 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003606:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	621a      	str	r2, [r3, #32]
}
 800363a:	bf00      	nop
 800363c:	371c      	adds	r7, #28
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr
 8003644:	40012c00 	.word	0x40012c00

08003648 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f023 0303 	bic.w	r3, r3, #3
 800367e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	4313      	orrs	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	021b      	lsls	r3, r3, #8
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	4313      	orrs	r3, r2
 800369c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a1d      	ldr	r2, [pc, #116]	; (8003718 <TIM_OC3_SetConfig+0xd0>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d10d      	bne.n	80036c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	021b      	lsls	r3, r3, #8
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a14      	ldr	r2, [pc, #80]	; (8003718 <TIM_OC3_SetConfig+0xd0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d113      	bne.n	80036f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	621a      	str	r2, [r3, #32]
}
 800370c:	bf00      	nop
 800370e:	371c      	adds	r7, #28
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40012c00 	.word	0x40012c00

0800371c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800374a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003752:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	021b      	lsls	r3, r3, #8
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	4313      	orrs	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003766:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	031b      	lsls	r3, r3, #12
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a0f      	ldr	r2, [pc, #60]	; (80037b4 <TIM_OC4_SetConfig+0x98>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d109      	bne.n	8003790 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003782:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	019b      	lsls	r3, r3, #6
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	621a      	str	r2, [r3, #32]
}
 80037aa:	bf00      	nop
 80037ac:	371c      	adds	r7, #28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr
 80037b4:	40012c00 	.word	0x40012c00

080037b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	f023 0201 	bic.w	r2, r3, #1
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f023 030a 	bic.w	r3, r3, #10
 80037f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	621a      	str	r2, [r3, #32]
}
 800380a:	bf00      	nop
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr

08003814 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	f023 0210 	bic.w	r2, r3, #16
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800383e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	031b      	lsls	r3, r3, #12
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003850:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	621a      	str	r2, [r3, #32]
}
 8003868:	bf00      	nop
 800386a:	371c      	adds	r7, #28
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr

08003872 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003872:	b480      	push	{r7}
 8003874:	b085      	sub	sp, #20
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003888:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4313      	orrs	r3, r2
 8003890:	f043 0307 	orr.w	r3, r3, #7
 8003894:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	609a      	str	r2, [r3, #8]
}
 800389c:	bf00      	nop
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc80      	pop	{r7}
 80038a4:	4770      	bx	lr

080038a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b087      	sub	sp, #28
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	021a      	lsls	r2, r3, #8
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	431a      	orrs	r2, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	609a      	str	r2, [r3, #8]
}
 80038da:	bf00      	nop
 80038dc:	371c      	adds	r7, #28
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr

080038e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f003 031f 	and.w	r3, r3, #31
 80038f6:	2201      	movs	r2, #1
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a1a      	ldr	r2, [r3, #32]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	43db      	mvns	r3, r3
 8003906:	401a      	ands	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a1a      	ldr	r2, [r3, #32]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f003 031f 	and.w	r3, r3, #31
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	fa01 f303 	lsl.w	r3, r1, r3
 800391c:	431a      	orrs	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	621a      	str	r2, [r3, #32]
}
 8003922:	bf00      	nop
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr

0800392c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003940:	2302      	movs	r3, #2
 8003942:	e046      	b.n	80039d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a16      	ldr	r2, [pc, #88]	; (80039dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00e      	beq.n	80039a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003990:	d009      	beq.n	80039a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a12      	ldr	r2, [pc, #72]	; (80039e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d004      	beq.n	80039a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a10      	ldr	r2, [pc, #64]	; (80039e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d10c      	bne.n	80039c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3714      	adds	r7, #20
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr
 80039dc:	40012c00 	.word	0x40012c00
 80039e0:	40000400 	.word	0x40000400
 80039e4:	40000800 	.word	0x40000800

080039e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr

080039fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr

08003a0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e03f      	b.n	8003a9e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fd ff72 	bl	800191c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2224      	movs	r2, #36	; 0x24
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fba9 	bl	80041a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695a      	ldr	r2, [r3, #20]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b20      	cmp	r3, #32
 8003abe:	d11d      	bne.n	8003afc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <HAL_UART_Receive_IT+0x26>
 8003ac6:	88fb      	ldrh	r3, [r7, #6]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e016      	b.n	8003afe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d101      	bne.n	8003ade <HAL_UART_Receive_IT+0x38>
 8003ada:	2302      	movs	r3, #2
 8003adc:	e00f      	b.n	8003afe <HAL_UART_Receive_IT+0x58>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003aec:	88fb      	ldrh	r3, [r7, #6]
 8003aee:	461a      	mov	r2, r3
 8003af0:	68b9      	ldr	r1, [r7, #8]
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f9cf 	bl	8003e96 <UART_Start_Receive_IT>
 8003af8:	4603      	mov	r3, r0
 8003afa:	e000      	b.n	8003afe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003afc:	2302      	movs	r3, #2
  }
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
	...

08003b08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08a      	sub	sp, #40	; 0x28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10d      	bne.n	8003b5a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	f003 0320 	and.w	r3, r3, #32
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d008      	beq.n	8003b5a <HAL_UART_IRQHandler+0x52>
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fa7f 	bl	8004056 <UART_Receive_IT>
      return;
 8003b58:	e17b      	b.n	8003e52 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80b1 	beq.w	8003cc4 <HAL_UART_IRQHandler+0x1bc>
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d105      	bne.n	8003b78 <HAL_UART_IRQHandler+0x70>
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 80a6 	beq.w	8003cc4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <HAL_UART_IRQHandler+0x90>
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	f043 0201 	orr.w	r2, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00a      	beq.n	8003bb8 <HAL_UART_IRQHandler+0xb0>
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d005      	beq.n	8003bb8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	f043 0202 	orr.w	r2, r3, #2
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <HAL_UART_IRQHandler+0xd0>
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	f043 0204 	orr.w	r2, r3, #4
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00f      	beq.n	8003c02 <HAL_UART_IRQHandler+0xfa>
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	f003 0320 	and.w	r3, r3, #32
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d104      	bne.n	8003bf6 <HAL_UART_IRQHandler+0xee>
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d005      	beq.n	8003c02 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f043 0208 	orr.w	r2, r3, #8
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 811e 	beq.w	8003e48 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d007      	beq.n	8003c26 <HAL_UART_IRQHandler+0x11e>
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	f003 0320 	and.w	r3, r3, #32
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d002      	beq.n	8003c26 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fa18 	bl	8004056 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bf14      	ite	ne
 8003c34:	2301      	movne	r3, #1
 8003c36:	2300      	moveq	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d102      	bne.n	8003c4e <HAL_UART_IRQHandler+0x146>
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d031      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f95a 	bl	8003f08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d023      	beq.n	8003caa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695a      	ldr	r2, [r3, #20]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c70:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d013      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	4a76      	ldr	r2, [pc, #472]	; (8003e58 <HAL_UART_IRQHandler+0x350>)
 8003c80:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe f8d6 	bl	8001e38 <HAL_DMA_Abort_IT>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d016      	beq.n	8003cc0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca0:	e00e      	b.n	8003cc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f8e3 	bl	8003e6e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca8:	e00a      	b.n	8003cc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f8df 	bl	8003e6e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb0:	e006      	b.n	8003cc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f8db 	bl	8003e6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003cbe:	e0c3      	b.n	8003e48 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc0:	bf00      	nop
    return;
 8003cc2:	e0c1      	b.n	8003e48 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	f040 80a1 	bne.w	8003e10 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 809b 	beq.w	8003e10 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 8095 	beq.w	8003e10 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d04e      	beq.n	8003da8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003d14:	8a3b      	ldrh	r3, [r7, #16]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 8098 	beq.w	8003e4c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d20:	8a3a      	ldrh	r2, [r7, #16]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	f080 8092 	bcs.w	8003e4c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8a3a      	ldrh	r2, [r7, #16]
 8003d2c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	2b20      	cmp	r3, #32
 8003d36:	d02b      	beq.n	8003d90 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d46:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695a      	ldr	r2, [r3, #20]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0201 	bic.w	r2, r2, #1
 8003d56:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695a      	ldr	r2, [r3, #20]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d66:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68da      	ldr	r2, [r3, #12]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0210 	bic.w	r2, r2, #16
 8003d84:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fe f819 	bl	8001dc2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	4619      	mov	r1, r3
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f86d 	bl	8003e80 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003da6:	e051      	b.n	8003e4c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d047      	beq.n	8003e50 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003dc0:	8a7b      	ldrh	r3, [r7, #18]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d044      	beq.n	8003e50 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003dd4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695a      	ldr	r2, [r3, #20]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0201 	bic.w	r2, r2, #1
 8003de4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0210 	bic.w	r2, r2, #16
 8003e02:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e04:	8a7b      	ldrh	r3, [r7, #18]
 8003e06:	4619      	mov	r1, r3
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f839 	bl	8003e80 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003e0e:	e01f      	b.n	8003e50 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d008      	beq.n	8003e2c <HAL_UART_IRQHandler+0x324>
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f8af 	bl	8003f88 <UART_Transmit_IT>
    return;
 8003e2a:	e012      	b.n	8003e52 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00d      	beq.n	8003e52 <HAL_UART_IRQHandler+0x34a>
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f8f0 	bl	8004026 <UART_EndTransmit_IT>
    return;
 8003e46:	e004      	b.n	8003e52 <HAL_UART_IRQHandler+0x34a>
    return;
 8003e48:	bf00      	nop
 8003e4a:	e002      	b.n	8003e52 <HAL_UART_IRQHandler+0x34a>
      return;
 8003e4c:	bf00      	nop
 8003e4e:	e000      	b.n	8003e52 <HAL_UART_IRQHandler+0x34a>
      return;
 8003e50:	bf00      	nop
  }
}
 8003e52:	3728      	adds	r7, #40	; 0x28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	08003f61 	.word	0x08003f61

08003e5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr

08003e6e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr

08003e80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr

08003e96 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b085      	sub	sp, #20
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	88fa      	ldrh	r2, [r7, #6]
 8003eae:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	88fa      	ldrh	r2, [r7, #6]
 8003eb4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2222      	movs	r2, #34	; 0x22
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eda:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695a      	ldr	r2, [r3, #20]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0220 	orr.w	r2, r2, #32
 8003efa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr

08003f08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f1e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695a      	ldr	r2, [r3, #20]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0201 	bic.w	r2, r2, #1
 8003f2e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d107      	bne.n	8003f48 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0210 	bic.w	r2, r2, #16
 8003f46:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr

08003f60 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f7ff ff77 	bl	8003e6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f80:	bf00      	nop
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b21      	cmp	r3, #33	; 0x21
 8003f9a:	d13e      	bne.n	800401a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa4:	d114      	bne.n	8003fd0 <UART_Transmit_IT+0x48>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d110      	bne.n	8003fd0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fc2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	1c9a      	adds	r2, r3, #2
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	621a      	str	r2, [r3, #32]
 8003fce:	e008      	b.n	8003fe2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	1c59      	adds	r1, r3, #1
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6211      	str	r1, [r2, #32]
 8003fda:	781a      	ldrb	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	4619      	mov	r1, r3
 8003ff0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10f      	bne.n	8004016 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004004:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004014:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	e000      	b.n	800401c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800401a:	2302      	movs	r3, #2
  }
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr

08004026 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b082      	sub	sp, #8
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800403c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7ff ff08 	bl	8003e5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b086      	sub	sp, #24
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b22      	cmp	r3, #34	; 0x22
 8004068:	f040 8099 	bne.w	800419e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004074:	d117      	bne.n	80040a6 <UART_Receive_IT+0x50>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d113      	bne.n	80040a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004086:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	b29b      	uxth	r3, r3
 8004090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004094:	b29a      	uxth	r2, r3
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	1c9a      	adds	r2, r3, #2
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	629a      	str	r2, [r3, #40]	; 0x28
 80040a4:	e026      	b.n	80040f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040aa:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80040ac:	2300      	movs	r3, #0
 80040ae:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b8:	d007      	beq.n	80040ca <UART_Receive_IT+0x74>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10a      	bne.n	80040d8 <UART_Receive_IT+0x82>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	701a      	strb	r2, [r3, #0]
 80040d6:	e008      	b.n	80040ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	4619      	mov	r1, r3
 8004102:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004104:	2b00      	cmp	r3, #0
 8004106:	d148      	bne.n	800419a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0220 	bic.w	r2, r2, #32
 8004116:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004126:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695a      	ldr	r2, [r3, #20]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0201 	bic.w	r2, r2, #1
 8004136:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	2b01      	cmp	r3, #1
 8004146:	d123      	bne.n	8004190 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0210 	bic.w	r2, r2, #16
 800415c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0310 	and.w	r3, r3, #16
 8004168:	2b10      	cmp	r3, #16
 800416a:	d10a      	bne.n	8004182 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800416c:	2300      	movs	r3, #0
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004186:	4619      	mov	r1, r3
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff fe79 	bl	8003e80 <HAL_UARTEx_RxEventCallback>
 800418e:	e002      	b.n	8004196 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7fc fc73 	bl	8000a7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	e002      	b.n	80041a0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	e000      	b.n	80041a0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800419e:	2302      	movs	r3, #2
  }
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80041e2:	f023 030c 	bic.w	r3, r3, #12
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	68b9      	ldr	r1, [r7, #8]
 80041ec:	430b      	orrs	r3, r1
 80041ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699a      	ldr	r2, [r3, #24]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a2c      	ldr	r2, [pc, #176]	; (80042bc <UART_SetConfig+0x114>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d103      	bne.n	8004218 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004210:	f7fe fc3c 	bl	8002a8c <HAL_RCC_GetPCLK2Freq>
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	e002      	b.n	800421e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004218:	f7fe fc24 	bl	8002a64 <HAL_RCC_GetPCLK1Freq>
 800421c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	009a      	lsls	r2, r3, #2
 8004228:	441a      	add	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	fbb2 f3f3 	udiv	r3, r2, r3
 8004234:	4a22      	ldr	r2, [pc, #136]	; (80042c0 <UART_SetConfig+0x118>)
 8004236:	fba2 2303 	umull	r2, r3, r2, r3
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	0119      	lsls	r1, r3, #4
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4613      	mov	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	009a      	lsls	r2, r3, #2
 8004248:	441a      	add	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	fbb2 f2f3 	udiv	r2, r2, r3
 8004254:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <UART_SetConfig+0x118>)
 8004256:	fba3 0302 	umull	r0, r3, r3, r2
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	2064      	movs	r0, #100	; 0x64
 800425e:	fb00 f303 	mul.w	r3, r0, r3
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	3332      	adds	r3, #50	; 0x32
 8004268:	4a15      	ldr	r2, [pc, #84]	; (80042c0 <UART_SetConfig+0x118>)
 800426a:	fba2 2303 	umull	r2, r3, r2, r3
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004274:	4419      	add	r1, r3
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	009a      	lsls	r2, r3, #2
 8004280:	441a      	add	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	fbb2 f2f3 	udiv	r2, r2, r3
 800428c:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <UART_SetConfig+0x118>)
 800428e:	fba3 0302 	umull	r0, r3, r3, r2
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	2064      	movs	r0, #100	; 0x64
 8004296:	fb00 f303 	mul.w	r3, r0, r3
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	3332      	adds	r3, #50	; 0x32
 80042a0:	4a07      	ldr	r2, [pc, #28]	; (80042c0 <UART_SetConfig+0x118>)
 80042a2:	fba2 2303 	umull	r2, r3, r2, r3
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	f003 020f 	and.w	r2, r3, #15
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	440a      	add	r2, r1
 80042b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042b4:	bf00      	nop
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40013800 	.word	0x40013800
 80042c0:	51eb851f 	.word	0x51eb851f

080042c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80042d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042d6:	2b84      	cmp	r3, #132	; 0x84
 80042d8:	d005      	beq.n	80042e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80042da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4413      	add	r3, r2
 80042e2:	3303      	adds	r3, #3
 80042e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80042e6:	68fb      	ldr	r3, [r7, #12]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr

080042f2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80042f6:	f000 fad1 	bl	800489c <vTaskStartScheduler>
  
  return osOK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	bd80      	pop	{r7, pc}

08004300 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004302:	b089      	sub	sp, #36	; 0x24
 8004304:	af04      	add	r7, sp, #16
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d020      	beq.n	8004354 <osThreadCreate+0x54>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d01c      	beq.n	8004354 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685c      	ldr	r4, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681d      	ldr	r5, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691e      	ldr	r6, [r3, #16]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff ffc9 	bl	80042c4 <makeFreeRtosPriority>
 8004332:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800433c:	9202      	str	r2, [sp, #8]
 800433e:	9301      	str	r3, [sp, #4]
 8004340:	9100      	str	r1, [sp, #0]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	4632      	mov	r2, r6
 8004346:	4629      	mov	r1, r5
 8004348:	4620      	mov	r0, r4
 800434a:	f000 f8e8 	bl	800451e <xTaskCreateStatic>
 800434e:	4603      	mov	r3, r0
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	e01c      	b.n	800438e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685c      	ldr	r4, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004360:	b29e      	uxth	r6, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff ffab 	bl	80042c4 <makeFreeRtosPriority>
 800436e:	4602      	mov	r2, r0
 8004370:	f107 030c 	add.w	r3, r7, #12
 8004374:	9301      	str	r3, [sp, #4]
 8004376:	9200      	str	r2, [sp, #0]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	4632      	mov	r2, r6
 800437c:	4629      	mov	r1, r5
 800437e:	4620      	mov	r0, r4
 8004380:	f000 f929 	bl	80045d6 <xTaskCreate>
 8004384:	4603      	mov	r3, r0
 8004386:	2b01      	cmp	r3, #1
 8004388:	d001      	beq.n	800438e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800438a:	2300      	movs	r3, #0
 800438c:	e000      	b.n	8004390 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800438e:	68fb      	ldr	r3, [r7, #12]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004398 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <osDelay+0x16>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	e000      	b.n	80043b0 <osDelay+0x18>
 80043ae:	2301      	movs	r3, #1
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 fa3f 	bl	8004834 <vTaskDelay>
  
  return osOK;
 80043b6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f103 0208 	add.w	r2, r3, #8
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f04f 32ff 	mov.w	r2, #4294967295
 80043d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f103 0208 	add.w	r2, r3, #8
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f103 0208 	add.w	r2, r3, #8
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bc80      	pop	{r7}
 80043fc:	4770      	bx	lr

080043fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr

08004416 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004416:	b480      	push	{r7}
 8004418:	b085      	sub	sp, #20
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	601a      	str	r2, [r3, #0]
}
 8004452:	bf00      	nop
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr

0800445c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004472:	d103      	bne.n	800447c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	e00c      	b.n	8004496 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3308      	adds	r3, #8
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	e002      	b.n	800448a <vListInsert+0x2e>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	429a      	cmp	r2, r3
 8004494:	d2f6      	bcs.n	8004484 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	601a      	str	r2, [r3, #0]
}
 80044c2:	bf00      	nop
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr

080044cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6892      	ldr	r2, [r2, #8]
 80044e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6852      	ldr	r2, [r2, #4]
 80044ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d103      	bne.n	8004500 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	1e5a      	subs	r2, r3, #1
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	bc80      	pop	{r7}
 800451c:	4770      	bx	lr

0800451e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800451e:	b580      	push	{r7, lr}
 8004520:	b08e      	sub	sp, #56	; 0x38
 8004522:	af04      	add	r7, sp, #16
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	607a      	str	r2, [r7, #4]
 800452a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800452c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10a      	bne.n	8004548 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004544:	bf00      	nop
 8004546:	e7fe      	b.n	8004546 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10a      	bne.n	8004564 <xTaskCreateStatic+0x46>
	__asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	61fb      	str	r3, [r7, #28]
}
 8004560:	bf00      	nop
 8004562:	e7fe      	b.n	8004562 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004564:	2354      	movs	r3, #84	; 0x54
 8004566:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	2b54      	cmp	r3, #84	; 0x54
 800456c:	d00a      	beq.n	8004584 <xTaskCreateStatic+0x66>
	__asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	61bb      	str	r3, [r7, #24]
}
 8004580:	bf00      	nop
 8004582:	e7fe      	b.n	8004582 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004586:	2b00      	cmp	r3, #0
 8004588:	d01e      	beq.n	80045c8 <xTaskCreateStatic+0xaa>
 800458a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800458c:	2b00      	cmp	r3, #0
 800458e:	d01b      	beq.n	80045c8 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004592:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004598:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	2202      	movs	r2, #2
 800459e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80045a2:	2300      	movs	r3, #0
 80045a4:	9303      	str	r3, [sp, #12]
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	9302      	str	r3, [sp, #8]
 80045aa:	f107 0314 	add.w	r3, r7, #20
 80045ae:	9301      	str	r3, [sp, #4]
 80045b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	68b9      	ldr	r1, [r7, #8]
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 f850 	bl	8004660 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045c2:	f000 f8cd 	bl	8004760 <prvAddNewTaskToReadyList>
 80045c6:	e001      	b.n	80045cc <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80045cc:	697b      	ldr	r3, [r7, #20]
	}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3728      	adds	r7, #40	; 0x28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b08c      	sub	sp, #48	; 0x30
 80045da:	af04      	add	r7, sp, #16
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	603b      	str	r3, [r7, #0]
 80045e2:	4613      	mov	r3, r2
 80045e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fe68 	bl	80052c0 <pvPortMalloc>
 80045f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00e      	beq.n	8004616 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80045f8:	2054      	movs	r0, #84	; 0x54
 80045fa:	f000 fe61 	bl	80052c0 <pvPortMalloc>
 80045fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	631a      	str	r2, [r3, #48]	; 0x30
 800460c:	e005      	b.n	800461a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800460e:	6978      	ldr	r0, [r7, #20]
 8004610:	f000 ff1a 	bl	8005448 <vPortFree>
 8004614:	e001      	b.n	800461a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004616:	2300      	movs	r3, #0
 8004618:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d017      	beq.n	8004650 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004628:	88fa      	ldrh	r2, [r7, #6]
 800462a:	2300      	movs	r3, #0
 800462c:	9303      	str	r3, [sp, #12]
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	9302      	str	r3, [sp, #8]
 8004632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004634:	9301      	str	r3, [sp, #4]
 8004636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68b9      	ldr	r1, [r7, #8]
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 f80e 	bl	8004660 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004644:	69f8      	ldr	r0, [r7, #28]
 8004646:	f000 f88b 	bl	8004760 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800464a:	2301      	movs	r3, #1
 800464c:	61bb      	str	r3, [r7, #24]
 800464e:	e002      	b.n	8004656 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004650:	f04f 33ff 	mov.w	r3, #4294967295
 8004654:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004656:	69bb      	ldr	r3, [r7, #24]
	}
 8004658:	4618      	mov	r0, r3
 800465a:	3720      	adds	r7, #32
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
 800466c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800466e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004678:	3b01      	subs	r3, #1
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	f023 0307 	bic.w	r3, r3, #7
 8004686:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	617b      	str	r3, [r7, #20]
}
 80046a4:	bf00      	nop
 80046a6:	e7fe      	b.n	80046a6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046a8:	2300      	movs	r3, #0
 80046aa:	61fb      	str	r3, [r7, #28]
 80046ac:	e012      	b.n	80046d4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	4413      	add	r3, r2
 80046b4:	7819      	ldrb	r1, [r3, #0]
 80046b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	4413      	add	r3, r2
 80046bc:	3334      	adds	r3, #52	; 0x34
 80046be:	460a      	mov	r2, r1
 80046c0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	4413      	add	r3, r2
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d006      	beq.n	80046dc <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	3301      	adds	r3, #1
 80046d2:	61fb      	str	r3, [r7, #28]
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	2b0f      	cmp	r3, #15
 80046d8:	d9e9      	bls.n	80046ae <prvInitialiseNewTask+0x4e>
 80046da:	e000      	b.n	80046de <prvInitialiseNewTask+0x7e>
		{
			break;
 80046dc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80046de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80046e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e8:	2b06      	cmp	r3, #6
 80046ea:	d901      	bls.n	80046f0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80046ec:	2306      	movs	r3, #6
 80046ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80046f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80046f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046fa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80046fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fe:	2200      	movs	r2, #0
 8004700:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004704:	3304      	adds	r3, #4
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff fe79 	bl	80043fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800470c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470e:	3318      	adds	r3, #24
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff fe74 	bl	80043fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800471a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800471c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471e:	f1c3 0207 	rsb	r2, r3, #7
 8004722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004724:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800472a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800472c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472e:	2200      	movs	r2, #0
 8004730:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	68f9      	ldr	r1, [r7, #12]
 800473e:	69b8      	ldr	r0, [r7, #24]
 8004740:	f000 fc0e 	bl	8004f60 <pxPortInitialiseStack>
 8004744:	4602      	mov	r2, r0
 8004746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004748:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800474a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004754:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004756:	bf00      	nop
 8004758:	3720      	adds	r7, #32
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004768:	f000 fce8 	bl	800513c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800476c:	4b2a      	ldr	r3, [pc, #168]	; (8004818 <prvAddNewTaskToReadyList+0xb8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3301      	adds	r3, #1
 8004772:	4a29      	ldr	r2, [pc, #164]	; (8004818 <prvAddNewTaskToReadyList+0xb8>)
 8004774:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004776:	4b29      	ldr	r3, [pc, #164]	; (800481c <prvAddNewTaskToReadyList+0xbc>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d109      	bne.n	8004792 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800477e:	4a27      	ldr	r2, [pc, #156]	; (800481c <prvAddNewTaskToReadyList+0xbc>)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004784:	4b24      	ldr	r3, [pc, #144]	; (8004818 <prvAddNewTaskToReadyList+0xb8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d110      	bne.n	80047ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800478c:	f000 fac0 	bl	8004d10 <prvInitialiseTaskLists>
 8004790:	e00d      	b.n	80047ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004792:	4b23      	ldr	r3, [pc, #140]	; (8004820 <prvAddNewTaskToReadyList+0xc0>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800479a:	4b20      	ldr	r3, [pc, #128]	; (800481c <prvAddNewTaskToReadyList+0xbc>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d802      	bhi.n	80047ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80047a8:	4a1c      	ldr	r2, [pc, #112]	; (800481c <prvAddNewTaskToReadyList+0xbc>)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80047ae:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <prvAddNewTaskToReadyList+0xc4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3301      	adds	r3, #1
 80047b4:	4a1b      	ldr	r2, [pc, #108]	; (8004824 <prvAddNewTaskToReadyList+0xc4>)
 80047b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	2201      	movs	r2, #1
 80047be:	409a      	lsls	r2, r3
 80047c0:	4b19      	ldr	r3, [pc, #100]	; (8004828 <prvAddNewTaskToReadyList+0xc8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	4a18      	ldr	r2, [pc, #96]	; (8004828 <prvAddNewTaskToReadyList+0xc8>)
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ce:	4613      	mov	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4a15      	ldr	r2, [pc, #84]	; (800482c <prvAddNewTaskToReadyList+0xcc>)
 80047d8:	441a      	add	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	3304      	adds	r3, #4
 80047de:	4619      	mov	r1, r3
 80047e0:	4610      	mov	r0, r2
 80047e2:	f7ff fe18 	bl	8004416 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80047e6:	f000 fcd9 	bl	800519c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80047ea:	4b0d      	ldr	r3, [pc, #52]	; (8004820 <prvAddNewTaskToReadyList+0xc0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00e      	beq.n	8004810 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047f2:	4b0a      	ldr	r3, [pc, #40]	; (800481c <prvAddNewTaskToReadyList+0xbc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d207      	bcs.n	8004810 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004800:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <prvAddNewTaskToReadyList+0xd0>)
 8004802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004810:	bf00      	nop
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	20000584 	.word	0x20000584
 800481c:	20000484 	.word	0x20000484
 8004820:	20000590 	.word	0x20000590
 8004824:	200005a0 	.word	0x200005a0
 8004828:	2000058c 	.word	0x2000058c
 800482c:	20000488 	.word	0x20000488
 8004830:	e000ed04 	.word	0xe000ed04

08004834 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d017      	beq.n	8004876 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004846:	4b13      	ldr	r3, [pc, #76]	; (8004894 <vTaskDelay+0x60>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <vTaskDelay+0x30>
	__asm volatile
 800484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	60bb      	str	r3, [r7, #8]
}
 8004860:	bf00      	nop
 8004862:	e7fe      	b.n	8004862 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004864:	f000 f87a 	bl	800495c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004868:	2100      	movs	r1, #0
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fb12 	bl	8004e94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004870:	f000 f882 	bl	8004978 <xTaskResumeAll>
 8004874:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d107      	bne.n	800488c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800487c:	4b06      	ldr	r3, [pc, #24]	; (8004898 <vTaskDelay+0x64>)
 800487e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800488c:	bf00      	nop
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	200005ac 	.word	0x200005ac
 8004898:	e000ed04 	.word	0xe000ed04

0800489c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b08a      	sub	sp, #40	; 0x28
 80048a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80048aa:	463a      	mov	r2, r7
 80048ac:	1d39      	adds	r1, r7, #4
 80048ae:	f107 0308 	add.w	r3, r7, #8
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fc f8ca 	bl	8000a4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80048b8:	6839      	ldr	r1, [r7, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	9202      	str	r2, [sp, #8]
 80048c0:	9301      	str	r3, [sp, #4]
 80048c2:	2300      	movs	r3, #0
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	2300      	movs	r3, #0
 80048c8:	460a      	mov	r2, r1
 80048ca:	491e      	ldr	r1, [pc, #120]	; (8004944 <vTaskStartScheduler+0xa8>)
 80048cc:	481e      	ldr	r0, [pc, #120]	; (8004948 <vTaskStartScheduler+0xac>)
 80048ce:	f7ff fe26 	bl	800451e <xTaskCreateStatic>
 80048d2:	4603      	mov	r3, r0
 80048d4:	4a1d      	ldr	r2, [pc, #116]	; (800494c <vTaskStartScheduler+0xb0>)
 80048d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80048d8:	4b1c      	ldr	r3, [pc, #112]	; (800494c <vTaskStartScheduler+0xb0>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80048e0:	2301      	movs	r3, #1
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	e001      	b.n	80048ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80048e6:	2300      	movs	r3, #0
 80048e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d116      	bne.n	800491e <vTaskStartScheduler+0x82>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	613b      	str	r3, [r7, #16]
}
 8004902:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004904:	4b12      	ldr	r3, [pc, #72]	; (8004950 <vTaskStartScheduler+0xb4>)
 8004906:	f04f 32ff 	mov.w	r2, #4294967295
 800490a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800490c:	4b11      	ldr	r3, [pc, #68]	; (8004954 <vTaskStartScheduler+0xb8>)
 800490e:	2201      	movs	r2, #1
 8004910:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004912:	4b11      	ldr	r3, [pc, #68]	; (8004958 <vTaskStartScheduler+0xbc>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004918:	f000 fb9e 	bl	8005058 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800491c:	e00e      	b.n	800493c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004924:	d10a      	bne.n	800493c <vTaskStartScheduler+0xa0>
	__asm volatile
 8004926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492a:	f383 8811 	msr	BASEPRI, r3
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	60fb      	str	r3, [r7, #12]
}
 8004938:	bf00      	nop
 800493a:	e7fe      	b.n	800493a <vTaskStartScheduler+0x9e>
}
 800493c:	bf00      	nop
 800493e:	3718      	adds	r7, #24
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	0800573c 	.word	0x0800573c
 8004948:	08004ce1 	.word	0x08004ce1
 800494c:	200005a8 	.word	0x200005a8
 8004950:	200005a4 	.word	0x200005a4
 8004954:	20000590 	.word	0x20000590
 8004958:	20000588 	.word	0x20000588

0800495c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004960:	4b04      	ldr	r3, [pc, #16]	; (8004974 <vTaskSuspendAll+0x18>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3301      	adds	r3, #1
 8004966:	4a03      	ldr	r2, [pc, #12]	; (8004974 <vTaskSuspendAll+0x18>)
 8004968:	6013      	str	r3, [r2, #0]
}
 800496a:	bf00      	nop
 800496c:	46bd      	mov	sp, r7
 800496e:	bc80      	pop	{r7}
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	200005ac 	.word	0x200005ac

08004978 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800497e:	2300      	movs	r3, #0
 8004980:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004982:	2300      	movs	r3, #0
 8004984:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004986:	4b41      	ldr	r3, [pc, #260]	; (8004a8c <xTaskResumeAll+0x114>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10a      	bne.n	80049a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800498e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	603b      	str	r3, [r7, #0]
}
 80049a0:	bf00      	nop
 80049a2:	e7fe      	b.n	80049a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80049a4:	f000 fbca 	bl	800513c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80049a8:	4b38      	ldr	r3, [pc, #224]	; (8004a8c <xTaskResumeAll+0x114>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3b01      	subs	r3, #1
 80049ae:	4a37      	ldr	r2, [pc, #220]	; (8004a8c <xTaskResumeAll+0x114>)
 80049b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049b2:	4b36      	ldr	r3, [pc, #216]	; (8004a8c <xTaskResumeAll+0x114>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d161      	bne.n	8004a7e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80049ba:	4b35      	ldr	r3, [pc, #212]	; (8004a90 <xTaskResumeAll+0x118>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d05d      	beq.n	8004a7e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049c2:	e02e      	b.n	8004a22 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80049c4:	4b33      	ldr	r3, [pc, #204]	; (8004a94 <xTaskResumeAll+0x11c>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	3318      	adds	r3, #24
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff fd7b 	bl	80044cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	3304      	adds	r3, #4
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff fd76 	bl	80044cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	2201      	movs	r2, #1
 80049e6:	409a      	lsls	r2, r3
 80049e8:	4b2b      	ldr	r3, [pc, #172]	; (8004a98 <xTaskResumeAll+0x120>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	4a2a      	ldr	r2, [pc, #168]	; (8004a98 <xTaskResumeAll+0x120>)
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f6:	4613      	mov	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4a27      	ldr	r2, [pc, #156]	; (8004a9c <xTaskResumeAll+0x124>)
 8004a00:	441a      	add	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	3304      	adds	r3, #4
 8004a06:	4619      	mov	r1, r3
 8004a08:	4610      	mov	r0, r2
 8004a0a:	f7ff fd04 	bl	8004416 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a12:	4b23      	ldr	r3, [pc, #140]	; (8004aa0 <xTaskResumeAll+0x128>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d302      	bcc.n	8004a22 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004a1c:	4b21      	ldr	r3, [pc, #132]	; (8004aa4 <xTaskResumeAll+0x12c>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a22:	4b1c      	ldr	r3, [pc, #112]	; (8004a94 <xTaskResumeAll+0x11c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1cc      	bne.n	80049c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a30:	f000 fa0c 	bl	8004e4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004a34:	4b1c      	ldr	r3, [pc, #112]	; (8004aa8 <xTaskResumeAll+0x130>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d010      	beq.n	8004a62 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a40:	f000 f836 	bl	8004ab0 <xTaskIncrementTick>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004a4a:	4b16      	ldr	r3, [pc, #88]	; (8004aa4 <xTaskResumeAll+0x12c>)
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1f1      	bne.n	8004a40 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004a5c:	4b12      	ldr	r3, [pc, #72]	; (8004aa8 <xTaskResumeAll+0x130>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a62:	4b10      	ldr	r3, [pc, #64]	; (8004aa4 <xTaskResumeAll+0x12c>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d009      	beq.n	8004a7e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a6e:	4b0f      	ldr	r3, [pc, #60]	; (8004aac <xTaskResumeAll+0x134>)
 8004a70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a7e:	f000 fb8d 	bl	800519c <vPortExitCritical>

	return xAlreadyYielded;
 8004a82:	68bb      	ldr	r3, [r7, #8]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	200005ac 	.word	0x200005ac
 8004a90:	20000584 	.word	0x20000584
 8004a94:	20000544 	.word	0x20000544
 8004a98:	2000058c 	.word	0x2000058c
 8004a9c:	20000488 	.word	0x20000488
 8004aa0:	20000484 	.word	0x20000484
 8004aa4:	20000598 	.word	0x20000598
 8004aa8:	20000594 	.word	0x20000594
 8004aac:	e000ed04 	.word	0xe000ed04

08004ab0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aba:	4b51      	ldr	r3, [pc, #324]	; (8004c00 <xTaskIncrementTick+0x150>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f040 808d 	bne.w	8004bde <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ac4:	4b4f      	ldr	r3, [pc, #316]	; (8004c04 <xTaskIncrementTick+0x154>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004acc:	4a4d      	ldr	r2, [pc, #308]	; (8004c04 <xTaskIncrementTick+0x154>)
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d120      	bne.n	8004b1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ad8:	4b4b      	ldr	r3, [pc, #300]	; (8004c08 <xTaskIncrementTick+0x158>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <xTaskIncrementTick+0x48>
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	603b      	str	r3, [r7, #0]
}
 8004af4:	bf00      	nop
 8004af6:	e7fe      	b.n	8004af6 <xTaskIncrementTick+0x46>
 8004af8:	4b43      	ldr	r3, [pc, #268]	; (8004c08 <xTaskIncrementTick+0x158>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	4b43      	ldr	r3, [pc, #268]	; (8004c0c <xTaskIncrementTick+0x15c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a41      	ldr	r2, [pc, #260]	; (8004c08 <xTaskIncrementTick+0x158>)
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	4a41      	ldr	r2, [pc, #260]	; (8004c0c <xTaskIncrementTick+0x15c>)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	4b40      	ldr	r3, [pc, #256]	; (8004c10 <xTaskIncrementTick+0x160>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3301      	adds	r3, #1
 8004b12:	4a3f      	ldr	r2, [pc, #252]	; (8004c10 <xTaskIncrementTick+0x160>)
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	f000 f999 	bl	8004e4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b1a:	4b3e      	ldr	r3, [pc, #248]	; (8004c14 <xTaskIncrementTick+0x164>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d34d      	bcc.n	8004bc0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b24:	4b38      	ldr	r3, [pc, #224]	; (8004c08 <xTaskIncrementTick+0x158>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <xTaskIncrementTick+0x82>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <xTaskIncrementTick+0x84>
 8004b32:	2300      	movs	r3, #0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d004      	beq.n	8004b42 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b38:	4b36      	ldr	r3, [pc, #216]	; (8004c14 <xTaskIncrementTick+0x164>)
 8004b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b3e:	601a      	str	r2, [r3, #0]
					break;
 8004b40:	e03e      	b.n	8004bc0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b42:	4b31      	ldr	r3, [pc, #196]	; (8004c08 <xTaskIncrementTick+0x158>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d203      	bcs.n	8004b62 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b5a:	4a2e      	ldr	r2, [pc, #184]	; (8004c14 <xTaskIncrementTick+0x164>)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6013      	str	r3, [r2, #0]
						break;
 8004b60:	e02e      	b.n	8004bc0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	3304      	adds	r3, #4
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7ff fcb0 	bl	80044cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d004      	beq.n	8004b7e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	3318      	adds	r3, #24
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff fca7 	bl	80044cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b82:	2201      	movs	r2, #1
 8004b84:	409a      	lsls	r2, r3
 8004b86:	4b24      	ldr	r3, [pc, #144]	; (8004c18 <xTaskIncrementTick+0x168>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	4a22      	ldr	r2, [pc, #136]	; (8004c18 <xTaskIncrementTick+0x168>)
 8004b8e:	6013      	str	r3, [r2, #0]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4a1f      	ldr	r2, [pc, #124]	; (8004c1c <xTaskIncrementTick+0x16c>)
 8004b9e:	441a      	add	r2, r3
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	f7ff fc35 	bl	8004416 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb0:	4b1b      	ldr	r3, [pc, #108]	; (8004c20 <xTaskIncrementTick+0x170>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d3b4      	bcc.n	8004b24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bbe:	e7b1      	b.n	8004b24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004bc0:	4b17      	ldr	r3, [pc, #92]	; (8004c20 <xTaskIncrementTick+0x170>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc6:	4915      	ldr	r1, [pc, #84]	; (8004c1c <xTaskIncrementTick+0x16c>)
 8004bc8:	4613      	mov	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d907      	bls.n	8004be8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	e004      	b.n	8004be8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004bde:	4b11      	ldr	r3, [pc, #68]	; (8004c24 <xTaskIncrementTick+0x174>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3301      	adds	r3, #1
 8004be4:	4a0f      	ldr	r2, [pc, #60]	; (8004c24 <xTaskIncrementTick+0x174>)
 8004be6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004be8:	4b0f      	ldr	r3, [pc, #60]	; (8004c28 <xTaskIncrementTick+0x178>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004bf4:	697b      	ldr	r3, [r7, #20]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	200005ac 	.word	0x200005ac
 8004c04:	20000588 	.word	0x20000588
 8004c08:	2000053c 	.word	0x2000053c
 8004c0c:	20000540 	.word	0x20000540
 8004c10:	2000059c 	.word	0x2000059c
 8004c14:	200005a4 	.word	0x200005a4
 8004c18:	2000058c 	.word	0x2000058c
 8004c1c:	20000488 	.word	0x20000488
 8004c20:	20000484 	.word	0x20000484
 8004c24:	20000594 	.word	0x20000594
 8004c28:	20000598 	.word	0x20000598

08004c2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c32:	4b26      	ldr	r3, [pc, #152]	; (8004ccc <vTaskSwitchContext+0xa0>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c3a:	4b25      	ldr	r3, [pc, #148]	; (8004cd0 <vTaskSwitchContext+0xa4>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c40:	e03f      	b.n	8004cc2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004c42:	4b23      	ldr	r3, [pc, #140]	; (8004cd0 <vTaskSwitchContext+0xa4>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004c48:	4b22      	ldr	r3, [pc, #136]	; (8004cd4 <vTaskSwitchContext+0xa8>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	fab3 f383 	clz	r3, r3
 8004c54:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004c56:	7afb      	ldrb	r3, [r7, #11]
 8004c58:	f1c3 031f 	rsb	r3, r3, #31
 8004c5c:	617b      	str	r3, [r7, #20]
 8004c5e:	491e      	ldr	r1, [pc, #120]	; (8004cd8 <vTaskSwitchContext+0xac>)
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	4613      	mov	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10a      	bne.n	8004c88 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	607b      	str	r3, [r7, #4]
}
 8004c84:	bf00      	nop
 8004c86:	e7fe      	b.n	8004c86 <vTaskSwitchContext+0x5a>
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4a11      	ldr	r2, [pc, #68]	; (8004cd8 <vTaskSwitchContext+0xac>)
 8004c94:	4413      	add	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	605a      	str	r2, [r3, #4]
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	3308      	adds	r3, #8
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d104      	bne.n	8004cb8 <vTaskSwitchContext+0x8c>
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	605a      	str	r2, [r3, #4]
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	4a07      	ldr	r2, [pc, #28]	; (8004cdc <vTaskSwitchContext+0xb0>)
 8004cc0:	6013      	str	r3, [r2, #0]
}
 8004cc2:	bf00      	nop
 8004cc4:	371c      	adds	r7, #28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr
 8004ccc:	200005ac 	.word	0x200005ac
 8004cd0:	20000598 	.word	0x20000598
 8004cd4:	2000058c 	.word	0x2000058c
 8004cd8:	20000488 	.word	0x20000488
 8004cdc:	20000484 	.word	0x20000484

08004ce0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ce8:	f000 f852 	bl	8004d90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004cec:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <prvIdleTask+0x28>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d9f9      	bls.n	8004ce8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004cf4:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <prvIdleTask+0x2c>)
 8004cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d04:	e7f0      	b.n	8004ce8 <prvIdleTask+0x8>
 8004d06:	bf00      	nop
 8004d08:	20000488 	.word	0x20000488
 8004d0c:	e000ed04 	.word	0xe000ed04

08004d10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d16:	2300      	movs	r3, #0
 8004d18:	607b      	str	r3, [r7, #4]
 8004d1a:	e00c      	b.n	8004d36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4a12      	ldr	r2, [pc, #72]	; (8004d70 <prvInitialiseTaskLists+0x60>)
 8004d28:	4413      	add	r3, r2
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff fb48 	bl	80043c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3301      	adds	r3, #1
 8004d34:	607b      	str	r3, [r7, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b06      	cmp	r3, #6
 8004d3a:	d9ef      	bls.n	8004d1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d3c:	480d      	ldr	r0, [pc, #52]	; (8004d74 <prvInitialiseTaskLists+0x64>)
 8004d3e:	f7ff fb3f 	bl	80043c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d42:	480d      	ldr	r0, [pc, #52]	; (8004d78 <prvInitialiseTaskLists+0x68>)
 8004d44:	f7ff fb3c 	bl	80043c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d48:	480c      	ldr	r0, [pc, #48]	; (8004d7c <prvInitialiseTaskLists+0x6c>)
 8004d4a:	f7ff fb39 	bl	80043c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d4e:	480c      	ldr	r0, [pc, #48]	; (8004d80 <prvInitialiseTaskLists+0x70>)
 8004d50:	f7ff fb36 	bl	80043c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d54:	480b      	ldr	r0, [pc, #44]	; (8004d84 <prvInitialiseTaskLists+0x74>)
 8004d56:	f7ff fb33 	bl	80043c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d5a:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <prvInitialiseTaskLists+0x78>)
 8004d5c:	4a05      	ldr	r2, [pc, #20]	; (8004d74 <prvInitialiseTaskLists+0x64>)
 8004d5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d60:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <prvInitialiseTaskLists+0x7c>)
 8004d62:	4a05      	ldr	r2, [pc, #20]	; (8004d78 <prvInitialiseTaskLists+0x68>)
 8004d64:	601a      	str	r2, [r3, #0]
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20000488 	.word	0x20000488
 8004d74:	20000514 	.word	0x20000514
 8004d78:	20000528 	.word	0x20000528
 8004d7c:	20000544 	.word	0x20000544
 8004d80:	20000558 	.word	0x20000558
 8004d84:	20000570 	.word	0x20000570
 8004d88:	2000053c 	.word	0x2000053c
 8004d8c:	20000540 	.word	0x20000540

08004d90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d96:	e019      	b.n	8004dcc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d98:	f000 f9d0 	bl	800513c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004d9c:	4b10      	ldr	r3, [pc, #64]	; (8004de0 <prvCheckTasksWaitingTermination+0x50>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3304      	adds	r3, #4
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff fb8f 	bl	80044cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004dae:	4b0d      	ldr	r3, [pc, #52]	; (8004de4 <prvCheckTasksWaitingTermination+0x54>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	4a0b      	ldr	r2, [pc, #44]	; (8004de4 <prvCheckTasksWaitingTermination+0x54>)
 8004db6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004db8:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <prvCheckTasksWaitingTermination+0x58>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	4a0a      	ldr	r2, [pc, #40]	; (8004de8 <prvCheckTasksWaitingTermination+0x58>)
 8004dc0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004dc2:	f000 f9eb 	bl	800519c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f810 	bl	8004dec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dcc:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <prvCheckTasksWaitingTermination+0x58>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1e1      	bne.n	8004d98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	20000558 	.word	0x20000558
 8004de4:	20000584 	.word	0x20000584
 8004de8:	2000056c 	.word	0x2000056c

08004dec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d108      	bne.n	8004e10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fb20 	bl	8005448 <vPortFree>
				vPortFree( pxTCB );
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fb1d 	bl	8005448 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e0e:	e018      	b.n	8004e42 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d103      	bne.n	8004e22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fb14 	bl	8005448 <vPortFree>
	}
 8004e20:	e00f      	b.n	8004e42 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d00a      	beq.n	8004e42 <prvDeleteTCB+0x56>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	60fb      	str	r3, [r7, #12]
}
 8004e3e:	bf00      	nop
 8004e40:	e7fe      	b.n	8004e40 <prvDeleteTCB+0x54>
	}
 8004e42:	bf00      	nop
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e52:	4b0e      	ldr	r3, [pc, #56]	; (8004e8c <prvResetNextTaskUnblockTime+0x40>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <prvResetNextTaskUnblockTime+0x14>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e000      	b.n	8004e62 <prvResetNextTaskUnblockTime+0x16>
 8004e60:	2300      	movs	r3, #0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d004      	beq.n	8004e70 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e66:	4b0a      	ldr	r3, [pc, #40]	; (8004e90 <prvResetNextTaskUnblockTime+0x44>)
 8004e68:	f04f 32ff 	mov.w	r2, #4294967295
 8004e6c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e6e:	e008      	b.n	8004e82 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004e70:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <prvResetNextTaskUnblockTime+0x40>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	4a04      	ldr	r2, [pc, #16]	; (8004e90 <prvResetNextTaskUnblockTime+0x44>)
 8004e80:	6013      	str	r3, [r2, #0]
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bc80      	pop	{r7}
 8004e8a:	4770      	bx	lr
 8004e8c:	2000053c 	.word	0x2000053c
 8004e90:	200005a4 	.word	0x200005a4

08004e94 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e9e:	4b29      	ldr	r3, [pc, #164]	; (8004f44 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ea4:	4b28      	ldr	r3, [pc, #160]	; (8004f48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff fb0e 	bl	80044cc <uxListRemove>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10b      	bne.n	8004ece <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004eb6:	4b24      	ldr	r3, [pc, #144]	; (8004f48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec2:	43da      	mvns	r2, r3
 8004ec4:	4b21      	ldr	r3, [pc, #132]	; (8004f4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	4a20      	ldr	r2, [pc, #128]	; (8004f4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ecc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed4:	d10a      	bne.n	8004eec <prvAddCurrentTaskToDelayedList+0x58>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d007      	beq.n	8004eec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004edc:	4b1a      	ldr	r3, [pc, #104]	; (8004f48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	481a      	ldr	r0, [pc, #104]	; (8004f50 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004ee6:	f7ff fa96 	bl	8004416 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004eea:	e026      	b.n	8004f3a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ef4:	4b14      	ldr	r3, [pc, #80]	; (8004f48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d209      	bcs.n	8004f18 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f04:	4b13      	ldr	r3, [pc, #76]	; (8004f54 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	4b0f      	ldr	r3, [pc, #60]	; (8004f48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4610      	mov	r0, r2
 8004f12:	f7ff faa3 	bl	800445c <vListInsert>
}
 8004f16:	e010      	b.n	8004f3a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f18:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3304      	adds	r3, #4
 8004f22:	4619      	mov	r1, r3
 8004f24:	4610      	mov	r0, r2
 8004f26:	f7ff fa99 	bl	800445c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f2a:	4b0c      	ldr	r3, [pc, #48]	; (8004f5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d202      	bcs.n	8004f3a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004f34:	4a09      	ldr	r2, [pc, #36]	; (8004f5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	6013      	str	r3, [r2, #0]
}
 8004f3a:	bf00      	nop
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20000588 	.word	0x20000588
 8004f48:	20000484 	.word	0x20000484
 8004f4c:	2000058c 	.word	0x2000058c
 8004f50:	20000570 	.word	0x20000570
 8004f54:	20000540 	.word	0x20000540
 8004f58:	2000053c 	.word	0x2000053c
 8004f5c:	200005a4 	.word	0x200005a4

08004f60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	3b04      	subs	r3, #4
 8004f70:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	3b04      	subs	r3, #4
 8004f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f023 0201 	bic.w	r2, r3, #1
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3b04      	subs	r3, #4
 8004f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f90:	4a08      	ldr	r2, [pc, #32]	; (8004fb4 <pxPortInitialiseStack+0x54>)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	3b14      	subs	r3, #20
 8004f9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	3b20      	subs	r3, #32
 8004fa6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bc80      	pop	{r7}
 8004fb2:	4770      	bx	lr
 8004fb4:	08004fb9 	.word	0x08004fb9

08004fb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fc2:	4b12      	ldr	r3, [pc, #72]	; (800500c <prvTaskExitError+0x54>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fca:	d00a      	beq.n	8004fe2 <prvTaskExitError+0x2a>
	__asm volatile
 8004fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd0:	f383 8811 	msr	BASEPRI, r3
 8004fd4:	f3bf 8f6f 	isb	sy
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	60fb      	str	r3, [r7, #12]
}
 8004fde:	bf00      	nop
 8004fe0:	e7fe      	b.n	8004fe0 <prvTaskExitError+0x28>
	__asm volatile
 8004fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe6:	f383 8811 	msr	BASEPRI, r3
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	60bb      	str	r3, [r7, #8]
}
 8004ff4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ff6:	bf00      	nop
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0fc      	beq.n	8004ff8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ffe:	bf00      	nop
 8005000:	bf00      	nop
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	bc80      	pop	{r7}
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	2000002c 	.word	0x2000002c

08005010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005010:	4b07      	ldr	r3, [pc, #28]	; (8005030 <pxCurrentTCBConst2>)
 8005012:	6819      	ldr	r1, [r3, #0]
 8005014:	6808      	ldr	r0, [r1, #0]
 8005016:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800501a:	f380 8809 	msr	PSP, r0
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f04f 0000 	mov.w	r0, #0
 8005026:	f380 8811 	msr	BASEPRI, r0
 800502a:	f04e 0e0d 	orr.w	lr, lr, #13
 800502e:	4770      	bx	lr

08005030 <pxCurrentTCBConst2>:
 8005030:	20000484 	.word	0x20000484
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005034:	bf00      	nop
 8005036:	bf00      	nop

08005038 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005038:	4806      	ldr	r0, [pc, #24]	; (8005054 <prvPortStartFirstTask+0x1c>)
 800503a:	6800      	ldr	r0, [r0, #0]
 800503c:	6800      	ldr	r0, [r0, #0]
 800503e:	f380 8808 	msr	MSP, r0
 8005042:	b662      	cpsie	i
 8005044:	b661      	cpsie	f
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	df00      	svc	0
 8005050:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005052:	bf00      	nop
 8005054:	e000ed08 	.word	0xe000ed08

08005058 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800505e:	4b32      	ldr	r3, [pc, #200]	; (8005128 <xPortStartScheduler+0xd0>)
 8005060:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	b2db      	uxtb	r3, r3
 8005068:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	22ff      	movs	r2, #255	; 0xff
 800506e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	b2db      	uxtb	r3, r3
 8005076:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005078:	78fb      	ldrb	r3, [r7, #3]
 800507a:	b2db      	uxtb	r3, r3
 800507c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005080:	b2da      	uxtb	r2, r3
 8005082:	4b2a      	ldr	r3, [pc, #168]	; (800512c <xPortStartScheduler+0xd4>)
 8005084:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005086:	4b2a      	ldr	r3, [pc, #168]	; (8005130 <xPortStartScheduler+0xd8>)
 8005088:	2207      	movs	r2, #7
 800508a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800508c:	e009      	b.n	80050a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800508e:	4b28      	ldr	r3, [pc, #160]	; (8005130 <xPortStartScheduler+0xd8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3b01      	subs	r3, #1
 8005094:	4a26      	ldr	r2, [pc, #152]	; (8005130 <xPortStartScheduler+0xd8>)
 8005096:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005098:	78fb      	ldrb	r3, [r7, #3]
 800509a:	b2db      	uxtb	r3, r3
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050a2:	78fb      	ldrb	r3, [r7, #3]
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050aa:	2b80      	cmp	r3, #128	; 0x80
 80050ac:	d0ef      	beq.n	800508e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050ae:	4b20      	ldr	r3, [pc, #128]	; (8005130 <xPortStartScheduler+0xd8>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f1c3 0307 	rsb	r3, r3, #7
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d00a      	beq.n	80050d0 <xPortStartScheduler+0x78>
	__asm volatile
 80050ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	60bb      	str	r3, [r7, #8]
}
 80050cc:	bf00      	nop
 80050ce:	e7fe      	b.n	80050ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050d0:	4b17      	ldr	r3, [pc, #92]	; (8005130 <xPortStartScheduler+0xd8>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	021b      	lsls	r3, r3, #8
 80050d6:	4a16      	ldr	r2, [pc, #88]	; (8005130 <xPortStartScheduler+0xd8>)
 80050d8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050da:	4b15      	ldr	r3, [pc, #84]	; (8005130 <xPortStartScheduler+0xd8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050e2:	4a13      	ldr	r2, [pc, #76]	; (8005130 <xPortStartScheduler+0xd8>)
 80050e4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050ee:	4b11      	ldr	r3, [pc, #68]	; (8005134 <xPortStartScheduler+0xdc>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a10      	ldr	r2, [pc, #64]	; (8005134 <xPortStartScheduler+0xdc>)
 80050f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050fa:	4b0e      	ldr	r3, [pc, #56]	; (8005134 <xPortStartScheduler+0xdc>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a0d      	ldr	r2, [pc, #52]	; (8005134 <xPortStartScheduler+0xdc>)
 8005100:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005104:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005106:	f000 f8b9 	bl	800527c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800510a:	4b0b      	ldr	r3, [pc, #44]	; (8005138 <xPortStartScheduler+0xe0>)
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005110:	f7ff ff92 	bl	8005038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005114:	f7ff fd8a 	bl	8004c2c <vTaskSwitchContext>
	prvTaskExitError();
 8005118:	f7ff ff4e 	bl	8004fb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	e000e400 	.word	0xe000e400
 800512c:	200005b0 	.word	0x200005b0
 8005130:	200005b4 	.word	0x200005b4
 8005134:	e000ed20 	.word	0xe000ed20
 8005138:	2000002c 	.word	0x2000002c

0800513c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
	__asm volatile
 8005142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	607b      	str	r3, [r7, #4]
}
 8005154:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005156:	4b0f      	ldr	r3, [pc, #60]	; (8005194 <vPortEnterCritical+0x58>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3301      	adds	r3, #1
 800515c:	4a0d      	ldr	r2, [pc, #52]	; (8005194 <vPortEnterCritical+0x58>)
 800515e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005160:	4b0c      	ldr	r3, [pc, #48]	; (8005194 <vPortEnterCritical+0x58>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d10f      	bne.n	8005188 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005168:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <vPortEnterCritical+0x5c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <vPortEnterCritical+0x4c>
	__asm volatile
 8005172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005176:	f383 8811 	msr	BASEPRI, r3
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	603b      	str	r3, [r7, #0]
}
 8005184:	bf00      	nop
 8005186:	e7fe      	b.n	8005186 <vPortEnterCritical+0x4a>
	}
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	2000002c 	.word	0x2000002c
 8005198:	e000ed04 	.word	0xe000ed04

0800519c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051a2:	4b11      	ldr	r3, [pc, #68]	; (80051e8 <vPortExitCritical+0x4c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10a      	bne.n	80051c0 <vPortExitCritical+0x24>
	__asm volatile
 80051aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	607b      	str	r3, [r7, #4]
}
 80051bc:	bf00      	nop
 80051be:	e7fe      	b.n	80051be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80051c0:	4b09      	ldr	r3, [pc, #36]	; (80051e8 <vPortExitCritical+0x4c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3b01      	subs	r3, #1
 80051c6:	4a08      	ldr	r2, [pc, #32]	; (80051e8 <vPortExitCritical+0x4c>)
 80051c8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051ca:	4b07      	ldr	r3, [pc, #28]	; (80051e8 <vPortExitCritical+0x4c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d105      	bne.n	80051de <vPortExitCritical+0x42>
 80051d2:	2300      	movs	r3, #0
 80051d4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051dc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bc80      	pop	{r7}
 80051e6:	4770      	bx	lr
 80051e8:	2000002c 	.word	0x2000002c
 80051ec:	00000000 	.word	0x00000000

080051f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051f0:	f3ef 8009 	mrs	r0, PSP
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	4b0d      	ldr	r3, [pc, #52]	; (8005230 <pxCurrentTCBConst>)
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005200:	6010      	str	r0, [r2, #0]
 8005202:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005206:	f04f 0050 	mov.w	r0, #80	; 0x50
 800520a:	f380 8811 	msr	BASEPRI, r0
 800520e:	f7ff fd0d 	bl	8004c2c <vTaskSwitchContext>
 8005212:	f04f 0000 	mov.w	r0, #0
 8005216:	f380 8811 	msr	BASEPRI, r0
 800521a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800521e:	6819      	ldr	r1, [r3, #0]
 8005220:	6808      	ldr	r0, [r1, #0]
 8005222:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005226:	f380 8809 	msr	PSP, r0
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	4770      	bx	lr

08005230 <pxCurrentTCBConst>:
 8005230:	20000484 	.word	0x20000484
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005234:	bf00      	nop
 8005236:	bf00      	nop

08005238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
	__asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	607b      	str	r3, [r7, #4]
}
 8005250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005252:	f7ff fc2d 	bl	8004ab0 <xTaskIncrementTick>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800525c:	4b06      	ldr	r3, [pc, #24]	; (8005278 <SysTick_Handler+0x40>)
 800525e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	2300      	movs	r3, #0
 8005266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	f383 8811 	msr	BASEPRI, r3
}
 800526e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005270:	bf00      	nop
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	e000ed04 	.word	0xe000ed04

0800527c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005280:	4b0a      	ldr	r3, [pc, #40]	; (80052ac <vPortSetupTimerInterrupt+0x30>)
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005286:	4b0a      	ldr	r3, [pc, #40]	; (80052b0 <vPortSetupTimerInterrupt+0x34>)
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800528c:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <vPortSetupTimerInterrupt+0x38>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a09      	ldr	r2, [pc, #36]	; (80052b8 <vPortSetupTimerInterrupt+0x3c>)
 8005292:	fba2 2303 	umull	r2, r3, r2, r3
 8005296:	099b      	lsrs	r3, r3, #6
 8005298:	4a08      	ldr	r2, [pc, #32]	; (80052bc <vPortSetupTimerInterrupt+0x40>)
 800529a:	3b01      	subs	r3, #1
 800529c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800529e:	4b03      	ldr	r3, [pc, #12]	; (80052ac <vPortSetupTimerInterrupt+0x30>)
 80052a0:	2207      	movs	r2, #7
 80052a2:	601a      	str	r2, [r3, #0]
}
 80052a4:	bf00      	nop
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bc80      	pop	{r7}
 80052aa:	4770      	bx	lr
 80052ac:	e000e010 	.word	0xe000e010
 80052b0:	e000e018 	.word	0xe000e018
 80052b4:	20000020 	.word	0x20000020
 80052b8:	10624dd3 	.word	0x10624dd3
 80052bc:	e000e014 	.word	0xe000e014

080052c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08a      	sub	sp, #40	; 0x28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052c8:	2300      	movs	r3, #0
 80052ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052cc:	f7ff fb46 	bl	800495c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052d0:	4b58      	ldr	r3, [pc, #352]	; (8005434 <pvPortMalloc+0x174>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052d8:	f000 f910 	bl	80054fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052dc:	4b56      	ldr	r3, [pc, #344]	; (8005438 <pvPortMalloc+0x178>)
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4013      	ands	r3, r2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f040 808e 	bne.w	8005406 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d01d      	beq.n	800532c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80052f0:	2208      	movs	r2, #8
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4413      	add	r3, r2
 80052f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d014      	beq.n	800532c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f023 0307 	bic.w	r3, r3, #7
 8005308:	3308      	adds	r3, #8
 800530a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <pvPortMalloc+0x6c>
	__asm volatile
 8005316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531a:	f383 8811 	msr	BASEPRI, r3
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f3bf 8f4f 	dsb	sy
 8005326:	617b      	str	r3, [r7, #20]
}
 8005328:	bf00      	nop
 800532a:	e7fe      	b.n	800532a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d069      	beq.n	8005406 <pvPortMalloc+0x146>
 8005332:	4b42      	ldr	r3, [pc, #264]	; (800543c <pvPortMalloc+0x17c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	429a      	cmp	r2, r3
 800533a:	d864      	bhi.n	8005406 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800533c:	4b40      	ldr	r3, [pc, #256]	; (8005440 <pvPortMalloc+0x180>)
 800533e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005340:	4b3f      	ldr	r3, [pc, #252]	; (8005440 <pvPortMalloc+0x180>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005346:	e004      	b.n	8005352 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	429a      	cmp	r2, r3
 800535a:	d903      	bls.n	8005364 <pvPortMalloc+0xa4>
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1f1      	bne.n	8005348 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005364:	4b33      	ldr	r3, [pc, #204]	; (8005434 <pvPortMalloc+0x174>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800536a:	429a      	cmp	r2, r3
 800536c:	d04b      	beq.n	8005406 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2208      	movs	r2, #8
 8005374:	4413      	add	r3, r2
 8005376:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	1ad2      	subs	r2, r2, r3
 8005388:	2308      	movs	r3, #8
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	429a      	cmp	r2, r3
 800538e:	d91f      	bls.n	80053d0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4413      	add	r3, r2
 8005396:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	f003 0307 	and.w	r3, r3, #7
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <pvPortMalloc+0xf8>
	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	613b      	str	r3, [r7, #16]
}
 80053b4:	bf00      	nop
 80053b6:	e7fe      	b.n	80053b6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	1ad2      	subs	r2, r2, r3
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053ca:	69b8      	ldr	r0, [r7, #24]
 80053cc:	f000 f8f8 	bl	80055c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053d0:	4b1a      	ldr	r3, [pc, #104]	; (800543c <pvPortMalloc+0x17c>)
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	4a18      	ldr	r2, [pc, #96]	; (800543c <pvPortMalloc+0x17c>)
 80053dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053de:	4b17      	ldr	r3, [pc, #92]	; (800543c <pvPortMalloc+0x17c>)
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	4b18      	ldr	r3, [pc, #96]	; (8005444 <pvPortMalloc+0x184>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d203      	bcs.n	80053f2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053ea:	4b14      	ldr	r3, [pc, #80]	; (800543c <pvPortMalloc+0x17c>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a15      	ldr	r2, [pc, #84]	; (8005444 <pvPortMalloc+0x184>)
 80053f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	4b10      	ldr	r3, [pc, #64]	; (8005438 <pvPortMalloc+0x178>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	431a      	orrs	r2, r3
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005406:	f7ff fab7 	bl	8004978 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00a      	beq.n	800542a <pvPortMalloc+0x16a>
	__asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	60fb      	str	r3, [r7, #12]
}
 8005426:	bf00      	nop
 8005428:	e7fe      	b.n	8005428 <pvPortMalloc+0x168>
	return pvReturn;
 800542a:	69fb      	ldr	r3, [r7, #28]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3728      	adds	r7, #40	; 0x28
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	200011c0 	.word	0x200011c0
 8005438:	200011cc 	.word	0x200011cc
 800543c:	200011c4 	.word	0x200011c4
 8005440:	200011b8 	.word	0x200011b8
 8005444:	200011c8 	.word	0x200011c8

08005448 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d048      	beq.n	80054ec <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800545a:	2308      	movs	r3, #8
 800545c:	425b      	negs	r3, r3
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	4413      	add	r3, r2
 8005462:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	4b21      	ldr	r3, [pc, #132]	; (80054f4 <vPortFree+0xac>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4013      	ands	r3, r2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10a      	bne.n	800548c <vPortFree+0x44>
	__asm volatile
 8005476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547a:	f383 8811 	msr	BASEPRI, r3
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	60fb      	str	r3, [r7, #12]
}
 8005488:	bf00      	nop
 800548a:	e7fe      	b.n	800548a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00a      	beq.n	80054aa <vPortFree+0x62>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	60bb      	str	r3, [r7, #8]
}
 80054a6:	bf00      	nop
 80054a8:	e7fe      	b.n	80054a8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	4b11      	ldr	r3, [pc, #68]	; (80054f4 <vPortFree+0xac>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4013      	ands	r3, r2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d019      	beq.n	80054ec <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d115      	bne.n	80054ec <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	4b0b      	ldr	r3, [pc, #44]	; (80054f4 <vPortFree+0xac>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	43db      	mvns	r3, r3
 80054ca:	401a      	ands	r2, r3
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054d0:	f7ff fa44 	bl	800495c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	4b07      	ldr	r3, [pc, #28]	; (80054f8 <vPortFree+0xb0>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4413      	add	r3, r2
 80054de:	4a06      	ldr	r2, [pc, #24]	; (80054f8 <vPortFree+0xb0>)
 80054e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054e2:	6938      	ldr	r0, [r7, #16]
 80054e4:	f000 f86c 	bl	80055c0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80054e8:	f7ff fa46 	bl	8004978 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054ec:	bf00      	nop
 80054ee:	3718      	adds	r7, #24
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	200011cc 	.word	0x200011cc
 80054f8:	200011c4 	.word	0x200011c4

080054fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005502:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005506:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005508:	4b27      	ldr	r3, [pc, #156]	; (80055a8 <prvHeapInit+0xac>)
 800550a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f003 0307 	and.w	r3, r3, #7
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00c      	beq.n	8005530 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	3307      	adds	r3, #7
 800551a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 0307 	bic.w	r3, r3, #7
 8005522:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	4a1f      	ldr	r2, [pc, #124]	; (80055a8 <prvHeapInit+0xac>)
 800552c:	4413      	add	r3, r2
 800552e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005534:	4a1d      	ldr	r2, [pc, #116]	; (80055ac <prvHeapInit+0xb0>)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800553a:	4b1c      	ldr	r3, [pc, #112]	; (80055ac <prvHeapInit+0xb0>)
 800553c:	2200      	movs	r2, #0
 800553e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	4413      	add	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005548:	2208      	movs	r2, #8
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	1a9b      	subs	r3, r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f023 0307 	bic.w	r3, r3, #7
 8005556:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4a15      	ldr	r2, [pc, #84]	; (80055b0 <prvHeapInit+0xb4>)
 800555c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800555e:	4b14      	ldr	r3, [pc, #80]	; (80055b0 <prvHeapInit+0xb4>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2200      	movs	r2, #0
 8005564:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005566:	4b12      	ldr	r3, [pc, #72]	; (80055b0 <prvHeapInit+0xb4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	1ad2      	subs	r2, r2, r3
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800557c:	4b0c      	ldr	r3, [pc, #48]	; (80055b0 <prvHeapInit+0xb4>)
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	4a0a      	ldr	r2, [pc, #40]	; (80055b4 <prvHeapInit+0xb8>)
 800558a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	4a09      	ldr	r2, [pc, #36]	; (80055b8 <prvHeapInit+0xbc>)
 8005592:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005594:	4b09      	ldr	r3, [pc, #36]	; (80055bc <prvHeapInit+0xc0>)
 8005596:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800559a:	601a      	str	r2, [r3, #0]
}
 800559c:	bf00      	nop
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bc80      	pop	{r7}
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	200005b8 	.word	0x200005b8
 80055ac:	200011b8 	.word	0x200011b8
 80055b0:	200011c0 	.word	0x200011c0
 80055b4:	200011c8 	.word	0x200011c8
 80055b8:	200011c4 	.word	0x200011c4
 80055bc:	200011cc 	.word	0x200011cc

080055c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055c8:	4b27      	ldr	r3, [pc, #156]	; (8005668 <prvInsertBlockIntoFreeList+0xa8>)
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	e002      	b.n	80055d4 <prvInsertBlockIntoFreeList+0x14>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d8f7      	bhi.n	80055ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	4413      	add	r3, r2
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d108      	bne.n	8005602 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	441a      	add	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	441a      	add	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	429a      	cmp	r2, r3
 8005614:	d118      	bne.n	8005648 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	4b14      	ldr	r3, [pc, #80]	; (800566c <prvInsertBlockIntoFreeList+0xac>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d00d      	beq.n	800563e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	441a      	add	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	e008      	b.n	8005650 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800563e:	4b0b      	ldr	r3, [pc, #44]	; (800566c <prvInsertBlockIntoFreeList+0xac>)
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	e003      	b.n	8005650 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	429a      	cmp	r2, r3
 8005656:	d002      	beq.n	800565e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800565e:	bf00      	nop
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	bc80      	pop	{r7}
 8005666:	4770      	bx	lr
 8005668:	200011b8 	.word	0x200011b8
 800566c:	200011c0 	.word	0x200011c0

08005670 <__libc_init_array>:
 8005670:	b570      	push	{r4, r5, r6, lr}
 8005672:	2600      	movs	r6, #0
 8005674:	4d0c      	ldr	r5, [pc, #48]	; (80056a8 <__libc_init_array+0x38>)
 8005676:	4c0d      	ldr	r4, [pc, #52]	; (80056ac <__libc_init_array+0x3c>)
 8005678:	1b64      	subs	r4, r4, r5
 800567a:	10a4      	asrs	r4, r4, #2
 800567c:	42a6      	cmp	r6, r4
 800567e:	d109      	bne.n	8005694 <__libc_init_array+0x24>
 8005680:	f000 f822 	bl	80056c8 <_init>
 8005684:	2600      	movs	r6, #0
 8005686:	4d0a      	ldr	r5, [pc, #40]	; (80056b0 <__libc_init_array+0x40>)
 8005688:	4c0a      	ldr	r4, [pc, #40]	; (80056b4 <__libc_init_array+0x44>)
 800568a:	1b64      	subs	r4, r4, r5
 800568c:	10a4      	asrs	r4, r4, #2
 800568e:	42a6      	cmp	r6, r4
 8005690:	d105      	bne.n	800569e <__libc_init_array+0x2e>
 8005692:	bd70      	pop	{r4, r5, r6, pc}
 8005694:	f855 3b04 	ldr.w	r3, [r5], #4
 8005698:	4798      	blx	r3
 800569a:	3601      	adds	r6, #1
 800569c:	e7ee      	b.n	800567c <__libc_init_array+0xc>
 800569e:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a2:	4798      	blx	r3
 80056a4:	3601      	adds	r6, #1
 80056a6:	e7f2      	b.n	800568e <__libc_init_array+0x1e>
 80056a8:	0800575c 	.word	0x0800575c
 80056ac:	0800575c 	.word	0x0800575c
 80056b0:	0800575c 	.word	0x0800575c
 80056b4:	08005760 	.word	0x08005760

080056b8 <memset>:
 80056b8:	4603      	mov	r3, r0
 80056ba:	4402      	add	r2, r0
 80056bc:	4293      	cmp	r3, r2
 80056be:	d100      	bne.n	80056c2 <memset+0xa>
 80056c0:	4770      	bx	lr
 80056c2:	f803 1b01 	strb.w	r1, [r3], #1
 80056c6:	e7f9      	b.n	80056bc <memset+0x4>

080056c8 <_init>:
 80056c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ca:	bf00      	nop
 80056cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ce:	bc08      	pop	{r3}
 80056d0:	469e      	mov	lr, r3
 80056d2:	4770      	bx	lr

080056d4 <_fini>:
 80056d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d6:	bf00      	nop
 80056d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056da:	bc08      	pop	{r3}
 80056dc:	469e      	mov	lr, r3
 80056de:	4770      	bx	lr
