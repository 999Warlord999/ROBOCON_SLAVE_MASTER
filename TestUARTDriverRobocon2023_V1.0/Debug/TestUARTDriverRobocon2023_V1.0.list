
TestUARTDriverRobocon2023_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058e0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080059f0  080059f0  000159f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a6c  08005a6c  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08005a6c  08005a6c  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a6c  08005a6c  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a6c  08005a6c  00015a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a70  08005a70  00015a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08005a74  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001200  20000048  08005abc  00020048  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001248  08005abc  00021248  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102bf  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a1  00000000  00000000  00030330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  00032cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  00033dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f26  00000000  00000000  00034df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011469  00000000  00000000  0004dd16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091a66  00000000  00000000  0005f17f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0be5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000482c  00000000  00000000  000f0c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000048 	.word	0x20000048
 800012c:	00000000 	.word	0x00000000
 8000130:	080059d8 	.word	0x080059d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000004c 	.word	0x2000004c
 800014c:	080059d8 	.word	0x080059d8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4a06      	ldr	r2, [pc, #24]	; (8000a74 <vApplicationGetIdleTaskMemory+0x28>)
 8000a5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2280      	movs	r2, #128	; 0x80
 8000a68:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a6a:	bf00      	nop
 8000a6c:	3714      	adds	r7, #20
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	20000064 	.word	0x20000064
 8000a78:	200000b8 	.word	0x200000b8

08000a7c <HAL_UART_RxCpltCallback>:


char UARTRX1_Buffer[17];
char DataMain[17];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a75      	ldr	r2, [pc, #468]	; (8000c60 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	f040 80e4 	bne.w	8000c58 <HAL_UART_RxCpltCallback+0x1dc>
		HAL_UART_Receive_IT(&huart1, (uint8_t*)UARTRX1_Buffer, 17);
 8000a90:	2211      	movs	r2, #17
 8000a92:	4974      	ldr	r1, [pc, #464]	; (8000c64 <HAL_UART_RxCpltCallback+0x1e8>)
 8000a94:	4874      	ldr	r0, [pc, #464]	; (8000c68 <HAL_UART_RxCpltCallback+0x1ec>)
 8000a96:	f003 f98e 	bl	8003db6 <HAL_UART_Receive_IT>

		int ViTriData = -1;
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9e:	617b      	str	r3, [r7, #20]
		for(int i = 0; i <= 16; ++i){
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	e00a      	b.n	8000abc <HAL_UART_RxCpltCallback+0x40>
			if(UARTRX1_Buffer[i] == 149){
 8000aa6:	4a6f      	ldr	r2, [pc, #444]	; (8000c64 <HAL_UART_RxCpltCallback+0x1e8>)
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	4413      	add	r3, r2
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b95      	cmp	r3, #149	; 0x95
 8000ab0:	d101      	bne.n	8000ab6 <HAL_UART_RxCpltCallback+0x3a>
				ViTriData = i;
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	617b      	str	r3, [r7, #20]
		for(int i = 0; i <= 16; ++i){
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	2b10      	cmp	r3, #16
 8000ac0:	ddf1      	ble.n	8000aa6 <HAL_UART_RxCpltCallback+0x2a>
			}
		}

		if(ViTriData != -1){
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac8:	d019      	beq.n	8000afe <HAL_UART_RxCpltCallback+0x82>
			int cnt = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
			while(cnt < 17){
 8000ace:	e013      	b.n	8000af8 <HAL_UART_RxCpltCallback+0x7c>
				DataMain[cnt] = UARTRX1_Buffer[ViTriData];
 8000ad0:	4a64      	ldr	r2, [pc, #400]	; (8000c64 <HAL_UART_RxCpltCallback+0x1e8>)
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	7819      	ldrb	r1, [r3, #0]
 8000ad8:	4a64      	ldr	r2, [pc, #400]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	4413      	add	r3, r2
 8000ade:	460a      	mov	r2, r1
 8000ae0:	701a      	strb	r2, [r3, #0]
				++ViTriData;
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
				if(ViTriData == 17){
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	2b11      	cmp	r3, #17
 8000aec:	d101      	bne.n	8000af2 <HAL_UART_RxCpltCallback+0x76>
					ViTriData = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
				}
				++cnt;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	3301      	adds	r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
			while(cnt < 17){
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b10      	cmp	r3, #16
 8000afc:	dde8      	ble.n	8000ad0 <HAL_UART_RxCpltCallback+0x54>
			}
		}

		if(BoardID == 1){
 8000afe:	4b5c      	ldr	r3, [pc, #368]	; (8000c70 <HAL_UART_RxCpltCallback+0x1f4>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d135      	bne.n	8000b72 <HAL_UART_RxCpltCallback+0xf6>
			Mode = (DataMain[1] >> 1) & 3;
 8000b06:	4b59      	ldr	r3, [pc, #356]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000b08:	785b      	ldrb	r3, [r3, #1]
 8000b0a:	085b      	lsrs	r3, r3, #1
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	f003 0303 	and.w	r3, r3, #3
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b57      	ldr	r3, [pc, #348]	; (8000c74 <HAL_UART_RxCpltCallback+0x1f8>)
 8000b16:	701a      	strb	r2, [r3, #0]
			if((DataMain[1] & 1) == 0){
 8000b18:	4b54      	ldr	r3, [pc, #336]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000b1a:	785b      	ldrb	r3, [r3, #1]
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d104      	bne.n	8000b2e <HAL_UART_RxCpltCallback+0xb2>
				Dir = -1;
 8000b24:	4b54      	ldr	r3, [pc, #336]	; (8000c78 <HAL_UART_RxCpltCallback+0x1fc>)
 8000b26:	f04f 32ff 	mov.w	r2, #4294967295
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	e008      	b.n	8000b40 <HAL_UART_RxCpltCallback+0xc4>
			}
			else if((DataMain[1] & 1) == 1){
 8000b2e:	4b4f      	ldr	r3, [pc, #316]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000b30:	785b      	ldrb	r3, [r3, #1]
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d002      	beq.n	8000b40 <HAL_UART_RxCpltCallback+0xc4>
				Dir = 1;
 8000b3a:	4b4f      	ldr	r3, [pc, #316]	; (8000c78 <HAL_UART_RxCpltCallback+0x1fc>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	601a      	str	r2, [r3, #0]
			}

			Speed = DataMain[2] << 8 | DataMain[3];
 8000b40:	4b4a      	ldr	r3, [pc, #296]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000b42:	789b      	ldrb	r3, [r3, #2]
 8000b44:	021b      	lsls	r3, r3, #8
 8000b46:	b21a      	sxth	r2, r3
 8000b48:	4b48      	ldr	r3, [pc, #288]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000b4a:	78db      	ldrb	r3, [r3, #3]
 8000b4c:	b21b      	sxth	r3, r3
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	b21b      	sxth	r3, r3
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	4b49      	ldr	r3, [pc, #292]	; (8000c7c <HAL_UART_RxCpltCallback+0x200>)
 8000b56:	801a      	strh	r2, [r3, #0]
			Rotate = DataMain[4] << 8 | DataMain[5];
 8000b58:	4b44      	ldr	r3, [pc, #272]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000b5a:	791b      	ldrb	r3, [r3, #4]
 8000b5c:	021b      	lsls	r3, r3, #8
 8000b5e:	b21a      	sxth	r2, r3
 8000b60:	4b42      	ldr	r3, [pc, #264]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000b62:	795b      	ldrb	r3, [r3, #5]
 8000b64:	b21b      	sxth	r3, r3
 8000b66:	4313      	orrs	r3, r2
 8000b68:	b21b      	sxth	r3, r3
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	4b44      	ldr	r3, [pc, #272]	; (8000c80 <HAL_UART_RxCpltCallback+0x204>)
 8000b6e:	801a      	strh	r2, [r3, #0]

			Speed = DataMain[12] << 8 | DataMain[13];
			Rotate = DataMain[14] << 8 | DataMain[15];
		}
	}
}
 8000b70:	e072      	b.n	8000c58 <HAL_UART_RxCpltCallback+0x1dc>
		else if(BoardID == 2){
 8000b72:	4b3f      	ldr	r3, [pc, #252]	; (8000c70 <HAL_UART_RxCpltCallback+0x1f4>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d135      	bne.n	8000be6 <HAL_UART_RxCpltCallback+0x16a>
			Mode = (DataMain[6] >> 1) & 3;
 8000b7a:	4b3c      	ldr	r3, [pc, #240]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000b7c:	799b      	ldrb	r3, [r3, #6]
 8000b7e:	085b      	lsrs	r3, r3, #1
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	f003 0303 	and.w	r3, r3, #3
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	4b3a      	ldr	r3, [pc, #232]	; (8000c74 <HAL_UART_RxCpltCallback+0x1f8>)
 8000b8a:	701a      	strb	r2, [r3, #0]
			if((DataMain[6] & 1) == 0){
 8000b8c:	4b37      	ldr	r3, [pc, #220]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000b8e:	799b      	ldrb	r3, [r3, #6]
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d104      	bne.n	8000ba2 <HAL_UART_RxCpltCallback+0x126>
				Dir = -1;
 8000b98:	4b37      	ldr	r3, [pc, #220]	; (8000c78 <HAL_UART_RxCpltCallback+0x1fc>)
 8000b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	e008      	b.n	8000bb4 <HAL_UART_RxCpltCallback+0x138>
			else if((DataMain[6] & 1) == 1){
 8000ba2:	4b32      	ldr	r3, [pc, #200]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000ba4:	799b      	ldrb	r3, [r3, #6]
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d002      	beq.n	8000bb4 <HAL_UART_RxCpltCallback+0x138>
				Dir = 1;
 8000bae:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <HAL_UART_RxCpltCallback+0x1fc>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]
			Speed = DataMain[7] << 8 | DataMain[8];
 8000bb4:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000bb6:	79db      	ldrb	r3, [r3, #7]
 8000bb8:	021b      	lsls	r3, r3, #8
 8000bba:	b21a      	sxth	r2, r3
 8000bbc:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000bbe:	7a1b      	ldrb	r3, [r3, #8]
 8000bc0:	b21b      	sxth	r3, r3
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	b21b      	sxth	r3, r3
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	4b2c      	ldr	r3, [pc, #176]	; (8000c7c <HAL_UART_RxCpltCallback+0x200>)
 8000bca:	801a      	strh	r2, [r3, #0]
			Rotate = DataMain[9] << 8 | DataMain[10];
 8000bcc:	4b27      	ldr	r3, [pc, #156]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000bce:	7a5b      	ldrb	r3, [r3, #9]
 8000bd0:	021b      	lsls	r3, r3, #8
 8000bd2:	b21a      	sxth	r2, r3
 8000bd4:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000bd6:	7a9b      	ldrb	r3, [r3, #10]
 8000bd8:	b21b      	sxth	r3, r3
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	b21b      	sxth	r3, r3
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <HAL_UART_RxCpltCallback+0x204>)
 8000be2:	801a      	strh	r2, [r3, #0]
}
 8000be4:	e038      	b.n	8000c58 <HAL_UART_RxCpltCallback+0x1dc>
		else if(BoardID == 3){
 8000be6:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <HAL_UART_RxCpltCallback+0x1f4>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b03      	cmp	r3, #3
 8000bec:	d134      	bne.n	8000c58 <HAL_UART_RxCpltCallback+0x1dc>
			Mode = (DataMain[11] >> 1) & 3;
 8000bee:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000bf0:	7adb      	ldrb	r3, [r3, #11]
 8000bf2:	085b      	lsrs	r3, r3, #1
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	f003 0303 	and.w	r3, r3, #3
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <HAL_UART_RxCpltCallback+0x1f8>)
 8000bfe:	701a      	strb	r2, [r3, #0]
			if((DataMain[11] & 1) == 0){
 8000c00:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000c02:	7adb      	ldrb	r3, [r3, #11]
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d104      	bne.n	8000c16 <HAL_UART_RxCpltCallback+0x19a>
				Dir = -1;
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <HAL_UART_RxCpltCallback+0x1fc>)
 8000c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	e008      	b.n	8000c28 <HAL_UART_RxCpltCallback+0x1ac>
			else if((DataMain[11] & 1) == 1){
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000c18:	7adb      	ldrb	r3, [r3, #11]
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d002      	beq.n	8000c28 <HAL_UART_RxCpltCallback+0x1ac>
				Dir = 1;
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_UART_RxCpltCallback+0x1fc>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	601a      	str	r2, [r3, #0]
			Speed = DataMain[12] << 8 | DataMain[13];
 8000c28:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000c2a:	7b1b      	ldrb	r3, [r3, #12]
 8000c2c:	021b      	lsls	r3, r3, #8
 8000c2e:	b21a      	sxth	r2, r3
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000c32:	7b5b      	ldrb	r3, [r3, #13]
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	4313      	orrs	r3, r2
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <HAL_UART_RxCpltCallback+0x200>)
 8000c3e:	801a      	strh	r2, [r3, #0]
			Rotate = DataMain[14] << 8 | DataMain[15];
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000c42:	7b9b      	ldrb	r3, [r3, #14]
 8000c44:	021b      	lsls	r3, r3, #8
 8000c46:	b21a      	sxth	r2, r3
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_UART_RxCpltCallback+0x1f0>)
 8000c4a:	7bdb      	ldrb	r3, [r3, #15]
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <HAL_UART_RxCpltCallback+0x204>)
 8000c56:	801a      	strh	r2, [r3, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40013800 	.word	0x40013800
 8000c64:	20000464 	.word	0x20000464
 8000c68:	20000348 	.word	0x20000348
 8000c6c:	20000478 	.word	0x20000478
 8000c70:	20000394 	.word	0x20000394
 8000c74:	20000398 	.word	0x20000398
 8000c78:	2000039c 	.word	0x2000039c
 8000c7c:	200003a0 	.word	0x200003a0
 8000c80:	20000004 	.word	0x20000004

08000c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c84:	b5b0      	push	{r4, r5, r7, lr}
 8000c86:	b08e      	sub	sp, #56	; 0x38
 8000c88:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000c8a:	f001 f911 	bl	8001eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8e:	f000 f859 	bl	8000d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c92:	f000 f995 	bl	8000fc0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000c96:	f000 f969 	bl	8000f6c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000c9a:	f000 f899 	bl	8000dd0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c9e:	f000 f917 	bl	8000ed0 <MX_TIM3_Init>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8000ca2:	2108      	movs	r1, #8
 8000ca4:	481e      	ldr	r0, [pc, #120]	; (8000d20 <main+0x9c>)
 8000ca6:	f002 f9d5 	bl	8003054 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8000caa:	210c      	movs	r1, #12
 8000cac:	481c      	ldr	r0, [pc, #112]	; (8000d20 <main+0x9c>)
 8000cae:	f002 f9d1 	bl	8003054 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000cb2:	481c      	ldr	r0, [pc, #112]	; (8000d24 <main+0xa0>)
 8000cb4:	f002 f924 	bl	8002f00 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN 2 */
  BoardID = ID;
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <main+0xa4>)
 8000cba:	2203      	movs	r2, #3
 8000cbc:	601a      	str	r2, [r3, #0]
  while(HAL_UART_Receive_IT(&huart1, (uint8_t*)UARTRX1_Buffer, 17)!=HAL_OK){};
 8000cbe:	bf00      	nop
 8000cc0:	2211      	movs	r2, #17
 8000cc2:	491a      	ldr	r1, [pc, #104]	; (8000d2c <main+0xa8>)
 8000cc4:	481a      	ldr	r0, [pc, #104]	; (8000d30 <main+0xac>)
 8000cc6:	f003 f876 	bl	8003db6 <HAL_UART_Receive_IT>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d1f7      	bne.n	8000cc0 <main+0x3c>
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* Create the thread(s) */
  /* definition and creation of TaskPos */
  osThreadDef(TaskPos, Task_Pos, osPriorityNormal, 0, 128);
 8000cd0:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <main+0xb0>)
 8000cd2:	f107 041c 	add.w	r4, r7, #28
 8000cd6:	461d      	mov	r5, r3
 8000cd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cdc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ce0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskPosHandle = osThreadCreate(osThread(TaskPos), NULL);
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f003 fc90 	bl	8004610 <osThreadCreate>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	4a11      	ldr	r2, [pc, #68]	; (8000d38 <main+0xb4>)
 8000cf4:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskSpeed */
  osThreadDef(TaskSpeed, Task_Speed, osPriorityAboveNormal, 0, 128);
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <main+0xb8>)
 8000cf8:	463c      	mov	r4, r7
 8000cfa:	461d      	mov	r5, r3
 8000cfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskSpeedHandle = osThreadCreate(osThread(TaskSpeed), NULL);
 8000d08:	463b      	mov	r3, r7
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f003 fc7f 	bl	8004610 <osThreadCreate>
 8000d12:	4603      	mov	r3, r0
 8000d14:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <main+0xbc>)
 8000d16:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d18:	f003 fc73 	bl	8004602 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <main+0x98>
 8000d1e:	bf00      	nop
 8000d20:	200002b8 	.word	0x200002b8
 8000d24:	20000300 	.word	0x20000300
 8000d28:	20000394 	.word	0x20000394
 8000d2c:	20000464 	.word	0x20000464
 8000d30:	20000348 	.word	0x20000348
 8000d34:	08005a04 	.word	0x08005a04
 8000d38:	2000038c 	.word	0x2000038c
 8000d3c:	08005a20 	.word	0x08005a20
 8000d40:	20000390 	.word	0x20000390

08000d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b090      	sub	sp, #64	; 0x40
 8000d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4a:	f107 0318 	add.w	r3, r7, #24
 8000d4e:	2228      	movs	r2, #40	; 0x28
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f004 fe38 	bl	80059c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d66:	2301      	movs	r3, #1
 8000d68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d74:	2301      	movs	r3, #1
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d82:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d88:	f107 0318 	add.w	r3, r7, #24
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f001 fc1d 	bl	80025cc <HAL_RCC_OscConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d98:	f000 feaa 	bl	8001af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da0:	2302      	movs	r3, #2
 8000da2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2102      	movs	r1, #2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f001 fe8a 	bl	8002ad0 <HAL_RCC_ClockConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000dc2:	f000 fe95 	bl	8001af0 <Error_Handler>
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	3740      	adds	r7, #64	; 0x40
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08e      	sub	sp, #56	; 0x38
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de4:	f107 0320 	add.w	r3, r7, #32
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
 8000dfc:	615a      	str	r2, [r3, #20]
 8000dfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e00:	4b32      	ldr	r3, [pc, #200]	; (8000ecc <MX_TIM2_Init+0xfc>)
 8000e02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000e08:	4b30      	ldr	r3, [pc, #192]	; (8000ecc <MX_TIM2_Init+0xfc>)
 8000e0a:	2247      	movs	r2, #71	; 0x47
 8000e0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ecc <MX_TIM2_Init+0xfc>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000e14:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <MX_TIM2_Init+0xfc>)
 8000e16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <MX_TIM2_Init+0xfc>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e22:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <MX_TIM2_Init+0xfc>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e28:	4828      	ldr	r0, [pc, #160]	; (8000ecc <MX_TIM2_Init+0xfc>)
 8000e2a:	f002 f819 	bl	8002e60 <HAL_TIM_Base_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000e34:	f000 fe5c 	bl	8001af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e42:	4619      	mov	r1, r3
 8000e44:	4821      	ldr	r0, [pc, #132]	; (8000ecc <MX_TIM2_Init+0xfc>)
 8000e46:	f002 fb6d 	bl	8003524 <HAL_TIM_ConfigClockSource>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000e50:	f000 fe4e 	bl	8001af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e54:	481d      	ldr	r0, [pc, #116]	; (8000ecc <MX_TIM2_Init+0xfc>)
 8000e56:	f002 f8a5 	bl	8002fa4 <HAL_TIM_PWM_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000e60:	f000 fe46 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e64:	2300      	movs	r3, #0
 8000e66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e6c:	f107 0320 	add.w	r3, r7, #32
 8000e70:	4619      	mov	r1, r3
 8000e72:	4816      	ldr	r0, [pc, #88]	; (8000ecc <MX_TIM2_Init+0xfc>)
 8000e74:	f002 fee2 	bl	8003c3c <HAL_TIMEx_MasterConfigSynchronization>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000e7e:	f000 fe37 	bl	8001af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e82:	2360      	movs	r3, #96	; 0x60
 8000e84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2208      	movs	r2, #8
 8000e96:	4619      	mov	r1, r3
 8000e98:	480c      	ldr	r0, [pc, #48]	; (8000ecc <MX_TIM2_Init+0xfc>)
 8000e9a:	f002 fa85 	bl	80033a8 <HAL_TIM_PWM_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000ea4:	f000 fe24 	bl	8001af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	220c      	movs	r2, #12
 8000eac:	4619      	mov	r1, r3
 8000eae:	4807      	ldr	r0, [pc, #28]	; (8000ecc <MX_TIM2_Init+0xfc>)
 8000eb0:	f002 fa7a 	bl	80033a8 <HAL_TIM_PWM_ConfigChannel>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000eba:	f000 fe19 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ebe:	4803      	ldr	r0, [pc, #12]	; (8000ecc <MX_TIM2_Init+0xfc>)
 8000ec0:	f000 fe8c 	bl	8001bdc <HAL_TIM_MspPostInit>

}
 8000ec4:	bf00      	nop
 8000ec6:	3738      	adds	r7, #56	; 0x38
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	200002b8 	.word	0x200002b8

08000ed0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000eec:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000eee:	4a1e      	ldr	r2, [pc, #120]	; (8000f68 <MX_TIM3_Init+0x98>)
 8000ef0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000ef4:	2247      	movs	r2, #71	; 0x47
 8000ef6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000f00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f06:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f12:	4814      	ldr	r0, [pc, #80]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000f14:	f001 ffa4 	bl	8002e60 <HAL_TIM_Base_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000f1e:	f000 fde7 	bl	8001af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480d      	ldr	r0, [pc, #52]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000f30:	f002 faf8 	bl	8003524 <HAL_TIM_ConfigClockSource>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000f3a:	f000 fdd9 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f46:	463b      	mov	r3, r7
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4806      	ldr	r0, [pc, #24]	; (8000f64 <MX_TIM3_Init+0x94>)
 8000f4c:	f002 fe76 	bl	8003c3c <HAL_TIMEx_MasterConfigSynchronization>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000f56:	f000 fdcb 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000300 	.word	0x20000300
 8000f68:	40000400 	.word	0x40000400

08000f6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f72:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <MX_USART1_UART_Init+0x50>)
 8000f74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f92:	220c      	movs	r2, #12
 8000f94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_USART1_UART_Init+0x4c>)
 8000fa4:	f002 feba 	bl	8003d1c <HAL_UART_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fae:	f000 fd9f 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000348 	.word	0x20000348
 8000fbc:	40013800 	.word	0x40013800

08000fc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd4:	4b34      	ldr	r3, [pc, #208]	; (80010a8 <MX_GPIO_Init+0xe8>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a33      	ldr	r2, [pc, #204]	; (80010a8 <MX_GPIO_Init+0xe8>)
 8000fda:	f043 0320 	orr.w	r3, r3, #32
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <MX_GPIO_Init+0xe8>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0320 	and.w	r3, r3, #32
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fec:	4b2e      	ldr	r3, [pc, #184]	; (80010a8 <MX_GPIO_Init+0xe8>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a2d      	ldr	r2, [pc, #180]	; (80010a8 <MX_GPIO_Init+0xe8>)
 8000ff2:	f043 0304 	orr.w	r3, r3, #4
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <MX_GPIO_Init+0xe8>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001004:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <MX_GPIO_Init+0xe8>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a27      	ldr	r2, [pc, #156]	; (80010a8 <MX_GPIO_Init+0xe8>)
 800100a:	f043 0308 	orr.w	r3, r3, #8
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <MX_GPIO_Init+0xe8>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0308 	and.w	r3, r3, #8
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_Pin|STEP_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2130      	movs	r1, #48	; 0x30
 8001020:	4822      	ldr	r0, [pc, #136]	; (80010ac <MX_GPIO_Init+0xec>)
 8001022:	f001 faa2 	bl	800256a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR_Pin STEP_Pin */
  GPIO_InitStruct.Pin = DIR_Pin|STEP_Pin;
 8001026:	2330      	movs	r3, #48	; 0x30
 8001028:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102a:	2301      	movs	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2302      	movs	r3, #2
 8001034:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	4619      	mov	r1, r3
 800103c:	481b      	ldr	r0, [pc, #108]	; (80010ac <MX_GPIO_Init+0xec>)
 800103e:	f001 f8f9 	bl	8002234 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_DC1_Pin */
  GPIO_InitStruct.Pin = ENC_DC1_Pin;
 8001042:	2302      	movs	r3, #2
 8001044:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104a:	2301      	movs	r3, #1
 800104c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENC_DC1_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 0310 	add.w	r3, r7, #16
 8001052:	4619      	mov	r1, r3
 8001054:	4816      	ldr	r0, [pc, #88]	; (80010b0 <MX_GPIO_Init+0xf0>)
 8001056:	f001 f8ed 	bl	8002234 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_DC2_Pin */
  GPIO_InitStruct.Pin = ENC_DC2_Pin;
 800105a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800105e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_GPIO_Init+0xf4>)
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001064:	2301      	movs	r3, #1
 8001066:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENC_DC2_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	4619      	mov	r1, r3
 800106e:	4810      	ldr	r0, [pc, #64]	; (80010b0 <MX_GPIO_Init+0xf0>)
 8001070:	f001 f8e0 	bl	8002234 <HAL_GPIO_Init>

  /*Configure GPIO pin : HOME_Pin */
  GPIO_InitStruct.Pin = HOME_Pin;
 8001074:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001078:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <MX_GPIO_Init+0xf4>)
 800107c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107e:	2301      	movs	r3, #1
 8001080:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HOME_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 0310 	add.w	r3, r7, #16
 8001086:	4619      	mov	r1, r3
 8001088:	4808      	ldr	r0, [pc, #32]	; (80010ac <MX_GPIO_Init+0xec>)
 800108a:	f001 f8d3 	bl	8002234 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2105      	movs	r1, #5
 8001092:	2028      	movs	r0, #40	; 0x28
 8001094:	f000 fff3 	bl	800207e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001098:	2028      	movs	r0, #40	; 0x28
 800109a:	f001 f80c 	bl	80020b6 <HAL_NVIC_EnableIRQ>

}
 800109e:	bf00      	nop
 80010a0:	3720      	adds	r7, #32
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40010800 	.word	0x40010800
 80010b0:	40010c00 	.word	0x40010c00
 80010b4:	10110000 	.word	0x10110000

080010b8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	80fb      	strh	r3, [r7, #6]
	//Encoder DC-SPEED
	if (GPIO_Pin == ENC_DC2_Pin){
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010c8:	d111      	bne.n	80010ee <HAL_GPIO_EXTI_Callback+0x36>
		if (HAL_GPIO_ReadPin(ENC_DC1_GPIO_Port,ENC_DC1_Pin) == 0) {count1++;}
 80010ca:	2102      	movs	r1, #2
 80010cc:	480d      	ldr	r0, [pc, #52]	; (8001104 <HAL_GPIO_EXTI_Callback+0x4c>)
 80010ce:	f001 fa35 	bl	800253c <HAL_GPIO_ReadPin>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d105      	bne.n	80010e4 <HAL_GPIO_EXTI_Callback+0x2c>
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_GPIO_EXTI_Callback+0x50>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <HAL_GPIO_EXTI_Callback+0x50>)
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e004      	b.n	80010ee <HAL_GPIO_EXTI_Callback+0x36>
		else {count1--;}
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HAL_GPIO_EXTI_Callback+0x50>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	4a07      	ldr	r2, [pc, #28]	; (8001108 <HAL_GPIO_EXTI_Callback+0x50>)
 80010ec:	6013      	str	r3, [r2, #0]
	}
	if(GPIO_Pin == HOME_Pin){
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010f4:	d102      	bne.n	80010fc <HAL_GPIO_EXTI_Callback+0x44>
			home = 1;
 80010f6:	4b05      	ldr	r3, [pc, #20]	; (800110c <HAL_GPIO_EXTI_Callback+0x54>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	601a      	str	r2, [r3, #0]
		}
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40010c00 	.word	0x40010c00
 8001108:	200003a4 	.word	0x200003a4
 800110c:	200003a8 	.word	0x200003a8

08001110 <driveStep>:
int vPos;
void driveStep(){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
	int n =0;
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]

	if(angle > 500){angle = currentAngle;}
 800111a:	4b50      	ldr	r3, [pc, #320]	; (800125c <driveStep+0x14c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001122:	dd03      	ble.n	800112c <driveStep+0x1c>
 8001124:	4b4e      	ldr	r3, [pc, #312]	; (8001260 <driveStep+0x150>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a4c      	ldr	r2, [pc, #304]	; (800125c <driveStep+0x14c>)
 800112a:	6013      	str	r3, [r2, #0]
		if( currentAngle != angle ){
 800112c:	4b4c      	ldr	r3, [pc, #304]	; (8001260 <driveStep+0x150>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b4a      	ldr	r3, [pc, #296]	; (800125c <driveStep+0x14c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	f000 808d 	beq.w	8001254 <driveStep+0x144>
//			vPos = 0;
			if( currentAngle < angle){
 800113a:	4b49      	ldr	r3, [pc, #292]	; (8001260 <driveStep+0x150>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	4b47      	ldr	r3, [pc, #284]	; (800125c <driveStep+0x14c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	429a      	cmp	r2, r3
 8001144:	da25      	bge.n	8001192 <driveStep+0x82>
				HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 1);
 8001146:	2201      	movs	r2, #1
 8001148:	2110      	movs	r1, #16
 800114a:	4846      	ldr	r0, [pc, #280]	; (8001264 <driveStep+0x154>)
 800114c:	f001 fa0d 	bl	800256a <HAL_GPIO_WritePin>
				n = angle - currentAngle;
 8001150:	4b42      	ldr	r3, [pc, #264]	; (800125c <driveStep+0x14c>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b42      	ldr	r3, [pc, #264]	; (8001260 <driveStep+0x150>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	607b      	str	r3, [r7, #4]
				numstep = n/anglePerStep *3;
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff f949 	bl	80003f4 <__aeabi_i2d>
 8001162:	4b41      	ldr	r3, [pc, #260]	; (8001268 <driveStep+0x158>)
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	f7ff fad8 	bl	800071c <__aeabi_ddiv>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4610      	mov	r0, r2
 8001172:	4619      	mov	r1, r3
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	4b3c      	ldr	r3, [pc, #240]	; (800126c <driveStep+0x15c>)
 800117a:	f7ff f9a5 	bl	80004c8 <__aeabi_dmul>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	f7ff fc39 	bl	80009fc <__aeabi_d2iz>
 800118a:	4603      	mov	r3, r0
 800118c:	4a38      	ldr	r2, [pc, #224]	; (8001270 <driveStep+0x160>)
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	e031      	b.n	80011f6 <driveStep+0xe6>
			}
			else if( currentAngle > angle){
 8001192:	4b33      	ldr	r3, [pc, #204]	; (8001260 <driveStep+0x150>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	4b31      	ldr	r3, [pc, #196]	; (800125c <driveStep+0x14c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	429a      	cmp	r2, r3
 800119c:	dd2b      	ble.n	80011f6 <driveStep+0xe6>
				HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2110      	movs	r1, #16
 80011a2:	4830      	ldr	r0, [pc, #192]	; (8001264 <driveStep+0x154>)
 80011a4:	f001 f9e1 	bl	800256a <HAL_GPIO_WritePin>
				n = currentAngle - angle;
 80011a8:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <driveStep+0x150>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b2b      	ldr	r3, [pc, #172]	; (800125c <driveStep+0x14c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	607b      	str	r3, [r7, #4]
				if( angle == 0){
 80011b4:	4b29      	ldr	r3, [pc, #164]	; (800125c <driveStep+0x14c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d102      	bne.n	80011c2 <driveStep+0xb2>
					n = currentAngle;
 80011bc:	4b28      	ldr	r3, [pc, #160]	; (8001260 <driveStep+0x150>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	607b      	str	r3, [r7, #4]
				}
				numstep = n/anglePerStep *3;
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff f916 	bl	80003f4 <__aeabi_i2d>
 80011c8:	4b27      	ldr	r3, [pc, #156]	; (8001268 <driveStep+0x158>)
 80011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ce:	f7ff faa5 	bl	800071c <__aeabi_ddiv>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	4b23      	ldr	r3, [pc, #140]	; (800126c <driveStep+0x15c>)
 80011e0:	f7ff f972 	bl	80004c8 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	f7ff fc06 	bl	80009fc <__aeabi_d2iz>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <driveStep+0x160>)
 80011f4:	6013      	str	r3, [r2, #0]
			}
			for(int x = 0; x < numstep; x++) {
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]
 80011fa:	e020      	b.n	800123e <driveStep+0x12e>
				if (angle == intial_Rotate){
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <driveStep+0x14c>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <driveStep+0x164>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d107      	bne.n	8001218 <driveStep+0x108>
					if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 1){
 8001208:	f44f 7180 	mov.w	r1, #256	; 0x100
 800120c:	4815      	ldr	r0, [pc, #84]	; (8001264 <driveStep+0x154>)
 800120e:	f001 f995 	bl	800253c <HAL_GPIO_ReadPin>
 8001212:	4603      	mov	r3, r0
 8001214:	2b01      	cmp	r3, #1
 8001216:	d018      	beq.n	800124a <driveStep+0x13a>
				  }
				}
//				if ((x > 3/5*numstep)&&(x<4/5*numstep)){delay = 2;}
//				else if (x>4/5*numstep)  delay = 3;
//				else delay = 1;
				HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 1);
 8001218:	2201      	movs	r2, #1
 800121a:	2120      	movs	r1, #32
 800121c:	4811      	ldr	r0, [pc, #68]	; (8001264 <driveStep+0x154>)
 800121e:	f001 f9a4 	bl	800256a <HAL_GPIO_WritePin>
				osDelay(1);
 8001222:	2001      	movs	r0, #1
 8001224:	f003 fa40 	bl	80046a8 <osDelay>
				HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2120      	movs	r1, #32
 800122c:	480d      	ldr	r0, [pc, #52]	; (8001264 <driveStep+0x154>)
 800122e:	f001 f99c 	bl	800256a <HAL_GPIO_WritePin>
				osDelay(1);
 8001232:	2001      	movs	r0, #1
 8001234:	f003 fa38 	bl	80046a8 <osDelay>
			for(int x = 0; x < numstep; x++) {
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	603b      	str	r3, [r7, #0]
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <driveStep+0x160>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	dbd9      	blt.n	80011fc <driveStep+0xec>
 8001248:	e000      	b.n	800124c <driveStep+0x13c>
					  break;
 800124a:	bf00      	nop
			}

			currentAngle = angle;
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <driveStep+0x14c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a03      	ldr	r2, [pc, #12]	; (8001260 <driveStep+0x150>)
 8001252:	6013      	str	r3, [r2, #0]
////				  home = 1;
//				  angle = intial_Rotate;
//				  currentAngle = intial_Rotate;
//			  }
////	vPos = 1;
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000460 	.word	0x20000460
 8001260:	20000458 	.word	0x20000458
 8001264:	40010800 	.word	0x40010800
 8001268:	20000030 	.word	0x20000030
 800126c:	40080000 	.word	0x40080000
 8001270:	2000045c 	.word	0x2000045c
 8001274:	20000000 	.word	0x20000000

08001278 <findHome>:
int stp;
void findHome(){// Tim lai nha
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
		Rotate = intial_Rotate;
 800127c:	4b30      	ldr	r3, [pc, #192]	; (8001340 <findHome+0xc8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	b29a      	uxth	r2, r3
 8001282:	4b30      	ldr	r3, [pc, #192]	; (8001344 <findHome+0xcc>)
 8001284:	801a      	strh	r2, [r3, #0]
		angle = intial_Rotate;
 8001286:	4b2e      	ldr	r3, [pc, #184]	; (8001340 <findHome+0xc8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a2f      	ldr	r2, [pc, #188]	; (8001348 <findHome+0xd0>)
 800128c:	6013      	str	r3, [r2, #0]
		currentAngle = intial_Rotate;
 800128e:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <findHome+0xc8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a2e      	ldr	r2, [pc, #184]	; (800134c <findHome+0xd4>)
 8001294:	6013      	str	r3, [r2, #0]

		for (stp = 0;stp<300*3;stp++){
 8001296:	4b2e      	ldr	r3, [pc, #184]	; (8001350 <findHome+0xd8>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	e01d      	b.n	80012da <findHome+0x62>
			HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 1);
 800129e:	2201      	movs	r2, #1
 80012a0:	2110      	movs	r1, #16
 80012a2:	482c      	ldr	r0, [pc, #176]	; (8001354 <findHome+0xdc>)
 80012a4:	f001 f961 	bl	800256a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 1);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2120      	movs	r1, #32
 80012ac:	4829      	ldr	r0, [pc, #164]	; (8001354 <findHome+0xdc>)
 80012ae:	f001 f95c 	bl	800256a <HAL_GPIO_WritePin>
			osDelay(1);
 80012b2:	2001      	movs	r0, #1
 80012b4:	f003 f9f8 	bl	80046a8 <osDelay>
			HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 0);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2120      	movs	r1, #32
 80012bc:	4825      	ldr	r0, [pc, #148]	; (8001354 <findHome+0xdc>)
 80012be:	f001 f954 	bl	800256a <HAL_GPIO_WritePin>
			osDelay(1);
 80012c2:	2001      	movs	r0, #1
 80012c4:	f003 f9f0 	bl	80046a8 <osDelay>
			if (home == 1)break;
 80012c8:	4b23      	ldr	r3, [pc, #140]	; (8001358 <findHome+0xe0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d00a      	beq.n	80012e6 <findHome+0x6e>
		for (stp = 0;stp<300*3;stp++){
 80012d0:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <findHome+0xd8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	3301      	adds	r3, #1
 80012d6:	4a1e      	ldr	r2, [pc, #120]	; (8001350 <findHome+0xd8>)
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <findHome+0xd8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80012e2:	dbdc      	blt.n	800129e <findHome+0x26>
 80012e4:	e000      	b.n	80012e8 <findHome+0x70>
			if (home == 1)break;
 80012e6:	bf00      	nop
		}
		for (stp = 0;stp<200*3;stp++){
 80012e8:	4b19      	ldr	r3, [pc, #100]	; (8001350 <findHome+0xd8>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	e01d      	b.n	800132c <findHome+0xb4>
					HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2110      	movs	r1, #16
 80012f4:	4817      	ldr	r0, [pc, #92]	; (8001354 <findHome+0xdc>)
 80012f6:	f001 f938 	bl	800256a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 1);
 80012fa:	2201      	movs	r2, #1
 80012fc:	2120      	movs	r1, #32
 80012fe:	4815      	ldr	r0, [pc, #84]	; (8001354 <findHome+0xdc>)
 8001300:	f001 f933 	bl	800256a <HAL_GPIO_WritePin>
					osDelay(1);
 8001304:	2001      	movs	r0, #1
 8001306:	f003 f9cf 	bl	80046a8 <osDelay>
					HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2120      	movs	r1, #32
 800130e:	4811      	ldr	r0, [pc, #68]	; (8001354 <findHome+0xdc>)
 8001310:	f001 f92b 	bl	800256a <HAL_GPIO_WritePin>
					osDelay(1);
 8001314:	2001      	movs	r0, #1
 8001316:	f003 f9c7 	bl	80046a8 <osDelay>
					if (home == 1)break;
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <findHome+0xe0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d00a      	beq.n	8001338 <findHome+0xc0>
		for (stp = 0;stp<200*3;stp++){
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <findHome+0xd8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	3301      	adds	r3, #1
 8001328:	4a09      	ldr	r2, [pc, #36]	; (8001350 <findHome+0xd8>)
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <findHome+0xd8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001334:	dbdc      	blt.n	80012f0 <findHome+0x78>
				}



}
 8001336:	e000      	b.n	800133a <findHome+0xc2>
					if (home == 1)break;
 8001338:	bf00      	nop
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000000 	.word	0x20000000
 8001344:	20000004 	.word	0x20000004
 8001348:	20000460 	.word	0x20000460
 800134c:	20000458 	.word	0x20000458
 8001350:	2000048c 	.word	0x2000048c
 8001354:	40010800 	.word	0x40010800
 8001358:	200003a8 	.word	0x200003a8
 800135c:	00000000 	.word	0x00000000

08001360 <posControlPID>:
double udf2,uf2_p;
void posControlPID(){
 8001360:	b5b0      	push	{r4, r5, r7, lr}
 8001362:	af00      	add	r7, sp, #0

	e2 = p_target - counter2;
 8001364:	4b86      	ldr	r3, [pc, #536]	; (8001580 <posControlPID+0x220>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b86      	ldr	r3, [pc, #536]	; (8001584 <posControlPID+0x224>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff f840 	bl	80003f4 <__aeabi_i2d>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4983      	ldr	r1, [pc, #524]	; (8001588 <posControlPID+0x228>)
 800137a:	e9c1 2300 	strd	r2, r3, [r1]

	up2 = kp2*e2;
 800137e:	4b83      	ldr	r3, [pc, #524]	; (800158c <posControlPID+0x22c>)
 8001380:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001384:	4b80      	ldr	r3, [pc, #512]	; (8001588 <posControlPID+0x228>)
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	f7ff f89d 	bl	80004c8 <__aeabi_dmul>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	497f      	ldr	r1, [pc, #508]	; (8001590 <posControlPID+0x230>)
 8001394:	e9c1 2300 	strd	r2, r3, [r1]
	ud2 = kd2*(e2 - pre_e2)/0.001;
 8001398:	4b7b      	ldr	r3, [pc, #492]	; (8001588 <posControlPID+0x228>)
 800139a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800139e:	4b7d      	ldr	r3, [pc, #500]	; (8001594 <posControlPID+0x234>)
 80013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a4:	f7fe fed8 	bl	8000158 <__aeabi_dsub>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	4b79      	ldr	r3, [pc, #484]	; (8001598 <posControlPID+0x238>)
 80013b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b6:	f7ff f887 	bl	80004c8 <__aeabi_dmul>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	a36d      	add	r3, pc, #436	; (adr r3, 8001578 <posControlPID+0x218>)
 80013c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c8:	f7ff f9a8 	bl	800071c <__aeabi_ddiv>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4972      	ldr	r1, [pc, #456]	; (800159c <posControlPID+0x23c>)
 80013d2:	e9c1 2300 	strd	r2, r3, [r1]
	ui2 = ui_p2 + ki2*e2*0.001;
 80013d6:	4b72      	ldr	r3, [pc, #456]	; (80015a0 <posControlPID+0x240>)
 80013d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013dc:	4b6a      	ldr	r3, [pc, #424]	; (8001588 <posControlPID+0x228>)
 80013de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e2:	f7ff f871 	bl	80004c8 <__aeabi_dmul>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	a362      	add	r3, pc, #392	; (adr r3, 8001578 <posControlPID+0x218>)
 80013f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f4:	f7ff f868 	bl	80004c8 <__aeabi_dmul>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4610      	mov	r0, r2
 80013fe:	4619      	mov	r1, r3
 8001400:	4b68      	ldr	r3, [pc, #416]	; (80015a4 <posControlPID+0x244>)
 8001402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001406:	f7fe fea9 	bl	800015c <__adddf3>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4966      	ldr	r1, [pc, #408]	; (80015a8 <posControlPID+0x248>)
 8001410:	e9c1 2300 	strd	r2, r3, [r1]
	udf2 = (1-0.5)*uf2_p+0.5*ud2;
 8001414:	4b65      	ldr	r3, [pc, #404]	; (80015ac <posControlPID+0x24c>)
 8001416:	e9d3 0100 	ldrd	r0, r1, [r3]
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	4b64      	ldr	r3, [pc, #400]	; (80015b0 <posControlPID+0x250>)
 8001420:	f7ff f852 	bl	80004c8 <__aeabi_dmul>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4614      	mov	r4, r2
 800142a:	461d      	mov	r5, r3
 800142c:	4b5b      	ldr	r3, [pc, #364]	; (800159c <posControlPID+0x23c>)
 800142e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	4b5e      	ldr	r3, [pc, #376]	; (80015b0 <posControlPID+0x250>)
 8001438:	f7ff f846 	bl	80004c8 <__aeabi_dmul>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4620      	mov	r0, r4
 8001442:	4629      	mov	r1, r5
 8001444:	f7fe fe8a 	bl	800015c <__adddf3>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4959      	ldr	r1, [pc, #356]	; (80015b4 <posControlPID+0x254>)
 800144e:	e9c1 2300 	strd	r2, r3, [r1]

	pre_e2 = e2;
 8001452:	4b4d      	ldr	r3, [pc, #308]	; (8001588 <posControlPID+0x228>)
 8001454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001458:	494e      	ldr	r1, [pc, #312]	; (8001594 <posControlPID+0x234>)
 800145a:	e9c1 2300 	strd	r2, r3, [r1]
	ui_p2 = ui2;
 800145e:	4b52      	ldr	r3, [pc, #328]	; (80015a8 <posControlPID+0x248>)
 8001460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001464:	494f      	ldr	r1, [pc, #316]	; (80015a4 <posControlPID+0x244>)
 8001466:	e9c1 2300 	strd	r2, r3, [r1]
	uf2_p = udf2;
 800146a:	4b52      	ldr	r3, [pc, #328]	; (80015b4 <posControlPID+0x254>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	494e      	ldr	r1, [pc, #312]	; (80015ac <posControlPID+0x24c>)
 8001472:	e9c1 2300 	strd	r2, r3, [r1]

	u2 = up2 + udf2+ui2;
 8001476:	4b46      	ldr	r3, [pc, #280]	; (8001590 <posControlPID+0x230>)
 8001478:	e9d3 0100 	ldrd	r0, r1, [r3]
 800147c:	4b4d      	ldr	r3, [pc, #308]	; (80015b4 <posControlPID+0x254>)
 800147e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001482:	f7fe fe6b 	bl	800015c <__adddf3>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	4b46      	ldr	r3, [pc, #280]	; (80015a8 <posControlPID+0x248>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	f7fe fe62 	bl	800015c <__adddf3>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4946      	ldr	r1, [pc, #280]	; (80015b8 <posControlPID+0x258>)
 800149e:	e9c1 2300 	strd	r2, r3, [r1]
	if (u2>0)dir=-1;
 80014a2:	4b45      	ldr	r3, [pc, #276]	; (80015b8 <posControlPID+0x258>)
 80014a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	f7ff fa9a 	bl	80009e8 <__aeabi_dcmpgt>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d004      	beq.n	80014c4 <posControlPID+0x164>
 80014ba:	4b40      	ldr	r3, [pc, #256]	; (80015bc <posControlPID+0x25c>)
 80014bc:	f04f 32ff 	mov.w	r2, #4294967295
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	e012      	b.n	80014ea <posControlPID+0x18a>
	else if(u2<0)dir = 1;
 80014c4:	4b3c      	ldr	r3, [pc, #240]	; (80015b8 <posControlPID+0x258>)
 80014c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	f04f 0300 	mov.w	r3, #0
 80014d2:	f7ff fa6b 	bl	80009ac <__aeabi_dcmplt>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <posControlPID+0x184>
 80014dc:	4b37      	ldr	r3, [pc, #220]	; (80015bc <posControlPID+0x25c>)
 80014de:	2201      	movs	r2, #1
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	e002      	b.n	80014ea <posControlPID+0x18a>
	else dir = 0;
 80014e4:	4b35      	ldr	r3, [pc, #212]	; (80015bc <posControlPID+0x25c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
	if(u2>400)u2 =400;
 80014ea:	4b33      	ldr	r3, [pc, #204]	; (80015b8 <posControlPID+0x258>)
 80014ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	4b32      	ldr	r3, [pc, #200]	; (80015c0 <posControlPID+0x260>)
 80014f6:	f7ff fa77 	bl	80009e8 <__aeabi_dcmpgt>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d006      	beq.n	800150e <posControlPID+0x1ae>
 8001500:	492d      	ldr	r1, [pc, #180]	; (80015b8 <posControlPID+0x258>)
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	4b2e      	ldr	r3, [pc, #184]	; (80015c0 <posControlPID+0x260>)
 8001508:	e9c1 2300 	strd	r2, r3, [r1]
 800150c:	e010      	b.n	8001530 <posControlPID+0x1d0>
	else if (u2<-300)u2 =-300;
 800150e:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <posControlPID+0x258>)
 8001510:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <posControlPID+0x264>)
 800151a:	f7ff fa47 	bl	80009ac <__aeabi_dcmplt>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <posControlPID+0x1d0>
 8001524:	4924      	ldr	r1, [pc, #144]	; (80015b8 <posControlPID+0x258>)
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <posControlPID+0x264>)
 800152c:	e9c1 2300 	strd	r2, r3, [r1]
	pwm = abs(u2);
 8001530:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <posControlPID+0x258>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	f7ff fa5f 	bl	80009fc <__aeabi_d2iz>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	bfb8      	it	lt
 8001544:	425b      	neglt	r3, r3
 8001546:	4a20      	ldr	r2, [pc, #128]	; (80015c8 <posControlPID+0x268>)
 8001548:	6013      	str	r3, [r2, #0]
	if ((pwm<130)&&(e2!=0)){
 800154a:	4b1f      	ldr	r3, [pc, #124]	; (80015c8 <posControlPID+0x268>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b81      	cmp	r3, #129	; 0x81
 8001550:	dc0f      	bgt.n	8001572 <posControlPID+0x212>
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <posControlPID+0x228>)
 8001554:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	f7ff fa1a 	bl	8000998 <__aeabi_dcmpeq>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d000      	beq.n	800156c <posControlPID+0x20c>
		pwm = 130;

	}
}
 800156a:	e002      	b.n	8001572 <posControlPID+0x212>
		pwm = 130;
 800156c:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <posControlPID+0x268>)
 800156e:	2282      	movs	r2, #130	; 0x82
 8001570:	601a      	str	r2, [r3, #0]
}
 8001572:	bf00      	nop
 8001574:	bdb0      	pop	{r4, r5, r7, pc}
 8001576:	bf00      	nop
 8001578:	d2f1a9fc 	.word	0xd2f1a9fc
 800157c:	3f50624d 	.word	0x3f50624d
 8001580:	20000410 	.word	0x20000410
 8001584:	20000450 	.word	0x20000450
 8001588:	20000418 	.word	0x20000418
 800158c:	20000018 	.word	0x20000018
 8001590:	20000430 	.word	0x20000430
 8001594:	20000420 	.word	0x20000420
 8001598:	20000028 	.word	0x20000028
 800159c:	20000440 	.word	0x20000440
 80015a0:	20000020 	.word	0x20000020
 80015a4:	20000448 	.word	0x20000448
 80015a8:	20000438 	.word	0x20000438
 80015ac:	20000498 	.word	0x20000498
 80015b0:	3fe00000 	.word	0x3fe00000
 80015b4:	20000490 	.word	0x20000490
 80015b8:	20000428 	.word	0x20000428
 80015bc:	20000400 	.word	0x20000400
 80015c0:	40790000 	.word	0x40790000
 80015c4:	c072c000 	.word	0xc072c000
 80015c8:	20000404 	.word	0x20000404
 80015cc:	00000000 	.word	0x00000000

080015d0 <calculatePIDSpeed>:
double pre1;
double ui1max ,ui1min;
void calculatePIDSpeed(){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0

	e1 = v_target - v1; // tinh toan loi ty le
 80015d4:	4b62      	ldr	r3, [pc, #392]	; (8001760 <calculatePIDSpeed+0x190>)
 80015d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015da:	4b62      	ldr	r3, [pc, #392]	; (8001764 <calculatePIDSpeed+0x194>)
 80015dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e0:	f7fe fdba 	bl	8000158 <__aeabi_dsub>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	495f      	ldr	r1, [pc, #380]	; (8001768 <calculatePIDSpeed+0x198>)
 80015ea:	e9c1 2300 	strd	r2, r3, [r1]

	up1 = kp1*e1;
 80015ee:	4b5f      	ldr	r3, [pc, #380]	; (800176c <calculatePIDSpeed+0x19c>)
 80015f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f4:	4b5c      	ldr	r3, [pc, #368]	; (8001768 <calculatePIDSpeed+0x198>)
 80015f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fa:	f7fe ff65 	bl	80004c8 <__aeabi_dmul>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	495b      	ldr	r1, [pc, #364]	; (8001770 <calculatePIDSpeed+0x1a0>)
 8001604:	e9c1 2300 	strd	r2, r3, [r1]
	ui1 = ui_p1 + ki1*e1*0.001;
 8001608:	4b5a      	ldr	r3, [pc, #360]	; (8001774 <calculatePIDSpeed+0x1a4>)
 800160a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800160e:	4b56      	ldr	r3, [pc, #344]	; (8001768 <calculatePIDSpeed+0x198>)
 8001610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001614:	f7fe ff58 	bl	80004c8 <__aeabi_dmul>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	a34b      	add	r3, pc, #300	; (adr r3, 8001750 <calculatePIDSpeed+0x180>)
 8001622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001626:	f7fe ff4f 	bl	80004c8 <__aeabi_dmul>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	4b51      	ldr	r3, [pc, #324]	; (8001778 <calculatePIDSpeed+0x1a8>)
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	f7fe fd90 	bl	800015c <__adddf3>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	494e      	ldr	r1, [pc, #312]	; (800177c <calculatePIDSpeed+0x1ac>)
 8001642:	e9c1 2300 	strd	r2, r3, [r1]
	if (ui1>20)ui1 = 20;
 8001646:	4b4d      	ldr	r3, [pc, #308]	; (800177c <calculatePIDSpeed+0x1ac>)
 8001648:	e9d3 0100 	ldrd	r0, r1, [r3]
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	4b4b      	ldr	r3, [pc, #300]	; (8001780 <calculatePIDSpeed+0x1b0>)
 8001652:	f7ff f9c9 	bl	80009e8 <__aeabi_dcmpgt>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d006      	beq.n	800166a <calculatePIDSpeed+0x9a>
 800165c:	4947      	ldr	r1, [pc, #284]	; (800177c <calculatePIDSpeed+0x1ac>)
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	4b47      	ldr	r3, [pc, #284]	; (8001780 <calculatePIDSpeed+0x1b0>)
 8001664:	e9c1 2300 	strd	r2, r3, [r1]
 8001668:	e010      	b.n	800168c <calculatePIDSpeed+0xbc>
	else if(ui1<-20)ui1 = -20;
 800166a:	4b44      	ldr	r3, [pc, #272]	; (800177c <calculatePIDSpeed+0x1ac>)
 800166c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	4b43      	ldr	r3, [pc, #268]	; (8001784 <calculatePIDSpeed+0x1b4>)
 8001676:	f7ff f999 	bl	80009ac <__aeabi_dcmplt>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <calculatePIDSpeed+0xbc>
 8001680:	493e      	ldr	r1, [pc, #248]	; (800177c <calculatePIDSpeed+0x1ac>)
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	4b3f      	ldr	r3, [pc, #252]	; (8001784 <calculatePIDSpeed+0x1b4>)
 8001688:	e9c1 2300 	strd	r2, r3, [r1]
	u1 = up1  + ui1; //Tinh tong bo dieu khien
 800168c:	4b38      	ldr	r3, [pc, #224]	; (8001770 <calculatePIDSpeed+0x1a0>)
 800168e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001692:	4b3a      	ldr	r3, [pc, #232]	; (800177c <calculatePIDSpeed+0x1ac>)
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f7fe fd60 	bl	800015c <__adddf3>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4939      	ldr	r1, [pc, #228]	; (8001788 <calculatePIDSpeed+0x1b8>)
 80016a2:	e9c1 2300 	strd	r2, r3, [r1]
	pre1 = e1;
 80016a6:	4b30      	ldr	r3, [pc, #192]	; (8001768 <calculatePIDSpeed+0x198>)
 80016a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ac:	4937      	ldr	r1, [pc, #220]	; (800178c <calculatePIDSpeed+0x1bc>)
 80016ae:	e9c1 2300 	strd	r2, r3, [r1]
	ui_p1 = ui1;
 80016b2:	4b32      	ldr	r3, [pc, #200]	; (800177c <calculatePIDSpeed+0x1ac>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	492f      	ldr	r1, [pc, #188]	; (8001778 <calculatePIDSpeed+0x1a8>)
 80016ba:	e9c1 2300 	strd	r2, r3, [r1]


	if(u1 < 0) dir = 1; //bien doi chiue vong quay
 80016be:	4b32      	ldr	r3, [pc, #200]	; (8001788 <calculatePIDSpeed+0x1b8>)
 80016c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	f7ff f96e 	bl	80009ac <__aeabi_dcmplt>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <calculatePIDSpeed+0x10e>
 80016d6:	4b2e      	ldr	r3, [pc, #184]	; (8001790 <calculatePIDSpeed+0x1c0>)
 80016d8:	2201      	movs	r2, #1
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	e003      	b.n	80016e6 <calculatePIDSpeed+0x116>
	else dir = -1;
 80016de:	4b2c      	ldr	r3, [pc, #176]	; (8001790 <calculatePIDSpeed+0x1c0>)
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	601a      	str	r2, [r3, #0]


	if(u1>1000)u1 =1000;
 80016e6:	4b28      	ldr	r3, [pc, #160]	; (8001788 <calculatePIDSpeed+0x1b8>)
 80016e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	4b28      	ldr	r3, [pc, #160]	; (8001794 <calculatePIDSpeed+0x1c4>)
 80016f2:	f7ff f979 	bl	80009e8 <__aeabi_dcmpgt>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d006      	beq.n	800170a <calculatePIDSpeed+0x13a>
 80016fc:	4922      	ldr	r1, [pc, #136]	; (8001788 <calculatePIDSpeed+0x1b8>)
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	4b24      	ldr	r3, [pc, #144]	; (8001794 <calculatePIDSpeed+0x1c4>)
 8001704:	e9c1 2300 	strd	r2, r3, [r1]
 8001708:	e010      	b.n	800172c <calculatePIDSpeed+0x15c>
	else if (u1<-1000)u1 =-1000;
 800170a:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <calculatePIDSpeed+0x1b8>)
 800170c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001710:	a311      	add	r3, pc, #68	; (adr r3, 8001758 <calculatePIDSpeed+0x188>)
 8001712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001716:	f7ff f949 	bl	80009ac <__aeabi_dcmplt>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <calculatePIDSpeed+0x15c>
 8001720:	4919      	ldr	r1, [pc, #100]	; (8001788 <calculatePIDSpeed+0x1b8>)
 8001722:	a30d      	add	r3, pc, #52	; (adr r3, 8001758 <calculatePIDSpeed+0x188>)
 8001724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001728:	e9c1 2300 	strd	r2, r3, [r1]
	pwm = abs(u1);//Bao hoa xung cap
 800172c:	4b16      	ldr	r3, [pc, #88]	; (8001788 <calculatePIDSpeed+0x1b8>)
 800172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001732:	4610      	mov	r0, r2
 8001734:	4619      	mov	r1, r3
 8001736:	f7ff f961 	bl	80009fc <__aeabi_d2iz>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	bfb8      	it	lt
 8001740:	425b      	neglt	r3, r3
 8001742:	4a15      	ldr	r2, [pc, #84]	; (8001798 <calculatePIDSpeed+0x1c8>)
 8001744:	6013      	str	r3, [r2, #0]
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	f3af 8000 	nop.w
 8001750:	d2f1a9fc 	.word	0xd2f1a9fc
 8001754:	3f50624d 	.word	0x3f50624d
 8001758:	00000000 	.word	0x00000000
 800175c:	c08f4000 	.word	0xc08f4000
 8001760:	200003c8 	.word	0x200003c8
 8001764:	200003b0 	.word	0x200003b0
 8001768:	200003d0 	.word	0x200003d0
 800176c:	20000008 	.word	0x20000008
 8001770:	200003e8 	.word	0x200003e8
 8001774:	20000010 	.word	0x20000010
 8001778:	200003f8 	.word	0x200003f8
 800177c:	200003f0 	.word	0x200003f0
 8001780:	40340000 	.word	0x40340000
 8001784:	c0340000 	.word	0xc0340000
 8001788:	200003e0 	.word	0x200003e0
 800178c:	200004a0 	.word	0x200004a0
 8001790:	20000400 	.word	0x20000400
 8001794:	408f4000 	.word	0x408f4000
 8001798:	20000404 	.word	0x20000404

0800179c <ControlMotor>:
//Ham dam bao cap duong nguon xung pwm
void ControlMotor(int ChannelA, int ChannelB){
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 1000-ChannelA);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <ControlMotor+0x2c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 1000-ChannelB);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <ControlMotor+0x2c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	200002b8 	.word	0x200002b8

080017cc <driveSpeed>:
//Ham cap xung cho dong co
void driveSpeed(int dir , int pwmVal){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
	if (dir == -1){
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017dc:	d104      	bne.n	80017e8 <driveSpeed+0x1c>
		ControlMotor(pwmVal,0);
 80017de:	2100      	movs	r1, #0
 80017e0:	6838      	ldr	r0, [r7, #0]
 80017e2:	f7ff ffdb 	bl	800179c <ControlMotor>
		ControlMotor(0,pwmVal);
	}
	else{
		ControlMotor(0,0);
	}
}
 80017e6:	e00b      	b.n	8001800 <driveSpeed+0x34>
	else if (dir == 1){
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d104      	bne.n	80017f8 <driveSpeed+0x2c>
		ControlMotor(0,pwmVal);
 80017ee:	6839      	ldr	r1, [r7, #0]
 80017f0:	2000      	movs	r0, #0
 80017f2:	f7ff ffd3 	bl	800179c <ControlMotor>
}
 80017f6:	e003      	b.n	8001800 <driveSpeed+0x34>
		ControlMotor(0,0);
 80017f8:	2100      	movs	r1, #0
 80017fa:	2000      	movs	r0, #0
 80017fc:	f7ff ffce 	bl	800179c <ControlMotor>
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <Task_Pos>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_Pos */
void Task_Pos(void const * argument)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (home == 0){
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <Task_Pos+0x3c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <Task_Pos+0x16>
			findHome();
 8001818:	f7ff fd2e 	bl	8001278 <findHome>
 800181c:	e00d      	b.n	800183a <Task_Pos+0x32>

		}
		else if(home == 1){
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <Task_Pos+0x3c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d109      	bne.n	800183a <Task_Pos+0x32>
			angle = Rotate;
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <Task_Pos+0x40>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	461a      	mov	r2, r3
 800182c:	4b07      	ldr	r3, [pc, #28]	; (800184c <Task_Pos+0x44>)
 800182e:	601a      	str	r2, [r3, #0]
			driveStep();
 8001830:	f7ff fc6e 	bl	8001110 <driveStep>
			osDelay(1);
 8001834:	2001      	movs	r0, #1
 8001836:	f002 ff37 	bl	80046a8 <osDelay>
		}
    osDelay(1);
 800183a:	2001      	movs	r0, #1
 800183c:	f002 ff34 	bl	80046a8 <osDelay>
	  if (home == 0){
 8001840:	e7e6      	b.n	8001810 <Task_Pos+0x8>
 8001842:	bf00      	nop
 8001844:	200003a8 	.word	0x200003a8
 8001848:	20000004 	.word	0x20000004
 800184c:	20000460 	.word	0x20000460

08001850 <Task_Speed>:
/* USER CODE END Header_Task_Speed */
double pre_target ;
int dir_test;
int pwr;
void Task_Speed(void const * argument)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Speed */
  /* Infinite loop */
  for(;;)
  {
  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 1){
 8001858:	f44f 7180 	mov.w	r1, #256	; 0x100
 800185c:	4846      	ldr	r0, [pc, #280]	; (8001978 <Task_Speed+0x128>)
 800185e:	f000 fe6d 	bl	800253c <HAL_GPIO_ReadPin>
 8001862:	4603      	mov	r3, r0
 8001864:	2b01      	cmp	r3, #1
 8001866:	d102      	bne.n	800186e <Task_Speed+0x1e>
		  home = 1;
 8001868:	4b44      	ldr	r3, [pc, #272]	; (800197c <Task_Speed+0x12c>)
 800186a:	2201      	movs	r2, #1
 800186c:	601a      	str	r2, [r3, #0]
//		  angle = intial_Rotate;
//		  currentAngle = intial_Rotate;
	  }
  	  if (Mode != preMode){
 800186e:	4b44      	ldr	r3, [pc, #272]	; (8001980 <Task_Speed+0x130>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	4b43      	ldr	r3, [pc, #268]	; (8001984 <Task_Speed+0x134>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d005      	beq.n	8001888 <Task_Speed+0x38>
  		 count1 = 0;
 800187c:	4b42      	ldr	r3, [pc, #264]	; (8001988 <Task_Speed+0x138>)
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
  		 precount1 = 0;
 8001882:	4b42      	ldr	r3, [pc, #264]	; (800198c <Task_Speed+0x13c>)
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
  	  }
  	  if((Mode==3)&&(Rotate == intial_Rotate))
 8001888:	4b3d      	ldr	r3, [pc, #244]	; (8001980 <Task_Speed+0x130>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b03      	cmp	r3, #3
 800188e:	d10c      	bne.n	80018aa <Task_Speed+0x5a>
 8001890:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <Task_Speed+0x140>)
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	4b3f      	ldr	r3, [pc, #252]	; (8001994 <Task_Speed+0x144>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d105      	bne.n	80018aa <Task_Speed+0x5a>
  		{home = 0;
 800189e:	4b37      	ldr	r3, [pc, #220]	; (800197c <Task_Speed+0x12c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
  	  Mode = 4;}
 80018a4:	4b36      	ldr	r3, [pc, #216]	; (8001980 <Task_Speed+0x130>)
 80018a6:	2204      	movs	r2, #4
 80018a8:	701a      	strb	r2, [r3, #0]
  	  if(Mode == 0 ){
 80018aa:	4b35      	ldr	r3, [pc, #212]	; (8001980 <Task_Speed+0x130>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d11a      	bne.n	80018e8 <Task_Speed+0x98>
  			v_target  = Dir*Speed;
 80018b2:	4b39      	ldr	r3, [pc, #228]	; (8001998 <Task_Speed+0x148>)
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b38      	ldr	r3, [pc, #224]	; (800199c <Task_Speed+0x14c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	fb02 f303 	mul.w	r3, r2, r3
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fd97 	bl	80003f4 <__aeabi_i2d>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4935      	ldr	r1, [pc, #212]	; (80019a0 <Task_Speed+0x150>)
 80018cc:	e9c1 2300 	strd	r2, r3, [r1]

		calculatePIDSpeed();
 80018d0:	f7ff fe7e 	bl	80015d0 <calculatePIDSpeed>
		driveSpeed(-dir,pwm);
 80018d4:	4b33      	ldr	r3, [pc, #204]	; (80019a4 <Task_Speed+0x154>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	425b      	negs	r3, r3
 80018da:	4a33      	ldr	r2, [pc, #204]	; (80019a8 <Task_Speed+0x158>)
 80018dc:	6812      	ldr	r2, [r2, #0]
 80018de:	4611      	mov	r1, r2
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff73 	bl	80017cc <driveSpeed>
 80018e6:	e025      	b.n	8001934 <Task_Speed+0xe4>
  	  }
  	  else if(Mode == 1){
 80018e8:	4b25      	ldr	r3, [pc, #148]	; (8001980 <Task_Speed+0x130>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d114      	bne.n	800191a <Task_Speed+0xca>
			p_target  = Dir*Speed;
 80018f0:	4b29      	ldr	r3, [pc, #164]	; (8001998 <Task_Speed+0x148>)
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b29      	ldr	r3, [pc, #164]	; (800199c <Task_Speed+0x14c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	fb02 f303 	mul.w	r3, r2, r3
 80018fe:	4a2b      	ldr	r2, [pc, #172]	; (80019ac <Task_Speed+0x15c>)
 8001900:	6013      	str	r3, [r2, #0]

  		posControlPID();
 8001902:	f7ff fd2d 	bl	8001360 <posControlPID>
  		driveSpeed(-dir,pwm);
 8001906:	4b27      	ldr	r3, [pc, #156]	; (80019a4 <Task_Speed+0x154>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	425b      	negs	r3, r3
 800190c:	4a26      	ldr	r2, [pc, #152]	; (80019a8 <Task_Speed+0x158>)
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	4611      	mov	r1, r2
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff ff5a 	bl	80017cc <driveSpeed>
 8001918:	e00c      	b.n	8001934 <Task_Speed+0xe4>
  	  }
  	  else if(Mode == 2){
 800191a:	4b19      	ldr	r3, [pc, #100]	; (8001980 <Task_Speed+0x130>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d108      	bne.n	8001934 <Task_Speed+0xe4>
  		driveSpeed(-Dir,Speed);
 8001922:	4b1e      	ldr	r3, [pc, #120]	; (800199c <Task_Speed+0x14c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	425b      	negs	r3, r3
 8001928:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <Task_Speed+0x148>)
 800192a:	8812      	ldrh	r2, [r2, #0]
 800192c:	4611      	mov	r1, r2
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff ff4c 	bl	80017cc <driveSpeed>
  	  }
  	  if (v_target != pre_target){ei1 = 0;}
 8001934:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <Task_Speed+0x150>)
 8001936:	e9d3 0100 	ldrd	r0, r1, [r3]
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <Task_Speed+0x160>)
 800193c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001940:	f7ff f82a 	bl	8000998 <__aeabi_dcmpeq>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d106      	bne.n	8001958 <Task_Speed+0x108>
 800194a:	491a      	ldr	r1, [pc, #104]	; (80019b4 <Task_Speed+0x164>)
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	e9c1 2300 	strd	r2, r3, [r1]
  	  pre_target = v_target;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <Task_Speed+0x150>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	4914      	ldr	r1, [pc, #80]	; (80019b0 <Task_Speed+0x160>)
 8001960:	e9c1 2300 	strd	r2, r3, [r1]
  	  preMode = Mode;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <Task_Speed+0x130>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <Task_Speed+0x134>)
 800196c:	601a      	str	r2, [r3, #0]

    osDelay(1);
 800196e:	2001      	movs	r0, #1
 8001970:	f002 fe9a 	bl	80046a8 <osDelay>
  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 1){
 8001974:	e770      	b.n	8001858 <Task_Speed+0x8>
 8001976:	bf00      	nop
 8001978:	40010800 	.word	0x40010800
 800197c:	200003a8 	.word	0x200003a8
 8001980:	20000398 	.word	0x20000398
 8001984:	20000454 	.word	0x20000454
 8001988:	200003a4 	.word	0x200003a4
 800198c:	200003ac 	.word	0x200003ac
 8001990:	20000004 	.word	0x20000004
 8001994:	20000000 	.word	0x20000000
 8001998:	200003a0 	.word	0x200003a0
 800199c:	2000039c 	.word	0x2000039c
 80019a0:	200003c8 	.word	0x200003c8
 80019a4:	20000400 	.word	0x20000400
 80019a8:	20000404 	.word	0x20000404
 80019ac:	20000410 	.word	0x20000410
 80019b0:	200004a8 	.word	0x200004a8
 80019b4:	200003d8 	.word	0x200003d8

080019b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019b8:	b5b0      	push	{r4, r5, r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a40      	ldr	r2, [pc, #256]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d101      	bne.n	80019ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019ca:	f000 fa87 	bl	8001edc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  	counter2 = count1;
 80019ce:	4b3f      	ldr	r3, [pc, #252]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x114>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a3f      	ldr	r2, [pc, #252]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80019d4:	6013      	str	r3, [r2, #0]
	pos = count1 - precount1;
 80019d6:	4b3d      	ldr	r3, [pc, #244]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x114>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4b3e      	ldr	r3, [pc, #248]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fd07 	bl	80003f4 <__aeabi_i2d>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	493b      	ldr	r1, [pc, #236]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80019ec:	e9c1 2300 	strd	r2, r3, [r1]
	v1 = ((pos/0.001)/100)*60; //�?ổi vận tốc qua rpm,(Vận tốc ảo)
 80019f0:	4b39      	ldr	r3, [pc, #228]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80019f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019f6:	a32e      	add	r3, pc, #184	; (adr r3, 8001ab0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80019f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fc:	f7fe fe8e 	bl	800071c <__aeabi_ddiv>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	4b33      	ldr	r3, [pc, #204]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001a0e:	f7fe fe85 	bl	800071c <__aeabi_ddiv>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4610      	mov	r0, r2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	4b30      	ldr	r3, [pc, #192]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001a20:	f7fe fd52 	bl	80004c8 <__aeabi_dmul>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	492e      	ldr	r1, [pc, #184]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001a2a:	e9c1 2300 	strd	r2, r3, [r1]
	v1Filt = 0.854 * v1Filt + 0.0728 * v1 + 0.0728 * v1Prev;//Bo loc van toc thong thap
 8001a2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001a30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a34:	a320      	add	r3, pc, #128	; (adr r3, 8001ab8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3a:	f7fe fd45 	bl	80004c8 <__aeabi_dmul>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4614      	mov	r4, r2
 8001a44:	461d      	mov	r5, r3
 8001a46:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001a48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a4c:	a31c      	add	r3, pc, #112	; (adr r3, 8001ac0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a52:	f7fe fd39 	bl	80004c8 <__aeabi_dmul>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	4629      	mov	r1, r5
 8001a5e:	f7fe fb7d 	bl	800015c <__adddf3>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4614      	mov	r4, r2
 8001a68:	461d      	mov	r5, r3
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001a6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a70:	a313      	add	r3, pc, #76	; (adr r3, 8001ac0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a76:	f7fe fd27 	bl	80004c8 <__aeabi_dmul>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4620      	mov	r0, r4
 8001a80:	4629      	mov	r1, r5
 8001a82:	f7fe fb6b 	bl	800015c <__adddf3>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4917      	ldr	r1, [pc, #92]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001a8c:	e9c1 2300 	strd	r2, r3, [r1]
	v1Prev = v1; //cập nhật biến V1
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a96:	4915      	ldr	r1, [pc, #84]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001a98:	e9c1 2300 	strd	r2, r3, [r1]
	precount1 = count1;
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a0c      	ldr	r2, [pc, #48]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001aa2:	6013      	str	r3, [r2, #0]

  /* USER CODE END Callback 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8001aac:	f3af 8000 	nop.w
 8001ab0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001ab4:	3f50624d 	.word	0x3f50624d
 8001ab8:	ced91687 	.word	0xced91687
 8001abc:	3feb53f7 	.word	0x3feb53f7
 8001ac0:	532617c2 	.word	0x532617c2
 8001ac4:	3fb2a305 	.word	0x3fb2a305
 8001ac8:	40000800 	.word	0x40000800
 8001acc:	200003a4 	.word	0x200003a4
 8001ad0:	20000450 	.word	0x20000450
 8001ad4:	200003ac 	.word	0x200003ac
 8001ad8:	20000408 	.word	0x20000408
 8001adc:	40590000 	.word	0x40590000
 8001ae0:	404e0000 	.word	0x404e0000
 8001ae4:	200003b0 	.word	0x200003b0
 8001ae8:	200003b8 	.word	0x200003b8
 8001aec:	200003c0 	.word	0x200003c0

08001af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af4:	b672      	cpsid	i
}
 8001af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <Error_Handler+0x8>
	...

08001afc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b02:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <HAL_MspInit+0x68>)
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	4a17      	ldr	r2, [pc, #92]	; (8001b64 <HAL_MspInit+0x68>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6193      	str	r3, [r2, #24]
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <HAL_MspInit+0x68>)
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1a:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_MspInit+0x68>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	4a11      	ldr	r2, [pc, #68]	; (8001b64 <HAL_MspInit+0x68>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b24:	61d3      	str	r3, [r2, #28]
 8001b26:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <HAL_MspInit+0x68>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	210f      	movs	r1, #15
 8001b36:	f06f 0001 	mvn.w	r0, #1
 8001b3a:	f000 faa0 	bl	800207e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_MspInit+0x6c>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <HAL_MspInit+0x6c>)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40010000 	.word	0x40010000

08001b6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7c:	d10c      	bne.n	8001b98 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <HAL_TIM_Base_MspInit+0x68>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	4a14      	ldr	r2, [pc, #80]	; (8001bd4 <HAL_TIM_Base_MspInit+0x68>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	61d3      	str	r3, [r2, #28]
 8001b8a:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <HAL_TIM_Base_MspInit+0x68>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b96:	e018      	b.n	8001bca <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <HAL_TIM_Base_MspInit+0x6c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d113      	bne.n	8001bca <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <HAL_TIM_Base_MspInit+0x68>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <HAL_TIM_Base_MspInit+0x68>)
 8001ba8:	f043 0302 	orr.w	r3, r3, #2
 8001bac:	61d3      	str	r3, [r2, #28]
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_TIM_Base_MspInit+0x68>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2105      	movs	r1, #5
 8001bbe:	201d      	movs	r0, #29
 8001bc0:	f000 fa5d 	bl	800207e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bc4:	201d      	movs	r0, #29
 8001bc6:	f000 fa76 	bl	80020b6 <HAL_NVIC_EnableIRQ>
}
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40000400 	.word	0x40000400

08001bdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bfa:	d117      	bne.n	8001c2c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <HAL_TIM_MspPostInit+0x58>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <HAL_TIM_MspPostInit+0x58>)
 8001c02:	f043 0304 	orr.w	r3, r3, #4
 8001c06:	6193      	str	r3, [r2, #24]
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_TIM_MspPostInit+0x58>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c14:	230c      	movs	r3, #12
 8001c16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	4619      	mov	r1, r3
 8001c26:	4804      	ldr	r0, [pc, #16]	; (8001c38 <HAL_TIM_MspPostInit+0x5c>)
 8001c28:	f000 fb04 	bl	8002234 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c2c:	bf00      	nop
 8001c2e:	3720      	adds	r7, #32
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40010800 	.word	0x40010800

08001c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0310 	add.w	r3, r7, #16
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a20      	ldr	r2, [pc, #128]	; (8001cd8 <HAL_UART_MspInit+0x9c>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d139      	bne.n	8001cd0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c5c:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <HAL_UART_MspInit+0xa0>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	4a1e      	ldr	r2, [pc, #120]	; (8001cdc <HAL_UART_MspInit+0xa0>)
 8001c62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c66:	6193      	str	r3, [r2, #24]
 8001c68:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <HAL_UART_MspInit+0xa0>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c74:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <HAL_UART_MspInit+0xa0>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	4a18      	ldr	r2, [pc, #96]	; (8001cdc <HAL_UART_MspInit+0xa0>)
 8001c7a:	f043 0304 	orr.w	r3, r3, #4
 8001c7e:	6193      	str	r3, [r2, #24]
 8001c80:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <HAL_UART_MspInit+0xa0>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c96:	2303      	movs	r3, #3
 8001c98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9a:	f107 0310 	add.w	r3, r7, #16
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	480f      	ldr	r0, [pc, #60]	; (8001ce0 <HAL_UART_MspInit+0xa4>)
 8001ca2:	f000 fac7 	bl	8002234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001caa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb4:	f107 0310 	add.w	r3, r7, #16
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4809      	ldr	r0, [pc, #36]	; (8001ce0 <HAL_UART_MspInit+0xa4>)
 8001cbc:	f000 faba 	bl	8002234 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2105      	movs	r1, #5
 8001cc4:	2025      	movs	r0, #37	; 0x25
 8001cc6:	f000 f9da 	bl	800207e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cca:	2025      	movs	r0, #37	; 0x25
 8001ccc:	f000 f9f3 	bl	80020b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cd0:	bf00      	nop
 8001cd2:	3720      	adds	r7, #32
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40013800 	.word	0x40013800
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40010800 	.word	0x40010800

08001ce4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08e      	sub	sp, #56	; 0x38
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001cfa:	4b34      	ldr	r3, [pc, #208]	; (8001dcc <HAL_InitTick+0xe8>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	4a33      	ldr	r2, [pc, #204]	; (8001dcc <HAL_InitTick+0xe8>)
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	61d3      	str	r3, [r2, #28]
 8001d06:	4b31      	ldr	r3, [pc, #196]	; (8001dcc <HAL_InitTick+0xe8>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d12:	f107 0210 	add.w	r2, r7, #16
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f001 f851 	bl	8002dc4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d22:	6a3b      	ldr	r3, [r7, #32]
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d103      	bne.n	8001d34 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d2c:	f001 f822 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 8001d30:	6378      	str	r0, [r7, #52]	; 0x34
 8001d32:	e004      	b.n	8001d3e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d34:	f001 f81e 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d40:	4a23      	ldr	r2, [pc, #140]	; (8001dd0 <HAL_InitTick+0xec>)
 8001d42:	fba2 2303 	umull	r2, r3, r2, r3
 8001d46:	0c9b      	lsrs	r3, r3, #18
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001d4c:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <HAL_InitTick+0xf0>)
 8001d4e:	4a22      	ldr	r2, [pc, #136]	; (8001dd8 <HAL_InitTick+0xf4>)
 8001d50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001d52:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <HAL_InitTick+0xf0>)
 8001d54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d58:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001d5a:	4a1e      	ldr	r2, [pc, #120]	; (8001dd4 <HAL_InitTick+0xf0>)
 8001d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001d60:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <HAL_InitTick+0xf0>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d66:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <HAL_InitTick+0xf0>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6c:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_InitTick+0xf0>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001d72:	4818      	ldr	r0, [pc, #96]	; (8001dd4 <HAL_InitTick+0xf0>)
 8001d74:	f001 f874 	bl	8002e60 <HAL_TIM_Base_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001d7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d11b      	bne.n	8001dbe <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001d86:	4813      	ldr	r0, [pc, #76]	; (8001dd4 <HAL_InitTick+0xf0>)
 8001d88:	f001 f8ba 	bl	8002f00 <HAL_TIM_Base_Start_IT>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001d92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d111      	bne.n	8001dbe <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d9a:	201e      	movs	r0, #30
 8001d9c:	f000 f98b 	bl	80020b6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b0f      	cmp	r3, #15
 8001da4:	d808      	bhi.n	8001db8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001da6:	2200      	movs	r2, #0
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	201e      	movs	r0, #30
 8001dac:	f000 f967 	bl	800207e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001db0:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <HAL_InitTick+0xf8>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	e002      	b.n	8001dbe <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001dbe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3738      	adds	r7, #56	; 0x38
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	431bde83 	.word	0x431bde83
 8001dd4:	200004b0 	.word	0x200004b0
 8001dd8:	40000800 	.word	0x40000800
 8001ddc:	2000003c 	.word	0x2000003c

08001de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <NMI_Handler+0x4>

08001de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dea:	e7fe      	b.n	8001dea <HardFault_Handler+0x4>

08001dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df0:	e7fe      	b.n	8001df0 <MemManage_Handler+0x4>

08001df2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df6:	e7fe      	b.n	8001df6 <BusFault_Handler+0x4>

08001df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <UsageFault_Handler+0x4>

08001dfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr
	...

08001e0c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <TIM3_IRQHandler+0x10>)
 8001e12:	f001 f9c1 	bl	8003198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000300 	.word	0x20000300

08001e20 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <TIM4_IRQHandler+0x10>)
 8001e26:	f001 f9b7 	bl	8003198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200004b0 	.word	0x200004b0

08001e34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <USART1_IRQHandler+0x10>)
 8001e3a:	f001 ffed 	bl	8003e18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000348 	.word	0x20000348

08001e48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_DC2_Pin);
 8001e4c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001e50:	f000 fba4 	bl	800259c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e64:	480c      	ldr	r0, [pc, #48]	; (8001e98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e66:	490d      	ldr	r1, [pc, #52]	; (8001e9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e68:	4a0d      	ldr	r2, [pc, #52]	; (8001ea0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e6c:	e002      	b.n	8001e74 <LoopCopyDataInit>

08001e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e72:	3304      	adds	r3, #4

08001e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e78:	d3f9      	bcc.n	8001e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e7c:	4c0a      	ldr	r4, [pc, #40]	; (8001ea8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e80:	e001      	b.n	8001e86 <LoopFillZerobss>

08001e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e84:	3204      	adds	r2, #4

08001e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e88:	d3fb      	bcc.n	8001e82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e8a:	f7ff ffe5 	bl	8001e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e8e:	f003 fd77 	bl	8005980 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e92:	f7fe fef7 	bl	8000c84 <main>
  bx lr
 8001e96:	4770      	bx	lr
  ldr r0, =_sdata
 8001e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e9c:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8001ea0:	08005a74 	.word	0x08005a74
  ldr r2, =_sbss
 8001ea4:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8001ea8:	20001248 	.word	0x20001248

08001eac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001eac:	e7fe      	b.n	8001eac <ADC1_2_IRQHandler>
	...

08001eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb4:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <HAL_Init+0x28>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a07      	ldr	r2, [pc, #28]	; (8001ed8 <HAL_Init+0x28>)
 8001eba:	f043 0310 	orr.w	r3, r3, #16
 8001ebe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec0:	2003      	movs	r0, #3
 8001ec2:	f000 f8d1 	bl	8002068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ec6:	200f      	movs	r0, #15
 8001ec8:	f7ff ff0c 	bl	8001ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ecc:	f7ff fe16 	bl	8001afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40022000 	.word	0x40022000

08001edc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <HAL_IncTick+0x1c>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_IncTick+0x20>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4413      	add	r3, r2
 8001eec:	4a03      	ldr	r2, [pc, #12]	; (8001efc <HAL_IncTick+0x20>)
 8001eee:	6013      	str	r3, [r2, #0]
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr
 8001ef8:	20000040 	.word	0x20000040
 8001efc:	200004f8 	.word	0x200004f8

08001f00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return uwTick;
 8001f04:	4b02      	ldr	r3, [pc, #8]	; (8001f10 <HAL_GetTick+0x10>)
 8001f06:	681b      	ldr	r3, [r3, #0]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr
 8001f10:	200004f8 	.word	0x200004f8

08001f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f30:	4013      	ands	r3, r2
 8001f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f46:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	60d3      	str	r3, [r2, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <__NVIC_GetPriorityGrouping+0x18>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	f003 0307 	and.w	r3, r3, #7
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	db0b      	blt.n	8001fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	f003 021f 	and.w	r2, r3, #31
 8001f90:	4906      	ldr	r1, [pc, #24]	; (8001fac <__NVIC_EnableIRQ+0x34>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	2001      	movs	r0, #1
 8001f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr
 8001fac:	e000e100 	.word	0xe000e100

08001fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	6039      	str	r1, [r7, #0]
 8001fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	db0a      	blt.n	8001fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	490c      	ldr	r1, [pc, #48]	; (8001ffc <__NVIC_SetPriority+0x4c>)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	0112      	lsls	r2, r2, #4
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd8:	e00a      	b.n	8001ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	4908      	ldr	r1, [pc, #32]	; (8002000 <__NVIC_SetPriority+0x50>)
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	3b04      	subs	r3, #4
 8001fe8:	0112      	lsls	r2, r2, #4
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	440b      	add	r3, r1
 8001fee:	761a      	strb	r2, [r3, #24]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	e000e100 	.word	0xe000e100
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002004:	b480      	push	{r7}
 8002006:	b089      	sub	sp, #36	; 0x24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f1c3 0307 	rsb	r3, r3, #7
 800201e:	2b04      	cmp	r3, #4
 8002020:	bf28      	it	cs
 8002022:	2304      	movcs	r3, #4
 8002024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3304      	adds	r3, #4
 800202a:	2b06      	cmp	r3, #6
 800202c:	d902      	bls.n	8002034 <NVIC_EncodePriority+0x30>
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3b03      	subs	r3, #3
 8002032:	e000      	b.n	8002036 <NVIC_EncodePriority+0x32>
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	f04f 32ff 	mov.w	r2, #4294967295
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43da      	mvns	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	401a      	ands	r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800204c:	f04f 31ff 	mov.w	r1, #4294967295
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	43d9      	mvns	r1, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	4313      	orrs	r3, r2
         );
}
 800205e:	4618      	mov	r0, r3
 8002060:	3724      	adds	r7, #36	; 0x24
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff ff4f 	bl	8001f14 <__NVIC_SetPriorityGrouping>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	4603      	mov	r3, r0
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002090:	f7ff ff64 	bl	8001f5c <__NVIC_GetPriorityGrouping>
 8002094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	6978      	ldr	r0, [r7, #20]
 800209c:	f7ff ffb2 	bl	8002004 <NVIC_EncodePriority>
 80020a0:	4602      	mov	r2, r0
 80020a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff81 	bl	8001fb0 <__NVIC_SetPriority>
}
 80020ae:	bf00      	nop
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff57 	bl	8001f78 <__NVIC_EnableIRQ>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b085      	sub	sp, #20
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d008      	beq.n	80020fa <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2204      	movs	r2, #4
 80020ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e020      	b.n	800213c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 020e 	bic.w	r2, r2, #14
 8002108:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0201 	bic.w	r2, r2, #1
 8002118:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002122:	2101      	movs	r1, #1
 8002124:	fa01 f202 	lsl.w	r2, r1, r2
 8002128:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800213a:	7bfb      	ldrb	r3, [r7, #15]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr
	...

08002148 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800215a:	2b02      	cmp	r3, #2
 800215c:	d005      	beq.n	800216a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2204      	movs	r2, #4
 8002162:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	73fb      	strb	r3, [r7, #15]
 8002168:	e051      	b.n	800220e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 020e 	bic.w	r2, r2, #14
 8002178:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0201 	bic.w	r2, r2, #1
 8002188:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a22      	ldr	r2, [pc, #136]	; (8002218 <HAL_DMA_Abort_IT+0xd0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d029      	beq.n	80021e8 <HAL_DMA_Abort_IT+0xa0>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a20      	ldr	r2, [pc, #128]	; (800221c <HAL_DMA_Abort_IT+0xd4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d022      	beq.n	80021e4 <HAL_DMA_Abort_IT+0x9c>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a1f      	ldr	r2, [pc, #124]	; (8002220 <HAL_DMA_Abort_IT+0xd8>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d01a      	beq.n	80021de <HAL_DMA_Abort_IT+0x96>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a1d      	ldr	r2, [pc, #116]	; (8002224 <HAL_DMA_Abort_IT+0xdc>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d012      	beq.n	80021d8 <HAL_DMA_Abort_IT+0x90>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a1c      	ldr	r2, [pc, #112]	; (8002228 <HAL_DMA_Abort_IT+0xe0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d00a      	beq.n	80021d2 <HAL_DMA_Abort_IT+0x8a>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a1a      	ldr	r2, [pc, #104]	; (800222c <HAL_DMA_Abort_IT+0xe4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d102      	bne.n	80021cc <HAL_DMA_Abort_IT+0x84>
 80021c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021ca:	e00e      	b.n	80021ea <HAL_DMA_Abort_IT+0xa2>
 80021cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021d0:	e00b      	b.n	80021ea <HAL_DMA_Abort_IT+0xa2>
 80021d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021d6:	e008      	b.n	80021ea <HAL_DMA_Abort_IT+0xa2>
 80021d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021dc:	e005      	b.n	80021ea <HAL_DMA_Abort_IT+0xa2>
 80021de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e2:	e002      	b.n	80021ea <HAL_DMA_Abort_IT+0xa2>
 80021e4:	2310      	movs	r3, #16
 80021e6:	e000      	b.n	80021ea <HAL_DMA_Abort_IT+0xa2>
 80021e8:	2301      	movs	r3, #1
 80021ea:	4a11      	ldr	r2, [pc, #68]	; (8002230 <HAL_DMA_Abort_IT+0xe8>)
 80021ec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	4798      	blx	r3
    } 
  }
  return status;
 800220e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40020008 	.word	0x40020008
 800221c:	4002001c 	.word	0x4002001c
 8002220:	40020030 	.word	0x40020030
 8002224:	40020044 	.word	0x40020044
 8002228:	40020058 	.word	0x40020058
 800222c:	4002006c 	.word	0x4002006c
 8002230:	40020000 	.word	0x40020000

08002234 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002234:	b480      	push	{r7}
 8002236:	b08b      	sub	sp, #44	; 0x2c
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800223e:	2300      	movs	r3, #0
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002242:	2300      	movs	r3, #0
 8002244:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002246:	e169      	b.n	800251c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002248:	2201      	movs	r2, #1
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	69fa      	ldr	r2, [r7, #28]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	429a      	cmp	r2, r3
 8002262:	f040 8158 	bne.w	8002516 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4a9a      	ldr	r2, [pc, #616]	; (80024d4 <HAL_GPIO_Init+0x2a0>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d05e      	beq.n	800232e <HAL_GPIO_Init+0xfa>
 8002270:	4a98      	ldr	r2, [pc, #608]	; (80024d4 <HAL_GPIO_Init+0x2a0>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d875      	bhi.n	8002362 <HAL_GPIO_Init+0x12e>
 8002276:	4a98      	ldr	r2, [pc, #608]	; (80024d8 <HAL_GPIO_Init+0x2a4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d058      	beq.n	800232e <HAL_GPIO_Init+0xfa>
 800227c:	4a96      	ldr	r2, [pc, #600]	; (80024d8 <HAL_GPIO_Init+0x2a4>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d86f      	bhi.n	8002362 <HAL_GPIO_Init+0x12e>
 8002282:	4a96      	ldr	r2, [pc, #600]	; (80024dc <HAL_GPIO_Init+0x2a8>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d052      	beq.n	800232e <HAL_GPIO_Init+0xfa>
 8002288:	4a94      	ldr	r2, [pc, #592]	; (80024dc <HAL_GPIO_Init+0x2a8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d869      	bhi.n	8002362 <HAL_GPIO_Init+0x12e>
 800228e:	4a94      	ldr	r2, [pc, #592]	; (80024e0 <HAL_GPIO_Init+0x2ac>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d04c      	beq.n	800232e <HAL_GPIO_Init+0xfa>
 8002294:	4a92      	ldr	r2, [pc, #584]	; (80024e0 <HAL_GPIO_Init+0x2ac>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d863      	bhi.n	8002362 <HAL_GPIO_Init+0x12e>
 800229a:	4a92      	ldr	r2, [pc, #584]	; (80024e4 <HAL_GPIO_Init+0x2b0>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d046      	beq.n	800232e <HAL_GPIO_Init+0xfa>
 80022a0:	4a90      	ldr	r2, [pc, #576]	; (80024e4 <HAL_GPIO_Init+0x2b0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d85d      	bhi.n	8002362 <HAL_GPIO_Init+0x12e>
 80022a6:	2b12      	cmp	r3, #18
 80022a8:	d82a      	bhi.n	8002300 <HAL_GPIO_Init+0xcc>
 80022aa:	2b12      	cmp	r3, #18
 80022ac:	d859      	bhi.n	8002362 <HAL_GPIO_Init+0x12e>
 80022ae:	a201      	add	r2, pc, #4	; (adr r2, 80022b4 <HAL_GPIO_Init+0x80>)
 80022b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b4:	0800232f 	.word	0x0800232f
 80022b8:	08002309 	.word	0x08002309
 80022bc:	0800231b 	.word	0x0800231b
 80022c0:	0800235d 	.word	0x0800235d
 80022c4:	08002363 	.word	0x08002363
 80022c8:	08002363 	.word	0x08002363
 80022cc:	08002363 	.word	0x08002363
 80022d0:	08002363 	.word	0x08002363
 80022d4:	08002363 	.word	0x08002363
 80022d8:	08002363 	.word	0x08002363
 80022dc:	08002363 	.word	0x08002363
 80022e0:	08002363 	.word	0x08002363
 80022e4:	08002363 	.word	0x08002363
 80022e8:	08002363 	.word	0x08002363
 80022ec:	08002363 	.word	0x08002363
 80022f0:	08002363 	.word	0x08002363
 80022f4:	08002363 	.word	0x08002363
 80022f8:	08002311 	.word	0x08002311
 80022fc:	08002325 	.word	0x08002325
 8002300:	4a79      	ldr	r2, [pc, #484]	; (80024e8 <HAL_GPIO_Init+0x2b4>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d013      	beq.n	800232e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002306:	e02c      	b.n	8002362 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	623b      	str	r3, [r7, #32]
          break;
 800230e:	e029      	b.n	8002364 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	3304      	adds	r3, #4
 8002316:	623b      	str	r3, [r7, #32]
          break;
 8002318:	e024      	b.n	8002364 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	3308      	adds	r3, #8
 8002320:	623b      	str	r3, [r7, #32]
          break;
 8002322:	e01f      	b.n	8002364 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	330c      	adds	r3, #12
 800232a:	623b      	str	r3, [r7, #32]
          break;
 800232c:	e01a      	b.n	8002364 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d102      	bne.n	800233c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002336:	2304      	movs	r3, #4
 8002338:	623b      	str	r3, [r7, #32]
          break;
 800233a:	e013      	b.n	8002364 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d105      	bne.n	8002350 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002344:	2308      	movs	r3, #8
 8002346:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69fa      	ldr	r2, [r7, #28]
 800234c:	611a      	str	r2, [r3, #16]
          break;
 800234e:	e009      	b.n	8002364 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002350:	2308      	movs	r3, #8
 8002352:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69fa      	ldr	r2, [r7, #28]
 8002358:	615a      	str	r2, [r3, #20]
          break;
 800235a:	e003      	b.n	8002364 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800235c:	2300      	movs	r3, #0
 800235e:	623b      	str	r3, [r7, #32]
          break;
 8002360:	e000      	b.n	8002364 <HAL_GPIO_Init+0x130>
          break;
 8002362:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	2bff      	cmp	r3, #255	; 0xff
 8002368:	d801      	bhi.n	800236e <HAL_GPIO_Init+0x13a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	e001      	b.n	8002372 <HAL_GPIO_Init+0x13e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3304      	adds	r3, #4
 8002372:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	2bff      	cmp	r3, #255	; 0xff
 8002378:	d802      	bhi.n	8002380 <HAL_GPIO_Init+0x14c>
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	e002      	b.n	8002386 <HAL_GPIO_Init+0x152>
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	3b08      	subs	r3, #8
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	210f      	movs	r1, #15
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	fa01 f303 	lsl.w	r3, r1, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	401a      	ands	r2, r3
 8002398:	6a39      	ldr	r1, [r7, #32]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	fa01 f303 	lsl.w	r3, r1, r3
 80023a0:	431a      	orrs	r2, r3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 80b1 	beq.w	8002516 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023b4:	4b4d      	ldr	r3, [pc, #308]	; (80024ec <HAL_GPIO_Init+0x2b8>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	4a4c      	ldr	r2, [pc, #304]	; (80024ec <HAL_GPIO_Init+0x2b8>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	6193      	str	r3, [r2, #24]
 80023c0:	4b4a      	ldr	r3, [pc, #296]	; (80024ec <HAL_GPIO_Init+0x2b8>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023cc:	4a48      	ldr	r2, [pc, #288]	; (80024f0 <HAL_GPIO_Init+0x2bc>)
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	089b      	lsrs	r3, r3, #2
 80023d2:	3302      	adds	r3, #2
 80023d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	220f      	movs	r2, #15
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4013      	ands	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a40      	ldr	r2, [pc, #256]	; (80024f4 <HAL_GPIO_Init+0x2c0>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d013      	beq.n	8002420 <HAL_GPIO_Init+0x1ec>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a3f      	ldr	r2, [pc, #252]	; (80024f8 <HAL_GPIO_Init+0x2c4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d00d      	beq.n	800241c <HAL_GPIO_Init+0x1e8>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a3e      	ldr	r2, [pc, #248]	; (80024fc <HAL_GPIO_Init+0x2c8>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d007      	beq.n	8002418 <HAL_GPIO_Init+0x1e4>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a3d      	ldr	r2, [pc, #244]	; (8002500 <HAL_GPIO_Init+0x2cc>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d101      	bne.n	8002414 <HAL_GPIO_Init+0x1e0>
 8002410:	2303      	movs	r3, #3
 8002412:	e006      	b.n	8002422 <HAL_GPIO_Init+0x1ee>
 8002414:	2304      	movs	r3, #4
 8002416:	e004      	b.n	8002422 <HAL_GPIO_Init+0x1ee>
 8002418:	2302      	movs	r3, #2
 800241a:	e002      	b.n	8002422 <HAL_GPIO_Init+0x1ee>
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <HAL_GPIO_Init+0x1ee>
 8002420:	2300      	movs	r3, #0
 8002422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002424:	f002 0203 	and.w	r2, r2, #3
 8002428:	0092      	lsls	r2, r2, #2
 800242a:	4093      	lsls	r3, r2
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002432:	492f      	ldr	r1, [pc, #188]	; (80024f0 <HAL_GPIO_Init+0x2bc>)
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	089b      	lsrs	r3, r3, #2
 8002438:	3302      	adds	r3, #2
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d006      	beq.n	800245a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800244c:	4b2d      	ldr	r3, [pc, #180]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	492c      	ldr	r1, [pc, #176]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	4313      	orrs	r3, r2
 8002456:	600b      	str	r3, [r1, #0]
 8002458:	e006      	b.n	8002468 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800245a:	4b2a      	ldr	r3, [pc, #168]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	43db      	mvns	r3, r3
 8002462:	4928      	ldr	r1, [pc, #160]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 8002464:	4013      	ands	r3, r2
 8002466:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d006      	beq.n	8002482 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002474:	4b23      	ldr	r3, [pc, #140]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	4922      	ldr	r1, [pc, #136]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	604b      	str	r3, [r1, #4]
 8002480:	e006      	b.n	8002490 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002482:	4b20      	ldr	r3, [pc, #128]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	43db      	mvns	r3, r3
 800248a:	491e      	ldr	r1, [pc, #120]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 800248c:	4013      	ands	r3, r2
 800248e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d006      	beq.n	80024aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800249c:	4b19      	ldr	r3, [pc, #100]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	4918      	ldr	r1, [pc, #96]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	608b      	str	r3, [r1, #8]
 80024a8:	e006      	b.n	80024b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024aa:	4b16      	ldr	r3, [pc, #88]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	4914      	ldr	r1, [pc, #80]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d021      	beq.n	8002508 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024c4:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	490e      	ldr	r1, [pc, #56]	; (8002504 <HAL_GPIO_Init+0x2d0>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	60cb      	str	r3, [r1, #12]
 80024d0:	e021      	b.n	8002516 <HAL_GPIO_Init+0x2e2>
 80024d2:	bf00      	nop
 80024d4:	10320000 	.word	0x10320000
 80024d8:	10310000 	.word	0x10310000
 80024dc:	10220000 	.word	0x10220000
 80024e0:	10210000 	.word	0x10210000
 80024e4:	10120000 	.word	0x10120000
 80024e8:	10110000 	.word	0x10110000
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40010000 	.word	0x40010000
 80024f4:	40010800 	.word	0x40010800
 80024f8:	40010c00 	.word	0x40010c00
 80024fc:	40011000 	.word	0x40011000
 8002500:	40011400 	.word	0x40011400
 8002504:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002508:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <HAL_GPIO_Init+0x304>)
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	43db      	mvns	r3, r3
 8002510:	4909      	ldr	r1, [pc, #36]	; (8002538 <HAL_GPIO_Init+0x304>)
 8002512:	4013      	ands	r3, r2
 8002514:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	3301      	adds	r3, #1
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	fa22 f303 	lsr.w	r3, r2, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	f47f ae8e 	bne.w	8002248 <HAL_GPIO_Init+0x14>
  }
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	372c      	adds	r7, #44	; 0x2c
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	40010400 	.word	0x40010400

0800253c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	887b      	ldrh	r3, [r7, #2]
 800254e:	4013      	ands	r3, r2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
 8002558:	e001      	b.n	800255e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800255a:	2300      	movs	r3, #0
 800255c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800255e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr

0800256a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	460b      	mov	r3, r1
 8002574:	807b      	strh	r3, [r7, #2]
 8002576:	4613      	mov	r3, r2
 8002578:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800257a:	787b      	ldrb	r3, [r7, #1]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002580:	887a      	ldrh	r2, [r7, #2]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002586:	e003      	b.n	8002590 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002588:	887b      	ldrh	r3, [r7, #2]
 800258a:	041a      	lsls	r2, r3, #16
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	611a      	str	r2, [r3, #16]
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr
	...

0800259c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025a8:	695a      	ldr	r2, [r3, #20]
 80025aa:	88fb      	ldrh	r3, [r7, #6]
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d006      	beq.n	80025c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025b2:	4a05      	ldr	r2, [pc, #20]	; (80025c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025b4:	88fb      	ldrh	r3, [r7, #6]
 80025b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025b8:	88fb      	ldrh	r3, [r7, #6]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe fd7c 	bl	80010b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40010400 	.word	0x40010400

080025cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e272      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8087 	beq.w	80026fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025ec:	4b92      	ldr	r3, [pc, #584]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d00c      	beq.n	8002612 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025f8:	4b8f      	ldr	r3, [pc, #572]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b08      	cmp	r3, #8
 8002602:	d112      	bne.n	800262a <HAL_RCC_OscConfig+0x5e>
 8002604:	4b8c      	ldr	r3, [pc, #560]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800260c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002610:	d10b      	bne.n	800262a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002612:	4b89      	ldr	r3, [pc, #548]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d06c      	beq.n	80026f8 <HAL_RCC_OscConfig+0x12c>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d168      	bne.n	80026f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e24c      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002632:	d106      	bne.n	8002642 <HAL_RCC_OscConfig+0x76>
 8002634:	4b80      	ldr	r3, [pc, #512]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a7f      	ldr	r2, [pc, #508]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 800263a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	e02e      	b.n	80026a0 <HAL_RCC_OscConfig+0xd4>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0x98>
 800264a:	4b7b      	ldr	r3, [pc, #492]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a7a      	ldr	r2, [pc, #488]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	4b78      	ldr	r3, [pc, #480]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a77      	ldr	r2, [pc, #476]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 800265c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e01d      	b.n	80026a0 <HAL_RCC_OscConfig+0xd4>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800266c:	d10c      	bne.n	8002688 <HAL_RCC_OscConfig+0xbc>
 800266e:	4b72      	ldr	r3, [pc, #456]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a71      	ldr	r2, [pc, #452]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	4b6f      	ldr	r3, [pc, #444]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a6e      	ldr	r2, [pc, #440]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e00b      	b.n	80026a0 <HAL_RCC_OscConfig+0xd4>
 8002688:	4b6b      	ldr	r3, [pc, #428]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a6a      	ldr	r2, [pc, #424]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 800268e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	4b68      	ldr	r3, [pc, #416]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a67      	ldr	r2, [pc, #412]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 800269a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800269e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d013      	beq.n	80026d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a8:	f7ff fc2a 	bl	8001f00 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b0:	f7ff fc26 	bl	8001f00 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b64      	cmp	r3, #100	; 0x64
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e200      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c2:	4b5d      	ldr	r3, [pc, #372]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0xe4>
 80026ce:	e014      	b.n	80026fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7ff fc16 	bl	8001f00 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d8:	f7ff fc12 	bl	8001f00 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	; 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e1ec      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ea:	4b53      	ldr	r3, [pc, #332]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0x10c>
 80026f6:	e000      	b.n	80026fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d063      	beq.n	80027ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002706:	4b4c      	ldr	r3, [pc, #304]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00b      	beq.n	800272a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002712:	4b49      	ldr	r3, [pc, #292]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b08      	cmp	r3, #8
 800271c:	d11c      	bne.n	8002758 <HAL_RCC_OscConfig+0x18c>
 800271e:	4b46      	ldr	r3, [pc, #280]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d116      	bne.n	8002758 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272a:	4b43      	ldr	r3, [pc, #268]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <HAL_RCC_OscConfig+0x176>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d001      	beq.n	8002742 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e1c0      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002742:	4b3d      	ldr	r3, [pc, #244]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4939      	ldr	r1, [pc, #228]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002756:	e03a      	b.n	80027ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d020      	beq.n	80027a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002760:	4b36      	ldr	r3, [pc, #216]	; (800283c <HAL_RCC_OscConfig+0x270>)
 8002762:	2201      	movs	r2, #1
 8002764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002766:	f7ff fbcb 	bl	8001f00 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800276e:	f7ff fbc7 	bl	8001f00 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e1a1      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002780:	4b2d      	ldr	r3, [pc, #180]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278c:	4b2a      	ldr	r3, [pc, #168]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4927      	ldr	r1, [pc, #156]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 800279c:	4313      	orrs	r3, r2
 800279e:	600b      	str	r3, [r1, #0]
 80027a0:	e015      	b.n	80027ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a2:	4b26      	ldr	r3, [pc, #152]	; (800283c <HAL_RCC_OscConfig+0x270>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a8:	f7ff fbaa 	bl	8001f00 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b0:	f7ff fba6 	bl	8001f00 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e180      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c2:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d03a      	beq.n	8002850 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d019      	beq.n	8002816 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e2:	4b17      	ldr	r3, [pc, #92]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e8:	f7ff fb8a 	bl	8001f00 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f0:	f7ff fb86 	bl	8001f00 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e160      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002802:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <HAL_RCC_OscConfig+0x26c>)
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800280e:	2001      	movs	r0, #1
 8002810:	f000 fb08 	bl	8002e24 <RCC_Delay>
 8002814:	e01c      	b.n	8002850 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002816:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <HAL_RCC_OscConfig+0x274>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281c:	f7ff fb70 	bl	8001f00 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002822:	e00f      	b.n	8002844 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002824:	f7ff fb6c 	bl	8001f00 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d908      	bls.n	8002844 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e146      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
 800283c:	42420000 	.word	0x42420000
 8002840:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002844:	4b92      	ldr	r3, [pc, #584]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1e9      	bne.n	8002824 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 80a6 	beq.w	80029aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800285e:	2300      	movs	r3, #0
 8002860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002862:	4b8b      	ldr	r3, [pc, #556]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10d      	bne.n	800288a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800286e:	4b88      	ldr	r3, [pc, #544]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	4a87      	ldr	r2, [pc, #540]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002878:	61d3      	str	r3, [r2, #28]
 800287a:	4b85      	ldr	r3, [pc, #532]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002886:	2301      	movs	r3, #1
 8002888:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288a:	4b82      	ldr	r3, [pc, #520]	; (8002a94 <HAL_RCC_OscConfig+0x4c8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002892:	2b00      	cmp	r3, #0
 8002894:	d118      	bne.n	80028c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002896:	4b7f      	ldr	r3, [pc, #508]	; (8002a94 <HAL_RCC_OscConfig+0x4c8>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a7e      	ldr	r2, [pc, #504]	; (8002a94 <HAL_RCC_OscConfig+0x4c8>)
 800289c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a2:	f7ff fb2d 	bl	8001f00 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028aa:	f7ff fb29 	bl	8001f00 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b64      	cmp	r3, #100	; 0x64
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e103      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028bc:	4b75      	ldr	r3, [pc, #468]	; (8002a94 <HAL_RCC_OscConfig+0x4c8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d106      	bne.n	80028de <HAL_RCC_OscConfig+0x312>
 80028d0:	4b6f      	ldr	r3, [pc, #444]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	4a6e      	ldr	r2, [pc, #440]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	6213      	str	r3, [r2, #32]
 80028dc:	e02d      	b.n	800293a <HAL_RCC_OscConfig+0x36e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10c      	bne.n	8002900 <HAL_RCC_OscConfig+0x334>
 80028e6:	4b6a      	ldr	r3, [pc, #424]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	4a69      	ldr	r2, [pc, #420]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	6213      	str	r3, [r2, #32]
 80028f2:	4b67      	ldr	r3, [pc, #412]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	4a66      	ldr	r2, [pc, #408]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	f023 0304 	bic.w	r3, r3, #4
 80028fc:	6213      	str	r3, [r2, #32]
 80028fe:	e01c      	b.n	800293a <HAL_RCC_OscConfig+0x36e>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	2b05      	cmp	r3, #5
 8002906:	d10c      	bne.n	8002922 <HAL_RCC_OscConfig+0x356>
 8002908:	4b61      	ldr	r3, [pc, #388]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	4a60      	ldr	r2, [pc, #384]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 800290e:	f043 0304 	orr.w	r3, r3, #4
 8002912:	6213      	str	r3, [r2, #32]
 8002914:	4b5e      	ldr	r3, [pc, #376]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	4a5d      	ldr	r2, [pc, #372]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	6213      	str	r3, [r2, #32]
 8002920:	e00b      	b.n	800293a <HAL_RCC_OscConfig+0x36e>
 8002922:	4b5b      	ldr	r3, [pc, #364]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	4a5a      	ldr	r2, [pc, #360]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002928:	f023 0301 	bic.w	r3, r3, #1
 800292c:	6213      	str	r3, [r2, #32]
 800292e:	4b58      	ldr	r3, [pc, #352]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	4a57      	ldr	r2, [pc, #348]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002934:	f023 0304 	bic.w	r3, r3, #4
 8002938:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d015      	beq.n	800296e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002942:	f7ff fadd 	bl	8001f00 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002948:	e00a      	b.n	8002960 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294a:	f7ff fad9 	bl	8001f00 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	f241 3288 	movw	r2, #5000	; 0x1388
 8002958:	4293      	cmp	r3, r2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e0b1      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002960:	4b4b      	ldr	r3, [pc, #300]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0ee      	beq.n	800294a <HAL_RCC_OscConfig+0x37e>
 800296c:	e014      	b.n	8002998 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296e:	f7ff fac7 	bl	8001f00 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002974:	e00a      	b.n	800298c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002976:	f7ff fac3 	bl	8001f00 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	f241 3288 	movw	r2, #5000	; 0x1388
 8002984:	4293      	cmp	r3, r2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e09b      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800298c:	4b40      	ldr	r3, [pc, #256]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1ee      	bne.n	8002976 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002998:	7dfb      	ldrb	r3, [r7, #23]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d105      	bne.n	80029aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800299e:	4b3c      	ldr	r3, [pc, #240]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	4a3b      	ldr	r2, [pc, #236]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 8087 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029b4:	4b36      	ldr	r3, [pc, #216]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d061      	beq.n	8002a84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d146      	bne.n	8002a56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c8:	4b33      	ldr	r3, [pc, #204]	; (8002a98 <HAL_RCC_OscConfig+0x4cc>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ce:	f7ff fa97 	bl	8001f00 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d6:	f7ff fa93 	bl	8001f00 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e06d      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e8:	4b29      	ldr	r3, [pc, #164]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f0      	bne.n	80029d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029fc:	d108      	bne.n	8002a10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029fe:	4b24      	ldr	r3, [pc, #144]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	4921      	ldr	r1, [pc, #132]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a10:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a19      	ldr	r1, [r3, #32]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	430b      	orrs	r3, r1
 8002a22:	491b      	ldr	r1, [pc, #108]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a28:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <HAL_RCC_OscConfig+0x4cc>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2e:	f7ff fa67 	bl	8001f00 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a36:	f7ff fa63 	bl	8001f00 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e03d      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a48:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCC_OscConfig+0x46a>
 8002a54:	e035      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <HAL_RCC_OscConfig+0x4cc>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7ff fa50 	bl	8001f00 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a64:	f7ff fa4c 	bl	8001f00 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e026      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_RCC_OscConfig+0x4c4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x498>
 8002a82:	e01e      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d107      	bne.n	8002a9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e019      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40007000 	.word	0x40007000
 8002a98:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_RCC_OscConfig+0x500>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d106      	bne.n	8002abe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d001      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40021000 	.word	0x40021000

08002ad0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0d0      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae4:	4b6a      	ldr	r3, [pc, #424]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d910      	bls.n	8002b14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af2:	4b67      	ldr	r3, [pc, #412]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 0207 	bic.w	r2, r3, #7
 8002afa:	4965      	ldr	r1, [pc, #404]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b02:	4b63      	ldr	r3, [pc, #396]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0b8      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d020      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b2c:	4b59      	ldr	r3, [pc, #356]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	4a58      	ldr	r2, [pc, #352]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b44:	4b53      	ldr	r3, [pc, #332]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	4a52      	ldr	r2, [pc, #328]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b50:	4b50      	ldr	r3, [pc, #320]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	494d      	ldr	r1, [pc, #308]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d040      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d107      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b76:	4b47      	ldr	r3, [pc, #284]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d115      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e07f      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d107      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8e:	4b41      	ldr	r3, [pc, #260]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d109      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e073      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9e:	4b3d      	ldr	r3, [pc, #244]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e06b      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bae:	4b39      	ldr	r3, [pc, #228]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f023 0203 	bic.w	r2, r3, #3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	4936      	ldr	r1, [pc, #216]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bc0:	f7ff f99e 	bl	8001f00 <HAL_GetTick>
 8002bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc8:	f7ff f99a 	bl	8001f00 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e053      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bde:	4b2d      	ldr	r3, [pc, #180]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 020c 	and.w	r2, r3, #12
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d1eb      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf0:	4b27      	ldr	r3, [pc, #156]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d210      	bcs.n	8002c20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfe:	4b24      	ldr	r3, [pc, #144]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 0207 	bic.w	r2, r3, #7
 8002c06:	4922      	ldr	r1, [pc, #136]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0e:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e032      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c2c:	4b19      	ldr	r3, [pc, #100]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	4916      	ldr	r1, [pc, #88]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d009      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c4a:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	490e      	ldr	r1, [pc, #56]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c5e:	f000 f821 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8002c62:	4602      	mov	r2, r0
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	091b      	lsrs	r3, r3, #4
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	490a      	ldr	r1, [pc, #40]	; (8002c98 <HAL_RCC_ClockConfig+0x1c8>)
 8002c70:	5ccb      	ldrb	r3, [r1, r3]
 8002c72:	fa22 f303 	lsr.w	r3, r2, r3
 8002c76:	4a09      	ldr	r2, [pc, #36]	; (8002c9c <HAL_RCC_ClockConfig+0x1cc>)
 8002c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c7a:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <HAL_RCC_ClockConfig+0x1d0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff f830 	bl	8001ce4 <HAL_InitTick>

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40022000 	.word	0x40022000
 8002c94:	40021000 	.word	0x40021000
 8002c98:	08005a54 	.word	0x08005a54
 8002c9c:	20000038 	.word	0x20000038
 8002ca0:	2000003c 	.word	0x2000003c

08002ca4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca4:	b490      	push	{r4, r7}
 8002ca6:	b08a      	sub	sp, #40	; 0x28
 8002ca8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002caa:	4b29      	ldr	r3, [pc, #164]	; (8002d50 <HAL_RCC_GetSysClockFreq+0xac>)
 8002cac:	1d3c      	adds	r4, r7, #4
 8002cae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002cb4:	f240 2301 	movw	r3, #513	; 0x201
 8002cb8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61bb      	str	r3, [r7, #24]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cce:	4b21      	ldr	r3, [pc, #132]	; (8002d54 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d002      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d003      	beq.n	8002cea <HAL_RCC_GetSysClockFreq+0x46>
 8002ce2:	e02b      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ce4:	4b1c      	ldr	r3, [pc, #112]	; (8002d58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ce6:	623b      	str	r3, [r7, #32]
      break;
 8002ce8:	e02b      	b.n	8002d42 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	0c9b      	lsrs	r3, r3, #18
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	3328      	adds	r3, #40	; 0x28
 8002cf4:	443b      	add	r3, r7
 8002cf6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002cfa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d012      	beq.n	8002d2c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d06:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	0c5b      	lsrs	r3, r3, #17
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	3328      	adds	r3, #40	; 0x28
 8002d12:	443b      	add	r3, r7
 8002d14:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d18:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	4a0e      	ldr	r2, [pc, #56]	; (8002d58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d1e:	fb03 f202 	mul.w	r2, r3, r2
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
 8002d2a:	e004      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	4a0b      	ldr	r2, [pc, #44]	; (8002d5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d30:	fb02 f303 	mul.w	r3, r2, r3
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	623b      	str	r3, [r7, #32]
      break;
 8002d3a:	e002      	b.n	8002d42 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d3e:	623b      	str	r3, [r7, #32]
      break;
 8002d40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d42:	6a3b      	ldr	r3, [r7, #32]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3728      	adds	r7, #40	; 0x28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc90      	pop	{r4, r7}
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	08005a3c 	.word	0x08005a3c
 8002d54:	40021000 	.word	0x40021000
 8002d58:	007a1200 	.word	0x007a1200
 8002d5c:	003d0900 	.word	0x003d0900

08002d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d64:	4b02      	ldr	r3, [pc, #8]	; (8002d70 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d66:	681b      	ldr	r3, [r3, #0]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr
 8002d70:	20000038 	.word	0x20000038

08002d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d78:	f7ff fff2 	bl	8002d60 <HAL_RCC_GetHCLKFreq>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	0a1b      	lsrs	r3, r3, #8
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	4903      	ldr	r1, [pc, #12]	; (8002d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d8a:	5ccb      	ldrb	r3, [r1, r3]
 8002d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40021000 	.word	0x40021000
 8002d98:	08005a64 	.word	0x08005a64

08002d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002da0:	f7ff ffde 	bl	8002d60 <HAL_RCC_GetHCLKFreq>
 8002da4:	4602      	mov	r2, r0
 8002da6:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	0adb      	lsrs	r3, r3, #11
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	4903      	ldr	r1, [pc, #12]	; (8002dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002db2:	5ccb      	ldrb	r3, [r1, r3]
 8002db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	08005a64 	.word	0x08005a64

08002dc4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	220f      	movs	r2, #15
 8002dd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002dd4:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <HAL_RCC_GetClockConfig+0x58>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 0203 	and.w	r2, r3, #3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002de0:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <HAL_RCC_GetClockConfig+0x58>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002dec:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <HAL_RCC_GetClockConfig+0x58>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002df8:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <HAL_RCC_GetClockConfig+0x58>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	08db      	lsrs	r3, r3, #3
 8002dfe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e06:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <HAL_RCC_GetClockConfig+0x5c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0207 	and.w	r2, r3, #7
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40022000 	.word	0x40022000

08002e24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <RCC_Delay+0x34>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a0a      	ldr	r2, [pc, #40]	; (8002e5c <RCC_Delay+0x38>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	0a5b      	lsrs	r3, r3, #9
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	fb02 f303 	mul.w	r3, r2, r3
 8002e3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e40:	bf00      	nop
  }
  while (Delay --);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	1e5a      	subs	r2, r3, #1
 8002e46:	60fa      	str	r2, [r7, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1f9      	bne.n	8002e40 <RCC_Delay+0x1c>
}
 8002e4c:	bf00      	nop
 8002e4e:	bf00      	nop
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr
 8002e58:	20000038 	.word	0x20000038
 8002e5c:	10624dd3 	.word	0x10624dd3

08002e60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e041      	b.n	8002ef6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d106      	bne.n	8002e8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fe fe70 	bl	8001b6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	f000 fc28 	bl	80036f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d001      	beq.n	8002f18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e03a      	b.n	8002f8e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0201 	orr.w	r2, r2, #1
 8002f2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a18      	ldr	r2, [pc, #96]	; (8002f98 <HAL_TIM_Base_Start_IT+0x98>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d00e      	beq.n	8002f58 <HAL_TIM_Base_Start_IT+0x58>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f42:	d009      	beq.n	8002f58 <HAL_TIM_Base_Start_IT+0x58>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a14      	ldr	r2, [pc, #80]	; (8002f9c <HAL_TIM_Base_Start_IT+0x9c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d004      	beq.n	8002f58 <HAL_TIM_Base_Start_IT+0x58>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a13      	ldr	r2, [pc, #76]	; (8002fa0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d111      	bne.n	8002f7c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2b06      	cmp	r3, #6
 8002f68:	d010      	beq.n	8002f8c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 0201 	orr.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f7a:	e007      	b.n	8002f8c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr
 8002f98:	40012c00 	.word	0x40012c00
 8002f9c:	40000400 	.word	0x40000400
 8002fa0:	40000800 	.word	0x40000800

08002fa4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e041      	b.n	800303a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d106      	bne.n	8002fd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f839 	bl	8003042 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3304      	adds	r3, #4
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	f000 fb86 	bl	80036f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d109      	bne.n	8003078 <HAL_TIM_PWM_Start+0x24>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b01      	cmp	r3, #1
 800306e:	bf14      	ite	ne
 8003070:	2301      	movne	r3, #1
 8003072:	2300      	moveq	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	e022      	b.n	80030be <HAL_TIM_PWM_Start+0x6a>
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	2b04      	cmp	r3, #4
 800307c:	d109      	bne.n	8003092 <HAL_TIM_PWM_Start+0x3e>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b01      	cmp	r3, #1
 8003088:	bf14      	ite	ne
 800308a:	2301      	movne	r3, #1
 800308c:	2300      	moveq	r3, #0
 800308e:	b2db      	uxtb	r3, r3
 8003090:	e015      	b.n	80030be <HAL_TIM_PWM_Start+0x6a>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b08      	cmp	r3, #8
 8003096:	d109      	bne.n	80030ac <HAL_TIM_PWM_Start+0x58>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	bf14      	ite	ne
 80030a4:	2301      	movne	r3, #1
 80030a6:	2300      	moveq	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	e008      	b.n	80030be <HAL_TIM_PWM_Start+0x6a>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	bf14      	ite	ne
 80030b8:	2301      	movne	r3, #1
 80030ba:	2300      	moveq	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e05e      	b.n	8003184 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d104      	bne.n	80030d6 <HAL_TIM_PWM_Start+0x82>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030d4:	e013      	b.n	80030fe <HAL_TIM_PWM_Start+0xaa>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d104      	bne.n	80030e6 <HAL_TIM_PWM_Start+0x92>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030e4:	e00b      	b.n	80030fe <HAL_TIM_PWM_Start+0xaa>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d104      	bne.n	80030f6 <HAL_TIM_PWM_Start+0xa2>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030f4:	e003      	b.n	80030fe <HAL_TIM_PWM_Start+0xaa>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2202      	movs	r2, #2
 80030fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2201      	movs	r2, #1
 8003104:	6839      	ldr	r1, [r7, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f000 fd74 	bl	8003bf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a1e      	ldr	r2, [pc, #120]	; (800318c <HAL_TIM_PWM_Start+0x138>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d107      	bne.n	8003126 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003124:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a18      	ldr	r2, [pc, #96]	; (800318c <HAL_TIM_PWM_Start+0x138>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d00e      	beq.n	800314e <HAL_TIM_PWM_Start+0xfa>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003138:	d009      	beq.n	800314e <HAL_TIM_PWM_Start+0xfa>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a14      	ldr	r2, [pc, #80]	; (8003190 <HAL_TIM_PWM_Start+0x13c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d004      	beq.n	800314e <HAL_TIM_PWM_Start+0xfa>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a12      	ldr	r2, [pc, #72]	; (8003194 <HAL_TIM_PWM_Start+0x140>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d111      	bne.n	8003172 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2b06      	cmp	r3, #6
 800315e:	d010      	beq.n	8003182 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003170:	e007      	b.n	8003182 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0201 	orr.w	r2, r2, #1
 8003180:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40012c00 	.word	0x40012c00
 8003190:	40000400 	.word	0x40000400
 8003194:	40000800 	.word	0x40000800

08003198 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d122      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d11b      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0202 	mvn.w	r2, #2
 80031c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fa6f 	bl	80036be <HAL_TIM_IC_CaptureCallback>
 80031e0:	e005      	b.n	80031ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fa62 	bl	80036ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fa71 	bl	80036d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d122      	bne.n	8003248 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b04      	cmp	r3, #4
 800320e:	d11b      	bne.n	8003248 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f06f 0204 	mvn.w	r2, #4
 8003218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2202      	movs	r2, #2
 800321e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 fa45 	bl	80036be <HAL_TIM_IC_CaptureCallback>
 8003234:	e005      	b.n	8003242 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 fa38 	bl	80036ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fa47 	bl	80036d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b08      	cmp	r3, #8
 8003254:	d122      	bne.n	800329c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b08      	cmp	r3, #8
 8003262:	d11b      	bne.n	800329c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f06f 0208 	mvn.w	r2, #8
 800326c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2204      	movs	r2, #4
 8003272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 fa1b 	bl	80036be <HAL_TIM_IC_CaptureCallback>
 8003288:	e005      	b.n	8003296 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fa0e 	bl	80036ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 fa1d 	bl	80036d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	2b10      	cmp	r3, #16
 80032a8:	d122      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	2b10      	cmp	r3, #16
 80032b6:	d11b      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0210 	mvn.w	r2, #16
 80032c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2208      	movs	r2, #8
 80032c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f9f1 	bl	80036be <HAL_TIM_IC_CaptureCallback>
 80032dc:	e005      	b.n	80032ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f9e4 	bl	80036ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f9f3 	bl	80036d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d10e      	bne.n	800331c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d107      	bne.n	800331c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0201 	mvn.w	r2, #1
 8003314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7fe fb4e 	bl	80019b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003326:	2b80      	cmp	r3, #128	; 0x80
 8003328:	d10e      	bne.n	8003348 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003334:	2b80      	cmp	r3, #128	; 0x80
 8003336:	d107      	bne.n	8003348 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 fce1 	bl	8003d0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003352:	2b40      	cmp	r3, #64	; 0x40
 8003354:	d10e      	bne.n	8003374 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003360:	2b40      	cmp	r3, #64	; 0x40
 8003362:	d107      	bne.n	8003374 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800336c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f9b7 	bl	80036e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f003 0320 	and.w	r3, r3, #32
 800337e:	2b20      	cmp	r3, #32
 8003380:	d10e      	bne.n	80033a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b20      	cmp	r3, #32
 800338e:	d107      	bne.n	80033a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0220 	mvn.w	r2, #32
 8003398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fcac 	bl	8003cf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80033be:	2302      	movs	r3, #2
 80033c0:	e0ac      	b.n	800351c <HAL_TIM_PWM_ConfigChannel+0x174>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b0c      	cmp	r3, #12
 80033ce:	f200 809f 	bhi.w	8003510 <HAL_TIM_PWM_ConfigChannel+0x168>
 80033d2:	a201      	add	r2, pc, #4	; (adr r2, 80033d8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80033d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d8:	0800340d 	.word	0x0800340d
 80033dc:	08003511 	.word	0x08003511
 80033e0:	08003511 	.word	0x08003511
 80033e4:	08003511 	.word	0x08003511
 80033e8:	0800344d 	.word	0x0800344d
 80033ec:	08003511 	.word	0x08003511
 80033f0:	08003511 	.word	0x08003511
 80033f4:	08003511 	.word	0x08003511
 80033f8:	0800348f 	.word	0x0800348f
 80033fc:	08003511 	.word	0x08003511
 8003400:	08003511 	.word	0x08003511
 8003404:	08003511 	.word	0x08003511
 8003408:	080034cf 	.word	0x080034cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	4618      	mov	r0, r3
 8003414:	f000 f9d0 	bl	80037b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0208 	orr.w	r2, r2, #8
 8003426:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699a      	ldr	r2, [r3, #24]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0204 	bic.w	r2, r2, #4
 8003436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6999      	ldr	r1, [r3, #24]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	691a      	ldr	r2, [r3, #16]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	619a      	str	r2, [r3, #24]
      break;
 800344a:	e062      	b.n	8003512 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	4618      	mov	r0, r3
 8003454:	f000 fa16 	bl	8003884 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699a      	ldr	r2, [r3, #24]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6999      	ldr	r1, [r3, #24]
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	021a      	lsls	r2, r3, #8
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	619a      	str	r2, [r3, #24]
      break;
 800348c:	e041      	b.n	8003512 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68b9      	ldr	r1, [r7, #8]
 8003494:	4618      	mov	r0, r3
 8003496:	f000 fa5f 	bl	8003958 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	69da      	ldr	r2, [r3, #28]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f042 0208 	orr.w	r2, r2, #8
 80034a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69da      	ldr	r2, [r3, #28]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0204 	bic.w	r2, r2, #4
 80034b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	69d9      	ldr	r1, [r3, #28]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	61da      	str	r2, [r3, #28]
      break;
 80034cc:	e021      	b.n	8003512 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68b9      	ldr	r1, [r7, #8]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 faa9 	bl	8003a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69da      	ldr	r2, [r3, #28]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	69da      	ldr	r2, [r3, #28]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69d9      	ldr	r1, [r3, #28]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	021a      	lsls	r2, r3, #8
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	61da      	str	r2, [r3, #28]
      break;
 800350e:	e000      	b.n	8003512 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003510:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_TIM_ConfigClockSource+0x18>
 8003538:	2302      	movs	r3, #2
 800353a:	e0b3      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x180>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800355a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003562:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003574:	d03e      	beq.n	80035f4 <HAL_TIM_ConfigClockSource+0xd0>
 8003576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800357a:	f200 8087 	bhi.w	800368c <HAL_TIM_ConfigClockSource+0x168>
 800357e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003582:	f000 8085 	beq.w	8003690 <HAL_TIM_ConfigClockSource+0x16c>
 8003586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800358a:	d87f      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x168>
 800358c:	2b70      	cmp	r3, #112	; 0x70
 800358e:	d01a      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0xa2>
 8003590:	2b70      	cmp	r3, #112	; 0x70
 8003592:	d87b      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x168>
 8003594:	2b60      	cmp	r3, #96	; 0x60
 8003596:	d050      	beq.n	800363a <HAL_TIM_ConfigClockSource+0x116>
 8003598:	2b60      	cmp	r3, #96	; 0x60
 800359a:	d877      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x168>
 800359c:	2b50      	cmp	r3, #80	; 0x50
 800359e:	d03c      	beq.n	800361a <HAL_TIM_ConfigClockSource+0xf6>
 80035a0:	2b50      	cmp	r3, #80	; 0x50
 80035a2:	d873      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x168>
 80035a4:	2b40      	cmp	r3, #64	; 0x40
 80035a6:	d058      	beq.n	800365a <HAL_TIM_ConfigClockSource+0x136>
 80035a8:	2b40      	cmp	r3, #64	; 0x40
 80035aa:	d86f      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x168>
 80035ac:	2b30      	cmp	r3, #48	; 0x30
 80035ae:	d064      	beq.n	800367a <HAL_TIM_ConfigClockSource+0x156>
 80035b0:	2b30      	cmp	r3, #48	; 0x30
 80035b2:	d86b      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x168>
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d060      	beq.n	800367a <HAL_TIM_ConfigClockSource+0x156>
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	d867      	bhi.n	800368c <HAL_TIM_ConfigClockSource+0x168>
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d05c      	beq.n	800367a <HAL_TIM_ConfigClockSource+0x156>
 80035c0:	2b10      	cmp	r3, #16
 80035c2:	d05a      	beq.n	800367a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80035c4:	e062      	b.n	800368c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6899      	ldr	r1, [r3, #8]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f000 faee 	bl	8003bb6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	609a      	str	r2, [r3, #8]
      break;
 80035f2:	e04e      	b.n	8003692 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	6899      	ldr	r1, [r3, #8]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f000 fad7 	bl	8003bb6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003616:	609a      	str	r2, [r3, #8]
      break;
 8003618:	e03b      	b.n	8003692 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	6859      	ldr	r1, [r3, #4]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	461a      	mov	r2, r3
 8003628:	f000 fa4e 	bl	8003ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2150      	movs	r1, #80	; 0x50
 8003632:	4618      	mov	r0, r3
 8003634:	f000 faa5 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 8003638:	e02b      	b.n	8003692 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6818      	ldr	r0, [r3, #0]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	6859      	ldr	r1, [r3, #4]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	461a      	mov	r2, r3
 8003648:	f000 fa6c 	bl	8003b24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2160      	movs	r1, #96	; 0x60
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fa95 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 8003658:	e01b      	b.n	8003692 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	6859      	ldr	r1, [r3, #4]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	461a      	mov	r2, r3
 8003668:	f000 fa2e 	bl	8003ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2140      	movs	r1, #64	; 0x40
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fa85 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 8003678:	e00b      	b.n	8003692 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4619      	mov	r1, r3
 8003684:	4610      	mov	r0, r2
 8003686:	f000 fa7c 	bl	8003b82 <TIM_ITRx_SetConfig>
        break;
 800368a:	e002      	b.n	8003692 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800368c:	bf00      	nop
 800368e:	e000      	b.n	8003692 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003690:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr

080036be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr

080036d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr

080036e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr

080036f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a29      	ldr	r2, [pc, #164]	; (80037ac <TIM_Base_SetConfig+0xb8>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00b      	beq.n	8003724 <TIM_Base_SetConfig+0x30>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003712:	d007      	beq.n	8003724 <TIM_Base_SetConfig+0x30>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a26      	ldr	r2, [pc, #152]	; (80037b0 <TIM_Base_SetConfig+0xbc>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d003      	beq.n	8003724 <TIM_Base_SetConfig+0x30>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a25      	ldr	r2, [pc, #148]	; (80037b4 <TIM_Base_SetConfig+0xc0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d108      	bne.n	8003736 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a1c      	ldr	r2, [pc, #112]	; (80037ac <TIM_Base_SetConfig+0xb8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00b      	beq.n	8003756 <TIM_Base_SetConfig+0x62>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003744:	d007      	beq.n	8003756 <TIM_Base_SetConfig+0x62>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a19      	ldr	r2, [pc, #100]	; (80037b0 <TIM_Base_SetConfig+0xbc>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d003      	beq.n	8003756 <TIM_Base_SetConfig+0x62>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a18      	ldr	r2, [pc, #96]	; (80037b4 <TIM_Base_SetConfig+0xc0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d108      	bne.n	8003768 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800375c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4313      	orrs	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	4313      	orrs	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a07      	ldr	r2, [pc, #28]	; (80037ac <TIM_Base_SetConfig+0xb8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d103      	bne.n	800379c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	615a      	str	r2, [r3, #20]
}
 80037a2:	bf00      	nop
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr
 80037ac:	40012c00 	.word	0x40012c00
 80037b0:	40000400 	.word	0x40000400
 80037b4:	40000800 	.word	0x40000800

080037b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	f023 0201 	bic.w	r2, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0303 	bic.w	r3, r3, #3
 80037ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f023 0302 	bic.w	r3, r3, #2
 8003800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a1c      	ldr	r2, [pc, #112]	; (8003880 <TIM_OC1_SetConfig+0xc8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d10c      	bne.n	800382e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f023 0308 	bic.w	r3, r3, #8
 800381a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f023 0304 	bic.w	r3, r3, #4
 800382c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a13      	ldr	r2, [pc, #76]	; (8003880 <TIM_OC1_SetConfig+0xc8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d111      	bne.n	800385a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800383c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4313      	orrs	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	621a      	str	r2, [r3, #32]
}
 8003874:	bf00      	nop
 8003876:	371c      	adds	r7, #28
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40012c00 	.word	0x40012c00

08003884 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	f023 0210 	bic.w	r2, r3, #16
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	021b      	lsls	r3, r3, #8
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f023 0320 	bic.w	r3, r3, #32
 80038ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4313      	orrs	r3, r2
 80038da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a1d      	ldr	r2, [pc, #116]	; (8003954 <TIM_OC2_SetConfig+0xd0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d10d      	bne.n	8003900 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a14      	ldr	r2, [pc, #80]	; (8003954 <TIM_OC2_SetConfig+0xd0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d113      	bne.n	8003930 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800390e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003916:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	621a      	str	r2, [r3, #32]
}
 800394a:	bf00      	nop
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr
 8003954:	40012c00 	.word	0x40012c00

08003958 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 0303 	bic.w	r3, r3, #3
 800398e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	021b      	lsls	r3, r3, #8
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <TIM_OC3_SetConfig+0xd0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d10d      	bne.n	80039d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a14      	ldr	r2, [pc, #80]	; (8003a28 <TIM_OC3_SetConfig+0xd0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d113      	bne.n	8003a02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	621a      	str	r2, [r3, #32]
}
 8003a1c:	bf00      	nop
 8003a1e:	371c      	adds	r7, #28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40012c00 	.word	0x40012c00

08003a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	021b      	lsls	r3, r3, #8
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	031b      	lsls	r3, r3, #12
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a0f      	ldr	r2, [pc, #60]	; (8003ac4 <TIM_OC4_SetConfig+0x98>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d109      	bne.n	8003aa0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	019b      	lsls	r3, r3, #6
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	621a      	str	r2, [r3, #32]
}
 8003aba:	bf00      	nop
 8003abc:	371c      	adds	r7, #28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr
 8003ac4:	40012c00 	.word	0x40012c00

08003ac8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	f023 0201 	bic.w	r2, r3, #1
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f023 030a 	bic.w	r3, r3, #10
 8003b04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	621a      	str	r2, [r3, #32]
}
 8003b1a:	bf00      	nop
 8003b1c:	371c      	adds	r7, #28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr

08003b24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	f023 0210 	bic.w	r2, r3, #16
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	031b      	lsls	r3, r3, #12
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	621a      	str	r2, [r3, #32]
}
 8003b78:	bf00      	nop
 8003b7a:	371c      	adds	r7, #28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr

08003b82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b085      	sub	sp, #20
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f043 0307 	orr.w	r3, r3, #7
 8003ba4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	609a      	str	r2, [r3, #8]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr

08003bb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b087      	sub	sp, #28
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]
 8003bc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bd0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	021a      	lsls	r2, r3, #8
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	609a      	str	r2, [r3, #8]
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr

08003bf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f003 031f 	and.w	r3, r3, #31
 8003c06:	2201      	movs	r2, #1
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6a1a      	ldr	r2, [r3, #32]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	43db      	mvns	r3, r3
 8003c16:	401a      	ands	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a1a      	ldr	r2, [r3, #32]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f003 031f 	and.w	r3, r3, #31
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	621a      	str	r2, [r3, #32]
}
 8003c32:	bf00      	nop
 8003c34:	371c      	adds	r7, #28
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr

08003c3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e046      	b.n	8003ce2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a16      	ldr	r2, [pc, #88]	; (8003cec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00e      	beq.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca0:	d009      	beq.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a12      	ldr	r2, [pc, #72]	; (8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d004      	beq.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a10      	ldr	r2, [pc, #64]	; (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr
 8003cec:	40012c00 	.word	0x40012c00
 8003cf0:	40000400 	.word	0x40000400
 8003cf4:	40000800 	.word	0x40000800

08003cf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr

08003d0a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr

08003d1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e03f      	b.n	8003dae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fd ff7a 	bl	8001c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2224      	movs	r2, #36	; 0x24
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 fba9 	bl	80044b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695a      	ldr	r2, [r3, #20]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d11d      	bne.n	8003e0c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <HAL_UART_Receive_IT+0x26>
 8003dd6:	88fb      	ldrh	r3, [r7, #6]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e016      	b.n	8003e0e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_UART_Receive_IT+0x38>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e00f      	b.n	8003e0e <HAL_UART_Receive_IT+0x58>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003dfc:	88fb      	ldrh	r3, [r7, #6]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	68b9      	ldr	r1, [r7, #8]
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 f9cf 	bl	80041a6 <UART_Start_Receive_IT>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	e000      	b.n	8003e0e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e0c:	2302      	movs	r3, #2
  }
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08a      	sub	sp, #40	; 0x28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10d      	bne.n	8003e6a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_UART_IRQHandler+0x52>
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fa7f 	bl	8004366 <UART_Receive_IT>
      return;
 8003e68:	e17b      	b.n	8004162 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 80b1 	beq.w	8003fd4 <HAL_UART_IRQHandler+0x1bc>
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d105      	bne.n	8003e88 <HAL_UART_IRQHandler+0x70>
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 80a6 	beq.w	8003fd4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <HAL_UART_IRQHandler+0x90>
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	f043 0201 	orr.w	r2, r3, #1
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_UART_IRQHandler+0xb0>
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	f043 0202 	orr.w	r2, r3, #2
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <HAL_UART_IRQHandler+0xd0>
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	f043 0204 	orr.w	r2, r3, #4
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00f      	beq.n	8003f12 <HAL_UART_IRQHandler+0xfa>
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d104      	bne.n	8003f06 <HAL_UART_IRQHandler+0xee>
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f043 0208 	orr.w	r2, r3, #8
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 811e 	beq.w	8004158 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d007      	beq.n	8003f36 <HAL_UART_IRQHandler+0x11e>
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	f003 0320 	and.w	r3, r3, #32
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 fa18 	bl	8004366 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	bf14      	ite	ne
 8003f44:	2301      	movne	r3, #1
 8003f46:	2300      	moveq	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d102      	bne.n	8003f5e <HAL_UART_IRQHandler+0x146>
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d031      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f95a 	bl	8004218 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d023      	beq.n	8003fba <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695a      	ldr	r2, [r3, #20]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f80:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d013      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	4a76      	ldr	r2, [pc, #472]	; (8004168 <HAL_UART_IRQHandler+0x350>)
 8003f90:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fe f8d6 	bl	8002148 <HAL_DMA_Abort_IT>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d016      	beq.n	8003fd0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fac:	4610      	mov	r0, r2
 8003fae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb0:	e00e      	b.n	8003fd0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f8e3 	bl	800417e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb8:	e00a      	b.n	8003fd0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f8df 	bl	800417e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc0:	e006      	b.n	8003fd0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f8db 	bl	800417e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003fce:	e0c3      	b.n	8004158 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd0:	bf00      	nop
    return;
 8003fd2:	e0c1      	b.n	8004158 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	f040 80a1 	bne.w	8004120 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 809b 	beq.w	8004120 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	f003 0310 	and.w	r3, r3, #16
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 8095 	beq.w	8004120 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004016:	2b00      	cmp	r3, #0
 8004018:	d04e      	beq.n	80040b8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004024:	8a3b      	ldrh	r3, [r7, #16]
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 8098 	beq.w	800415c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004030:	8a3a      	ldrh	r2, [r7, #16]
 8004032:	429a      	cmp	r2, r3
 8004034:	f080 8092 	bcs.w	800415c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	8a3a      	ldrh	r2, [r7, #16]
 800403c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	2b20      	cmp	r3, #32
 8004046:	d02b      	beq.n	80040a0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004056:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695a      	ldr	r2, [r3, #20]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695a      	ldr	r2, [r3, #20]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004076:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0210 	bic.w	r2, r2, #16
 8004094:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe f819 	bl	80020d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	4619      	mov	r1, r3
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f86d 	bl	8004190 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80040b6:	e051      	b.n	800415c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d047      	beq.n	8004160 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80040d0:	8a7b      	ldrh	r3, [r7, #18]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d044      	beq.n	8004160 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040e4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695a      	ldr	r2, [r3, #20]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0201 	bic.w	r2, r2, #1
 80040f4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0210 	bic.w	r2, r2, #16
 8004112:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004114:	8a7b      	ldrh	r3, [r7, #18]
 8004116:	4619      	mov	r1, r3
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f839 	bl	8004190 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800411e:	e01f      	b.n	8004160 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004126:	2b00      	cmp	r3, #0
 8004128:	d008      	beq.n	800413c <HAL_UART_IRQHandler+0x324>
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f8af 	bl	8004298 <UART_Transmit_IT>
    return;
 800413a:	e012      	b.n	8004162 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00d      	beq.n	8004162 <HAL_UART_IRQHandler+0x34a>
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414c:	2b00      	cmp	r3, #0
 800414e:	d008      	beq.n	8004162 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f8f0 	bl	8004336 <UART_EndTransmit_IT>
    return;
 8004156:	e004      	b.n	8004162 <HAL_UART_IRQHandler+0x34a>
    return;
 8004158:	bf00      	nop
 800415a:	e002      	b.n	8004162 <HAL_UART_IRQHandler+0x34a>
      return;
 800415c:	bf00      	nop
 800415e:	e000      	b.n	8004162 <HAL_UART_IRQHandler+0x34a>
      return;
 8004160:	bf00      	nop
  }
}
 8004162:	3728      	adds	r7, #40	; 0x28
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	08004271 	.word	0x08004271

0800416c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr

0800417e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr

08004190 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr

080041a6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b085      	sub	sp, #20
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	4613      	mov	r3, r2
 80041b2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	88fa      	ldrh	r2, [r7, #6]
 80041be:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	88fa      	ldrh	r2, [r7, #6]
 80041c4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2222      	movs	r2, #34	; 0x22
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ea:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695a      	ldr	r2, [r3, #20]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0220 	orr.w	r2, r2, #32
 800420a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr

08004218 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800422e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695a      	ldr	r2, [r3, #20]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0201 	bic.w	r2, r2, #1
 800423e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004244:	2b01      	cmp	r3, #1
 8004246:	d107      	bne.n	8004258 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0210 	bic.w	r2, r2, #16
 8004256:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr

08004270 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f7ff ff77 	bl	800417e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004290:	bf00      	nop
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b21      	cmp	r3, #33	; 0x21
 80042aa:	d13e      	bne.n	800432a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b4:	d114      	bne.n	80042e0 <UART_Transmit_IT+0x48>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d110      	bne.n	80042e0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	1c9a      	adds	r2, r3, #2
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	621a      	str	r2, [r3, #32]
 80042de:	e008      	b.n	80042f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	1c59      	adds	r1, r3, #1
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6211      	str	r1, [r2, #32]
 80042ea:	781a      	ldrb	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	4619      	mov	r1, r3
 8004300:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10f      	bne.n	8004326 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004314:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004324:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	e000      	b.n	800432c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800432a:	2302      	movs	r3, #2
  }
}
 800432c:	4618      	mov	r0, r3
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	bc80      	pop	{r7}
 8004334:	4770      	bx	lr

08004336 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800434c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7ff ff08 	bl	800416c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b086      	sub	sp, #24
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b22      	cmp	r3, #34	; 0x22
 8004378:	f040 8099 	bne.w	80044ae <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004384:	d117      	bne.n	80043b6 <UART_Receive_IT+0x50>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d113      	bne.n	80043b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004396:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ae:	1c9a      	adds	r2, r3, #2
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	629a      	str	r2, [r3, #40]	; 0x28
 80043b4:	e026      	b.n	8004404 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ba:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c8:	d007      	beq.n	80043da <UART_Receive_IT+0x74>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10a      	bne.n	80043e8 <UART_Receive_IT+0x82>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d106      	bne.n	80043e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	701a      	strb	r2, [r3, #0]
 80043e6:	e008      	b.n	80043fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004408:	b29b      	uxth	r3, r3
 800440a:	3b01      	subs	r3, #1
 800440c:	b29b      	uxth	r3, r3
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	4619      	mov	r1, r3
 8004412:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004414:	2b00      	cmp	r3, #0
 8004416:	d148      	bne.n	80044aa <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0220 	bic.w	r2, r2, #32
 8004426:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68da      	ldr	r2, [r3, #12]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004436:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695a      	ldr	r2, [r3, #20]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0201 	bic.w	r2, r2, #1
 8004446:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004454:	2b01      	cmp	r3, #1
 8004456:	d123      	bne.n	80044a0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0210 	bic.w	r2, r2, #16
 800446c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0310 	and.w	r3, r3, #16
 8004478:	2b10      	cmp	r3, #16
 800447a:	d10a      	bne.n	8004492 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800447c:	2300      	movs	r3, #0
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004496:	4619      	mov	r1, r3
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff fe79 	bl	8004190 <HAL_UARTEx_RxEventCallback>
 800449e:	e002      	b.n	80044a6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7fc faeb 	bl	8000a7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	e002      	b.n	80044b0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	e000      	b.n	80044b0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80044ae:	2302      	movs	r3, #2
  }
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044f2:	f023 030c 	bic.w	r3, r3, #12
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6812      	ldr	r2, [r2, #0]
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	430b      	orrs	r3, r1
 80044fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699a      	ldr	r2, [r3, #24]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a2c      	ldr	r2, [pc, #176]	; (80045cc <UART_SetConfig+0x114>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d103      	bne.n	8004528 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004520:	f7fe fc3c 	bl	8002d9c <HAL_RCC_GetPCLK2Freq>
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	e002      	b.n	800452e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004528:	f7fe fc24 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 800452c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	4613      	mov	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	009a      	lsls	r2, r3, #2
 8004538:	441a      	add	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	4a22      	ldr	r2, [pc, #136]	; (80045d0 <UART_SetConfig+0x118>)
 8004546:	fba2 2303 	umull	r2, r3, r2, r3
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	0119      	lsls	r1, r3, #4
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4613      	mov	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	009a      	lsls	r2, r3, #2
 8004558:	441a      	add	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	fbb2 f2f3 	udiv	r2, r2, r3
 8004564:	4b1a      	ldr	r3, [pc, #104]	; (80045d0 <UART_SetConfig+0x118>)
 8004566:	fba3 0302 	umull	r0, r3, r3, r2
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	2064      	movs	r0, #100	; 0x64
 800456e:	fb00 f303 	mul.w	r3, r0, r3
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	3332      	adds	r3, #50	; 0x32
 8004578:	4a15      	ldr	r2, [pc, #84]	; (80045d0 <UART_SetConfig+0x118>)
 800457a:	fba2 2303 	umull	r2, r3, r2, r3
 800457e:	095b      	lsrs	r3, r3, #5
 8004580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004584:	4419      	add	r1, r3
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	009a      	lsls	r2, r3, #2
 8004590:	441a      	add	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	fbb2 f2f3 	udiv	r2, r2, r3
 800459c:	4b0c      	ldr	r3, [pc, #48]	; (80045d0 <UART_SetConfig+0x118>)
 800459e:	fba3 0302 	umull	r0, r3, r3, r2
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	2064      	movs	r0, #100	; 0x64
 80045a6:	fb00 f303 	mul.w	r3, r0, r3
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	3332      	adds	r3, #50	; 0x32
 80045b0:	4a07      	ldr	r2, [pc, #28]	; (80045d0 <UART_SetConfig+0x118>)
 80045b2:	fba2 2303 	umull	r2, r3, r2, r3
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	f003 020f 	and.w	r2, r3, #15
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	440a      	add	r2, r1
 80045c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80045c4:	bf00      	nop
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40013800 	.word	0x40013800
 80045d0:	51eb851f 	.word	0x51eb851f

080045d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	4603      	mov	r3, r0
 80045dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80045e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045e6:	2b84      	cmp	r3, #132	; 0x84
 80045e8:	d005      	beq.n	80045f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80045ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4413      	add	r3, r2
 80045f2:	3303      	adds	r3, #3
 80045f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80045f6:	68fb      	ldr	r3, [r7, #12]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr

08004602 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004606:	f000 fad1 	bl	8004bac <vTaskStartScheduler>
  
  return osOK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	bd80      	pop	{r7, pc}

08004610 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004612:	b089      	sub	sp, #36	; 0x24
 8004614:	af04      	add	r7, sp, #16
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d020      	beq.n	8004664 <osThreadCreate+0x54>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d01c      	beq.n	8004664 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685c      	ldr	r4, [r3, #4]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681d      	ldr	r5, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691e      	ldr	r6, [r3, #16]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff ffc9 	bl	80045d4 <makeFreeRtosPriority>
 8004642:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800464c:	9202      	str	r2, [sp, #8]
 800464e:	9301      	str	r3, [sp, #4]
 8004650:	9100      	str	r1, [sp, #0]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	4632      	mov	r2, r6
 8004656:	4629      	mov	r1, r5
 8004658:	4620      	mov	r0, r4
 800465a:	f000 f8e8 	bl	800482e <xTaskCreateStatic>
 800465e:	4603      	mov	r3, r0
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	e01c      	b.n	800469e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685c      	ldr	r4, [r3, #4]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004670:	b29e      	uxth	r6, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff ffab 	bl	80045d4 <makeFreeRtosPriority>
 800467e:	4602      	mov	r2, r0
 8004680:	f107 030c 	add.w	r3, r7, #12
 8004684:	9301      	str	r3, [sp, #4]
 8004686:	9200      	str	r2, [sp, #0]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	4632      	mov	r2, r6
 800468c:	4629      	mov	r1, r5
 800468e:	4620      	mov	r0, r4
 8004690:	f000 f929 	bl	80048e6 <xTaskCreate>
 8004694:	4603      	mov	r3, r0
 8004696:	2b01      	cmp	r3, #1
 8004698:	d001      	beq.n	800469e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800469a:	2300      	movs	r3, #0
 800469c:	e000      	b.n	80046a0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800469e:	68fb      	ldr	r3, [r7, #12]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046a8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <osDelay+0x16>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	e000      	b.n	80046c0 <osDelay+0x18>
 80046be:	2301      	movs	r3, #1
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 fa3f 	bl	8004b44 <vTaskDelay>
  
  return osOK;
 80046c6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f103 0208 	add.w	r2, r3, #8
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f04f 32ff 	mov.w	r2, #4294967295
 80046e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f103 0208 	add.w	r2, r3, #8
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f103 0208 	add.w	r2, r3, #8
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr

0800470e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	bc80      	pop	{r7}
 8004724:	4770      	bx	lr

08004726 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004726:	b480      	push	{r7}
 8004728:	b085      	sub	sp, #20
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
 800472e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	1c5a      	adds	r2, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	601a      	str	r2, [r3, #0]
}
 8004762:	bf00      	nop
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr

0800476c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004782:	d103      	bne.n	800478c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	e00c      	b.n	80047a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3308      	adds	r3, #8
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	e002      	b.n	800479a <vListInsert+0x2e>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d2f6      	bcs.n	8004794 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	601a      	str	r2, [r3, #0]
}
 80047d2:	bf00      	nop
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bc80      	pop	{r7}
 80047da:	4770      	bx	lr

080047dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6892      	ldr	r2, [r2, #8]
 80047f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6852      	ldr	r2, [r2, #4]
 80047fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	429a      	cmp	r2, r3
 8004806:	d103      	bne.n	8004810 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	1e5a      	subs	r2, r3, #1
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	bc80      	pop	{r7}
 800482c:	4770      	bx	lr

0800482e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800482e:	b580      	push	{r7, lr}
 8004830:	b08e      	sub	sp, #56	; 0x38
 8004832:	af04      	add	r7, sp, #16
 8004834:	60f8      	str	r0, [r7, #12]
 8004836:	60b9      	str	r1, [r7, #8]
 8004838:	607a      	str	r2, [r7, #4]
 800483a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800483c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10a      	bne.n	8004858 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004854:	bf00      	nop
 8004856:	e7fe      	b.n	8004856 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10a      	bne.n	8004874 <xTaskCreateStatic+0x46>
	__asm volatile
 800485e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004862:	f383 8811 	msr	BASEPRI, r3
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	f3bf 8f4f 	dsb	sy
 800486e:	61fb      	str	r3, [r7, #28]
}
 8004870:	bf00      	nop
 8004872:	e7fe      	b.n	8004872 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004874:	2354      	movs	r3, #84	; 0x54
 8004876:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	2b54      	cmp	r3, #84	; 0x54
 800487c:	d00a      	beq.n	8004894 <xTaskCreateStatic+0x66>
	__asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	61bb      	str	r3, [r7, #24]
}
 8004890:	bf00      	nop
 8004892:	e7fe      	b.n	8004892 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004896:	2b00      	cmp	r3, #0
 8004898:	d01e      	beq.n	80048d8 <xTaskCreateStatic+0xaa>
 800489a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489c:	2b00      	cmp	r3, #0
 800489e:	d01b      	beq.n	80048d8 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	2202      	movs	r2, #2
 80048ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80048b2:	2300      	movs	r3, #0
 80048b4:	9303      	str	r3, [sp, #12]
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	9302      	str	r3, [sp, #8]
 80048ba:	f107 0314 	add.w	r3, r7, #20
 80048be:	9301      	str	r3, [sp, #4]
 80048c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	68b9      	ldr	r1, [r7, #8]
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 f850 	bl	8004970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048d2:	f000 f8cd 	bl	8004a70 <prvAddNewTaskToReadyList>
 80048d6:	e001      	b.n	80048dc <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80048dc:	697b      	ldr	r3, [r7, #20]
	}
 80048de:	4618      	mov	r0, r3
 80048e0:	3728      	adds	r7, #40	; 0x28
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b08c      	sub	sp, #48	; 0x30
 80048ea:	af04      	add	r7, sp, #16
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	603b      	str	r3, [r7, #0]
 80048f2:	4613      	mov	r3, r2
 80048f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048f6:	88fb      	ldrh	r3, [r7, #6]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fe68 	bl	80055d0 <pvPortMalloc>
 8004900:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00e      	beq.n	8004926 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004908:	2054      	movs	r0, #84	; 0x54
 800490a:	f000 fe61 	bl	80055d0 <pvPortMalloc>
 800490e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	631a      	str	r2, [r3, #48]	; 0x30
 800491c:	e005      	b.n	800492a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800491e:	6978      	ldr	r0, [r7, #20]
 8004920:	f000 ff1a 	bl	8005758 <vPortFree>
 8004924:	e001      	b.n	800492a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004926:	2300      	movs	r3, #0
 8004928:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d017      	beq.n	8004960 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004938:	88fa      	ldrh	r2, [r7, #6]
 800493a:	2300      	movs	r3, #0
 800493c:	9303      	str	r3, [sp, #12]
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	9302      	str	r3, [sp, #8]
 8004942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004944:	9301      	str	r3, [sp, #4]
 8004946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68b9      	ldr	r1, [r7, #8]
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 f80e 	bl	8004970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004954:	69f8      	ldr	r0, [r7, #28]
 8004956:	f000 f88b 	bl	8004a70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800495a:	2301      	movs	r3, #1
 800495c:	61bb      	str	r3, [r7, #24]
 800495e:	e002      	b.n	8004966 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004960:	f04f 33ff 	mov.w	r3, #4294967295
 8004964:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004966:	69bb      	ldr	r3, [r7, #24]
	}
 8004968:	4618      	mov	r0, r3
 800496a:	3720      	adds	r7, #32
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800497e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004988:	3b01      	subs	r3, #1
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	f023 0307 	bic.w	r3, r3, #7
 8004996:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80049a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	617b      	str	r3, [r7, #20]
}
 80049b4:	bf00      	nop
 80049b6:	e7fe      	b.n	80049b6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049b8:	2300      	movs	r3, #0
 80049ba:	61fb      	str	r3, [r7, #28]
 80049bc:	e012      	b.n	80049e4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	4413      	add	r3, r2
 80049c4:	7819      	ldrb	r1, [r3, #0]
 80049c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	4413      	add	r3, r2
 80049cc:	3334      	adds	r3, #52	; 0x34
 80049ce:	460a      	mov	r2, r1
 80049d0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	4413      	add	r3, r2
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d006      	beq.n	80049ec <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	3301      	adds	r3, #1
 80049e2:	61fb      	str	r3, [r7, #28]
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	2b0f      	cmp	r3, #15
 80049e8:	d9e9      	bls.n	80049be <prvInitialiseNewTask+0x4e>
 80049ea:	e000      	b.n	80049ee <prvInitialiseNewTask+0x7e>
		{
			break;
 80049ec:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80049ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80049f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f8:	2b06      	cmp	r3, #6
 80049fa:	d901      	bls.n	8004a00 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80049fc:	2306      	movs	r3, #6
 80049fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a0a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0e:	2200      	movs	r2, #0
 8004a10:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a14:	3304      	adds	r3, #4
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7ff fe79 	bl	800470e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	3318      	adds	r3, #24
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff fe74 	bl	800470e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2e:	f1c3 0207 	rsb	r2, r3, #7
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3e:	2200      	movs	r2, #0
 8004a40:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	68f9      	ldr	r1, [r7, #12]
 8004a4e:	69b8      	ldr	r0, [r7, #24]
 8004a50:	f000 fc0e 	bl	8005270 <pxPortInitialiseStack>
 8004a54:	4602      	mov	r2, r0
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a66:	bf00      	nop
 8004a68:	3720      	adds	r7, #32
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
	...

08004a70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a78:	f000 fce8 	bl	800544c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a7c:	4b2a      	ldr	r3, [pc, #168]	; (8004b28 <prvAddNewTaskToReadyList+0xb8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3301      	adds	r3, #1
 8004a82:	4a29      	ldr	r2, [pc, #164]	; (8004b28 <prvAddNewTaskToReadyList+0xb8>)
 8004a84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a86:	4b29      	ldr	r3, [pc, #164]	; (8004b2c <prvAddNewTaskToReadyList+0xbc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d109      	bne.n	8004aa2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a8e:	4a27      	ldr	r2, [pc, #156]	; (8004b2c <prvAddNewTaskToReadyList+0xbc>)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a94:	4b24      	ldr	r3, [pc, #144]	; (8004b28 <prvAddNewTaskToReadyList+0xb8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d110      	bne.n	8004abe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a9c:	f000 fac0 	bl	8005020 <prvInitialiseTaskLists>
 8004aa0:	e00d      	b.n	8004abe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004aa2:	4b23      	ldr	r3, [pc, #140]	; (8004b30 <prvAddNewTaskToReadyList+0xc0>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d109      	bne.n	8004abe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004aaa:	4b20      	ldr	r3, [pc, #128]	; (8004b2c <prvAddNewTaskToReadyList+0xbc>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d802      	bhi.n	8004abe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ab8:	4a1c      	ldr	r2, [pc, #112]	; (8004b2c <prvAddNewTaskToReadyList+0xbc>)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004abe:	4b1d      	ldr	r3, [pc, #116]	; (8004b34 <prvAddNewTaskToReadyList+0xc4>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	4a1b      	ldr	r2, [pc, #108]	; (8004b34 <prvAddNewTaskToReadyList+0xc4>)
 8004ac6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	2201      	movs	r2, #1
 8004ace:	409a      	lsls	r2, r3
 8004ad0:	4b19      	ldr	r3, [pc, #100]	; (8004b38 <prvAddNewTaskToReadyList+0xc8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	4a18      	ldr	r2, [pc, #96]	; (8004b38 <prvAddNewTaskToReadyList+0xc8>)
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4a15      	ldr	r2, [pc, #84]	; (8004b3c <prvAddNewTaskToReadyList+0xcc>)
 8004ae8:	441a      	add	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3304      	adds	r3, #4
 8004aee:	4619      	mov	r1, r3
 8004af0:	4610      	mov	r0, r2
 8004af2:	f7ff fe18 	bl	8004726 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004af6:	f000 fcd9 	bl	80054ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004afa:	4b0d      	ldr	r3, [pc, #52]	; (8004b30 <prvAddNewTaskToReadyList+0xc0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00e      	beq.n	8004b20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b02:	4b0a      	ldr	r3, [pc, #40]	; (8004b2c <prvAddNewTaskToReadyList+0xbc>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d207      	bcs.n	8004b20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <prvAddNewTaskToReadyList+0xd0>)
 8004b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b20:	bf00      	nop
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	200005fc 	.word	0x200005fc
 8004b2c:	200004fc 	.word	0x200004fc
 8004b30:	20000608 	.word	0x20000608
 8004b34:	20000618 	.word	0x20000618
 8004b38:	20000604 	.word	0x20000604
 8004b3c:	20000500 	.word	0x20000500
 8004b40:	e000ed04 	.word	0xe000ed04

08004b44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d017      	beq.n	8004b86 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b56:	4b13      	ldr	r3, [pc, #76]	; (8004ba4 <vTaskDelay+0x60>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <vTaskDelay+0x30>
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	60bb      	str	r3, [r7, #8]
}
 8004b70:	bf00      	nop
 8004b72:	e7fe      	b.n	8004b72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b74:	f000 f87a 	bl	8004c6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b78:	2100      	movs	r1, #0
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fb12 	bl	80051a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b80:	f000 f882 	bl	8004c88 <xTaskResumeAll>
 8004b84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d107      	bne.n	8004b9c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004b8c:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <vTaskDelay+0x64>)
 8004b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b9c:	bf00      	nop
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	20000624 	.word	0x20000624
 8004ba8:	e000ed04 	.word	0xe000ed04

08004bac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08a      	sub	sp, #40	; 0x28
 8004bb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004bba:	463a      	mov	r2, r7
 8004bbc:	1d39      	adds	r1, r7, #4
 8004bbe:	f107 0308 	add.w	r3, r7, #8
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fb ff42 	bl	8000a4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004bc8:	6839      	ldr	r1, [r7, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	9202      	str	r2, [sp, #8]
 8004bd0:	9301      	str	r3, [sp, #4]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	460a      	mov	r2, r1
 8004bda:	491e      	ldr	r1, [pc, #120]	; (8004c54 <vTaskStartScheduler+0xa8>)
 8004bdc:	481e      	ldr	r0, [pc, #120]	; (8004c58 <vTaskStartScheduler+0xac>)
 8004bde:	f7ff fe26 	bl	800482e <xTaskCreateStatic>
 8004be2:	4603      	mov	r3, r0
 8004be4:	4a1d      	ldr	r2, [pc, #116]	; (8004c5c <vTaskStartScheduler+0xb0>)
 8004be6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004be8:	4b1c      	ldr	r3, [pc, #112]	; (8004c5c <vTaskStartScheduler+0xb0>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	e001      	b.n	8004bfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d116      	bne.n	8004c2e <vTaskStartScheduler+0x82>
	__asm volatile
 8004c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	613b      	str	r3, [r7, #16]
}
 8004c12:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c14:	4b12      	ldr	r3, [pc, #72]	; (8004c60 <vTaskStartScheduler+0xb4>)
 8004c16:	f04f 32ff 	mov.w	r2, #4294967295
 8004c1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c1c:	4b11      	ldr	r3, [pc, #68]	; (8004c64 <vTaskStartScheduler+0xb8>)
 8004c1e:	2201      	movs	r2, #1
 8004c20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004c22:	4b11      	ldr	r3, [pc, #68]	; (8004c68 <vTaskStartScheduler+0xbc>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c28:	f000 fb9e 	bl	8005368 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c2c:	e00e      	b.n	8004c4c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c34:	d10a      	bne.n	8004c4c <vTaskStartScheduler+0xa0>
	__asm volatile
 8004c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3a:	f383 8811 	msr	BASEPRI, r3
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	f3bf 8f4f 	dsb	sy
 8004c46:	60fb      	str	r3, [r7, #12]
}
 8004c48:	bf00      	nop
 8004c4a:	e7fe      	b.n	8004c4a <vTaskStartScheduler+0x9e>
}
 8004c4c:	bf00      	nop
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	08005a4c 	.word	0x08005a4c
 8004c58:	08004ff1 	.word	0x08004ff1
 8004c5c:	20000620 	.word	0x20000620
 8004c60:	2000061c 	.word	0x2000061c
 8004c64:	20000608 	.word	0x20000608
 8004c68:	20000600 	.word	0x20000600

08004c6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004c70:	4b04      	ldr	r3, [pc, #16]	; (8004c84 <vTaskSuspendAll+0x18>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3301      	adds	r3, #1
 8004c76:	4a03      	ldr	r2, [pc, #12]	; (8004c84 <vTaskSuspendAll+0x18>)
 8004c78:	6013      	str	r3, [r2, #0]
}
 8004c7a:	bf00      	nop
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bc80      	pop	{r7}
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20000624 	.word	0x20000624

08004c88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c92:	2300      	movs	r3, #0
 8004c94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c96:	4b41      	ldr	r3, [pc, #260]	; (8004d9c <xTaskResumeAll+0x114>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10a      	bne.n	8004cb4 <xTaskResumeAll+0x2c>
	__asm volatile
 8004c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	603b      	str	r3, [r7, #0]
}
 8004cb0:	bf00      	nop
 8004cb2:	e7fe      	b.n	8004cb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004cb4:	f000 fbca 	bl	800544c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004cb8:	4b38      	ldr	r3, [pc, #224]	; (8004d9c <xTaskResumeAll+0x114>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	4a37      	ldr	r2, [pc, #220]	; (8004d9c <xTaskResumeAll+0x114>)
 8004cc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cc2:	4b36      	ldr	r3, [pc, #216]	; (8004d9c <xTaskResumeAll+0x114>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d161      	bne.n	8004d8e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cca:	4b35      	ldr	r3, [pc, #212]	; (8004da0 <xTaskResumeAll+0x118>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d05d      	beq.n	8004d8e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cd2:	e02e      	b.n	8004d32 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004cd4:	4b33      	ldr	r3, [pc, #204]	; (8004da4 <xTaskResumeAll+0x11c>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	3318      	adds	r3, #24
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff fd7b 	bl	80047dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	3304      	adds	r3, #4
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff fd76 	bl	80047dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	409a      	lsls	r2, r3
 8004cf8:	4b2b      	ldr	r3, [pc, #172]	; (8004da8 <xTaskResumeAll+0x120>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	4a2a      	ldr	r2, [pc, #168]	; (8004da8 <xTaskResumeAll+0x120>)
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d06:	4613      	mov	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4a27      	ldr	r2, [pc, #156]	; (8004dac <xTaskResumeAll+0x124>)
 8004d10:	441a      	add	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	3304      	adds	r3, #4
 8004d16:	4619      	mov	r1, r3
 8004d18:	4610      	mov	r0, r2
 8004d1a:	f7ff fd04 	bl	8004726 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d22:	4b23      	ldr	r3, [pc, #140]	; (8004db0 <xTaskResumeAll+0x128>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d302      	bcc.n	8004d32 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004d2c:	4b21      	ldr	r3, [pc, #132]	; (8004db4 <xTaskResumeAll+0x12c>)
 8004d2e:	2201      	movs	r2, #1
 8004d30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d32:	4b1c      	ldr	r3, [pc, #112]	; (8004da4 <xTaskResumeAll+0x11c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1cc      	bne.n	8004cd4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d40:	f000 fa0c 	bl	800515c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004d44:	4b1c      	ldr	r3, [pc, #112]	; (8004db8 <xTaskResumeAll+0x130>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d010      	beq.n	8004d72 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d50:	f000 f836 	bl	8004dc0 <xTaskIncrementTick>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004d5a:	4b16      	ldr	r3, [pc, #88]	; (8004db4 <xTaskResumeAll+0x12c>)
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3b01      	subs	r3, #1
 8004d64:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1f1      	bne.n	8004d50 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004d6c:	4b12      	ldr	r3, [pc, #72]	; (8004db8 <xTaskResumeAll+0x130>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d72:	4b10      	ldr	r3, [pc, #64]	; (8004db4 <xTaskResumeAll+0x12c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d009      	beq.n	8004d8e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d7e:	4b0f      	ldr	r3, [pc, #60]	; (8004dbc <xTaskResumeAll+0x134>)
 8004d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d8e:	f000 fb8d 	bl	80054ac <vPortExitCritical>

	return xAlreadyYielded;
 8004d92:	68bb      	ldr	r3, [r7, #8]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	20000624 	.word	0x20000624
 8004da0:	200005fc 	.word	0x200005fc
 8004da4:	200005bc 	.word	0x200005bc
 8004da8:	20000604 	.word	0x20000604
 8004dac:	20000500 	.word	0x20000500
 8004db0:	200004fc 	.word	0x200004fc
 8004db4:	20000610 	.word	0x20000610
 8004db8:	2000060c 	.word	0x2000060c
 8004dbc:	e000ed04 	.word	0xe000ed04

08004dc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dca:	4b51      	ldr	r3, [pc, #324]	; (8004f10 <xTaskIncrementTick+0x150>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f040 808d 	bne.w	8004eee <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004dd4:	4b4f      	ldr	r3, [pc, #316]	; (8004f14 <xTaskIncrementTick+0x154>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ddc:	4a4d      	ldr	r2, [pc, #308]	; (8004f14 <xTaskIncrementTick+0x154>)
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d120      	bne.n	8004e2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004de8:	4b4b      	ldr	r3, [pc, #300]	; (8004f18 <xTaskIncrementTick+0x158>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <xTaskIncrementTick+0x48>
	__asm volatile
 8004df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	603b      	str	r3, [r7, #0]
}
 8004e04:	bf00      	nop
 8004e06:	e7fe      	b.n	8004e06 <xTaskIncrementTick+0x46>
 8004e08:	4b43      	ldr	r3, [pc, #268]	; (8004f18 <xTaskIncrementTick+0x158>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	60fb      	str	r3, [r7, #12]
 8004e0e:	4b43      	ldr	r3, [pc, #268]	; (8004f1c <xTaskIncrementTick+0x15c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a41      	ldr	r2, [pc, #260]	; (8004f18 <xTaskIncrementTick+0x158>)
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	4a41      	ldr	r2, [pc, #260]	; (8004f1c <xTaskIncrementTick+0x15c>)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	4b40      	ldr	r3, [pc, #256]	; (8004f20 <xTaskIncrementTick+0x160>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	3301      	adds	r3, #1
 8004e22:	4a3f      	ldr	r2, [pc, #252]	; (8004f20 <xTaskIncrementTick+0x160>)
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	f000 f999 	bl	800515c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e2a:	4b3e      	ldr	r3, [pc, #248]	; (8004f24 <xTaskIncrementTick+0x164>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d34d      	bcc.n	8004ed0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e34:	4b38      	ldr	r3, [pc, #224]	; (8004f18 <xTaskIncrementTick+0x158>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <xTaskIncrementTick+0x82>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <xTaskIncrementTick+0x84>
 8004e42:	2300      	movs	r3, #0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d004      	beq.n	8004e52 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e48:	4b36      	ldr	r3, [pc, #216]	; (8004f24 <xTaskIncrementTick+0x164>)
 8004e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e4e:	601a      	str	r2, [r3, #0]
					break;
 8004e50:	e03e      	b.n	8004ed0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004e52:	4b31      	ldr	r3, [pc, #196]	; (8004f18 <xTaskIncrementTick+0x158>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d203      	bcs.n	8004e72 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e6a:	4a2e      	ldr	r2, [pc, #184]	; (8004f24 <xTaskIncrementTick+0x164>)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6013      	str	r3, [r2, #0]
						break;
 8004e70:	e02e      	b.n	8004ed0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	3304      	adds	r3, #4
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff fcb0 	bl	80047dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d004      	beq.n	8004e8e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	3318      	adds	r3, #24
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff fca7 	bl	80047dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e92:	2201      	movs	r2, #1
 8004e94:	409a      	lsls	r2, r3
 8004e96:	4b24      	ldr	r3, [pc, #144]	; (8004f28 <xTaskIncrementTick+0x168>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	4a22      	ldr	r2, [pc, #136]	; (8004f28 <xTaskIncrementTick+0x168>)
 8004e9e:	6013      	str	r3, [r2, #0]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4a1f      	ldr	r2, [pc, #124]	; (8004f2c <xTaskIncrementTick+0x16c>)
 8004eae:	441a      	add	r2, r3
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	f7ff fc35 	bl	8004726 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec0:	4b1b      	ldr	r3, [pc, #108]	; (8004f30 <xTaskIncrementTick+0x170>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d3b4      	bcc.n	8004e34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ece:	e7b1      	b.n	8004e34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ed0:	4b17      	ldr	r3, [pc, #92]	; (8004f30 <xTaskIncrementTick+0x170>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed6:	4915      	ldr	r1, [pc, #84]	; (8004f2c <xTaskIncrementTick+0x16c>)
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d907      	bls.n	8004ef8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	e004      	b.n	8004ef8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004eee:	4b11      	ldr	r3, [pc, #68]	; (8004f34 <xTaskIncrementTick+0x174>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	4a0f      	ldr	r2, [pc, #60]	; (8004f34 <xTaskIncrementTick+0x174>)
 8004ef6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004ef8:	4b0f      	ldr	r3, [pc, #60]	; (8004f38 <xTaskIncrementTick+0x178>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004f00:	2301      	movs	r3, #1
 8004f02:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004f04:	697b      	ldr	r3, [r7, #20]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	20000624 	.word	0x20000624
 8004f14:	20000600 	.word	0x20000600
 8004f18:	200005b4 	.word	0x200005b4
 8004f1c:	200005b8 	.word	0x200005b8
 8004f20:	20000614 	.word	0x20000614
 8004f24:	2000061c 	.word	0x2000061c
 8004f28:	20000604 	.word	0x20000604
 8004f2c:	20000500 	.word	0x20000500
 8004f30:	200004fc 	.word	0x200004fc
 8004f34:	2000060c 	.word	0x2000060c
 8004f38:	20000610 	.word	0x20000610

08004f3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f42:	4b26      	ldr	r3, [pc, #152]	; (8004fdc <vTaskSwitchContext+0xa0>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f4a:	4b25      	ldr	r3, [pc, #148]	; (8004fe0 <vTaskSwitchContext+0xa4>)
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f50:	e03f      	b.n	8004fd2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004f52:	4b23      	ldr	r3, [pc, #140]	; (8004fe0 <vTaskSwitchContext+0xa4>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004f58:	4b22      	ldr	r3, [pc, #136]	; (8004fe4 <vTaskSwitchContext+0xa8>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	fab3 f383 	clz	r3, r3
 8004f64:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004f66:	7afb      	ldrb	r3, [r7, #11]
 8004f68:	f1c3 031f 	rsb	r3, r3, #31
 8004f6c:	617b      	str	r3, [r7, #20]
 8004f6e:	491e      	ldr	r1, [pc, #120]	; (8004fe8 <vTaskSwitchContext+0xac>)
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	440b      	add	r3, r1
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10a      	bne.n	8004f98 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	607b      	str	r3, [r7, #4]
}
 8004f94:	bf00      	nop
 8004f96:	e7fe      	b.n	8004f96 <vTaskSwitchContext+0x5a>
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4a11      	ldr	r2, [pc, #68]	; (8004fe8 <vTaskSwitchContext+0xac>)
 8004fa4:	4413      	add	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	605a      	str	r2, [r3, #4]
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	3308      	adds	r3, #8
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d104      	bne.n	8004fc8 <vTaskSwitchContext+0x8c>
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	605a      	str	r2, [r3, #4]
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	4a07      	ldr	r2, [pc, #28]	; (8004fec <vTaskSwitchContext+0xb0>)
 8004fd0:	6013      	str	r3, [r2, #0]
}
 8004fd2:	bf00      	nop
 8004fd4:	371c      	adds	r7, #28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bc80      	pop	{r7}
 8004fda:	4770      	bx	lr
 8004fdc:	20000624 	.word	0x20000624
 8004fe0:	20000610 	.word	0x20000610
 8004fe4:	20000604 	.word	0x20000604
 8004fe8:	20000500 	.word	0x20000500
 8004fec:	200004fc 	.word	0x200004fc

08004ff0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ff8:	f000 f852 	bl	80050a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ffc:	4b06      	ldr	r3, [pc, #24]	; (8005018 <prvIdleTask+0x28>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d9f9      	bls.n	8004ff8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005004:	4b05      	ldr	r3, [pc, #20]	; (800501c <prvIdleTask+0x2c>)
 8005006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005014:	e7f0      	b.n	8004ff8 <prvIdleTask+0x8>
 8005016:	bf00      	nop
 8005018:	20000500 	.word	0x20000500
 800501c:	e000ed04 	.word	0xe000ed04

08005020 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005026:	2300      	movs	r3, #0
 8005028:	607b      	str	r3, [r7, #4]
 800502a:	e00c      	b.n	8005046 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	4613      	mov	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4a12      	ldr	r2, [pc, #72]	; (8005080 <prvInitialiseTaskLists+0x60>)
 8005038:	4413      	add	r3, r2
 800503a:	4618      	mov	r0, r3
 800503c:	f7ff fb48 	bl	80046d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3301      	adds	r3, #1
 8005044:	607b      	str	r3, [r7, #4]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b06      	cmp	r3, #6
 800504a:	d9ef      	bls.n	800502c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800504c:	480d      	ldr	r0, [pc, #52]	; (8005084 <prvInitialiseTaskLists+0x64>)
 800504e:	f7ff fb3f 	bl	80046d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005052:	480d      	ldr	r0, [pc, #52]	; (8005088 <prvInitialiseTaskLists+0x68>)
 8005054:	f7ff fb3c 	bl	80046d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005058:	480c      	ldr	r0, [pc, #48]	; (800508c <prvInitialiseTaskLists+0x6c>)
 800505a:	f7ff fb39 	bl	80046d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800505e:	480c      	ldr	r0, [pc, #48]	; (8005090 <prvInitialiseTaskLists+0x70>)
 8005060:	f7ff fb36 	bl	80046d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005064:	480b      	ldr	r0, [pc, #44]	; (8005094 <prvInitialiseTaskLists+0x74>)
 8005066:	f7ff fb33 	bl	80046d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800506a:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <prvInitialiseTaskLists+0x78>)
 800506c:	4a05      	ldr	r2, [pc, #20]	; (8005084 <prvInitialiseTaskLists+0x64>)
 800506e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005070:	4b0a      	ldr	r3, [pc, #40]	; (800509c <prvInitialiseTaskLists+0x7c>)
 8005072:	4a05      	ldr	r2, [pc, #20]	; (8005088 <prvInitialiseTaskLists+0x68>)
 8005074:	601a      	str	r2, [r3, #0]
}
 8005076:	bf00      	nop
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	20000500 	.word	0x20000500
 8005084:	2000058c 	.word	0x2000058c
 8005088:	200005a0 	.word	0x200005a0
 800508c:	200005bc 	.word	0x200005bc
 8005090:	200005d0 	.word	0x200005d0
 8005094:	200005e8 	.word	0x200005e8
 8005098:	200005b4 	.word	0x200005b4
 800509c:	200005b8 	.word	0x200005b8

080050a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050a6:	e019      	b.n	80050dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050a8:	f000 f9d0 	bl	800544c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80050ac:	4b10      	ldr	r3, [pc, #64]	; (80050f0 <prvCheckTasksWaitingTermination+0x50>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3304      	adds	r3, #4
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7ff fb8f 	bl	80047dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80050be:	4b0d      	ldr	r3, [pc, #52]	; (80050f4 <prvCheckTasksWaitingTermination+0x54>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	4a0b      	ldr	r2, [pc, #44]	; (80050f4 <prvCheckTasksWaitingTermination+0x54>)
 80050c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80050c8:	4b0b      	ldr	r3, [pc, #44]	; (80050f8 <prvCheckTasksWaitingTermination+0x58>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3b01      	subs	r3, #1
 80050ce:	4a0a      	ldr	r2, [pc, #40]	; (80050f8 <prvCheckTasksWaitingTermination+0x58>)
 80050d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80050d2:	f000 f9eb 	bl	80054ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f810 	bl	80050fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050dc:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <prvCheckTasksWaitingTermination+0x58>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1e1      	bne.n	80050a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80050e4:	bf00      	nop
 80050e6:	bf00      	nop
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	200005d0 	.word	0x200005d0
 80050f4:	200005fc 	.word	0x200005fc
 80050f8:	200005e4 	.word	0x200005e4

080050fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800510a:	2b00      	cmp	r3, #0
 800510c:	d108      	bne.n	8005120 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fb20 	bl	8005758 <vPortFree>
				vPortFree( pxTCB );
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 fb1d 	bl	8005758 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800511e:	e018      	b.n	8005152 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005126:	2b01      	cmp	r3, #1
 8005128:	d103      	bne.n	8005132 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 fb14 	bl	8005758 <vPortFree>
	}
 8005130:	e00f      	b.n	8005152 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005138:	2b02      	cmp	r3, #2
 800513a:	d00a      	beq.n	8005152 <prvDeleteTCB+0x56>
	__asm volatile
 800513c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005140:	f383 8811 	msr	BASEPRI, r3
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	60fb      	str	r3, [r7, #12]
}
 800514e:	bf00      	nop
 8005150:	e7fe      	b.n	8005150 <prvDeleteTCB+0x54>
	}
 8005152:	bf00      	nop
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005162:	4b0e      	ldr	r3, [pc, #56]	; (800519c <prvResetNextTaskUnblockTime+0x40>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <prvResetNextTaskUnblockTime+0x14>
 800516c:	2301      	movs	r3, #1
 800516e:	e000      	b.n	8005172 <prvResetNextTaskUnblockTime+0x16>
 8005170:	2300      	movs	r3, #0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d004      	beq.n	8005180 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005176:	4b0a      	ldr	r3, [pc, #40]	; (80051a0 <prvResetNextTaskUnblockTime+0x44>)
 8005178:	f04f 32ff 	mov.w	r2, #4294967295
 800517c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800517e:	e008      	b.n	8005192 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005180:	4b06      	ldr	r3, [pc, #24]	; (800519c <prvResetNextTaskUnblockTime+0x40>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	4a04      	ldr	r2, [pc, #16]	; (80051a0 <prvResetNextTaskUnblockTime+0x44>)
 8005190:	6013      	str	r3, [r2, #0]
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	bc80      	pop	{r7}
 800519a:	4770      	bx	lr
 800519c:	200005b4 	.word	0x200005b4
 80051a0:	2000061c 	.word	0x2000061c

080051a4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80051ae:	4b29      	ldr	r3, [pc, #164]	; (8005254 <prvAddCurrentTaskToDelayedList+0xb0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051b4:	4b28      	ldr	r3, [pc, #160]	; (8005258 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3304      	adds	r3, #4
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7ff fb0e 	bl	80047dc <uxListRemove>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10b      	bne.n	80051de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80051c6:	4b24      	ldr	r3, [pc, #144]	; (8005258 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	2201      	movs	r2, #1
 80051ce:	fa02 f303 	lsl.w	r3, r2, r3
 80051d2:	43da      	mvns	r2, r3
 80051d4:	4b21      	ldr	r3, [pc, #132]	; (800525c <prvAddCurrentTaskToDelayedList+0xb8>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4013      	ands	r3, r2
 80051da:	4a20      	ldr	r2, [pc, #128]	; (800525c <prvAddCurrentTaskToDelayedList+0xb8>)
 80051dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e4:	d10a      	bne.n	80051fc <prvAddCurrentTaskToDelayedList+0x58>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d007      	beq.n	80051fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051ec:	4b1a      	ldr	r3, [pc, #104]	; (8005258 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3304      	adds	r3, #4
 80051f2:	4619      	mov	r1, r3
 80051f4:	481a      	ldr	r0, [pc, #104]	; (8005260 <prvAddCurrentTaskToDelayedList+0xbc>)
 80051f6:	f7ff fa96 	bl	8004726 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051fa:	e026      	b.n	800524a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4413      	add	r3, r2
 8005202:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005204:	4b14      	ldr	r3, [pc, #80]	; (8005258 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	429a      	cmp	r2, r3
 8005212:	d209      	bcs.n	8005228 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005214:	4b13      	ldr	r3, [pc, #76]	; (8005264 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	4b0f      	ldr	r3, [pc, #60]	; (8005258 <prvAddCurrentTaskToDelayedList+0xb4>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3304      	adds	r3, #4
 800521e:	4619      	mov	r1, r3
 8005220:	4610      	mov	r0, r2
 8005222:	f7ff faa3 	bl	800476c <vListInsert>
}
 8005226:	e010      	b.n	800524a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005228:	4b0f      	ldr	r3, [pc, #60]	; (8005268 <prvAddCurrentTaskToDelayedList+0xc4>)
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	4b0a      	ldr	r3, [pc, #40]	; (8005258 <prvAddCurrentTaskToDelayedList+0xb4>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3304      	adds	r3, #4
 8005232:	4619      	mov	r1, r3
 8005234:	4610      	mov	r0, r2
 8005236:	f7ff fa99 	bl	800476c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800523a:	4b0c      	ldr	r3, [pc, #48]	; (800526c <prvAddCurrentTaskToDelayedList+0xc8>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	429a      	cmp	r2, r3
 8005242:	d202      	bcs.n	800524a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005244:	4a09      	ldr	r2, [pc, #36]	; (800526c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	6013      	str	r3, [r2, #0]
}
 800524a:	bf00      	nop
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	20000600 	.word	0x20000600
 8005258:	200004fc 	.word	0x200004fc
 800525c:	20000604 	.word	0x20000604
 8005260:	200005e8 	.word	0x200005e8
 8005264:	200005b8 	.word	0x200005b8
 8005268:	200005b4 	.word	0x200005b4
 800526c:	2000061c 	.word	0x2000061c

08005270 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3b04      	subs	r3, #4
 8005280:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005288:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3b04      	subs	r3, #4
 800528e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f023 0201 	bic.w	r2, r3, #1
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	3b04      	subs	r3, #4
 800529e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80052a0:	4a08      	ldr	r2, [pc, #32]	; (80052c4 <pxPortInitialiseStack+0x54>)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	3b14      	subs	r3, #20
 80052aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	3b20      	subs	r3, #32
 80052b6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052b8:	68fb      	ldr	r3, [r7, #12]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr
 80052c4:	080052c9 	.word	0x080052c9

080052c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80052d2:	4b12      	ldr	r3, [pc, #72]	; (800531c <prvTaskExitError+0x54>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052da:	d00a      	beq.n	80052f2 <prvTaskExitError+0x2a>
	__asm volatile
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	60fb      	str	r3, [r7, #12]
}
 80052ee:	bf00      	nop
 80052f0:	e7fe      	b.n	80052f0 <prvTaskExitError+0x28>
	__asm volatile
 80052f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	60bb      	str	r3, [r7, #8]
}
 8005304:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005306:	bf00      	nop
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0fc      	beq.n	8005308 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800530e:	bf00      	nop
 8005310:	bf00      	nop
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	bc80      	pop	{r7}
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	20000044 	.word	0x20000044

08005320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005320:	4b07      	ldr	r3, [pc, #28]	; (8005340 <pxCurrentTCBConst2>)
 8005322:	6819      	ldr	r1, [r3, #0]
 8005324:	6808      	ldr	r0, [r1, #0]
 8005326:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800532a:	f380 8809 	msr	PSP, r0
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f04f 0000 	mov.w	r0, #0
 8005336:	f380 8811 	msr	BASEPRI, r0
 800533a:	f04e 0e0d 	orr.w	lr, lr, #13
 800533e:	4770      	bx	lr

08005340 <pxCurrentTCBConst2>:
 8005340:	200004fc 	.word	0x200004fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005344:	bf00      	nop
 8005346:	bf00      	nop

08005348 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005348:	4806      	ldr	r0, [pc, #24]	; (8005364 <prvPortStartFirstTask+0x1c>)
 800534a:	6800      	ldr	r0, [r0, #0]
 800534c:	6800      	ldr	r0, [r0, #0]
 800534e:	f380 8808 	msr	MSP, r0
 8005352:	b662      	cpsie	i
 8005354:	b661      	cpsie	f
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	df00      	svc	0
 8005360:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005362:	bf00      	nop
 8005364:	e000ed08 	.word	0xe000ed08

08005368 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800536e:	4b32      	ldr	r3, [pc, #200]	; (8005438 <xPortStartScheduler+0xd0>)
 8005370:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	22ff      	movs	r2, #255	; 0xff
 800537e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	b2db      	uxtb	r3, r3
 8005386:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	b2db      	uxtb	r3, r3
 800538c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005390:	b2da      	uxtb	r2, r3
 8005392:	4b2a      	ldr	r3, [pc, #168]	; (800543c <xPortStartScheduler+0xd4>)
 8005394:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005396:	4b2a      	ldr	r3, [pc, #168]	; (8005440 <xPortStartScheduler+0xd8>)
 8005398:	2207      	movs	r2, #7
 800539a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800539c:	e009      	b.n	80053b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800539e:	4b28      	ldr	r3, [pc, #160]	; (8005440 <xPortStartScheduler+0xd8>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	4a26      	ldr	r2, [pc, #152]	; (8005440 <xPortStartScheduler+0xd8>)
 80053a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053b2:	78fb      	ldrb	r3, [r7, #3]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ba:	2b80      	cmp	r3, #128	; 0x80
 80053bc:	d0ef      	beq.n	800539e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80053be:	4b20      	ldr	r3, [pc, #128]	; (8005440 <xPortStartScheduler+0xd8>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f1c3 0307 	rsb	r3, r3, #7
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d00a      	beq.n	80053e0 <xPortStartScheduler+0x78>
	__asm volatile
 80053ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	60bb      	str	r3, [r7, #8]
}
 80053dc:	bf00      	nop
 80053de:	e7fe      	b.n	80053de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053e0:	4b17      	ldr	r3, [pc, #92]	; (8005440 <xPortStartScheduler+0xd8>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	021b      	lsls	r3, r3, #8
 80053e6:	4a16      	ldr	r2, [pc, #88]	; (8005440 <xPortStartScheduler+0xd8>)
 80053e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053ea:	4b15      	ldr	r3, [pc, #84]	; (8005440 <xPortStartScheduler+0xd8>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053f2:	4a13      	ldr	r2, [pc, #76]	; (8005440 <xPortStartScheduler+0xd8>)
 80053f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053fe:	4b11      	ldr	r3, [pc, #68]	; (8005444 <xPortStartScheduler+0xdc>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a10      	ldr	r2, [pc, #64]	; (8005444 <xPortStartScheduler+0xdc>)
 8005404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005408:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800540a:	4b0e      	ldr	r3, [pc, #56]	; (8005444 <xPortStartScheduler+0xdc>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a0d      	ldr	r2, [pc, #52]	; (8005444 <xPortStartScheduler+0xdc>)
 8005410:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005414:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005416:	f000 f8b9 	bl	800558c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800541a:	4b0b      	ldr	r3, [pc, #44]	; (8005448 <xPortStartScheduler+0xe0>)
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005420:	f7ff ff92 	bl	8005348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005424:	f7ff fd8a 	bl	8004f3c <vTaskSwitchContext>
	prvTaskExitError();
 8005428:	f7ff ff4e 	bl	80052c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	e000e400 	.word	0xe000e400
 800543c:	20000628 	.word	0x20000628
 8005440:	2000062c 	.word	0x2000062c
 8005444:	e000ed20 	.word	0xe000ed20
 8005448:	20000044 	.word	0x20000044

0800544c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
	__asm volatile
 8005452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005456:	f383 8811 	msr	BASEPRI, r3
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	f3bf 8f4f 	dsb	sy
 8005462:	607b      	str	r3, [r7, #4]
}
 8005464:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005466:	4b0f      	ldr	r3, [pc, #60]	; (80054a4 <vPortEnterCritical+0x58>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	3301      	adds	r3, #1
 800546c:	4a0d      	ldr	r2, [pc, #52]	; (80054a4 <vPortEnterCritical+0x58>)
 800546e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005470:	4b0c      	ldr	r3, [pc, #48]	; (80054a4 <vPortEnterCritical+0x58>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d10f      	bne.n	8005498 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005478:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <vPortEnterCritical+0x5c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <vPortEnterCritical+0x4c>
	__asm volatile
 8005482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	603b      	str	r3, [r7, #0]
}
 8005494:	bf00      	nop
 8005496:	e7fe      	b.n	8005496 <vPortEnterCritical+0x4a>
	}
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	20000044 	.word	0x20000044
 80054a8:	e000ed04 	.word	0xe000ed04

080054ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054b2:	4b11      	ldr	r3, [pc, #68]	; (80054f8 <vPortExitCritical+0x4c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10a      	bne.n	80054d0 <vPortExitCritical+0x24>
	__asm volatile
 80054ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054be:	f383 8811 	msr	BASEPRI, r3
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	607b      	str	r3, [r7, #4]
}
 80054cc:	bf00      	nop
 80054ce:	e7fe      	b.n	80054ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80054d0:	4b09      	ldr	r3, [pc, #36]	; (80054f8 <vPortExitCritical+0x4c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3b01      	subs	r3, #1
 80054d6:	4a08      	ldr	r2, [pc, #32]	; (80054f8 <vPortExitCritical+0x4c>)
 80054d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054da:	4b07      	ldr	r3, [pc, #28]	; (80054f8 <vPortExitCritical+0x4c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d105      	bne.n	80054ee <vPortExitCritical+0x42>
 80054e2:	2300      	movs	r3, #0
 80054e4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bc80      	pop	{r7}
 80054f6:	4770      	bx	lr
 80054f8:	20000044 	.word	0x20000044
 80054fc:	00000000 	.word	0x00000000

08005500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005500:	f3ef 8009 	mrs	r0, PSP
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	4b0d      	ldr	r3, [pc, #52]	; (8005540 <pxCurrentTCBConst>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005510:	6010      	str	r0, [r2, #0]
 8005512:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005516:	f04f 0050 	mov.w	r0, #80	; 0x50
 800551a:	f380 8811 	msr	BASEPRI, r0
 800551e:	f7ff fd0d 	bl	8004f3c <vTaskSwitchContext>
 8005522:	f04f 0000 	mov.w	r0, #0
 8005526:	f380 8811 	msr	BASEPRI, r0
 800552a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800552e:	6819      	ldr	r1, [r3, #0]
 8005530:	6808      	ldr	r0, [r1, #0]
 8005532:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005536:	f380 8809 	msr	PSP, r0
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	4770      	bx	lr

08005540 <pxCurrentTCBConst>:
 8005540:	200004fc 	.word	0x200004fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005544:	bf00      	nop
 8005546:	bf00      	nop

08005548 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	607b      	str	r3, [r7, #4]
}
 8005560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005562:	f7ff fc2d 	bl	8004dc0 <xTaskIncrementTick>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d003      	beq.n	8005574 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800556c:	4b06      	ldr	r3, [pc, #24]	; (8005588 <SysTick_Handler+0x40>)
 800556e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	2300      	movs	r3, #0
 8005576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	f383 8811 	msr	BASEPRI, r3
}
 800557e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005580:	bf00      	nop
 8005582:	3708      	adds	r7, #8
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	e000ed04 	.word	0xe000ed04

0800558c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005590:	4b0a      	ldr	r3, [pc, #40]	; (80055bc <vPortSetupTimerInterrupt+0x30>)
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005596:	4b0a      	ldr	r3, [pc, #40]	; (80055c0 <vPortSetupTimerInterrupt+0x34>)
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800559c:	4b09      	ldr	r3, [pc, #36]	; (80055c4 <vPortSetupTimerInterrupt+0x38>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a09      	ldr	r2, [pc, #36]	; (80055c8 <vPortSetupTimerInterrupt+0x3c>)
 80055a2:	fba2 2303 	umull	r2, r3, r2, r3
 80055a6:	099b      	lsrs	r3, r3, #6
 80055a8:	4a08      	ldr	r2, [pc, #32]	; (80055cc <vPortSetupTimerInterrupt+0x40>)
 80055aa:	3b01      	subs	r3, #1
 80055ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055ae:	4b03      	ldr	r3, [pc, #12]	; (80055bc <vPortSetupTimerInterrupt+0x30>)
 80055b0:	2207      	movs	r2, #7
 80055b2:	601a      	str	r2, [r3, #0]
}
 80055b4:	bf00      	nop
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bc80      	pop	{r7}
 80055ba:	4770      	bx	lr
 80055bc:	e000e010 	.word	0xe000e010
 80055c0:	e000e018 	.word	0xe000e018
 80055c4:	20000038 	.word	0x20000038
 80055c8:	10624dd3 	.word	0x10624dd3
 80055cc:	e000e014 	.word	0xe000e014

080055d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08a      	sub	sp, #40	; 0x28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80055d8:	2300      	movs	r3, #0
 80055da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80055dc:	f7ff fb46 	bl	8004c6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80055e0:	4b58      	ldr	r3, [pc, #352]	; (8005744 <pvPortMalloc+0x174>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055e8:	f000 f910 	bl	800580c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055ec:	4b56      	ldr	r3, [pc, #344]	; (8005748 <pvPortMalloc+0x178>)
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4013      	ands	r3, r2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f040 808e 	bne.w	8005716 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d01d      	beq.n	800563c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005600:	2208      	movs	r2, #8
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4413      	add	r3, r2
 8005606:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	2b00      	cmp	r3, #0
 8005610:	d014      	beq.n	800563c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f023 0307 	bic.w	r3, r3, #7
 8005618:	3308      	adds	r3, #8
 800561a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f003 0307 	and.w	r3, r3, #7
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00a      	beq.n	800563c <pvPortMalloc+0x6c>
	__asm volatile
 8005626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	617b      	str	r3, [r7, #20]
}
 8005638:	bf00      	nop
 800563a:	e7fe      	b.n	800563a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d069      	beq.n	8005716 <pvPortMalloc+0x146>
 8005642:	4b42      	ldr	r3, [pc, #264]	; (800574c <pvPortMalloc+0x17c>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	429a      	cmp	r2, r3
 800564a:	d864      	bhi.n	8005716 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800564c:	4b40      	ldr	r3, [pc, #256]	; (8005750 <pvPortMalloc+0x180>)
 800564e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005650:	4b3f      	ldr	r3, [pc, #252]	; (8005750 <pvPortMalloc+0x180>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005656:	e004      	b.n	8005662 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	429a      	cmp	r2, r3
 800566a:	d903      	bls.n	8005674 <pvPortMalloc+0xa4>
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1f1      	bne.n	8005658 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005674:	4b33      	ldr	r3, [pc, #204]	; (8005744 <pvPortMalloc+0x174>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800567a:	429a      	cmp	r2, r3
 800567c:	d04b      	beq.n	8005716 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2208      	movs	r2, #8
 8005684:	4413      	add	r3, r2
 8005686:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	1ad2      	subs	r2, r2, r3
 8005698:	2308      	movs	r3, #8
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	429a      	cmp	r2, r3
 800569e:	d91f      	bls.n	80056e0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4413      	add	r3, r2
 80056a6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00a      	beq.n	80056c8 <pvPortMalloc+0xf8>
	__asm volatile
 80056b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	613b      	str	r3, [r7, #16]
}
 80056c4:	bf00      	nop
 80056c6:	e7fe      	b.n	80056c6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	1ad2      	subs	r2, r2, r3
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056da:	69b8      	ldr	r0, [r7, #24]
 80056dc:	f000 f8f8 	bl	80058d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056e0:	4b1a      	ldr	r3, [pc, #104]	; (800574c <pvPortMalloc+0x17c>)
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	4a18      	ldr	r2, [pc, #96]	; (800574c <pvPortMalloc+0x17c>)
 80056ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056ee:	4b17      	ldr	r3, [pc, #92]	; (800574c <pvPortMalloc+0x17c>)
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	4b18      	ldr	r3, [pc, #96]	; (8005754 <pvPortMalloc+0x184>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d203      	bcs.n	8005702 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056fa:	4b14      	ldr	r3, [pc, #80]	; (800574c <pvPortMalloc+0x17c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a15      	ldr	r2, [pc, #84]	; (8005754 <pvPortMalloc+0x184>)
 8005700:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	4b10      	ldr	r3, [pc, #64]	; (8005748 <pvPortMalloc+0x178>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	431a      	orrs	r2, r3
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	2200      	movs	r2, #0
 8005714:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005716:	f7ff fab7 	bl	8004c88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00a      	beq.n	800573a <pvPortMalloc+0x16a>
	__asm volatile
 8005724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005728:	f383 8811 	msr	BASEPRI, r3
 800572c:	f3bf 8f6f 	isb	sy
 8005730:	f3bf 8f4f 	dsb	sy
 8005734:	60fb      	str	r3, [r7, #12]
}
 8005736:	bf00      	nop
 8005738:	e7fe      	b.n	8005738 <pvPortMalloc+0x168>
	return pvReturn;
 800573a:	69fb      	ldr	r3, [r7, #28]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3728      	adds	r7, #40	; 0x28
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	20001238 	.word	0x20001238
 8005748:	20001244 	.word	0x20001244
 800574c:	2000123c 	.word	0x2000123c
 8005750:	20001230 	.word	0x20001230
 8005754:	20001240 	.word	0x20001240

08005758 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d048      	beq.n	80057fc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800576a:	2308      	movs	r3, #8
 800576c:	425b      	negs	r3, r3
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	4413      	add	r3, r2
 8005772:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	4b21      	ldr	r3, [pc, #132]	; (8005804 <vPortFree+0xac>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4013      	ands	r3, r2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10a      	bne.n	800579c <vPortFree+0x44>
	__asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	60fb      	str	r3, [r7, #12]
}
 8005798:	bf00      	nop
 800579a:	e7fe      	b.n	800579a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00a      	beq.n	80057ba <vPortFree+0x62>
	__asm volatile
 80057a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	60bb      	str	r3, [r7, #8]
}
 80057b6:	bf00      	nop
 80057b8:	e7fe      	b.n	80057b8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	4b11      	ldr	r3, [pc, #68]	; (8005804 <vPortFree+0xac>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4013      	ands	r3, r2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d019      	beq.n	80057fc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d115      	bne.n	80057fc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	4b0b      	ldr	r3, [pc, #44]	; (8005804 <vPortFree+0xac>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	43db      	mvns	r3, r3
 80057da:	401a      	ands	r2, r3
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057e0:	f7ff fa44 	bl	8004c6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	4b07      	ldr	r3, [pc, #28]	; (8005808 <vPortFree+0xb0>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4413      	add	r3, r2
 80057ee:	4a06      	ldr	r2, [pc, #24]	; (8005808 <vPortFree+0xb0>)
 80057f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057f2:	6938      	ldr	r0, [r7, #16]
 80057f4:	f000 f86c 	bl	80058d0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80057f8:	f7ff fa46 	bl	8004c88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057fc:	bf00      	nop
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	20001244 	.word	0x20001244
 8005808:	2000123c 	.word	0x2000123c

0800580c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005812:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005816:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005818:	4b27      	ldr	r3, [pc, #156]	; (80058b8 <prvHeapInit+0xac>)
 800581a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f003 0307 	and.w	r3, r3, #7
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00c      	beq.n	8005840 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	3307      	adds	r3, #7
 800582a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 0307 	bic.w	r3, r3, #7
 8005832:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	4a1f      	ldr	r2, [pc, #124]	; (80058b8 <prvHeapInit+0xac>)
 800583c:	4413      	add	r3, r2
 800583e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005844:	4a1d      	ldr	r2, [pc, #116]	; (80058bc <prvHeapInit+0xb0>)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800584a:	4b1c      	ldr	r3, [pc, #112]	; (80058bc <prvHeapInit+0xb0>)
 800584c:	2200      	movs	r2, #0
 800584e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	4413      	add	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005858:	2208      	movs	r2, #8
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	1a9b      	subs	r3, r3, r2
 800585e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0307 	bic.w	r3, r3, #7
 8005866:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4a15      	ldr	r2, [pc, #84]	; (80058c0 <prvHeapInit+0xb4>)
 800586c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800586e:	4b14      	ldr	r3, [pc, #80]	; (80058c0 <prvHeapInit+0xb4>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2200      	movs	r2, #0
 8005874:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005876:	4b12      	ldr	r3, [pc, #72]	; (80058c0 <prvHeapInit+0xb4>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	1ad2      	subs	r2, r2, r3
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800588c:	4b0c      	ldr	r3, [pc, #48]	; (80058c0 <prvHeapInit+0xb4>)
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	4a0a      	ldr	r2, [pc, #40]	; (80058c4 <prvHeapInit+0xb8>)
 800589a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	4a09      	ldr	r2, [pc, #36]	; (80058c8 <prvHeapInit+0xbc>)
 80058a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80058a4:	4b09      	ldr	r3, [pc, #36]	; (80058cc <prvHeapInit+0xc0>)
 80058a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80058aa:	601a      	str	r2, [r3, #0]
}
 80058ac:	bf00      	nop
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bc80      	pop	{r7}
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	20000630 	.word	0x20000630
 80058bc:	20001230 	.word	0x20001230
 80058c0:	20001238 	.word	0x20001238
 80058c4:	20001240 	.word	0x20001240
 80058c8:	2000123c 	.word	0x2000123c
 80058cc:	20001244 	.word	0x20001244

080058d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058d8:	4b27      	ldr	r3, [pc, #156]	; (8005978 <prvInsertBlockIntoFreeList+0xa8>)
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	e002      	b.n	80058e4 <prvInsertBlockIntoFreeList+0x14>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d8f7      	bhi.n	80058de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	4413      	add	r3, r2
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d108      	bne.n	8005912 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	441a      	add	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	441a      	add	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	d118      	bne.n	8005958 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	4b14      	ldr	r3, [pc, #80]	; (800597c <prvInsertBlockIntoFreeList+0xac>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	429a      	cmp	r2, r3
 8005930:	d00d      	beq.n	800594e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	441a      	add	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	e008      	b.n	8005960 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800594e:	4b0b      	ldr	r3, [pc, #44]	; (800597c <prvInsertBlockIntoFreeList+0xac>)
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	601a      	str	r2, [r3, #0]
 8005956:	e003      	b.n	8005960 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	429a      	cmp	r2, r3
 8005966:	d002      	beq.n	800596e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800596e:	bf00      	nop
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	bc80      	pop	{r7}
 8005976:	4770      	bx	lr
 8005978:	20001230 	.word	0x20001230
 800597c:	20001238 	.word	0x20001238

08005980 <__libc_init_array>:
 8005980:	b570      	push	{r4, r5, r6, lr}
 8005982:	2600      	movs	r6, #0
 8005984:	4d0c      	ldr	r5, [pc, #48]	; (80059b8 <__libc_init_array+0x38>)
 8005986:	4c0d      	ldr	r4, [pc, #52]	; (80059bc <__libc_init_array+0x3c>)
 8005988:	1b64      	subs	r4, r4, r5
 800598a:	10a4      	asrs	r4, r4, #2
 800598c:	42a6      	cmp	r6, r4
 800598e:	d109      	bne.n	80059a4 <__libc_init_array+0x24>
 8005990:	f000 f822 	bl	80059d8 <_init>
 8005994:	2600      	movs	r6, #0
 8005996:	4d0a      	ldr	r5, [pc, #40]	; (80059c0 <__libc_init_array+0x40>)
 8005998:	4c0a      	ldr	r4, [pc, #40]	; (80059c4 <__libc_init_array+0x44>)
 800599a:	1b64      	subs	r4, r4, r5
 800599c:	10a4      	asrs	r4, r4, #2
 800599e:	42a6      	cmp	r6, r4
 80059a0:	d105      	bne.n	80059ae <__libc_init_array+0x2e>
 80059a2:	bd70      	pop	{r4, r5, r6, pc}
 80059a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059a8:	4798      	blx	r3
 80059aa:	3601      	adds	r6, #1
 80059ac:	e7ee      	b.n	800598c <__libc_init_array+0xc>
 80059ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b2:	4798      	blx	r3
 80059b4:	3601      	adds	r6, #1
 80059b6:	e7f2      	b.n	800599e <__libc_init_array+0x1e>
 80059b8:	08005a6c 	.word	0x08005a6c
 80059bc:	08005a6c 	.word	0x08005a6c
 80059c0:	08005a6c 	.word	0x08005a6c
 80059c4:	08005a70 	.word	0x08005a70

080059c8 <memset>:
 80059c8:	4603      	mov	r3, r0
 80059ca:	4402      	add	r2, r0
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d100      	bne.n	80059d2 <memset+0xa>
 80059d0:	4770      	bx	lr
 80059d2:	f803 1b01 	strb.w	r1, [r3], #1
 80059d6:	e7f9      	b.n	80059cc <memset+0x4>

080059d8 <_init>:
 80059d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059da:	bf00      	nop
 80059dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059de:	bc08      	pop	{r3}
 80059e0:	469e      	mov	lr, r3
 80059e2:	4770      	bx	lr

080059e4 <_fini>:
 80059e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e6:	bf00      	nop
 80059e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ea:	bc08      	pop	{r3}
 80059ec:	469e      	mov	lr, r3
 80059ee:	4770      	bx	lr
