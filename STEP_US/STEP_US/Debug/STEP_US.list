
STEP_US.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003390  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080034a0  080034a0  000134a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034f0  080034f0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080034f0  080034f0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034f0  080034f0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034f0  080034f0  000134f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034f4  080034f4  000134f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080034f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001018  20000018  08003510  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001030  08003510  00021030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c360  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002195  00000000  00000000  0002c3a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  0002e538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  0002f308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f5e  00000000  00000000  0002ffd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de7d  00000000  00000000  00047f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f1cd  00000000  00000000  00055dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4f78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039d4  00000000  00000000  000e4fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08003488 	.word	0x08003488

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08003488 	.word	0x08003488

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	4a06      	ldr	r2, [pc, #24]	; (8000964 <vApplicationGetIdleTaskMemory+0x28>)
 800094c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	4a05      	ldr	r2, [pc, #20]	; (8000968 <vApplicationGetIdleTaskMemory+0x2c>)
 8000952:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2280      	movs	r2, #128	; 0x80
 8000958:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800095a:	bf00      	nop
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	20000034 	.word	0x20000034
 8000968:	20000088 	.word	0x20000088

0800096c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800096c:	b5b0      	push	{r4, r5, r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000972:	f000 fa31 	bl	8000dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000976:	f000 f81d 	bl	80009b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097a:	f000 f8ad 	bl	8000ad8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800097e:	f000 f85f 	bl	8000a40 <MX_TIM2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <main+0x40>)
 8000984:	1d3c      	adds	r4, r7, #4
 8000986:	461d      	mov	r5, r3
 8000988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800098a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000990:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f001 fb6f 	bl	800207c <osThreadCreate>
 800099e:	4603      	mov	r3, r0
 80009a0:	4a03      	ldr	r2, [pc, #12]	; (80009b0 <main+0x44>)
 80009a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80009a4:	f001 fb63 	bl	800206e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <main+0x3c>
 80009aa:	bf00      	nop
 80009ac:	080034ac 	.word	0x080034ac
 80009b0:	200002d0 	.word	0x200002d0

080009b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b090      	sub	sp, #64	; 0x40
 80009b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ba:	f107 0318 	add.w	r3, r7, #24
 80009be:	2228      	movs	r2, #40	; 0x28
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f002 fd58 	bl	8003478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d6:	2301      	movs	r3, #1
 80009d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e4:	2301      	movs	r3, #1
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e8:	2302      	movs	r3, #2
 80009ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f8:	f107 0318 	add.w	r3, r7, #24
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 fccd 	bl	800139c <HAL_RCC_OscConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a08:	f000 f93f 	bl	8000c8a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0c:	230f      	movs	r3, #15
 8000a0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a10:	2302      	movs	r3, #2
 8000a12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2102      	movs	r1, #2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 ff3a 	bl	80018a0 <HAL_RCC_ClockConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a32:	f000 f92a 	bl	8000c8a <Error_Handler>
  }
}
 8000a36:	bf00      	nop
 8000a38:	3740      	adds	r7, #64	; 0x40
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a46:	f107 0308 	add.w	r3, r7, #8
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a54:	463b      	mov	r3, r7
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <MX_TIM2_Init+0x94>)
 8000a5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <MX_TIM2_Init+0x94>)
 8000a66:	2247      	movs	r2, #71	; 0x47
 8000a68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_TIM2_Init+0x94>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_TIM2_Init+0x94>)
 8000a72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a78:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <MX_TIM2_Init+0x94>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <MX_TIM2_Init+0x94>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a84:	4813      	ldr	r0, [pc, #76]	; (8000ad4 <MX_TIM2_Init+0x94>)
 8000a86:	f001 f871 	bl	8001b6c <HAL_TIM_Base_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a90:	f000 f8fb 	bl	8000c8a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <MX_TIM2_Init+0x94>)
 8000aa2:	f001 f8b2 	bl	8001c0a <HAL_TIM_ConfigClockSource>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000aac:	f000 f8ed 	bl	8000c8a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ab8:	463b      	mov	r3, r7
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_TIM2_Init+0x94>)
 8000abe:	f001 fa61 	bl	8001f84 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ac8:	f000 f8df 	bl	8000c8a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000288 	.word	0x20000288

08000ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ade:	f107 0308 	add.w	r3, r7, #8
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aec:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <MX_GPIO_Init+0x74>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a16      	ldr	r2, [pc, #88]	; (8000b4c <MX_GPIO_Init+0x74>)
 8000af2:	f043 0320 	orr.w	r3, r3, #32
 8000af6:	6193      	str	r3, [r2, #24]
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_GPIO_Init+0x74>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f003 0320 	and.w	r3, r3, #32
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_GPIO_Init+0x74>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a10      	ldr	r2, [pc, #64]	; (8000b4c <MX_GPIO_Init+0x74>)
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_GPIO_Init+0x74>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0304 	and.w	r3, r3, #4
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Dir_Pin|En_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2106      	movs	r1, #6
 8000b20:	480b      	ldr	r0, [pc, #44]	; (8000b50 <MX_GPIO_Init+0x78>)
 8000b22:	f000 fc23 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Dir_Pin En_Pin */
  GPIO_InitStruct.Pin = Dir_Pin|En_Pin;
 8000b26:	2306      	movs	r3, #6
 8000b28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2302      	movs	r3, #2
 8000b34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 0308 	add.w	r3, r7, #8
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <MX_GPIO_Init+0x78>)
 8000b3e:	f000 fa91 	bl	8001064 <HAL_GPIO_Init>

}
 8000b42:	bf00      	nop
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40010800 	.word	0x40010800

08000b54 <driveStep>:
int numstep; //so buoc can di
int pre_angle;
double anglePerStep=1.8;//che do /1;
int angle;//goc can huong toi

void driveStep(){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
	int n =0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
	if(currentAngle != angle){
 8000b5e:	4b42      	ldr	r3, [pc, #264]	; (8000c68 <driveStep+0x114>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	4b42      	ldr	r3, [pc, #264]	; (8000c6c <driveStep+0x118>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d07a      	beq.n	8000c60 <driveStep+0x10c>
		if( currentAngle < angle){
 8000b6a:	4b3f      	ldr	r3, [pc, #252]	; (8000c68 <driveStep+0x114>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	4b3f      	ldr	r3, [pc, #252]	; (8000c6c <driveStep+0x118>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	da24      	bge.n	8000bc0 <driveStep+0x6c>
						HAL_GPIO_WritePin(Dir_GPIO_Port, Dir_Pin, 1);
 8000b76:	2201      	movs	r2, #1
 8000b78:	2102      	movs	r1, #2
 8000b7a:	483d      	ldr	r0, [pc, #244]	; (8000c70 <driveStep+0x11c>)
 8000b7c:	f000 fbf6 	bl	800136c <HAL_GPIO_WritePin>
						n = angle - currentAngle;
 8000b80:	4b3a      	ldr	r3, [pc, #232]	; (8000c6c <driveStep+0x118>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b38      	ldr	r3, [pc, #224]	; (8000c68 <driveStep+0x114>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	607b      	str	r3, [r7, #4]
						numstep = n/anglePerStep *2;
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff fc31 	bl	80003f4 <__aeabi_i2d>
 8000b92:	4b38      	ldr	r3, [pc, #224]	; (8000c74 <driveStep+0x120>)
 8000b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b98:	f7ff fdc0 	bl	800071c <__aeabi_ddiv>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	4610      	mov	r0, r2
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	f7ff fad8 	bl	800015c <__adddf3>
 8000bac:	4602      	mov	r2, r0
 8000bae:	460b      	mov	r3, r1
 8000bb0:	4610      	mov	r0, r2
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f7ff fe9a 	bl	80008ec <__aeabi_d2iz>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	4a2f      	ldr	r2, [pc, #188]	; (8000c78 <driveStep+0x124>)
 8000bbc:	6013      	str	r3, [r2, #0]
 8000bbe:	e030      	b.n	8000c22 <driveStep+0xce>
					}
					else if( currentAngle > angle){
 8000bc0:	4b29      	ldr	r3, [pc, #164]	; (8000c68 <driveStep+0x114>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b29      	ldr	r3, [pc, #164]	; (8000c6c <driveStep+0x118>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	dd2a      	ble.n	8000c22 <driveStep+0xce>
						HAL_GPIO_WritePin(Dir_GPIO_Port, Dir_Pin, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2102      	movs	r1, #2
 8000bd0:	4827      	ldr	r0, [pc, #156]	; (8000c70 <driveStep+0x11c>)
 8000bd2:	f000 fbcb 	bl	800136c <HAL_GPIO_WritePin>
						n = currentAngle - angle;
 8000bd6:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <driveStep+0x114>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <driveStep+0x118>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	607b      	str	r3, [r7, #4]
						if( angle == 0){
 8000be2:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <driveStep+0x118>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d102      	bne.n	8000bf0 <driveStep+0x9c>
							n = currentAngle;
 8000bea:	4b1f      	ldr	r3, [pc, #124]	; (8000c68 <driveStep+0x114>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	607b      	str	r3, [r7, #4]
						}
						numstep = n/anglePerStep *2;
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff fbff 	bl	80003f4 <__aeabi_i2d>
 8000bf6:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <driveStep+0x120>)
 8000bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bfc:	f7ff fd8e 	bl	800071c <__aeabi_ddiv>
 8000c00:	4602      	mov	r2, r0
 8000c02:	460b      	mov	r3, r1
 8000c04:	4610      	mov	r0, r2
 8000c06:	4619      	mov	r1, r3
 8000c08:	4602      	mov	r2, r0
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	f7ff faa6 	bl	800015c <__adddf3>
 8000c10:	4602      	mov	r2, r0
 8000c12:	460b      	mov	r3, r1
 8000c14:	4610      	mov	r0, r2
 8000c16:	4619      	mov	r1, r3
 8000c18:	f7ff fe68 	bl	80008ec <__aeabi_d2iz>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	4a16      	ldr	r2, [pc, #88]	; (8000c78 <driveStep+0x124>)
 8000c20:	6013      	str	r3, [r2, #0]
					}
					for(int x = 0; x < numstep; x++) {
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	e012      	b.n	8000c4e <driveStep+0xfa>
						HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, 1);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2104      	movs	r1, #4
 8000c2c:	4810      	ldr	r0, [pc, #64]	; (8000c70 <driveStep+0x11c>)
 8000c2e:	f000 fb9d 	bl	800136c <HAL_GPIO_WritePin>
						osDelay(1);
 8000c32:	2001      	movs	r0, #1
 8000c34:	f001 fa6e 	bl	8002114 <osDelay>
						HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2104      	movs	r1, #4
 8000c3c:	480c      	ldr	r0, [pc, #48]	; (8000c70 <driveStep+0x11c>)
 8000c3e:	f000 fb95 	bl	800136c <HAL_GPIO_WritePin>
						osDelay(1);
 8000c42:	2001      	movs	r0, #1
 8000c44:	f001 fa66 	bl	8002114 <osDelay>
					for(int x = 0; x < numstep; x++) {
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <driveStep+0x124>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	683a      	ldr	r2, [r7, #0]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	dbe7      	blt.n	8000c28 <driveStep+0xd4>
					}

					currentAngle = angle;
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <driveStep+0x118>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a02      	ldr	r2, [pc, #8]	; (8000c68 <driveStep+0x114>)
 8000c5e:	6013      	str	r3, [r2, #0]
	}
		}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200002d4 	.word	0x200002d4
 8000c6c:	200002dc 	.word	0x200002dc
 8000c70:	40010800 	.word	0x40010800
 8000c74:	20000000 	.word	0x20000000
 8000c78:	200002d8 	.word	0x200002d8

08000c7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  driveStep();
 8000c84:	f7ff ff66 	bl	8000b54 <driveStep>
 8000c88:	e7fc      	b.n	8000c84 <StartDefaultTask+0x8>

08000c8a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8e:	b672      	cpsid	i
}
 8000c90:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <Error_Handler+0x8>

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <HAL_MspInit+0x68>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	4a17      	ldr	r2, [pc, #92]	; (8000cfc <HAL_MspInit+0x68>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6193      	str	r3, [r2, #24]
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <HAL_MspInit+0x68>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_MspInit+0x68>)
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	4a11      	ldr	r2, [pc, #68]	; (8000cfc <HAL_MspInit+0x68>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	61d3      	str	r3, [r2, #28]
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <HAL_MspInit+0x68>)
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	210f      	movs	r1, #15
 8000cce:	f06f 0001 	mvn.w	r0, #1
 8000cd2:	f000 f99e 	bl	8001012 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <HAL_MspInit+0x6c>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_MspInit+0x6c>)
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40010000 	.word	0x40010000

08000d04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d14:	d10b      	bne.n	8000d2e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_TIM_Base_MspInit+0x34>)
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <HAL_TIM_Base_MspInit+0x34>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	61d3      	str	r3, [r2, #28]
 8000d22:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <HAL_TIM_Base_MspInit+0x34>)
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	40021000 	.word	0x40021000

08000d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <NMI_Handler+0x4>

08000d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <HardFault_Handler+0x4>

08000d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <MemManage_Handler+0x4>

08000d4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <BusFault_Handler+0x4>

08000d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <UsageFault_Handler+0x4>

08000d5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr

08000d66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6a:	f000 f87b 	bl	8000e64 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d6e:	f001 ff4f 	bl	8002c10 <xTaskGetSchedulerState>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d001      	beq.n	8000d7c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d78:	f002 f93e 	bl	8002ff8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d8c:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d8e:	490d      	ldr	r1, [pc, #52]	; (8000dc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d90:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da4:	4c0a      	ldr	r4, [pc, #40]	; (8000dd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000db2:	f7ff ffe5 	bl	8000d80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000db6:	f002 fb3b 	bl	8003430 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dba:	f7ff fdd7 	bl	800096c <main>
  bx lr
 8000dbe:	4770      	bx	lr
  ldr r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000dc8:	080034f8 	.word	0x080034f8
  ldr r2, =_sbss
 8000dcc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000dd0:	20001030 	.word	0x20001030

08000dd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC1_2_IRQHandler>
	...

08000dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_Init+0x28>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <HAL_Init+0x28>)
 8000de2:	f043 0310 	orr.w	r3, r3, #16
 8000de6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 f907 	bl	8000ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dee:	200f      	movs	r0, #15
 8000df0:	f000 f808 	bl	8000e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df4:	f7ff ff4e 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40022000 	.word	0x40022000

08000e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_InitTick+0x54>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_InitTick+0x58>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f911 	bl	800104a <HAL_SYSTICK_Config>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00e      	b.n	8000e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b0f      	cmp	r3, #15
 8000e36:	d80a      	bhi.n	8000e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f000 f8e7 	bl	8001012 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e44:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <HAL_InitTick+0x5c>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e000      	b.n	8000e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000010 	.word	0x20000010
 8000e60:	2000000c 	.word	0x2000000c

08000e64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <HAL_IncTick+0x1c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <HAL_IncTick+0x20>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a03      	ldr	r2, [pc, #12]	; (8000e84 <HAL_IncTick+0x20>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr
 8000e80:	20000010 	.word	0x20000010
 8000e84:	200002e0 	.word	0x200002e0

08000e88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e8c:	4b02      	ldr	r3, [pc, #8]	; (8000e98 <HAL_GetTick+0x10>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr
 8000e98:	200002e0 	.word	0x200002e0

08000e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ece:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	60d3      	str	r3, [r2, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <__NVIC_GetPriorityGrouping+0x18>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	f003 0307 	and.w	r3, r3, #7
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	db0a      	blt.n	8000f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	490c      	ldr	r1, [pc, #48]	; (8000f4c <__NVIC_SetPriority+0x4c>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	0112      	lsls	r2, r2, #4
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	440b      	add	r3, r1
 8000f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f28:	e00a      	b.n	8000f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4908      	ldr	r1, [pc, #32]	; (8000f50 <__NVIC_SetPriority+0x50>)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	3b04      	subs	r3, #4
 8000f38:	0112      	lsls	r2, r2, #4
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	761a      	strb	r2, [r3, #24]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000e100 	.word	0xe000e100
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f1c3 0307 	rsb	r3, r3, #7
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	bf28      	it	cs
 8000f72:	2304      	movcs	r3, #4
 8000f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	2b06      	cmp	r3, #6
 8000f7c:	d902      	bls.n	8000f84 <NVIC_EncodePriority+0x30>
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3b03      	subs	r3, #3
 8000f82:	e000      	b.n	8000f86 <NVIC_EncodePriority+0x32>
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43da      	mvns	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	401a      	ands	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	43d9      	mvns	r1, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	4313      	orrs	r3, r2
         );
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3724      	adds	r7, #36	; 0x24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr

08000fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc8:	d301      	bcc.n	8000fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00f      	b.n	8000fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fce:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <SysTick_Config+0x40>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd6:	210f      	movs	r1, #15
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f7ff ff90 	bl	8000f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <SysTick_Config+0x40>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe6:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <SysTick_Config+0x40>)
 8000fe8:	2207      	movs	r2, #7
 8000fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	e000e010 	.word	0xe000e010

08000ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff49 	bl	8000e9c <__NVIC_SetPriorityGrouping>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001024:	f7ff ff5e 	bl	8000ee4 <__NVIC_GetPriorityGrouping>
 8001028:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	68b9      	ldr	r1, [r7, #8]
 800102e:	6978      	ldr	r0, [r7, #20]
 8001030:	f7ff ff90 	bl	8000f54 <NVIC_EncodePriority>
 8001034:	4602      	mov	r2, r0
 8001036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff5f 	bl	8000f00 <__NVIC_SetPriority>
}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ffb0 	bl	8000fb8 <SysTick_Config>
 8001058:	4603      	mov	r3, r0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001064:	b480      	push	{r7}
 8001066:	b08b      	sub	sp, #44	; 0x2c
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001076:	e169      	b.n	800134c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001078:	2201      	movs	r2, #1
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	69fa      	ldr	r2, [r7, #28]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	429a      	cmp	r2, r3
 8001092:	f040 8158 	bne.w	8001346 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	4a9a      	ldr	r2, [pc, #616]	; (8001304 <HAL_GPIO_Init+0x2a0>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d05e      	beq.n	800115e <HAL_GPIO_Init+0xfa>
 80010a0:	4a98      	ldr	r2, [pc, #608]	; (8001304 <HAL_GPIO_Init+0x2a0>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d875      	bhi.n	8001192 <HAL_GPIO_Init+0x12e>
 80010a6:	4a98      	ldr	r2, [pc, #608]	; (8001308 <HAL_GPIO_Init+0x2a4>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d058      	beq.n	800115e <HAL_GPIO_Init+0xfa>
 80010ac:	4a96      	ldr	r2, [pc, #600]	; (8001308 <HAL_GPIO_Init+0x2a4>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d86f      	bhi.n	8001192 <HAL_GPIO_Init+0x12e>
 80010b2:	4a96      	ldr	r2, [pc, #600]	; (800130c <HAL_GPIO_Init+0x2a8>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d052      	beq.n	800115e <HAL_GPIO_Init+0xfa>
 80010b8:	4a94      	ldr	r2, [pc, #592]	; (800130c <HAL_GPIO_Init+0x2a8>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d869      	bhi.n	8001192 <HAL_GPIO_Init+0x12e>
 80010be:	4a94      	ldr	r2, [pc, #592]	; (8001310 <HAL_GPIO_Init+0x2ac>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d04c      	beq.n	800115e <HAL_GPIO_Init+0xfa>
 80010c4:	4a92      	ldr	r2, [pc, #584]	; (8001310 <HAL_GPIO_Init+0x2ac>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d863      	bhi.n	8001192 <HAL_GPIO_Init+0x12e>
 80010ca:	4a92      	ldr	r2, [pc, #584]	; (8001314 <HAL_GPIO_Init+0x2b0>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d046      	beq.n	800115e <HAL_GPIO_Init+0xfa>
 80010d0:	4a90      	ldr	r2, [pc, #576]	; (8001314 <HAL_GPIO_Init+0x2b0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d85d      	bhi.n	8001192 <HAL_GPIO_Init+0x12e>
 80010d6:	2b12      	cmp	r3, #18
 80010d8:	d82a      	bhi.n	8001130 <HAL_GPIO_Init+0xcc>
 80010da:	2b12      	cmp	r3, #18
 80010dc:	d859      	bhi.n	8001192 <HAL_GPIO_Init+0x12e>
 80010de:	a201      	add	r2, pc, #4	; (adr r2, 80010e4 <HAL_GPIO_Init+0x80>)
 80010e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e4:	0800115f 	.word	0x0800115f
 80010e8:	08001139 	.word	0x08001139
 80010ec:	0800114b 	.word	0x0800114b
 80010f0:	0800118d 	.word	0x0800118d
 80010f4:	08001193 	.word	0x08001193
 80010f8:	08001193 	.word	0x08001193
 80010fc:	08001193 	.word	0x08001193
 8001100:	08001193 	.word	0x08001193
 8001104:	08001193 	.word	0x08001193
 8001108:	08001193 	.word	0x08001193
 800110c:	08001193 	.word	0x08001193
 8001110:	08001193 	.word	0x08001193
 8001114:	08001193 	.word	0x08001193
 8001118:	08001193 	.word	0x08001193
 800111c:	08001193 	.word	0x08001193
 8001120:	08001193 	.word	0x08001193
 8001124:	08001193 	.word	0x08001193
 8001128:	08001141 	.word	0x08001141
 800112c:	08001155 	.word	0x08001155
 8001130:	4a79      	ldr	r2, [pc, #484]	; (8001318 <HAL_GPIO_Init+0x2b4>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d013      	beq.n	800115e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001136:	e02c      	b.n	8001192 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	623b      	str	r3, [r7, #32]
          break;
 800113e:	e029      	b.n	8001194 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	3304      	adds	r3, #4
 8001146:	623b      	str	r3, [r7, #32]
          break;
 8001148:	e024      	b.n	8001194 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	3308      	adds	r3, #8
 8001150:	623b      	str	r3, [r7, #32]
          break;
 8001152:	e01f      	b.n	8001194 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	330c      	adds	r3, #12
 800115a:	623b      	str	r3, [r7, #32]
          break;
 800115c:	e01a      	b.n	8001194 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d102      	bne.n	800116c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001166:	2304      	movs	r3, #4
 8001168:	623b      	str	r3, [r7, #32]
          break;
 800116a:	e013      	b.n	8001194 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d105      	bne.n	8001180 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001174:	2308      	movs	r3, #8
 8001176:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69fa      	ldr	r2, [r7, #28]
 800117c:	611a      	str	r2, [r3, #16]
          break;
 800117e:	e009      	b.n	8001194 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001180:	2308      	movs	r3, #8
 8001182:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69fa      	ldr	r2, [r7, #28]
 8001188:	615a      	str	r2, [r3, #20]
          break;
 800118a:	e003      	b.n	8001194 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
          break;
 8001190:	e000      	b.n	8001194 <HAL_GPIO_Init+0x130>
          break;
 8001192:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	2bff      	cmp	r3, #255	; 0xff
 8001198:	d801      	bhi.n	800119e <HAL_GPIO_Init+0x13a>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	e001      	b.n	80011a2 <HAL_GPIO_Init+0x13e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3304      	adds	r3, #4
 80011a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	2bff      	cmp	r3, #255	; 0xff
 80011a8:	d802      	bhi.n	80011b0 <HAL_GPIO_Init+0x14c>
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	e002      	b.n	80011b6 <HAL_GPIO_Init+0x152>
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	3b08      	subs	r3, #8
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	210f      	movs	r1, #15
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	fa01 f303 	lsl.w	r3, r1, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	401a      	ands	r2, r3
 80011c8:	6a39      	ldr	r1, [r7, #32]
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	fa01 f303 	lsl.w	r3, r1, r3
 80011d0:	431a      	orrs	r2, r3
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f000 80b1 	beq.w	8001346 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011e4:	4b4d      	ldr	r3, [pc, #308]	; (800131c <HAL_GPIO_Init+0x2b8>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	4a4c      	ldr	r2, [pc, #304]	; (800131c <HAL_GPIO_Init+0x2b8>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6193      	str	r3, [r2, #24]
 80011f0:	4b4a      	ldr	r3, [pc, #296]	; (800131c <HAL_GPIO_Init+0x2b8>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011fc:	4a48      	ldr	r2, [pc, #288]	; (8001320 <HAL_GPIO_Init+0x2bc>)
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	089b      	lsrs	r3, r3, #2
 8001202:	3302      	adds	r3, #2
 8001204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001208:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	220f      	movs	r2, #15
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	4013      	ands	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a40      	ldr	r2, [pc, #256]	; (8001324 <HAL_GPIO_Init+0x2c0>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d013      	beq.n	8001250 <HAL_GPIO_Init+0x1ec>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a3f      	ldr	r2, [pc, #252]	; (8001328 <HAL_GPIO_Init+0x2c4>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d00d      	beq.n	800124c <HAL_GPIO_Init+0x1e8>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a3e      	ldr	r2, [pc, #248]	; (800132c <HAL_GPIO_Init+0x2c8>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d007      	beq.n	8001248 <HAL_GPIO_Init+0x1e4>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a3d      	ldr	r2, [pc, #244]	; (8001330 <HAL_GPIO_Init+0x2cc>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d101      	bne.n	8001244 <HAL_GPIO_Init+0x1e0>
 8001240:	2303      	movs	r3, #3
 8001242:	e006      	b.n	8001252 <HAL_GPIO_Init+0x1ee>
 8001244:	2304      	movs	r3, #4
 8001246:	e004      	b.n	8001252 <HAL_GPIO_Init+0x1ee>
 8001248:	2302      	movs	r3, #2
 800124a:	e002      	b.n	8001252 <HAL_GPIO_Init+0x1ee>
 800124c:	2301      	movs	r3, #1
 800124e:	e000      	b.n	8001252 <HAL_GPIO_Init+0x1ee>
 8001250:	2300      	movs	r3, #0
 8001252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001254:	f002 0203 	and.w	r2, r2, #3
 8001258:	0092      	lsls	r2, r2, #2
 800125a:	4093      	lsls	r3, r2
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	4313      	orrs	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001262:	492f      	ldr	r1, [pc, #188]	; (8001320 <HAL_GPIO_Init+0x2bc>)
 8001264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001266:	089b      	lsrs	r3, r3, #2
 8001268:	3302      	adds	r3, #2
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d006      	beq.n	800128a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800127c:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	492c      	ldr	r1, [pc, #176]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	600b      	str	r3, [r1, #0]
 8001288:	e006      	b.n	8001298 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800128a:	4b2a      	ldr	r3, [pc, #168]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	43db      	mvns	r3, r3
 8001292:	4928      	ldr	r1, [pc, #160]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 8001294:	4013      	ands	r3, r2
 8001296:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d006      	beq.n	80012b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012a4:	4b23      	ldr	r3, [pc, #140]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	4922      	ldr	r1, [pc, #136]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	604b      	str	r3, [r1, #4]
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	491e      	ldr	r1, [pc, #120]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 80012bc:	4013      	ands	r3, r2
 80012be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d006      	beq.n	80012da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	4918      	ldr	r1, [pc, #96]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	608b      	str	r3, [r1, #8]
 80012d8:	e006      	b.n	80012e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012da:	4b16      	ldr	r3, [pc, #88]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	4914      	ldr	r1, [pc, #80]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 80012e4:	4013      	ands	r3, r2
 80012e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d021      	beq.n	8001338 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 80012f6:	68da      	ldr	r2, [r3, #12]
 80012f8:	490e      	ldr	r1, [pc, #56]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	60cb      	str	r3, [r1, #12]
 8001300:	e021      	b.n	8001346 <HAL_GPIO_Init+0x2e2>
 8001302:	bf00      	nop
 8001304:	10320000 	.word	0x10320000
 8001308:	10310000 	.word	0x10310000
 800130c:	10220000 	.word	0x10220000
 8001310:	10210000 	.word	0x10210000
 8001314:	10120000 	.word	0x10120000
 8001318:	10110000 	.word	0x10110000
 800131c:	40021000 	.word	0x40021000
 8001320:	40010000 	.word	0x40010000
 8001324:	40010800 	.word	0x40010800
 8001328:	40010c00 	.word	0x40010c00
 800132c:	40011000 	.word	0x40011000
 8001330:	40011400 	.word	0x40011400
 8001334:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <HAL_GPIO_Init+0x304>)
 800133a:	68da      	ldr	r2, [r3, #12]
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	43db      	mvns	r3, r3
 8001340:	4909      	ldr	r1, [pc, #36]	; (8001368 <HAL_GPIO_Init+0x304>)
 8001342:	4013      	ands	r3, r2
 8001344:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	3301      	adds	r3, #1
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	fa22 f303 	lsr.w	r3, r2, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	f47f ae8e 	bne.w	8001078 <HAL_GPIO_Init+0x14>
  }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	372c      	adds	r7, #44	; 0x2c
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	40010400 	.word	0x40010400

0800136c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	807b      	strh	r3, [r7, #2]
 8001378:	4613      	mov	r3, r2
 800137a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800137c:	787b      	ldrb	r3, [r7, #1]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001388:	e003      	b.n	8001392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800138a:	887b      	ldrh	r3, [r7, #2]
 800138c:	041a      	lsls	r2, r3, #16
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	611a      	str	r2, [r3, #16]
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e272      	b.n	8001894 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 8087 	beq.w	80014ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013bc:	4b92      	ldr	r3, [pc, #584]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 030c 	and.w	r3, r3, #12
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	d00c      	beq.n	80013e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013c8:	4b8f      	ldr	r3, [pc, #572]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 030c 	and.w	r3, r3, #12
 80013d0:	2b08      	cmp	r3, #8
 80013d2:	d112      	bne.n	80013fa <HAL_RCC_OscConfig+0x5e>
 80013d4:	4b8c      	ldr	r3, [pc, #560]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e0:	d10b      	bne.n	80013fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e2:	4b89      	ldr	r3, [pc, #548]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d06c      	beq.n	80014c8 <HAL_RCC_OscConfig+0x12c>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d168      	bne.n	80014c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e24c      	b.n	8001894 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001402:	d106      	bne.n	8001412 <HAL_RCC_OscConfig+0x76>
 8001404:	4b80      	ldr	r3, [pc, #512]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a7f      	ldr	r2, [pc, #508]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 800140a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	e02e      	b.n	8001470 <HAL_RCC_OscConfig+0xd4>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10c      	bne.n	8001434 <HAL_RCC_OscConfig+0x98>
 800141a:	4b7b      	ldr	r3, [pc, #492]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a7a      	ldr	r2, [pc, #488]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 8001420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	4b78      	ldr	r3, [pc, #480]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a77      	ldr	r2, [pc, #476]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 800142c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e01d      	b.n	8001470 <HAL_RCC_OscConfig+0xd4>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800143c:	d10c      	bne.n	8001458 <HAL_RCC_OscConfig+0xbc>
 800143e:	4b72      	ldr	r3, [pc, #456]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a71      	ldr	r2, [pc, #452]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 8001444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	4b6f      	ldr	r3, [pc, #444]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a6e      	ldr	r2, [pc, #440]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 8001450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	e00b      	b.n	8001470 <HAL_RCC_OscConfig+0xd4>
 8001458:	4b6b      	ldr	r3, [pc, #428]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a6a      	ldr	r2, [pc, #424]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 800145e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	4b68      	ldr	r3, [pc, #416]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a67      	ldr	r2, [pc, #412]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 800146a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800146e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d013      	beq.n	80014a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff fd06 	bl	8000e88 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001480:	f7ff fd02 	bl	8000e88 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b64      	cmp	r3, #100	; 0x64
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e200      	b.n	8001894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001492:	4b5d      	ldr	r3, [pc, #372]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <HAL_RCC_OscConfig+0xe4>
 800149e:	e014      	b.n	80014ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a0:	f7ff fcf2 	bl	8000e88 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a8:	f7ff fcee 	bl	8000e88 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b64      	cmp	r3, #100	; 0x64
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e1ec      	b.n	8001894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ba:	4b53      	ldr	r3, [pc, #332]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0x10c>
 80014c6:	e000      	b.n	80014ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d063      	beq.n	800159e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014d6:	4b4c      	ldr	r3, [pc, #304]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 030c 	and.w	r3, r3, #12
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00b      	beq.n	80014fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014e2:	4b49      	ldr	r3, [pc, #292]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 030c 	and.w	r3, r3, #12
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d11c      	bne.n	8001528 <HAL_RCC_OscConfig+0x18c>
 80014ee:	4b46      	ldr	r3, [pc, #280]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d116      	bne.n	8001528 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fa:	4b43      	ldr	r3, [pc, #268]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d005      	beq.n	8001512 <HAL_RCC_OscConfig+0x176>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d001      	beq.n	8001512 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e1c0      	b.n	8001894 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001512:	4b3d      	ldr	r3, [pc, #244]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4939      	ldr	r1, [pc, #228]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 8001522:	4313      	orrs	r3, r2
 8001524:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001526:	e03a      	b.n	800159e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d020      	beq.n	8001572 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001530:	4b36      	ldr	r3, [pc, #216]	; (800160c <HAL_RCC_OscConfig+0x270>)
 8001532:	2201      	movs	r2, #1
 8001534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001536:	f7ff fca7 	bl	8000e88 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800153e:	f7ff fca3 	bl	8000e88 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e1a1      	b.n	8001894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001550:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0f0      	beq.n	800153e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155c:	4b2a      	ldr	r3, [pc, #168]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	4927      	ldr	r1, [pc, #156]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 800156c:	4313      	orrs	r3, r2
 800156e:	600b      	str	r3, [r1, #0]
 8001570:	e015      	b.n	800159e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001572:	4b26      	ldr	r3, [pc, #152]	; (800160c <HAL_RCC_OscConfig+0x270>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001578:	f7ff fc86 	bl	8000e88 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001580:	f7ff fc82 	bl	8000e88 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e180      	b.n	8001894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001592:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d03a      	beq.n	8001620 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d019      	beq.n	80015e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <HAL_RCC_OscConfig+0x274>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b8:	f7ff fc66 	bl	8000e88 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c0:	f7ff fc62 	bl	8000e88 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e160      	b.n	8001894 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d2:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <HAL_RCC_OscConfig+0x26c>)
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f0      	beq.n	80015c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015de:	2001      	movs	r0, #1
 80015e0:	f000 faa6 	bl	8001b30 <RCC_Delay>
 80015e4:	e01c      	b.n	8001620 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <HAL_RCC_OscConfig+0x274>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ec:	f7ff fc4c 	bl	8000e88 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f2:	e00f      	b.n	8001614 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f4:	f7ff fc48 	bl	8000e88 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d908      	bls.n	8001614 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e146      	b.n	8001894 <HAL_RCC_OscConfig+0x4f8>
 8001606:	bf00      	nop
 8001608:	40021000 	.word	0x40021000
 800160c:	42420000 	.word	0x42420000
 8001610:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001614:	4b92      	ldr	r3, [pc, #584]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1e9      	bne.n	80015f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 80a6 	beq.w	800177a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800162e:	2300      	movs	r3, #0
 8001630:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001632:	4b8b      	ldr	r3, [pc, #556]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10d      	bne.n	800165a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	4b88      	ldr	r3, [pc, #544]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	4a87      	ldr	r2, [pc, #540]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001648:	61d3      	str	r3, [r2, #28]
 800164a:	4b85      	ldr	r3, [pc, #532]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001656:	2301      	movs	r3, #1
 8001658:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165a:	4b82      	ldr	r3, [pc, #520]	; (8001864 <HAL_RCC_OscConfig+0x4c8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001662:	2b00      	cmp	r3, #0
 8001664:	d118      	bne.n	8001698 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001666:	4b7f      	ldr	r3, [pc, #508]	; (8001864 <HAL_RCC_OscConfig+0x4c8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a7e      	ldr	r2, [pc, #504]	; (8001864 <HAL_RCC_OscConfig+0x4c8>)
 800166c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001672:	f7ff fc09 	bl	8000e88 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800167a:	f7ff fc05 	bl	8000e88 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b64      	cmp	r3, #100	; 0x64
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e103      	b.n	8001894 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168c:	4b75      	ldr	r3, [pc, #468]	; (8001864 <HAL_RCC_OscConfig+0x4c8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0f0      	beq.n	800167a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d106      	bne.n	80016ae <HAL_RCC_OscConfig+0x312>
 80016a0:	4b6f      	ldr	r3, [pc, #444]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	4a6e      	ldr	r2, [pc, #440]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6213      	str	r3, [r2, #32]
 80016ac:	e02d      	b.n	800170a <HAL_RCC_OscConfig+0x36e>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x334>
 80016b6:	4b6a      	ldr	r3, [pc, #424]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	4a69      	ldr	r2, [pc, #420]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 80016bc:	f023 0301 	bic.w	r3, r3, #1
 80016c0:	6213      	str	r3, [r2, #32]
 80016c2:	4b67      	ldr	r3, [pc, #412]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	4a66      	ldr	r2, [pc, #408]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 80016c8:	f023 0304 	bic.w	r3, r3, #4
 80016cc:	6213      	str	r3, [r2, #32]
 80016ce:	e01c      	b.n	800170a <HAL_RCC_OscConfig+0x36e>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	d10c      	bne.n	80016f2 <HAL_RCC_OscConfig+0x356>
 80016d8:	4b61      	ldr	r3, [pc, #388]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	4a60      	ldr	r2, [pc, #384]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 80016de:	f043 0304 	orr.w	r3, r3, #4
 80016e2:	6213      	str	r3, [r2, #32]
 80016e4:	4b5e      	ldr	r3, [pc, #376]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	4a5d      	ldr	r2, [pc, #372]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	6213      	str	r3, [r2, #32]
 80016f0:	e00b      	b.n	800170a <HAL_RCC_OscConfig+0x36e>
 80016f2:	4b5b      	ldr	r3, [pc, #364]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	4a5a      	ldr	r2, [pc, #360]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 80016f8:	f023 0301 	bic.w	r3, r3, #1
 80016fc:	6213      	str	r3, [r2, #32]
 80016fe:	4b58      	ldr	r3, [pc, #352]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	4a57      	ldr	r2, [pc, #348]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 8001704:	f023 0304 	bic.w	r3, r3, #4
 8001708:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d015      	beq.n	800173e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001712:	f7ff fbb9 	bl	8000e88 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001718:	e00a      	b.n	8001730 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171a:	f7ff fbb5 	bl	8000e88 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	f241 3288 	movw	r2, #5000	; 0x1388
 8001728:	4293      	cmp	r3, r2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e0b1      	b.n	8001894 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001730:	4b4b      	ldr	r3, [pc, #300]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0ee      	beq.n	800171a <HAL_RCC_OscConfig+0x37e>
 800173c:	e014      	b.n	8001768 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173e:	f7ff fba3 	bl	8000e88 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001744:	e00a      	b.n	800175c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001746:	f7ff fb9f 	bl	8000e88 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	f241 3288 	movw	r2, #5000	; 0x1388
 8001754:	4293      	cmp	r3, r2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e09b      	b.n	8001894 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800175c:	4b40      	ldr	r3, [pc, #256]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1ee      	bne.n	8001746 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001768:	7dfb      	ldrb	r3, [r7, #23]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d105      	bne.n	800177a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800176e:	4b3c      	ldr	r3, [pc, #240]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	4a3b      	ldr	r2, [pc, #236]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 8001774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001778:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 8087 	beq.w	8001892 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001784:	4b36      	ldr	r3, [pc, #216]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	2b08      	cmp	r3, #8
 800178e:	d061      	beq.n	8001854 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	2b02      	cmp	r3, #2
 8001796:	d146      	bne.n	8001826 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001798:	4b33      	ldr	r3, [pc, #204]	; (8001868 <HAL_RCC_OscConfig+0x4cc>)
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179e:	f7ff fb73 	bl	8000e88 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a6:	f7ff fb6f 	bl	8000e88 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e06d      	b.n	8001894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b8:	4b29      	ldr	r3, [pc, #164]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f0      	bne.n	80017a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017cc:	d108      	bne.n	80017e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017ce:	4b24      	ldr	r3, [pc, #144]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	4921      	ldr	r1, [pc, #132]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017e0:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a19      	ldr	r1, [r3, #32]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	430b      	orrs	r3, r1
 80017f2:	491b      	ldr	r1, [pc, #108]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017f8:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <HAL_RCC_OscConfig+0x4cc>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fe:	f7ff fb43 	bl	8000e88 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001806:	f7ff fb3f 	bl	8000e88 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e03d      	b.n	8001894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0f0      	beq.n	8001806 <HAL_RCC_OscConfig+0x46a>
 8001824:	e035      	b.n	8001892 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <HAL_RCC_OscConfig+0x4cc>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7ff fb2c 	bl	8000e88 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001834:	f7ff fb28 	bl	8000e88 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e026      	b.n	8001894 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_RCC_OscConfig+0x4c4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x498>
 8001852:	e01e      	b.n	8001892 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d107      	bne.n	800186c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e019      	b.n	8001894 <HAL_RCC_OscConfig+0x4f8>
 8001860:	40021000 	.word	0x40021000
 8001864:	40007000 	.word	0x40007000
 8001868:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_RCC_OscConfig+0x500>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	429a      	cmp	r2, r3
 800187e:	d106      	bne.n	800188e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188a:	429a      	cmp	r2, r3
 800188c:	d001      	beq.n	8001892 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40021000 	.word	0x40021000

080018a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0d0      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018b4:	4b6a      	ldr	r3, [pc, #424]	; (8001a60 <HAL_RCC_ClockConfig+0x1c0>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d910      	bls.n	80018e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	4b67      	ldr	r3, [pc, #412]	; (8001a60 <HAL_RCC_ClockConfig+0x1c0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f023 0207 	bic.w	r2, r3, #7
 80018ca:	4965      	ldr	r1, [pc, #404]	; (8001a60 <HAL_RCC_ClockConfig+0x1c0>)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d2:	4b63      	ldr	r3, [pc, #396]	; (8001a60 <HAL_RCC_ClockConfig+0x1c0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0b8      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d020      	beq.n	8001932 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018fc:	4b59      	ldr	r3, [pc, #356]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	4a58      	ldr	r2, [pc, #352]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001906:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001914:	4b53      	ldr	r3, [pc, #332]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	4a52      	ldr	r2, [pc, #328]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800191e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001920:	4b50      	ldr	r3, [pc, #320]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	494d      	ldr	r1, [pc, #308]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	4313      	orrs	r3, r2
 8001930:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d040      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d107      	bne.n	8001956 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d115      	bne.n	800197e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e07f      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d107      	bne.n	800196e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195e:	4b41      	ldr	r3, [pc, #260]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d109      	bne.n	800197e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e073      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196e:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e06b      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800197e:	4b39      	ldr	r3, [pc, #228]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f023 0203 	bic.w	r2, r3, #3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	4936      	ldr	r1, [pc, #216]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 800198c:	4313      	orrs	r3, r2
 800198e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001990:	f7ff fa7a 	bl	8000e88 <HAL_GetTick>
 8001994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001996:	e00a      	b.n	80019ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001998:	f7ff fa76 	bl	8000e88 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e053      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ae:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 020c 	and.w	r2, r3, #12
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	429a      	cmp	r2, r3
 80019be:	d1eb      	bne.n	8001998 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019c0:	4b27      	ldr	r3, [pc, #156]	; (8001a60 <HAL_RCC_ClockConfig+0x1c0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d210      	bcs.n	80019f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ce:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <HAL_RCC_ClockConfig+0x1c0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 0207 	bic.w	r2, r3, #7
 80019d6:	4922      	ldr	r1, [pc, #136]	; (8001a60 <HAL_RCC_ClockConfig+0x1c0>)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019de:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <HAL_RCC_ClockConfig+0x1c0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d001      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e032      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d008      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019fc:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	4916      	ldr	r1, [pc, #88]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d009      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a1a:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	490e      	ldr	r1, [pc, #56]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a2e:	f000 f821 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 8001a32:	4602      	mov	r2, r0
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	490a      	ldr	r1, [pc, #40]	; (8001a68 <HAL_RCC_ClockConfig+0x1c8>)
 8001a40:	5ccb      	ldrb	r3, [r1, r3]
 8001a42:	fa22 f303 	lsr.w	r3, r2, r3
 8001a46:	4a09      	ldr	r2, [pc, #36]	; (8001a6c <HAL_RCC_ClockConfig+0x1cc>)
 8001a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_RCC_ClockConfig+0x1d0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff f9d8 	bl	8000e04 <HAL_InitTick>

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40022000 	.word	0x40022000
 8001a64:	40021000 	.word	0x40021000
 8001a68:	080034e0 	.word	0x080034e0
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	2000000c 	.word	0x2000000c

08001a74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a74:	b490      	push	{r4, r7}
 8001a76:	b08a      	sub	sp, #40	; 0x28
 8001a78:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a7a:	4b29      	ldr	r3, [pc, #164]	; (8001b20 <HAL_RCC_GetSysClockFreq+0xac>)
 8001a7c:	1d3c      	adds	r4, r7, #4
 8001a7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a84:	f240 2301 	movw	r3, #513	; 0x201
 8001a88:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
 8001a92:	2300      	movs	r3, #0
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a9e:	4b21      	ldr	r3, [pc, #132]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d002      	beq.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x40>
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d003      	beq.n	8001aba <HAL_RCC_GetSysClockFreq+0x46>
 8001ab2:	e02b      	b.n	8001b0c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ab4:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ab6:	623b      	str	r3, [r7, #32]
      break;
 8001ab8:	e02b      	b.n	8001b12 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	0c9b      	lsrs	r3, r3, #18
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	3328      	adds	r3, #40	; 0x28
 8001ac4:	443b      	add	r3, r7
 8001ac6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001aca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d012      	beq.n	8001afc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	0c5b      	lsrs	r3, r3, #17
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	3328      	adds	r3, #40	; 0x28
 8001ae2:	443b      	add	r3, r7
 8001ae4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ae8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	4a0e      	ldr	r2, [pc, #56]	; (8001b28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001aee:	fb03 f202 	mul.w	r2, r3, r2
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
 8001afa:	e004      	b.n	8001b06 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	4a0b      	ldr	r2, [pc, #44]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b00:	fb02 f303 	mul.w	r3, r2, r3
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	623b      	str	r3, [r7, #32]
      break;
 8001b0a:	e002      	b.n	8001b12 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b0e:	623b      	str	r3, [r7, #32]
      break;
 8001b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b12:	6a3b      	ldr	r3, [r7, #32]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3728      	adds	r7, #40	; 0x28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc90      	pop	{r4, r7}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	080034c8 	.word	0x080034c8
 8001b24:	40021000 	.word	0x40021000
 8001b28:	007a1200 	.word	0x007a1200
 8001b2c:	003d0900 	.word	0x003d0900

08001b30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b38:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <RCC_Delay+0x34>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <RCC_Delay+0x38>)
 8001b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b42:	0a5b      	lsrs	r3, r3, #9
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	fb02 f303 	mul.w	r3, r2, r3
 8001b4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b4c:	bf00      	nop
  }
  while (Delay --);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1e5a      	subs	r2, r3, #1
 8001b52:	60fa      	str	r2, [r7, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f9      	bne.n	8001b4c <RCC_Delay+0x1c>
}
 8001b58:	bf00      	nop
 8001b5a:	bf00      	nop
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	20000008 	.word	0x20000008
 8001b68:	10624dd3 	.word	0x10624dd3

08001b6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e041      	b.n	8001c02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d106      	bne.n	8001b98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff f8b6 	bl	8000d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4610      	mov	r0, r2
 8001bac:	f000 f8f2 	bl	8001d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b084      	sub	sp, #16
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d101      	bne.n	8001c22 <HAL_TIM_ConfigClockSource+0x18>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e0b3      	b.n	8001d8a <HAL_TIM_ConfigClockSource+0x180>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001c40:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c48:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c5a:	d03e      	beq.n	8001cda <HAL_TIM_ConfigClockSource+0xd0>
 8001c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c60:	f200 8087 	bhi.w	8001d72 <HAL_TIM_ConfigClockSource+0x168>
 8001c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c68:	f000 8085 	beq.w	8001d76 <HAL_TIM_ConfigClockSource+0x16c>
 8001c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c70:	d87f      	bhi.n	8001d72 <HAL_TIM_ConfigClockSource+0x168>
 8001c72:	2b70      	cmp	r3, #112	; 0x70
 8001c74:	d01a      	beq.n	8001cac <HAL_TIM_ConfigClockSource+0xa2>
 8001c76:	2b70      	cmp	r3, #112	; 0x70
 8001c78:	d87b      	bhi.n	8001d72 <HAL_TIM_ConfigClockSource+0x168>
 8001c7a:	2b60      	cmp	r3, #96	; 0x60
 8001c7c:	d050      	beq.n	8001d20 <HAL_TIM_ConfigClockSource+0x116>
 8001c7e:	2b60      	cmp	r3, #96	; 0x60
 8001c80:	d877      	bhi.n	8001d72 <HAL_TIM_ConfigClockSource+0x168>
 8001c82:	2b50      	cmp	r3, #80	; 0x50
 8001c84:	d03c      	beq.n	8001d00 <HAL_TIM_ConfigClockSource+0xf6>
 8001c86:	2b50      	cmp	r3, #80	; 0x50
 8001c88:	d873      	bhi.n	8001d72 <HAL_TIM_ConfigClockSource+0x168>
 8001c8a:	2b40      	cmp	r3, #64	; 0x40
 8001c8c:	d058      	beq.n	8001d40 <HAL_TIM_ConfigClockSource+0x136>
 8001c8e:	2b40      	cmp	r3, #64	; 0x40
 8001c90:	d86f      	bhi.n	8001d72 <HAL_TIM_ConfigClockSource+0x168>
 8001c92:	2b30      	cmp	r3, #48	; 0x30
 8001c94:	d064      	beq.n	8001d60 <HAL_TIM_ConfigClockSource+0x156>
 8001c96:	2b30      	cmp	r3, #48	; 0x30
 8001c98:	d86b      	bhi.n	8001d72 <HAL_TIM_ConfigClockSource+0x168>
 8001c9a:	2b20      	cmp	r3, #32
 8001c9c:	d060      	beq.n	8001d60 <HAL_TIM_ConfigClockSource+0x156>
 8001c9e:	2b20      	cmp	r3, #32
 8001ca0:	d867      	bhi.n	8001d72 <HAL_TIM_ConfigClockSource+0x168>
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d05c      	beq.n	8001d60 <HAL_TIM_ConfigClockSource+0x156>
 8001ca6:	2b10      	cmp	r3, #16
 8001ca8:	d05a      	beq.n	8001d60 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001caa:	e062      	b.n	8001d72 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6818      	ldr	r0, [r3, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	6899      	ldr	r1, [r3, #8]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f000 f943 	bl	8001f46 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001cce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	609a      	str	r2, [r3, #8]
      break;
 8001cd8:	e04e      	b.n	8001d78 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	6899      	ldr	r1, [r3, #8]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f000 f92c 	bl	8001f46 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cfc:	609a      	str	r2, [r3, #8]
      break;
 8001cfe:	e03b      	b.n	8001d78 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	6859      	ldr	r1, [r3, #4]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	f000 f8a3 	bl	8001e58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2150      	movs	r1, #80	; 0x50
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 f8fa 	bl	8001f12 <TIM_ITRx_SetConfig>
      break;
 8001d1e:	e02b      	b.n	8001d78 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	6859      	ldr	r1, [r3, #4]
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	f000 f8c1 	bl	8001eb4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2160      	movs	r1, #96	; 0x60
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 f8ea 	bl	8001f12 <TIM_ITRx_SetConfig>
      break;
 8001d3e:	e01b      	b.n	8001d78 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	6859      	ldr	r1, [r3, #4]
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	f000 f883 	bl	8001e58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2140      	movs	r1, #64	; 0x40
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 f8da 	bl	8001f12 <TIM_ITRx_SetConfig>
      break;
 8001d5e:	e00b      	b.n	8001d78 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	f000 f8d1 	bl	8001f12 <TIM_ITRx_SetConfig>
        break;
 8001d70:	e002      	b.n	8001d78 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001d72:	bf00      	nop
 8001d74:	e000      	b.n	8001d78 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001d76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a29      	ldr	r2, [pc, #164]	; (8001e4c <TIM_Base_SetConfig+0xb8>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d00b      	beq.n	8001dc4 <TIM_Base_SetConfig+0x30>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db2:	d007      	beq.n	8001dc4 <TIM_Base_SetConfig+0x30>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a26      	ldr	r2, [pc, #152]	; (8001e50 <TIM_Base_SetConfig+0xbc>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d003      	beq.n	8001dc4 <TIM_Base_SetConfig+0x30>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a25      	ldr	r2, [pc, #148]	; (8001e54 <TIM_Base_SetConfig+0xc0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d108      	bne.n	8001dd6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a1c      	ldr	r2, [pc, #112]	; (8001e4c <TIM_Base_SetConfig+0xb8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d00b      	beq.n	8001df6 <TIM_Base_SetConfig+0x62>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de4:	d007      	beq.n	8001df6 <TIM_Base_SetConfig+0x62>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a19      	ldr	r2, [pc, #100]	; (8001e50 <TIM_Base_SetConfig+0xbc>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d003      	beq.n	8001df6 <TIM_Base_SetConfig+0x62>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a18      	ldr	r2, [pc, #96]	; (8001e54 <TIM_Base_SetConfig+0xc0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d108      	bne.n	8001e08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a07      	ldr	r2, [pc, #28]	; (8001e4c <TIM_Base_SetConfig+0xb8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d103      	bne.n	8001e3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	691a      	ldr	r2, [r3, #16]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	615a      	str	r2, [r3, #20]
}
 8001e42:	bf00      	nop
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr
 8001e4c:	40012c00 	.word	0x40012c00
 8001e50:	40000400 	.word	0x40000400
 8001e54:	40000800 	.word	0x40000800

08001e58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b087      	sub	sp, #28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	f023 0201 	bic.w	r2, r3, #1
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f023 030a 	bic.w	r3, r3, #10
 8001e94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	621a      	str	r2, [r3, #32]
}
 8001eaa:	bf00      	nop
 8001eac:	371c      	adds	r7, #28
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	f023 0210 	bic.w	r2, r3, #16
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ede:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	031b      	lsls	r3, r3, #12
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001ef0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	011b      	lsls	r3, r3, #4
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	621a      	str	r2, [r3, #32]
}
 8001f08:	bf00      	nop
 8001f0a:	371c      	adds	r7, #28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr

08001f12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b085      	sub	sp, #20
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f043 0307 	orr.w	r3, r3, #7
 8001f34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	609a      	str	r2, [r3, #8]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b087      	sub	sp, #28
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	021a      	lsls	r2, r3, #8
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	609a      	str	r2, [r3, #8]
}
 8001f7a:	bf00      	nop
 8001f7c:	371c      	adds	r7, #28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e046      	b.n	800202a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a16      	ldr	r2, [pc, #88]	; (8002034 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d00e      	beq.n	8001ffe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe8:	d009      	beq.n	8001ffe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a12      	ldr	r2, [pc, #72]	; (8002038 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d004      	beq.n	8001ffe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a10      	ldr	r2, [pc, #64]	; (800203c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d10c      	bne.n	8002018 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002004:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	4313      	orrs	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr
 8002034:	40012c00 	.word	0x40012c00
 8002038:	40000400 	.word	0x40000400
 800203c:	40000800 	.word	0x40000800

08002040 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800204e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002052:	2b84      	cmp	r3, #132	; 0x84
 8002054:	d005      	beq.n	8002062 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002056:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4413      	add	r3, r2
 800205e:	3303      	adds	r3, #3
 8002060:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002062:	68fb      	ldr	r3, [r7, #12]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr

0800206e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002072:	f000 fad1 	bl	8002618 <vTaskStartScheduler>
  
  return osOK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	bd80      	pop	{r7, pc}

0800207c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800207c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800207e:	b089      	sub	sp, #36	; 0x24
 8002080:	af04      	add	r7, sp, #16
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d020      	beq.n	80020d0 <osThreadCreate+0x54>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d01c      	beq.n	80020d0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685c      	ldr	r4, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681d      	ldr	r5, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691e      	ldr	r6, [r3, #16]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ffc9 	bl	8002040 <makeFreeRtosPriority>
 80020ae:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020b8:	9202      	str	r2, [sp, #8]
 80020ba:	9301      	str	r3, [sp, #4]
 80020bc:	9100      	str	r1, [sp, #0]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	4632      	mov	r2, r6
 80020c2:	4629      	mov	r1, r5
 80020c4:	4620      	mov	r0, r4
 80020c6:	f000 f8e8 	bl	800229a <xTaskCreateStatic>
 80020ca:	4603      	mov	r3, r0
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	e01c      	b.n	800210a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685c      	ldr	r4, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020dc:	b29e      	uxth	r6, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ffab 	bl	8002040 <makeFreeRtosPriority>
 80020ea:	4602      	mov	r2, r0
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	9200      	str	r2, [sp, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	4632      	mov	r2, r6
 80020f8:	4629      	mov	r1, r5
 80020fa:	4620      	mov	r0, r4
 80020fc:	f000 f929 	bl	8002352 <xTaskCreate>
 8002100:	4603      	mov	r3, r0
 8002102:	2b01      	cmp	r3, #1
 8002104:	d001      	beq.n	800210a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002106:	2300      	movs	r3, #0
 8002108:	e000      	b.n	800210c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800210a:	68fb      	ldr	r3, [r7, #12]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002114 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <osDelay+0x16>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	e000      	b.n	800212c <osDelay+0x18>
 800212a:	2301      	movs	r3, #1
 800212c:	4618      	mov	r0, r3
 800212e:	f000 fa3f 	bl	80025b0 <vTaskDelay>
  
  return osOK;
 8002132:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f103 0208 	add.w	r2, r3, #8
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f04f 32ff 	mov.w	r2, #4294967295
 8002154:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f103 0208 	add.w	r2, r3, #8
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f103 0208 	add.w	r2, r3, #8
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr

0800217a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002192:	b480      	push	{r7}
 8002194:	b085      	sub	sp, #20
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	601a      	str	r2, [r3, #0]
}
 80021ce:	bf00      	nop
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ee:	d103      	bne.n	80021f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	e00c      	b.n	8002212 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3308      	adds	r3, #8
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	e002      	b.n	8002206 <vListInsert+0x2e>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	429a      	cmp	r2, r3
 8002210:	d2f6      	bcs.n	8002200 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	601a      	str	r2, [r3, #0]
}
 800223e:	bf00      	nop
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6892      	ldr	r2, [r2, #8]
 800225e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6852      	ldr	r2, [r2, #4]
 8002268:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	429a      	cmp	r2, r3
 8002272:	d103      	bne.n	800227c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	1e5a      	subs	r2, r3, #1
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr

0800229a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800229a:	b580      	push	{r7, lr}
 800229c:	b08e      	sub	sp, #56	; 0x38
 800229e:	af04      	add	r7, sp, #16
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80022a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10a      	bne.n	80022c4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80022ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b2:	f383 8811 	msr	BASEPRI, r3
 80022b6:	f3bf 8f6f 	isb	sy
 80022ba:	f3bf 8f4f 	dsb	sy
 80022be:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80022c0:	bf00      	nop
 80022c2:	e7fe      	b.n	80022c2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80022c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10a      	bne.n	80022e0 <xTaskCreateStatic+0x46>
	__asm volatile
 80022ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ce:	f383 8811 	msr	BASEPRI, r3
 80022d2:	f3bf 8f6f 	isb	sy
 80022d6:	f3bf 8f4f 	dsb	sy
 80022da:	61fb      	str	r3, [r7, #28]
}
 80022dc:	bf00      	nop
 80022de:	e7fe      	b.n	80022de <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80022e0:	2354      	movs	r3, #84	; 0x54
 80022e2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	2b54      	cmp	r3, #84	; 0x54
 80022e8:	d00a      	beq.n	8002300 <xTaskCreateStatic+0x66>
	__asm volatile
 80022ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ee:	f383 8811 	msr	BASEPRI, r3
 80022f2:	f3bf 8f6f 	isb	sy
 80022f6:	f3bf 8f4f 	dsb	sy
 80022fa:	61bb      	str	r3, [r7, #24]
}
 80022fc:	bf00      	nop
 80022fe:	e7fe      	b.n	80022fe <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002302:	2b00      	cmp	r3, #0
 8002304:	d01e      	beq.n	8002344 <xTaskCreateStatic+0xaa>
 8002306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002308:	2b00      	cmp	r3, #0
 800230a:	d01b      	beq.n	8002344 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800230c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002314:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	2202      	movs	r2, #2
 800231a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800231e:	2300      	movs	r3, #0
 8002320:	9303      	str	r3, [sp, #12]
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	9302      	str	r3, [sp, #8]
 8002326:	f107 0314 	add.w	r3, r7, #20
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68b9      	ldr	r1, [r7, #8]
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 f850 	bl	80023dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800233c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800233e:	f000 f8cd 	bl	80024dc <prvAddNewTaskToReadyList>
 8002342:	e001      	b.n	8002348 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002348:	697b      	ldr	r3, [r7, #20]
	}
 800234a:	4618      	mov	r0, r3
 800234c:	3728      	adds	r7, #40	; 0x28
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002352:	b580      	push	{r7, lr}
 8002354:	b08c      	sub	sp, #48	; 0x30
 8002356:	af04      	add	r7, sp, #16
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	4613      	mov	r3, r2
 8002360:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fe8a 	bl	8003080 <pvPortMalloc>
 800236c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00e      	beq.n	8002392 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002374:	2054      	movs	r0, #84	; 0x54
 8002376:	f000 fe83 	bl	8003080 <pvPortMalloc>
 800237a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	631a      	str	r2, [r3, #48]	; 0x30
 8002388:	e005      	b.n	8002396 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800238a:	6978      	ldr	r0, [r7, #20]
 800238c:	f000 ff3c 	bl	8003208 <vPortFree>
 8002390:	e001      	b.n	8002396 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d017      	beq.n	80023cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80023a4:	88fa      	ldrh	r2, [r7, #6]
 80023a6:	2300      	movs	r3, #0
 80023a8:	9303      	str	r3, [sp, #12]
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	9302      	str	r3, [sp, #8]
 80023ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68b9      	ldr	r1, [r7, #8]
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 f80e 	bl	80023dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80023c0:	69f8      	ldr	r0, [r7, #28]
 80023c2:	f000 f88b 	bl	80024dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80023c6:	2301      	movs	r3, #1
 80023c8:	61bb      	str	r3, [r7, #24]
 80023ca:	e002      	b.n	80023d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80023cc:	f04f 33ff 	mov.w	r3, #4294967295
 80023d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80023d2:	69bb      	ldr	r3, [r7, #24]
	}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3720      	adds	r7, #32
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
 80023e8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80023ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023f4:	3b01      	subs	r3, #1
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	f023 0307 	bic.w	r3, r3, #7
 8002402:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00a      	beq.n	8002424 <prvInitialiseNewTask+0x48>
	__asm volatile
 800240e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002412:	f383 8811 	msr	BASEPRI, r3
 8002416:	f3bf 8f6f 	isb	sy
 800241a:	f3bf 8f4f 	dsb	sy
 800241e:	617b      	str	r3, [r7, #20]
}
 8002420:	bf00      	nop
 8002422:	e7fe      	b.n	8002422 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002424:	2300      	movs	r3, #0
 8002426:	61fb      	str	r3, [r7, #28]
 8002428:	e012      	b.n	8002450 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	4413      	add	r3, r2
 8002430:	7819      	ldrb	r1, [r3, #0]
 8002432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	4413      	add	r3, r2
 8002438:	3334      	adds	r3, #52	; 0x34
 800243a:	460a      	mov	r2, r1
 800243c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	4413      	add	r3, r2
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d006      	beq.n	8002458 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3301      	adds	r3, #1
 800244e:	61fb      	str	r3, [r7, #28]
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	2b0f      	cmp	r3, #15
 8002454:	d9e9      	bls.n	800242a <prvInitialiseNewTask+0x4e>
 8002456:	e000      	b.n	800245a <prvInitialiseNewTask+0x7e>
		{
			break;
 8002458:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800245a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002464:	2b06      	cmp	r3, #6
 8002466:	d901      	bls.n	800246c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002468:	2306      	movs	r3, #6
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800246c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002470:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002474:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002476:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247a:	2200      	movs	r2, #0
 800247c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800247e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002480:	3304      	adds	r3, #4
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fe79 	bl	800217a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248a:	3318      	adds	r3, #24
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fe74 	bl	800217a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002496:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249a:	f1c3 0207 	rsb	r2, r3, #7
 800249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80024a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80024a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024aa:	2200      	movs	r2, #0
 80024ac:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80024ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	68f9      	ldr	r1, [r7, #12]
 80024ba:	69b8      	ldr	r0, [r7, #24]
 80024bc:	f000 fc2c 	bl	8002d18 <pxPortInitialiseStack>
 80024c0:	4602      	mov	r2, r0
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80024c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80024cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80024d2:	bf00      	nop
 80024d4:	3720      	adds	r7, #32
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80024e4:	f000 fd0a 	bl	8002efc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80024e8:	4b2a      	ldr	r3, [pc, #168]	; (8002594 <prvAddNewTaskToReadyList+0xb8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	3301      	adds	r3, #1
 80024ee:	4a29      	ldr	r2, [pc, #164]	; (8002594 <prvAddNewTaskToReadyList+0xb8>)
 80024f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80024f2:	4b29      	ldr	r3, [pc, #164]	; (8002598 <prvAddNewTaskToReadyList+0xbc>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d109      	bne.n	800250e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80024fa:	4a27      	ldr	r2, [pc, #156]	; (8002598 <prvAddNewTaskToReadyList+0xbc>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002500:	4b24      	ldr	r3, [pc, #144]	; (8002594 <prvAddNewTaskToReadyList+0xb8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d110      	bne.n	800252a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002508:	f000 fac0 	bl	8002a8c <prvInitialiseTaskLists>
 800250c:	e00d      	b.n	800252a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800250e:	4b23      	ldr	r3, [pc, #140]	; (800259c <prvAddNewTaskToReadyList+0xc0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d109      	bne.n	800252a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002516:	4b20      	ldr	r3, [pc, #128]	; (8002598 <prvAddNewTaskToReadyList+0xbc>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	429a      	cmp	r2, r3
 8002522:	d802      	bhi.n	800252a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002524:	4a1c      	ldr	r2, [pc, #112]	; (8002598 <prvAddNewTaskToReadyList+0xbc>)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800252a:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <prvAddNewTaskToReadyList+0xc4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	3301      	adds	r3, #1
 8002530:	4a1b      	ldr	r2, [pc, #108]	; (80025a0 <prvAddNewTaskToReadyList+0xc4>)
 8002532:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002538:	2201      	movs	r2, #1
 800253a:	409a      	lsls	r2, r3
 800253c:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <prvAddNewTaskToReadyList+0xc8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4313      	orrs	r3, r2
 8002542:	4a18      	ldr	r2, [pc, #96]	; (80025a4 <prvAddNewTaskToReadyList+0xc8>)
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4a15      	ldr	r2, [pc, #84]	; (80025a8 <prvAddNewTaskToReadyList+0xcc>)
 8002554:	441a      	add	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3304      	adds	r3, #4
 800255a:	4619      	mov	r1, r3
 800255c:	4610      	mov	r0, r2
 800255e:	f7ff fe18 	bl	8002192 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002562:	f000 fcfb 	bl	8002f5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002566:	4b0d      	ldr	r3, [pc, #52]	; (800259c <prvAddNewTaskToReadyList+0xc0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00e      	beq.n	800258c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <prvAddNewTaskToReadyList+0xbc>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	429a      	cmp	r2, r3
 800257a:	d207      	bcs.n	800258c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <prvAddNewTaskToReadyList+0xd0>)
 800257e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	f3bf 8f4f 	dsb	sy
 8002588:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200003e4 	.word	0x200003e4
 8002598:	200002e4 	.word	0x200002e4
 800259c:	200003f0 	.word	0x200003f0
 80025a0:	20000400 	.word	0x20000400
 80025a4:	200003ec 	.word	0x200003ec
 80025a8:	200002e8 	.word	0x200002e8
 80025ac:	e000ed04 	.word	0xe000ed04

080025b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d017      	beq.n	80025f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80025c2:	4b13      	ldr	r3, [pc, #76]	; (8002610 <vTaskDelay+0x60>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00a      	beq.n	80025e0 <vTaskDelay+0x30>
	__asm volatile
 80025ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ce:	f383 8811 	msr	BASEPRI, r3
 80025d2:	f3bf 8f6f 	isb	sy
 80025d6:	f3bf 8f4f 	dsb	sy
 80025da:	60bb      	str	r3, [r7, #8]
}
 80025dc:	bf00      	nop
 80025de:	e7fe      	b.n	80025de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80025e0:	f000 f87a 	bl	80026d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80025e4:	2100      	movs	r1, #0
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 fb30 	bl	8002c4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80025ec:	f000 f882 	bl	80026f4 <xTaskResumeAll>
 80025f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d107      	bne.n	8002608 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <vTaskDelay+0x64>)
 80025fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	f3bf 8f4f 	dsb	sy
 8002604:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002608:	bf00      	nop
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	2000040c 	.word	0x2000040c
 8002614:	e000ed04 	.word	0xe000ed04

08002618 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08a      	sub	sp, #40	; 0x28
 800261c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800261e:	2300      	movs	r3, #0
 8002620:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002622:	2300      	movs	r3, #0
 8002624:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002626:	463a      	mov	r2, r7
 8002628:	1d39      	adds	r1, r7, #4
 800262a:	f107 0308 	add.w	r3, r7, #8
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe f984 	bl	800093c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002634:	6839      	ldr	r1, [r7, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	9202      	str	r2, [sp, #8]
 800263c:	9301      	str	r3, [sp, #4]
 800263e:	2300      	movs	r3, #0
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	2300      	movs	r3, #0
 8002644:	460a      	mov	r2, r1
 8002646:	491e      	ldr	r1, [pc, #120]	; (80026c0 <vTaskStartScheduler+0xa8>)
 8002648:	481e      	ldr	r0, [pc, #120]	; (80026c4 <vTaskStartScheduler+0xac>)
 800264a:	f7ff fe26 	bl	800229a <xTaskCreateStatic>
 800264e:	4603      	mov	r3, r0
 8002650:	4a1d      	ldr	r2, [pc, #116]	; (80026c8 <vTaskStartScheduler+0xb0>)
 8002652:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002654:	4b1c      	ldr	r3, [pc, #112]	; (80026c8 <vTaskStartScheduler+0xb0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800265c:	2301      	movs	r3, #1
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	e001      	b.n	8002666 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d116      	bne.n	800269a <vTaskStartScheduler+0x82>
	__asm volatile
 800266c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002670:	f383 8811 	msr	BASEPRI, r3
 8002674:	f3bf 8f6f 	isb	sy
 8002678:	f3bf 8f4f 	dsb	sy
 800267c:	613b      	str	r3, [r7, #16]
}
 800267e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <vTaskStartScheduler+0xb4>)
 8002682:	f04f 32ff 	mov.w	r2, #4294967295
 8002686:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <vTaskStartScheduler+0xb8>)
 800268a:	2201      	movs	r2, #1
 800268c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800268e:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <vTaskStartScheduler+0xbc>)
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002694:	f000 fbc0 	bl	8002e18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002698:	e00e      	b.n	80026b8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a0:	d10a      	bne.n	80026b8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80026a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a6:	f383 8811 	msr	BASEPRI, r3
 80026aa:	f3bf 8f6f 	isb	sy
 80026ae:	f3bf 8f4f 	dsb	sy
 80026b2:	60fb      	str	r3, [r7, #12]
}
 80026b4:	bf00      	nop
 80026b6:	e7fe      	b.n	80026b6 <vTaskStartScheduler+0x9e>
}
 80026b8:	bf00      	nop
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	080034d8 	.word	0x080034d8
 80026c4:	08002a5d 	.word	0x08002a5d
 80026c8:	20000408 	.word	0x20000408
 80026cc:	20000404 	.word	0x20000404
 80026d0:	200003f0 	.word	0x200003f0
 80026d4:	200003e8 	.word	0x200003e8

080026d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80026dc:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <vTaskSuspendAll+0x18>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	3301      	adds	r3, #1
 80026e2:	4a03      	ldr	r2, [pc, #12]	; (80026f0 <vTaskSuspendAll+0x18>)
 80026e4:	6013      	str	r3, [r2, #0]
}
 80026e6:	bf00      	nop
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	2000040c 	.word	0x2000040c

080026f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80026fe:	2300      	movs	r3, #0
 8002700:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002702:	4b41      	ldr	r3, [pc, #260]	; (8002808 <xTaskResumeAll+0x114>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10a      	bne.n	8002720 <xTaskResumeAll+0x2c>
	__asm volatile
 800270a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800270e:	f383 8811 	msr	BASEPRI, r3
 8002712:	f3bf 8f6f 	isb	sy
 8002716:	f3bf 8f4f 	dsb	sy
 800271a:	603b      	str	r3, [r7, #0]
}
 800271c:	bf00      	nop
 800271e:	e7fe      	b.n	800271e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002720:	f000 fbec 	bl	8002efc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002724:	4b38      	ldr	r3, [pc, #224]	; (8002808 <xTaskResumeAll+0x114>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	3b01      	subs	r3, #1
 800272a:	4a37      	ldr	r2, [pc, #220]	; (8002808 <xTaskResumeAll+0x114>)
 800272c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800272e:	4b36      	ldr	r3, [pc, #216]	; (8002808 <xTaskResumeAll+0x114>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d161      	bne.n	80027fa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002736:	4b35      	ldr	r3, [pc, #212]	; (800280c <xTaskResumeAll+0x118>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d05d      	beq.n	80027fa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800273e:	e02e      	b.n	800279e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002740:	4b33      	ldr	r3, [pc, #204]	; (8002810 <xTaskResumeAll+0x11c>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	3318      	adds	r3, #24
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff fd7b 	bl	8002248 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	3304      	adds	r3, #4
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fd76 	bl	8002248 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002760:	2201      	movs	r2, #1
 8002762:	409a      	lsls	r2, r3
 8002764:	4b2b      	ldr	r3, [pc, #172]	; (8002814 <xTaskResumeAll+0x120>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4313      	orrs	r3, r2
 800276a:	4a2a      	ldr	r2, [pc, #168]	; (8002814 <xTaskResumeAll+0x120>)
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4a27      	ldr	r2, [pc, #156]	; (8002818 <xTaskResumeAll+0x124>)
 800277c:	441a      	add	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	3304      	adds	r3, #4
 8002782:	4619      	mov	r1, r3
 8002784:	4610      	mov	r0, r2
 8002786:	f7ff fd04 	bl	8002192 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800278e:	4b23      	ldr	r3, [pc, #140]	; (800281c <xTaskResumeAll+0x128>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	429a      	cmp	r2, r3
 8002796:	d302      	bcc.n	800279e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002798:	4b21      	ldr	r3, [pc, #132]	; (8002820 <xTaskResumeAll+0x12c>)
 800279a:	2201      	movs	r2, #1
 800279c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800279e:	4b1c      	ldr	r3, [pc, #112]	; (8002810 <xTaskResumeAll+0x11c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1cc      	bne.n	8002740 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80027ac:	f000 fa0c 	bl	8002bc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80027b0:	4b1c      	ldr	r3, [pc, #112]	; (8002824 <xTaskResumeAll+0x130>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d010      	beq.n	80027de <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80027bc:	f000 f836 	bl	800282c <xTaskIncrementTick>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80027c6:	4b16      	ldr	r3, [pc, #88]	; (8002820 <xTaskResumeAll+0x12c>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f1      	bne.n	80027bc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80027d8:	4b12      	ldr	r3, [pc, #72]	; (8002824 <xTaskResumeAll+0x130>)
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80027de:	4b10      	ldr	r3, [pc, #64]	; (8002820 <xTaskResumeAll+0x12c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d009      	beq.n	80027fa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80027e6:	2301      	movs	r3, #1
 80027e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80027ea:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <xTaskResumeAll+0x134>)
 80027ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	f3bf 8f4f 	dsb	sy
 80027f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80027fa:	f000 fbaf 	bl	8002f5c <vPortExitCritical>

	return xAlreadyYielded;
 80027fe:	68bb      	ldr	r3, [r7, #8]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	2000040c 	.word	0x2000040c
 800280c:	200003e4 	.word	0x200003e4
 8002810:	200003a4 	.word	0x200003a4
 8002814:	200003ec 	.word	0x200003ec
 8002818:	200002e8 	.word	0x200002e8
 800281c:	200002e4 	.word	0x200002e4
 8002820:	200003f8 	.word	0x200003f8
 8002824:	200003f4 	.word	0x200003f4
 8002828:	e000ed04 	.word	0xe000ed04

0800282c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002836:	4b51      	ldr	r3, [pc, #324]	; (800297c <xTaskIncrementTick+0x150>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	f040 808d 	bne.w	800295a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002840:	4b4f      	ldr	r3, [pc, #316]	; (8002980 <xTaskIncrementTick+0x154>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	3301      	adds	r3, #1
 8002846:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002848:	4a4d      	ldr	r2, [pc, #308]	; (8002980 <xTaskIncrementTick+0x154>)
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d120      	bne.n	8002896 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002854:	4b4b      	ldr	r3, [pc, #300]	; (8002984 <xTaskIncrementTick+0x158>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <xTaskIncrementTick+0x48>
	__asm volatile
 800285e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002862:	f383 8811 	msr	BASEPRI, r3
 8002866:	f3bf 8f6f 	isb	sy
 800286a:	f3bf 8f4f 	dsb	sy
 800286e:	603b      	str	r3, [r7, #0]
}
 8002870:	bf00      	nop
 8002872:	e7fe      	b.n	8002872 <xTaskIncrementTick+0x46>
 8002874:	4b43      	ldr	r3, [pc, #268]	; (8002984 <xTaskIncrementTick+0x158>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b43      	ldr	r3, [pc, #268]	; (8002988 <xTaskIncrementTick+0x15c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a41      	ldr	r2, [pc, #260]	; (8002984 <xTaskIncrementTick+0x158>)
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4a41      	ldr	r2, [pc, #260]	; (8002988 <xTaskIncrementTick+0x15c>)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	4b40      	ldr	r3, [pc, #256]	; (800298c <xTaskIncrementTick+0x160>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3301      	adds	r3, #1
 800288e:	4a3f      	ldr	r2, [pc, #252]	; (800298c <xTaskIncrementTick+0x160>)
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	f000 f999 	bl	8002bc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002896:	4b3e      	ldr	r3, [pc, #248]	; (8002990 <xTaskIncrementTick+0x164>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	429a      	cmp	r2, r3
 800289e:	d34d      	bcc.n	800293c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028a0:	4b38      	ldr	r3, [pc, #224]	; (8002984 <xTaskIncrementTick+0x158>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <xTaskIncrementTick+0x82>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <xTaskIncrementTick+0x84>
 80028ae:	2300      	movs	r3, #0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d004      	beq.n	80028be <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028b4:	4b36      	ldr	r3, [pc, #216]	; (8002990 <xTaskIncrementTick+0x164>)
 80028b6:	f04f 32ff 	mov.w	r2, #4294967295
 80028ba:	601a      	str	r2, [r3, #0]
					break;
 80028bc:	e03e      	b.n	800293c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80028be:	4b31      	ldr	r3, [pc, #196]	; (8002984 <xTaskIncrementTick+0x158>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d203      	bcs.n	80028de <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80028d6:	4a2e      	ldr	r2, [pc, #184]	; (8002990 <xTaskIncrementTick+0x164>)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6013      	str	r3, [r2, #0]
						break;
 80028dc:	e02e      	b.n	800293c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	3304      	adds	r3, #4
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fcb0 	bl	8002248 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d004      	beq.n	80028fa <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	3318      	adds	r3, #24
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff fca7 	bl	8002248 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fe:	2201      	movs	r2, #1
 8002900:	409a      	lsls	r2, r3
 8002902:	4b24      	ldr	r3, [pc, #144]	; (8002994 <xTaskIncrementTick+0x168>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4313      	orrs	r3, r2
 8002908:	4a22      	ldr	r2, [pc, #136]	; (8002994 <xTaskIncrementTick+0x168>)
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4a1f      	ldr	r2, [pc, #124]	; (8002998 <xTaskIncrementTick+0x16c>)
 800291a:	441a      	add	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	3304      	adds	r3, #4
 8002920:	4619      	mov	r1, r3
 8002922:	4610      	mov	r0, r2
 8002924:	f7ff fc35 	bl	8002192 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800292c:	4b1b      	ldr	r3, [pc, #108]	; (800299c <xTaskIncrementTick+0x170>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002932:	429a      	cmp	r2, r3
 8002934:	d3b4      	bcc.n	80028a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002936:	2301      	movs	r3, #1
 8002938:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800293a:	e7b1      	b.n	80028a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800293c:	4b17      	ldr	r3, [pc, #92]	; (800299c <xTaskIncrementTick+0x170>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002942:	4915      	ldr	r1, [pc, #84]	; (8002998 <xTaskIncrementTick+0x16c>)
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d907      	bls.n	8002964 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002954:	2301      	movs	r3, #1
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	e004      	b.n	8002964 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800295a:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <xTaskIncrementTick+0x174>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3301      	adds	r3, #1
 8002960:	4a0f      	ldr	r2, [pc, #60]	; (80029a0 <xTaskIncrementTick+0x174>)
 8002962:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002964:	4b0f      	ldr	r3, [pc, #60]	; (80029a4 <xTaskIncrementTick+0x178>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800296c:	2301      	movs	r3, #1
 800296e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002970:	697b      	ldr	r3, [r7, #20]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	2000040c 	.word	0x2000040c
 8002980:	200003e8 	.word	0x200003e8
 8002984:	2000039c 	.word	0x2000039c
 8002988:	200003a0 	.word	0x200003a0
 800298c:	200003fc 	.word	0x200003fc
 8002990:	20000404 	.word	0x20000404
 8002994:	200003ec 	.word	0x200003ec
 8002998:	200002e8 	.word	0x200002e8
 800299c:	200002e4 	.word	0x200002e4
 80029a0:	200003f4 	.word	0x200003f4
 80029a4:	200003f8 	.word	0x200003f8

080029a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80029ae:	4b26      	ldr	r3, [pc, #152]	; (8002a48 <vTaskSwitchContext+0xa0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80029b6:	4b25      	ldr	r3, [pc, #148]	; (8002a4c <vTaskSwitchContext+0xa4>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80029bc:	e03f      	b.n	8002a3e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80029be:	4b23      	ldr	r3, [pc, #140]	; (8002a4c <vTaskSwitchContext+0xa4>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80029c4:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <vTaskSwitchContext+0xa8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	fab3 f383 	clz	r3, r3
 80029d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80029d2:	7afb      	ldrb	r3, [r7, #11]
 80029d4:	f1c3 031f 	rsb	r3, r3, #31
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	491e      	ldr	r1, [pc, #120]	; (8002a54 <vTaskSwitchContext+0xac>)
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10a      	bne.n	8002a04 <vTaskSwitchContext+0x5c>
	__asm volatile
 80029ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f2:	f383 8811 	msr	BASEPRI, r3
 80029f6:	f3bf 8f6f 	isb	sy
 80029fa:	f3bf 8f4f 	dsb	sy
 80029fe:	607b      	str	r3, [r7, #4]
}
 8002a00:	bf00      	nop
 8002a02:	e7fe      	b.n	8002a02 <vTaskSwitchContext+0x5a>
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4a11      	ldr	r2, [pc, #68]	; (8002a54 <vTaskSwitchContext+0xac>)
 8002a10:	4413      	add	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	3308      	adds	r3, #8
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d104      	bne.n	8002a34 <vTaskSwitchContext+0x8c>
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	605a      	str	r2, [r3, #4]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	4a07      	ldr	r2, [pc, #28]	; (8002a58 <vTaskSwitchContext+0xb0>)
 8002a3c:	6013      	str	r3, [r2, #0]
}
 8002a3e:	bf00      	nop
 8002a40:	371c      	adds	r7, #28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	2000040c 	.word	0x2000040c
 8002a4c:	200003f8 	.word	0x200003f8
 8002a50:	200003ec 	.word	0x200003ec
 8002a54:	200002e8 	.word	0x200002e8
 8002a58:	200002e4 	.word	0x200002e4

08002a5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002a64:	f000 f852 	bl	8002b0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <prvIdleTask+0x28>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d9f9      	bls.n	8002a64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <prvIdleTask+0x2c>)
 8002a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	f3bf 8f4f 	dsb	sy
 8002a7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002a80:	e7f0      	b.n	8002a64 <prvIdleTask+0x8>
 8002a82:	bf00      	nop
 8002a84:	200002e8 	.word	0x200002e8
 8002a88:	e000ed04 	.word	0xe000ed04

08002a8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a92:	2300      	movs	r3, #0
 8002a94:	607b      	str	r3, [r7, #4]
 8002a96:	e00c      	b.n	8002ab2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4a12      	ldr	r2, [pc, #72]	; (8002aec <prvInitialiseTaskLists+0x60>)
 8002aa4:	4413      	add	r3, r2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fb48 	bl	800213c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	607b      	str	r3, [r7, #4]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b06      	cmp	r3, #6
 8002ab6:	d9ef      	bls.n	8002a98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002ab8:	480d      	ldr	r0, [pc, #52]	; (8002af0 <prvInitialiseTaskLists+0x64>)
 8002aba:	f7ff fb3f 	bl	800213c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002abe:	480d      	ldr	r0, [pc, #52]	; (8002af4 <prvInitialiseTaskLists+0x68>)
 8002ac0:	f7ff fb3c 	bl	800213c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002ac4:	480c      	ldr	r0, [pc, #48]	; (8002af8 <prvInitialiseTaskLists+0x6c>)
 8002ac6:	f7ff fb39 	bl	800213c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002aca:	480c      	ldr	r0, [pc, #48]	; (8002afc <prvInitialiseTaskLists+0x70>)
 8002acc:	f7ff fb36 	bl	800213c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002ad0:	480b      	ldr	r0, [pc, #44]	; (8002b00 <prvInitialiseTaskLists+0x74>)
 8002ad2:	f7ff fb33 	bl	800213c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <prvInitialiseTaskLists+0x78>)
 8002ad8:	4a05      	ldr	r2, [pc, #20]	; (8002af0 <prvInitialiseTaskLists+0x64>)
 8002ada:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002adc:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <prvInitialiseTaskLists+0x7c>)
 8002ade:	4a05      	ldr	r2, [pc, #20]	; (8002af4 <prvInitialiseTaskLists+0x68>)
 8002ae0:	601a      	str	r2, [r3, #0]
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	200002e8 	.word	0x200002e8
 8002af0:	20000374 	.word	0x20000374
 8002af4:	20000388 	.word	0x20000388
 8002af8:	200003a4 	.word	0x200003a4
 8002afc:	200003b8 	.word	0x200003b8
 8002b00:	200003d0 	.word	0x200003d0
 8002b04:	2000039c 	.word	0x2000039c
 8002b08:	200003a0 	.word	0x200003a0

08002b0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b12:	e019      	b.n	8002b48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002b14:	f000 f9f2 	bl	8002efc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002b18:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <prvCheckTasksWaitingTermination+0x50>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3304      	adds	r3, #4
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff fb8f 	bl	8002248 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002b2a:	4b0d      	ldr	r3, [pc, #52]	; (8002b60 <prvCheckTasksWaitingTermination+0x54>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	4a0b      	ldr	r2, [pc, #44]	; (8002b60 <prvCheckTasksWaitingTermination+0x54>)
 8002b32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <prvCheckTasksWaitingTermination+0x58>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <prvCheckTasksWaitingTermination+0x58>)
 8002b3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002b3e:	f000 fa0d 	bl	8002f5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f810 	bl	8002b68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <prvCheckTasksWaitingTermination+0x58>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1e1      	bne.n	8002b14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002b50:	bf00      	nop
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	200003b8 	.word	0x200003b8
 8002b60:	200003e4 	.word	0x200003e4
 8002b64:	200003cc 	.word	0x200003cc

08002b68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d108      	bne.n	8002b8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 fb42 	bl	8003208 <vPortFree>
				vPortFree( pxTCB );
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fb3f 	bl	8003208 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002b8a:	e018      	b.n	8002bbe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d103      	bne.n	8002b9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fb36 	bl	8003208 <vPortFree>
	}
 8002b9c:	e00f      	b.n	8002bbe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d00a      	beq.n	8002bbe <prvDeleteTCB+0x56>
	__asm volatile
 8002ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bac:	f383 8811 	msr	BASEPRI, r3
 8002bb0:	f3bf 8f6f 	isb	sy
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	60fb      	str	r3, [r7, #12]
}
 8002bba:	bf00      	nop
 8002bbc:	e7fe      	b.n	8002bbc <prvDeleteTCB+0x54>
	}
 8002bbe:	bf00      	nop
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bce:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <prvResetNextTaskUnblockTime+0x40>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <prvResetNextTaskUnblockTime+0x14>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <prvResetNextTaskUnblockTime+0x16>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d004      	beq.n	8002bec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002be2:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <prvResetNextTaskUnblockTime+0x44>)
 8002be4:	f04f 32ff 	mov.w	r2, #4294967295
 8002be8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002bea:	e008      	b.n	8002bfe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <prvResetNextTaskUnblockTime+0x40>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4a04      	ldr	r2, [pc, #16]	; (8002c0c <prvResetNextTaskUnblockTime+0x44>)
 8002bfc:	6013      	str	r3, [r2, #0]
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr
 8002c08:	2000039c 	.word	0x2000039c
 8002c0c:	20000404 	.word	0x20000404

08002c10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002c16:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <xTaskGetSchedulerState+0x34>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d102      	bne.n	8002c24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	607b      	str	r3, [r7, #4]
 8002c22:	e008      	b.n	8002c36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c24:	4b08      	ldr	r3, [pc, #32]	; (8002c48 <xTaskGetSchedulerState+0x38>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d102      	bne.n	8002c32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	607b      	str	r3, [r7, #4]
 8002c30:	e001      	b.n	8002c36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002c32:	2300      	movs	r3, #0
 8002c34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002c36:	687b      	ldr	r3, [r7, #4]
	}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	200003f0 	.word	0x200003f0
 8002c48:	2000040c 	.word	0x2000040c

08002c4c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002c56:	4b29      	ldr	r3, [pc, #164]	; (8002cfc <prvAddCurrentTaskToDelayedList+0xb0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c5c:	4b28      	ldr	r3, [pc, #160]	; (8002d00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	3304      	adds	r3, #4
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff faf0 	bl	8002248 <uxListRemove>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10b      	bne.n	8002c86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002c6e:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	2201      	movs	r2, #1
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43da      	mvns	r2, r3
 8002c7c:	4b21      	ldr	r3, [pc, #132]	; (8002d04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4013      	ands	r3, r2
 8002c82:	4a20      	ldr	r2, [pc, #128]	; (8002d04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002c84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8c:	d10a      	bne.n	8002ca4 <prvAddCurrentTaskToDelayedList+0x58>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d007      	beq.n	8002ca4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c94:	4b1a      	ldr	r3, [pc, #104]	; (8002d00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	481a      	ldr	r0, [pc, #104]	; (8002d08 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002c9e:	f7ff fa78 	bl	8002192 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002ca2:	e026      	b.n	8002cf2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002cac:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d209      	bcs.n	8002cd0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002cbc:	4b13      	ldr	r3, [pc, #76]	; (8002d0c <prvAddCurrentTaskToDelayedList+0xc0>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4610      	mov	r0, r2
 8002cca:	f7ff fa85 	bl	80021d8 <vListInsert>
}
 8002cce:	e010      	b.n	8002cf2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002cd0:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4610      	mov	r0, r2
 8002cde:	f7ff fa7b 	bl	80021d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002ce2:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d202      	bcs.n	8002cf2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002cec:	4a09      	ldr	r2, [pc, #36]	; (8002d14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	6013      	str	r3, [r2, #0]
}
 8002cf2:	bf00      	nop
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	200003e8 	.word	0x200003e8
 8002d00:	200002e4 	.word	0x200002e4
 8002d04:	200003ec 	.word	0x200003ec
 8002d08:	200003d0 	.word	0x200003d0
 8002d0c:	200003a0 	.word	0x200003a0
 8002d10:	2000039c 	.word	0x2000039c
 8002d14:	20000404 	.word	0x20000404

08002d18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	3b04      	subs	r3, #4
 8002d28:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	3b04      	subs	r3, #4
 8002d36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f023 0201 	bic.w	r2, r3, #1
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	3b04      	subs	r3, #4
 8002d46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002d48:	4a08      	ldr	r2, [pc, #32]	; (8002d6c <pxPortInitialiseStack+0x54>)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	3b14      	subs	r3, #20
 8002d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	3b20      	subs	r3, #32
 8002d5e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002d60:	68fb      	ldr	r3, [r7, #12]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr
 8002d6c:	08002d71 	.word	0x08002d71

08002d70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002d7a:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <prvTaskExitError+0x54>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d82:	d00a      	beq.n	8002d9a <prvTaskExitError+0x2a>
	__asm volatile
 8002d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d88:	f383 8811 	msr	BASEPRI, r3
 8002d8c:	f3bf 8f6f 	isb	sy
 8002d90:	f3bf 8f4f 	dsb	sy
 8002d94:	60fb      	str	r3, [r7, #12]
}
 8002d96:	bf00      	nop
 8002d98:	e7fe      	b.n	8002d98 <prvTaskExitError+0x28>
	__asm volatile
 8002d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9e:	f383 8811 	msr	BASEPRI, r3
 8002da2:	f3bf 8f6f 	isb	sy
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	60bb      	str	r3, [r7, #8]
}
 8002dac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002dae:	bf00      	nop
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0fc      	beq.n	8002db0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002db6:	bf00      	nop
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	20000014 	.word	0x20000014
	...

08002dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002dd0:	4b07      	ldr	r3, [pc, #28]	; (8002df0 <pxCurrentTCBConst2>)
 8002dd2:	6819      	ldr	r1, [r3, #0]
 8002dd4:	6808      	ldr	r0, [r1, #0]
 8002dd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002dda:	f380 8809 	msr	PSP, r0
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	f04f 0000 	mov.w	r0, #0
 8002de6:	f380 8811 	msr	BASEPRI, r0
 8002dea:	f04e 0e0d 	orr.w	lr, lr, #13
 8002dee:	4770      	bx	lr

08002df0 <pxCurrentTCBConst2>:
 8002df0:	200002e4 	.word	0x200002e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002df4:	bf00      	nop
 8002df6:	bf00      	nop

08002df8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002df8:	4806      	ldr	r0, [pc, #24]	; (8002e14 <prvPortStartFirstTask+0x1c>)
 8002dfa:	6800      	ldr	r0, [r0, #0]
 8002dfc:	6800      	ldr	r0, [r0, #0]
 8002dfe:	f380 8808 	msr	MSP, r0
 8002e02:	b662      	cpsie	i
 8002e04:	b661      	cpsie	f
 8002e06:	f3bf 8f4f 	dsb	sy
 8002e0a:	f3bf 8f6f 	isb	sy
 8002e0e:	df00      	svc	0
 8002e10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002e12:	bf00      	nop
 8002e14:	e000ed08 	.word	0xe000ed08

08002e18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e1e:	4b32      	ldr	r3, [pc, #200]	; (8002ee8 <xPortStartScheduler+0xd0>)
 8002e20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	22ff      	movs	r2, #255	; 0xff
 8002e2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	4b2a      	ldr	r3, [pc, #168]	; (8002eec <xPortStartScheduler+0xd4>)
 8002e44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e46:	4b2a      	ldr	r3, [pc, #168]	; (8002ef0 <xPortStartScheduler+0xd8>)
 8002e48:	2207      	movs	r2, #7
 8002e4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e4c:	e009      	b.n	8002e62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002e4e:	4b28      	ldr	r3, [pc, #160]	; (8002ef0 <xPortStartScheduler+0xd8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	4a26      	ldr	r2, [pc, #152]	; (8002ef0 <xPortStartScheduler+0xd8>)
 8002e56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e62:	78fb      	ldrb	r3, [r7, #3]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6a:	2b80      	cmp	r3, #128	; 0x80
 8002e6c:	d0ef      	beq.n	8002e4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e6e:	4b20      	ldr	r3, [pc, #128]	; (8002ef0 <xPortStartScheduler+0xd8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f1c3 0307 	rsb	r3, r3, #7
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d00a      	beq.n	8002e90 <xPortStartScheduler+0x78>
	__asm volatile
 8002e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7e:	f383 8811 	msr	BASEPRI, r3
 8002e82:	f3bf 8f6f 	isb	sy
 8002e86:	f3bf 8f4f 	dsb	sy
 8002e8a:	60bb      	str	r3, [r7, #8]
}
 8002e8c:	bf00      	nop
 8002e8e:	e7fe      	b.n	8002e8e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002e90:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <xPortStartScheduler+0xd8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	021b      	lsls	r3, r3, #8
 8002e96:	4a16      	ldr	r2, [pc, #88]	; (8002ef0 <xPortStartScheduler+0xd8>)
 8002e98:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e9a:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <xPortStartScheduler+0xd8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ea2:	4a13      	ldr	r2, [pc, #76]	; (8002ef0 <xPortStartScheduler+0xd8>)
 8002ea4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002eae:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <xPortStartScheduler+0xdc>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a10      	ldr	r2, [pc, #64]	; (8002ef4 <xPortStartScheduler+0xdc>)
 8002eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002eb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002eba:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <xPortStartScheduler+0xdc>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a0d      	ldr	r2, [pc, #52]	; (8002ef4 <xPortStartScheduler+0xdc>)
 8002ec0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002ec4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002ec6:	f000 f8b9 	bl	800303c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002eca:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <xPortStartScheduler+0xe0>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002ed0:	f7ff ff92 	bl	8002df8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002ed4:	f7ff fd68 	bl	80029a8 <vTaskSwitchContext>
	prvTaskExitError();
 8002ed8:	f7ff ff4a 	bl	8002d70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	e000e400 	.word	0xe000e400
 8002eec:	20000410 	.word	0x20000410
 8002ef0:	20000414 	.word	0x20000414
 8002ef4:	e000ed20 	.word	0xe000ed20
 8002ef8:	20000014 	.word	0x20000014

08002efc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
	__asm volatile
 8002f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	607b      	str	r3, [r7, #4]
}
 8002f14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002f16:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <vPortEnterCritical+0x58>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	4a0d      	ldr	r2, [pc, #52]	; (8002f54 <vPortEnterCritical+0x58>)
 8002f1e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002f20:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <vPortEnterCritical+0x58>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d10f      	bne.n	8002f48 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <vPortEnterCritical+0x5c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <vPortEnterCritical+0x4c>
	__asm volatile
 8002f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f36:	f383 8811 	msr	BASEPRI, r3
 8002f3a:	f3bf 8f6f 	isb	sy
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	603b      	str	r3, [r7, #0]
}
 8002f44:	bf00      	nop
 8002f46:	e7fe      	b.n	8002f46 <vPortEnterCritical+0x4a>
	}
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	20000014 	.word	0x20000014
 8002f58:	e000ed04 	.word	0xe000ed04

08002f5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002f62:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <vPortExitCritical+0x4c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10a      	bne.n	8002f80 <vPortExitCritical+0x24>
	__asm volatile
 8002f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6e:	f383 8811 	msr	BASEPRI, r3
 8002f72:	f3bf 8f6f 	isb	sy
 8002f76:	f3bf 8f4f 	dsb	sy
 8002f7a:	607b      	str	r3, [r7, #4]
}
 8002f7c:	bf00      	nop
 8002f7e:	e7fe      	b.n	8002f7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002f80:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <vPortExitCritical+0x4c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	3b01      	subs	r3, #1
 8002f86:	4a08      	ldr	r2, [pc, #32]	; (8002fa8 <vPortExitCritical+0x4c>)
 8002f88:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002f8a:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <vPortExitCritical+0x4c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d105      	bne.n	8002f9e <vPortExitCritical+0x42>
 8002f92:	2300      	movs	r3, #0
 8002f94:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f9c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr
 8002fa8:	20000014 	.word	0x20000014
 8002fac:	00000000 	.word	0x00000000

08002fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002fb0:	f3ef 8009 	mrs	r0, PSP
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <pxCurrentTCBConst>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002fc0:	6010      	str	r0, [r2, #0]
 8002fc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002fc6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002fca:	f380 8811 	msr	BASEPRI, r0
 8002fce:	f7ff fceb 	bl	80029a8 <vTaskSwitchContext>
 8002fd2:	f04f 0000 	mov.w	r0, #0
 8002fd6:	f380 8811 	msr	BASEPRI, r0
 8002fda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002fde:	6819      	ldr	r1, [r3, #0]
 8002fe0:	6808      	ldr	r0, [r1, #0]
 8002fe2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002fe6:	f380 8809 	msr	PSP, r0
 8002fea:	f3bf 8f6f 	isb	sy
 8002fee:	4770      	bx	lr

08002ff0 <pxCurrentTCBConst>:
 8002ff0:	200002e4 	.word	0x200002e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002ff4:	bf00      	nop
 8002ff6:	bf00      	nop

08002ff8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8002ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003002:	f383 8811 	msr	BASEPRI, r3
 8003006:	f3bf 8f6f 	isb	sy
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	607b      	str	r3, [r7, #4]
}
 8003010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003012:	f7ff fc0b 	bl	800282c <xTaskIncrementTick>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800301c:	4b06      	ldr	r3, [pc, #24]	; (8003038 <xPortSysTickHandler+0x40>)
 800301e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	2300      	movs	r3, #0
 8003026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	f383 8811 	msr	BASEPRI, r3
}
 800302e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003030:	bf00      	nop
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	e000ed04 	.word	0xe000ed04

0800303c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003040:	4b0a      	ldr	r3, [pc, #40]	; (800306c <vPortSetupTimerInterrupt+0x30>)
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003046:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <vPortSetupTimerInterrupt+0x34>)
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800304c:	4b09      	ldr	r3, [pc, #36]	; (8003074 <vPortSetupTimerInterrupt+0x38>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a09      	ldr	r2, [pc, #36]	; (8003078 <vPortSetupTimerInterrupt+0x3c>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	099b      	lsrs	r3, r3, #6
 8003058:	4a08      	ldr	r2, [pc, #32]	; (800307c <vPortSetupTimerInterrupt+0x40>)
 800305a:	3b01      	subs	r3, #1
 800305c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800305e:	4b03      	ldr	r3, [pc, #12]	; (800306c <vPortSetupTimerInterrupt+0x30>)
 8003060:	2207      	movs	r2, #7
 8003062:	601a      	str	r2, [r3, #0]
}
 8003064:	bf00      	nop
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr
 800306c:	e000e010 	.word	0xe000e010
 8003070:	e000e018 	.word	0xe000e018
 8003074:	20000008 	.word	0x20000008
 8003078:	10624dd3 	.word	0x10624dd3
 800307c:	e000e014 	.word	0xe000e014

08003080 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08a      	sub	sp, #40	; 0x28
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003088:	2300      	movs	r3, #0
 800308a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800308c:	f7ff fb24 	bl	80026d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003090:	4b58      	ldr	r3, [pc, #352]	; (80031f4 <pvPortMalloc+0x174>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003098:	f000 f910 	bl	80032bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800309c:	4b56      	ldr	r3, [pc, #344]	; (80031f8 <pvPortMalloc+0x178>)
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f040 808e 	bne.w	80031c6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d01d      	beq.n	80030ec <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80030b0:	2208      	movs	r2, #8
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4413      	add	r3, r2
 80030b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d014      	beq.n	80030ec <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f023 0307 	bic.w	r3, r3, #7
 80030c8:	3308      	adds	r3, #8
 80030ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00a      	beq.n	80030ec <pvPortMalloc+0x6c>
	__asm volatile
 80030d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030da:	f383 8811 	msr	BASEPRI, r3
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	f3bf 8f4f 	dsb	sy
 80030e6:	617b      	str	r3, [r7, #20]
}
 80030e8:	bf00      	nop
 80030ea:	e7fe      	b.n	80030ea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d069      	beq.n	80031c6 <pvPortMalloc+0x146>
 80030f2:	4b42      	ldr	r3, [pc, #264]	; (80031fc <pvPortMalloc+0x17c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d864      	bhi.n	80031c6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80030fc:	4b40      	ldr	r3, [pc, #256]	; (8003200 <pvPortMalloc+0x180>)
 80030fe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003100:	4b3f      	ldr	r3, [pc, #252]	; (8003200 <pvPortMalloc+0x180>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003106:	e004      	b.n	8003112 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	429a      	cmp	r2, r3
 800311a:	d903      	bls.n	8003124 <pvPortMalloc+0xa4>
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1f1      	bne.n	8003108 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003124:	4b33      	ldr	r3, [pc, #204]	; (80031f4 <pvPortMalloc+0x174>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312a:	429a      	cmp	r2, r3
 800312c:	d04b      	beq.n	80031c6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2208      	movs	r2, #8
 8003134:	4413      	add	r3, r2
 8003136:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	1ad2      	subs	r2, r2, r3
 8003148:	2308      	movs	r3, #8
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	429a      	cmp	r2, r3
 800314e:	d91f      	bls.n	8003190 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <pvPortMalloc+0xf8>
	__asm volatile
 8003162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003166:	f383 8811 	msr	BASEPRI, r3
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	613b      	str	r3, [r7, #16]
}
 8003174:	bf00      	nop
 8003176:	e7fe      	b.n	8003176 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	1ad2      	subs	r2, r2, r3
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800318a:	69b8      	ldr	r0, [r7, #24]
 800318c:	f000 f8f8 	bl	8003380 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003190:	4b1a      	ldr	r3, [pc, #104]	; (80031fc <pvPortMalloc+0x17c>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	4a18      	ldr	r2, [pc, #96]	; (80031fc <pvPortMalloc+0x17c>)
 800319c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800319e:	4b17      	ldr	r3, [pc, #92]	; (80031fc <pvPortMalloc+0x17c>)
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	4b18      	ldr	r3, [pc, #96]	; (8003204 <pvPortMalloc+0x184>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d203      	bcs.n	80031b2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80031aa:	4b14      	ldr	r3, [pc, #80]	; (80031fc <pvPortMalloc+0x17c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a15      	ldr	r2, [pc, #84]	; (8003204 <pvPortMalloc+0x184>)
 80031b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <pvPortMalloc+0x178>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80031c6:	f7ff fa95 	bl	80026f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <pvPortMalloc+0x16a>
	__asm volatile
 80031d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	60fb      	str	r3, [r7, #12]
}
 80031e6:	bf00      	nop
 80031e8:	e7fe      	b.n	80031e8 <pvPortMalloc+0x168>
	return pvReturn;
 80031ea:	69fb      	ldr	r3, [r7, #28]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3728      	adds	r7, #40	; 0x28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	20001020 	.word	0x20001020
 80031f8:	2000102c 	.word	0x2000102c
 80031fc:	20001024 	.word	0x20001024
 8003200:	20001018 	.word	0x20001018
 8003204:	20001028 	.word	0x20001028

08003208 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d048      	beq.n	80032ac <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800321a:	2308      	movs	r3, #8
 800321c:	425b      	negs	r3, r3
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4413      	add	r3, r2
 8003222:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	4b21      	ldr	r3, [pc, #132]	; (80032b4 <vPortFree+0xac>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4013      	ands	r3, r2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10a      	bne.n	800324c <vPortFree+0x44>
	__asm volatile
 8003236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323a:	f383 8811 	msr	BASEPRI, r3
 800323e:	f3bf 8f6f 	isb	sy
 8003242:	f3bf 8f4f 	dsb	sy
 8003246:	60fb      	str	r3, [r7, #12]
}
 8003248:	bf00      	nop
 800324a:	e7fe      	b.n	800324a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <vPortFree+0x62>
	__asm volatile
 8003254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003258:	f383 8811 	msr	BASEPRI, r3
 800325c:	f3bf 8f6f 	isb	sy
 8003260:	f3bf 8f4f 	dsb	sy
 8003264:	60bb      	str	r3, [r7, #8]
}
 8003266:	bf00      	nop
 8003268:	e7fe      	b.n	8003268 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	4b11      	ldr	r3, [pc, #68]	; (80032b4 <vPortFree+0xac>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4013      	ands	r3, r2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d019      	beq.n	80032ac <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d115      	bne.n	80032ac <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <vPortFree+0xac>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	43db      	mvns	r3, r3
 800328a:	401a      	ands	r2, r3
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003290:	f7ff fa22 	bl	80026d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	4b07      	ldr	r3, [pc, #28]	; (80032b8 <vPortFree+0xb0>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4413      	add	r3, r2
 800329e:	4a06      	ldr	r2, [pc, #24]	; (80032b8 <vPortFree+0xb0>)
 80032a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80032a2:	6938      	ldr	r0, [r7, #16]
 80032a4:	f000 f86c 	bl	8003380 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80032a8:	f7ff fa24 	bl	80026f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80032ac:	bf00      	nop
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	2000102c 	.word	0x2000102c
 80032b8:	20001024 	.word	0x20001024

080032bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80032c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80032c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80032c8:	4b27      	ldr	r3, [pc, #156]	; (8003368 <prvHeapInit+0xac>)
 80032ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00c      	beq.n	80032f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	3307      	adds	r3, #7
 80032da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0307 	bic.w	r3, r3, #7
 80032e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	4a1f      	ldr	r2, [pc, #124]	; (8003368 <prvHeapInit+0xac>)
 80032ec:	4413      	add	r3, r2
 80032ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80032f4:	4a1d      	ldr	r2, [pc, #116]	; (800336c <prvHeapInit+0xb0>)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80032fa:	4b1c      	ldr	r3, [pc, #112]	; (800336c <prvHeapInit+0xb0>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	4413      	add	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003308:	2208      	movs	r2, #8
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 0307 	bic.w	r3, r3, #7
 8003316:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4a15      	ldr	r2, [pc, #84]	; (8003370 <prvHeapInit+0xb4>)
 800331c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800331e:	4b14      	ldr	r3, [pc, #80]	; (8003370 <prvHeapInit+0xb4>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2200      	movs	r2, #0
 8003324:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003326:	4b12      	ldr	r3, [pc, #72]	; (8003370 <prvHeapInit+0xb4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	1ad2      	subs	r2, r2, r3
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800333c:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <prvHeapInit+0xb4>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	4a0a      	ldr	r2, [pc, #40]	; (8003374 <prvHeapInit+0xb8>)
 800334a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	4a09      	ldr	r2, [pc, #36]	; (8003378 <prvHeapInit+0xbc>)
 8003352:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003354:	4b09      	ldr	r3, [pc, #36]	; (800337c <prvHeapInit+0xc0>)
 8003356:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800335a:	601a      	str	r2, [r3, #0]
}
 800335c:	bf00      	nop
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20000418 	.word	0x20000418
 800336c:	20001018 	.word	0x20001018
 8003370:	20001020 	.word	0x20001020
 8003374:	20001028 	.word	0x20001028
 8003378:	20001024 	.word	0x20001024
 800337c:	2000102c 	.word	0x2000102c

08003380 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003388:	4b27      	ldr	r3, [pc, #156]	; (8003428 <prvInsertBlockIntoFreeList+0xa8>)
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	e002      	b.n	8003394 <prvInsertBlockIntoFreeList+0x14>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	429a      	cmp	r2, r3
 800339c:	d8f7      	bhi.n	800338e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	4413      	add	r3, r2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d108      	bne.n	80033c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	441a      	add	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	441a      	add	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d118      	bne.n	8003408 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	4b14      	ldr	r3, [pc, #80]	; (800342c <prvInsertBlockIntoFreeList+0xac>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d00d      	beq.n	80033fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	441a      	add	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	e008      	b.n	8003410 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80033fe:	4b0b      	ldr	r3, [pc, #44]	; (800342c <prvInsertBlockIntoFreeList+0xac>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	e003      	b.n	8003410 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	429a      	cmp	r2, r3
 8003416:	d002      	beq.n	800341e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800341e:	bf00      	nop
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr
 8003428:	20001018 	.word	0x20001018
 800342c:	20001020 	.word	0x20001020

08003430 <__libc_init_array>:
 8003430:	b570      	push	{r4, r5, r6, lr}
 8003432:	2600      	movs	r6, #0
 8003434:	4d0c      	ldr	r5, [pc, #48]	; (8003468 <__libc_init_array+0x38>)
 8003436:	4c0d      	ldr	r4, [pc, #52]	; (800346c <__libc_init_array+0x3c>)
 8003438:	1b64      	subs	r4, r4, r5
 800343a:	10a4      	asrs	r4, r4, #2
 800343c:	42a6      	cmp	r6, r4
 800343e:	d109      	bne.n	8003454 <__libc_init_array+0x24>
 8003440:	f000 f822 	bl	8003488 <_init>
 8003444:	2600      	movs	r6, #0
 8003446:	4d0a      	ldr	r5, [pc, #40]	; (8003470 <__libc_init_array+0x40>)
 8003448:	4c0a      	ldr	r4, [pc, #40]	; (8003474 <__libc_init_array+0x44>)
 800344a:	1b64      	subs	r4, r4, r5
 800344c:	10a4      	asrs	r4, r4, #2
 800344e:	42a6      	cmp	r6, r4
 8003450:	d105      	bne.n	800345e <__libc_init_array+0x2e>
 8003452:	bd70      	pop	{r4, r5, r6, pc}
 8003454:	f855 3b04 	ldr.w	r3, [r5], #4
 8003458:	4798      	blx	r3
 800345a:	3601      	adds	r6, #1
 800345c:	e7ee      	b.n	800343c <__libc_init_array+0xc>
 800345e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003462:	4798      	blx	r3
 8003464:	3601      	adds	r6, #1
 8003466:	e7f2      	b.n	800344e <__libc_init_array+0x1e>
 8003468:	080034f0 	.word	0x080034f0
 800346c:	080034f0 	.word	0x080034f0
 8003470:	080034f0 	.word	0x080034f0
 8003474:	080034f4 	.word	0x080034f4

08003478 <memset>:
 8003478:	4603      	mov	r3, r0
 800347a:	4402      	add	r2, r0
 800347c:	4293      	cmp	r3, r2
 800347e:	d100      	bne.n	8003482 <memset+0xa>
 8003480:	4770      	bx	lr
 8003482:	f803 1b01 	strb.w	r1, [r3], #1
 8003486:	e7f9      	b.n	800347c <memset+0x4>

08003488 <_init>:
 8003488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348a:	bf00      	nop
 800348c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348e:	bc08      	pop	{r3}
 8003490:	469e      	mov	lr, r3
 8003492:	4770      	bx	lr

08003494 <_fini>:
 8003494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003496:	bf00      	nop
 8003498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800349a:	bc08      	pop	{r3}
 800349c:	469e      	mov	lr, r3
 800349e:	4770      	bx	lr
